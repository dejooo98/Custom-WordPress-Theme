(() => {
  var t = {
      927: (t, e, i) => {
        "use strict";
        var n;
        /*!
         * ApexCharts v3.29.0
         * (c) 2018-2021 ApexCharts
         * Released under the MIT License.
         */ function a(t) {
          return (a =
            "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
              ? function (t) {
                  return typeof t;
                }
              : function (t) {
                  return t &&
                    "function" == typeof Symbol &&
                    t.constructor === Symbol &&
                    t !== Symbol.prototype
                    ? "symbol"
                    : typeof t;
                })(t);
        }
        function s(t, e) {
          if (!(t instanceof e))
            throw new TypeError("Cannot call a class as a function");
        }
        function r(t, e) {
          for (var i = 0; i < e.length; i++) {
            var n = e[i];
            (n.enumerable = n.enumerable || !1),
              (n.configurable = !0),
              "value" in n && (n.writable = !0),
              Object.defineProperty(t, n.key, n);
          }
        }
        function o(t, e, i) {
          return e && r(t.prototype, e), i && r(t, i), t;
        }
        function l(t, e, i) {
          return (
            e in t
              ? Object.defineProperty(t, e, {
                  value: i,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (t[e] = i),
            t
          );
        }
        function c(t, e) {
          var i = Object.keys(t);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(t);
            e &&
              (n = n.filter(function (e) {
                return Object.getOwnPropertyDescriptor(t, e).enumerable;
              })),
              i.push.apply(i, n);
          }
          return i;
        }
        function h(t) {
          for (var e = 1; e < arguments.length; e++) {
            var i = null != arguments[e] ? arguments[e] : {};
            e % 2
              ? c(Object(i), !0).forEach(function (e) {
                  l(t, e, i[e]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(i))
              : c(Object(i)).forEach(function (e) {
                  Object.defineProperty(
                    t,
                    e,
                    Object.getOwnPropertyDescriptor(i, e)
                  );
                });
          }
          return t;
        }
        function d(t, e) {
          if ("function" != typeof e && null !== e)
            throw new TypeError(
              "Super expression must either be null or a function"
            );
          (t.prototype = Object.create(e && e.prototype, {
            constructor: { value: t, writable: !0, configurable: !0 },
          })),
            e && f(t, e);
        }
        function u(t) {
          return (u = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function (t) {
                return t.__proto__ || Object.getPrototypeOf(t);
              })(t);
        }
        function f(t, e) {
          return (f =
            Object.setPrototypeOf ||
            function (t, e) {
              return (t.__proto__ = e), t;
            })(t, e);
        }
        function p(t, e) {
          return !e || ("object" != typeof e && "function" != typeof e)
            ? (function (t) {
                if (void 0 === t)
                  throw new ReferenceError(
                    "this hasn't been initialised - super() hasn't been called"
                  );
                return t;
              })(t)
            : e;
        }
        function g(t) {
          var e = (function () {
            if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
            if (Reflect.construct.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
              return (
                Date.prototype.toString.call(
                  Reflect.construct(Date, [], function () {})
                ),
                !0
              );
            } catch (t) {
              return !1;
            }
          })();
          return function () {
            var i,
              n = u(t);
            if (e) {
              var a = u(this).constructor;
              i = Reflect.construct(n, arguments, a);
            } else i = n.apply(this, arguments);
            return p(this, i);
          };
        }
        function m(t) {
          return (
            (function (t) {
              if (Array.isArray(t)) return x(t);
            })(t) ||
            (function (t) {
              if ("undefined" != typeof Symbol && Symbol.iterator in Object(t))
                return Array.from(t);
            })(t) ||
            (function (t, e) {
              if (t) {
                if ("string" == typeof t) return x(t, e);
                var i = Object.prototype.toString.call(t).slice(8, -1);
                return (
                  "Object" === i && t.constructor && (i = t.constructor.name),
                  "Map" === i || "Set" === i
                    ? Array.from(t)
                    : "Arguments" === i ||
                      /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)
                    ? x(t, e)
                    : void 0
                );
              }
            })(t) ||
            (function () {
              throw new TypeError(
                "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            })()
          );
        }
        function x(t, e) {
          (null == e || e > t.length) && (e = t.length);
          for (var i = 0, n = new Array(e); i < e; i++) n[i] = t[i];
          return n;
        }
        var v = (function () {
            function t() {
              s(this, t);
            }
            return (
              o(
                t,
                [
                  {
                    key: "shadeRGBColor",
                    value: function (t, e) {
                      var i = e.split(","),
                        n = t < 0 ? 0 : 255,
                        a = t < 0 ? -1 * t : t,
                        s = parseInt(i[0].slice(4), 10),
                        r = parseInt(i[1], 10),
                        o = parseInt(i[2], 10);
                      return (
                        "rgb(" +
                        (Math.round((n - s) * a) + s) +
                        "," +
                        (Math.round((n - r) * a) + r) +
                        "," +
                        (Math.round((n - o) * a) + o) +
                        ")"
                      );
                    },
                  },
                  {
                    key: "shadeHexColor",
                    value: function (t, e) {
                      var i = parseInt(e.slice(1), 16),
                        n = t < 0 ? 0 : 255,
                        a = t < 0 ? -1 * t : t,
                        s = i >> 16,
                        r = (i >> 8) & 255,
                        o = 255 & i;
                      return (
                        "#" +
                        (
                          16777216 +
                          65536 * (Math.round((n - s) * a) + s) +
                          256 * (Math.round((n - r) * a) + r) +
                          (Math.round((n - o) * a) + o)
                        )
                          .toString(16)
                          .slice(1)
                      );
                    },
                  },
                  {
                    key: "shadeColor",
                    value: function (e, i) {
                      return t.isColorHex(i)
                        ? this.shadeHexColor(e, i)
                        : this.shadeRGBColor(e, i);
                    },
                  },
                ],
                [
                  {
                    key: "bind",
                    value: function (t, e) {
                      return function () {
                        return t.apply(e, arguments);
                      };
                    },
                  },
                  {
                    key: "isObject",
                    value: function (t) {
                      return (
                        t && "object" === a(t) && !Array.isArray(t) && null != t
                      );
                    },
                  },
                  {
                    key: "listToArray",
                    value: function (t) {
                      var e,
                        i = [];
                      for (e = 0; e < t.length; e++) i[e] = t[e];
                      return i;
                    },
                  },
                  {
                    key: "extend",
                    value: function (t, e) {
                      var i = this;
                      "function" != typeof Object.assign &&
                        (Object.assign = function (t) {
                          if (null == t)
                            throw new TypeError(
                              "Cannot convert undefined or null to object"
                            );
                          for (
                            var e = Object(t), i = 1;
                            i < arguments.length;
                            i++
                          ) {
                            var n = arguments[i];
                            if (null != n)
                              for (var a in n)
                                n.hasOwnProperty(a) && (e[a] = n[a]);
                          }
                          return e;
                        });
                      var n = Object.assign({}, t);
                      return (
                        this.isObject(t) &&
                          this.isObject(e) &&
                          Object.keys(e).forEach(function (a) {
                            i.isObject(e[a]) && a in t
                              ? (n[a] = i.extend(t[a], e[a]))
                              : Object.assign(n, l({}, a, e[a]));
                          }),
                        n
                      );
                    },
                  },
                  {
                    key: "extendArray",
                    value: function (e, i) {
                      var n = [];
                      return (
                        e.map(function (e) {
                          n.push(t.extend(i, e));
                        }),
                        n
                      );
                    },
                  },
                  {
                    key: "monthMod",
                    value: function (t) {
                      return t % 12;
                    },
                  },
                  {
                    key: "clone",
                    value: function (t) {
                      if (
                        "[object Array]" === Object.prototype.toString.call(t)
                      ) {
                        for (var e = [], i = 0; i < t.length; i++)
                          e[i] = this.clone(t[i]);
                        return e;
                      }
                      if ("[object Null]" === Object.prototype.toString.call(t))
                        return null;
                      if ("[object Date]" === Object.prototype.toString.call(t))
                        return t;
                      if ("object" === a(t)) {
                        var n = {};
                        for (var s in t)
                          t.hasOwnProperty(s) && (n[s] = this.clone(t[s]));
                        return n;
                      }
                      return t;
                    },
                  },
                  {
                    key: "log10",
                    value: function (t) {
                      return Math.log(t) / Math.LN10;
                    },
                  },
                  {
                    key: "roundToBase10",
                    value: function (t) {
                      return Math.pow(10, Math.floor(Math.log10(t)));
                    },
                  },
                  {
                    key: "roundToBase",
                    value: function (t, e) {
                      return Math.pow(e, Math.floor(Math.log(t) / Math.log(e)));
                    },
                  },
                  {
                    key: "parseNumber",
                    value: function (t) {
                      return null === t ? t : parseFloat(t);
                    },
                  },
                  {
                    key: "randomId",
                    value: function () {
                      return (Math.random() + 1).toString(36).substring(4);
                    },
                  },
                  {
                    key: "noExponents",
                    value: function (t) {
                      var e = String(t).split(/[eE]/);
                      if (1 === e.length) return e[0];
                      var i = "",
                        n = t < 0 ? "-" : "",
                        a = e[0].replace(".", ""),
                        s = Number(e[1]) + 1;
                      if (s < 0) {
                        for (i = n + "0."; s++; ) i += "0";
                        return i + a.replace(/^-/, "");
                      }
                      for (s -= a.length; s--; ) i += "0";
                      return a + i;
                    },
                  },
                  {
                    key: "getDimensions",
                    value: function (t) {
                      var e = getComputedStyle(t, null),
                        i = t.clientHeight,
                        n = t.clientWidth;
                      return (
                        (i -=
                          parseFloat(e.paddingTop) +
                          parseFloat(e.paddingBottom)),
                        [
                          (n -=
                            parseFloat(e.paddingLeft) +
                            parseFloat(e.paddingRight)),
                          i,
                        ]
                      );
                    },
                  },
                  {
                    key: "getBoundingClientRect",
                    value: function (t) {
                      var e = t.getBoundingClientRect();
                      return {
                        top: e.top,
                        right: e.right,
                        bottom: e.bottom,
                        left: e.left,
                        width: t.clientWidth,
                        height: t.clientHeight,
                        x: e.left,
                        y: e.top,
                      };
                    },
                  },
                  {
                    key: "getLargestStringFromArr",
                    value: function (t) {
                      return t.reduce(function (t, e) {
                        return (
                          Array.isArray(e) &&
                            (e = e.reduce(function (t, e) {
                              return t.length > e.length ? t : e;
                            })),
                          t.length > e.length ? t : e
                        );
                      }, 0);
                    },
                  },
                  {
                    key: "hexToRgba",
                    value: function () {
                      var t =
                          arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : "#999999",
                        e =
                          arguments.length > 1 && void 0 !== arguments[1]
                            ? arguments[1]
                            : 0.6;
                      "#" !== t.substring(0, 1) && (t = "#999999");
                      var i = t.replace("#", "");
                      i = i.match(new RegExp("(.{" + i.length / 3 + "})", "g"));
                      for (var n = 0; n < i.length; n++)
                        i[n] = parseInt(
                          1 === i[n].length ? i[n] + i[n] : i[n],
                          16
                        );
                      return (
                        void 0 !== e && i.push(e), "rgba(" + i.join(",") + ")"
                      );
                    },
                  },
                  {
                    key: "getOpacityFromRGBA",
                    value: function (t) {
                      return parseFloat(t.replace(/^.*,(.+)\)/, "$1"));
                    },
                  },
                  {
                    key: "rgb2hex",
                    value: function (t) {
                      return (t = t.match(
                        /^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i
                      )) && 4 === t.length
                        ? "#" +
                            ("0" + parseInt(t[1], 10).toString(16)).slice(-2) +
                            ("0" + parseInt(t[2], 10).toString(16)).slice(-2) +
                            ("0" + parseInt(t[3], 10).toString(16)).slice(-2)
                        : "";
                    },
                  },
                  {
                    key: "isColorHex",
                    value: function (t) {
                      return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i.test(
                        t
                      );
                    },
                  },
                  {
                    key: "getPolygonPos",
                    value: function (t, e) {
                      for (
                        var i = [], n = (2 * Math.PI) / e, a = 0;
                        a < e;
                        a++
                      ) {
                        var s = {};
                        (s.x = t * Math.sin(a * n)),
                          (s.y = -t * Math.cos(a * n)),
                          i.push(s);
                      }
                      return i;
                    },
                  },
                  {
                    key: "polarToCartesian",
                    value: function (t, e, i, n) {
                      var a = ((n - 90) * Math.PI) / 180;
                      return { x: t + i * Math.cos(a), y: e + i * Math.sin(a) };
                    },
                  },
                  {
                    key: "escapeString",
                    value: function (t) {
                      var e =
                          arguments.length > 1 && void 0 !== arguments[1]
                            ? arguments[1]
                            : "x",
                        i = t.toString().slice();
                      return i.replace(
                        /[` ~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]/gi,
                        e
                      );
                    },
                  },
                  {
                    key: "negToZero",
                    value: function (t) {
                      return t < 0 ? 0 : t;
                    },
                  },
                  {
                    key: "moveIndexInArray",
                    value: function (t, e, i) {
                      if (i >= t.length)
                        for (var n = i - t.length + 1; n--; ) t.push(void 0);
                      return t.splice(i, 0, t.splice(e, 1)[0]), t;
                    },
                  },
                  {
                    key: "extractNumber",
                    value: function (t) {
                      return parseFloat(t.replace(/[^\d.]*/g, ""));
                    },
                  },
                  {
                    key: "findAncestor",
                    value: function (t, e) {
                      for (
                        ;
                        (t = t.parentElement) && !t.classList.contains(e);

                      );
                      return t;
                    },
                  },
                  {
                    key: "setELstyles",
                    value: function (t, e) {
                      for (var i in e)
                        e.hasOwnProperty(i) && (t.style.key = e[i]);
                    },
                  },
                  {
                    key: "isNumber",
                    value: function (t) {
                      return (
                        !isNaN(t) &&
                        parseFloat(Number(t)) === t &&
                        !isNaN(parseInt(t, 10))
                      );
                    },
                  },
                  {
                    key: "isFloat",
                    value: function (t) {
                      return Number(t) === t && t % 1 != 0;
                    },
                  },
                  {
                    key: "isSafari",
                    value: function () {
                      return /^((?!chrome|android).)*safari/i.test(
                        navigator.userAgent
                      );
                    },
                  },
                  {
                    key: "isFirefox",
                    value: function () {
                      return (
                        navigator.userAgent.toLowerCase().indexOf("firefox") >
                        -1
                      );
                    },
                  },
                  {
                    key: "isIE11",
                    value: function () {
                      if (
                        -1 !== window.navigator.userAgent.indexOf("MSIE") ||
                        window.navigator.appVersion.indexOf("Trident/") > -1
                      )
                        return !0;
                    },
                  },
                  {
                    key: "isIE",
                    value: function () {
                      var t = window.navigator.userAgent,
                        e = t.indexOf("MSIE ");
                      if (e > 0)
                        return parseInt(
                          t.substring(e + 5, t.indexOf(".", e)),
                          10
                        );
                      if (t.indexOf("Trident/") > 0) {
                        var i = t.indexOf("rv:");
                        return parseInt(
                          t.substring(i + 3, t.indexOf(".", i)),
                          10
                        );
                      }
                      var n = t.indexOf("Edge/");
                      return (
                        n > 0 &&
                        parseInt(t.substring(n + 5, t.indexOf(".", n)), 10)
                      );
                    },
                  },
                ]
              ),
              t
            );
          })(),
          b = (function () {
            function t(e) {
              s(this, t),
                (this.ctx = e),
                (this.w = e.w),
                this.setEasingFunctions();
            }
            return (
              o(t, [
                {
                  key: "setEasingFunctions",
                  value: function () {
                    var t;
                    if (!this.w.globals.easing) {
                      switch (this.w.config.chart.animations.easing) {
                        case "linear":
                          t = "-";
                          break;
                        case "easein":
                          t = "<";
                          break;
                        case "easeout":
                          t = ">";
                          break;
                        default:
                          t = "<>";
                          break;
                        case "swing":
                          t = function (t) {
                            var e = 1.70158;
                            return (t -= 1) * t * ((e + 1) * t + e) + 1;
                          };
                          break;
                        case "bounce":
                          t = function (t) {
                            return t < 1 / 2.75
                              ? 7.5625 * t * t
                              : t < 2 / 2.75
                              ? 7.5625 * (t -= 1.5 / 2.75) * t + 0.75
                              : t < 2.5 / 2.75
                              ? 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375
                              : 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;
                          };
                          break;
                        case "elastic":
                          t = function (t) {
                            return t === !!t
                              ? t
                              : Math.pow(2, -10 * t) *
                                  Math.sin(
                                    ((t - 0.075) * (2 * Math.PI)) / 0.3
                                  ) +
                                  1;
                          };
                      }
                      this.w.globals.easing = t;
                    }
                  },
                },
                {
                  key: "animateLine",
                  value: function (t, e, i, n) {
                    t.attr(e).animate(n).attr(i);
                  },
                },
                {
                  key: "animateMarker",
                  value: function (t, e, i, n, a, s) {
                    e || (e = 0),
                      t
                        .attr({ r: e, width: e, height: e })
                        .animate(n, a)
                        .attr({ r: i, width: i.width, height: i.height })
                        .afterAll(function () {
                          s();
                        });
                  },
                },
                {
                  key: "animateCircle",
                  value: function (t, e, i, n, a) {
                    t.attr({ r: e.r, cx: e.cx, cy: e.cy })
                      .animate(n, a)
                      .attr({ r: i.r, cx: i.cx, cy: i.cy });
                  },
                },
                {
                  key: "animateRect",
                  value: function (t, e, i, n, a) {
                    t.attr(e)
                      .animate(n)
                      .attr(i)
                      .afterAll(function () {
                        return a();
                      });
                  },
                },
                {
                  key: "animatePathsGradually",
                  value: function (t) {
                    var e = t.el,
                      i = t.realIndex,
                      n = t.j,
                      a = t.fill,
                      s = t.pathFrom,
                      r = t.pathTo,
                      o = t.speed,
                      l = t.delay,
                      c = this.w,
                      h = 0;
                    c.config.chart.animations.animateGradually.enabled &&
                      (h = c.config.chart.animations.animateGradually.delay),
                      c.config.chart.animations.dynamicAnimation.enabled &&
                        c.globals.dataChanged &&
                        "bar" !== c.config.chart.type &&
                        (h = 0),
                      this.morphSVG(
                        e,
                        i,
                        n,
                        "line" !== c.config.chart.type || c.globals.comboCharts
                          ? a
                          : "stroke",
                        s,
                        r,
                        o,
                        l * h
                      );
                  },
                },
                {
                  key: "showDelayedElements",
                  value: function () {
                    this.w.globals.delayedElements.forEach(function (t) {
                      t.el.classList.remove("apexcharts-element-hidden");
                    });
                  },
                },
                {
                  key: "animationCompleted",
                  value: function (t) {
                    var e = this.w;
                    e.globals.animationEnded ||
                      ((e.globals.animationEnded = !0),
                      this.showDelayedElements(),
                      "function" == typeof e.config.chart.events.animationEnd &&
                        e.config.chart.events.animationEnd(this.ctx, {
                          el: t,
                          w: e,
                        }));
                  },
                },
                {
                  key: "morphSVG",
                  value: function (t, e, i, n, a, s, r, o) {
                    var l = this,
                      c = this.w;
                    a || (a = t.attr("pathFrom")), s || (s = t.attr("pathTo"));
                    var h = function (t) {
                      return (
                        "radar" === c.config.chart.type && (r = 1),
                        "M 0 ".concat(c.globals.gridHeight)
                      );
                    };
                    (!a ||
                      a.indexOf("undefined") > -1 ||
                      a.indexOf("NaN") > -1) &&
                      (a = h()),
                      (!s ||
                        s.indexOf("undefined") > -1 ||
                        s.indexOf("NaN") > -1) &&
                        (s = h()),
                      c.globals.shouldAnimate || (r = 1),
                      t
                        .plot(a)
                        .animate(1, c.globals.easing, o)
                        .plot(a)
                        .animate(r, c.globals.easing, o)
                        .plot(s)
                        .afterAll(function () {
                          v.isNumber(i)
                            ? i ===
                                c.globals.series[c.globals.maxValsInArrayIndex]
                                  .length -
                                  2 &&
                              c.globals.shouldAnimate &&
                              l.animationCompleted(t)
                            : "none" !== n &&
                              c.globals.shouldAnimate &&
                              ((!c.globals.comboCharts &&
                                e === c.globals.series.length - 1) ||
                                c.globals.comboCharts) &&
                              l.animationCompleted(t),
                            l.showDelayedElements();
                        });
                  },
                },
              ]),
              t
            );
          })(),
          y = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.w = e.w);
            }
            return (
              o(t, [
                {
                  key: "getDefaultFilter",
                  value: function (t, e) {
                    var i = this.w;
                    t.unfilter(!0),
                      new window.SVG.Filter().size(
                        "120%",
                        "180%",
                        "-5%",
                        "-40%"
                      ),
                      "none" !== i.config.states.normal.filter
                        ? this.applyFilter(
                            t,
                            e,
                            i.config.states.normal.filter.type,
                            i.config.states.normal.filter.value
                          )
                        : i.config.chart.dropShadow.enabled &&
                          this.dropShadow(t, i.config.chart.dropShadow, e);
                  },
                },
                {
                  key: "addNormalFilter",
                  value: function (t, e) {
                    var i = this.w;
                    i.config.chart.dropShadow.enabled &&
                      !t.node.classList.contains("apexcharts-marker") &&
                      this.dropShadow(t, i.config.chart.dropShadow, e);
                  },
                },
                {
                  key: "addLightenFilter",
                  value: function (t, e, i) {
                    var n = this,
                      a = this.w,
                      s = i.intensity;
                    t.unfilter(!0),
                      new window.SVG.Filter(),
                      t.filter(function (t) {
                        var i = a.config.chart.dropShadow;
                        (i.enabled
                          ? n.addShadow(t, e, i)
                          : t
                        ).componentTransfer({
                          rgb: { type: "linear", slope: 1.5, intercept: s },
                        });
                      }),
                      t.filterer.node.setAttribute(
                        "filterUnits",
                        "userSpaceOnUse"
                      ),
                      this._scaleFilterSize(t.filterer.node);
                  },
                },
                {
                  key: "addDarkenFilter",
                  value: function (t, e, i) {
                    var n = this,
                      a = this.w,
                      s = i.intensity;
                    t.unfilter(!0),
                      new window.SVG.Filter(),
                      t.filter(function (t) {
                        var i = a.config.chart.dropShadow;
                        (i.enabled
                          ? n.addShadow(t, e, i)
                          : t
                        ).componentTransfer({
                          rgb: { type: "linear", slope: s },
                        });
                      }),
                      t.filterer.node.setAttribute(
                        "filterUnits",
                        "userSpaceOnUse"
                      ),
                      this._scaleFilterSize(t.filterer.node);
                  },
                },
                {
                  key: "applyFilter",
                  value: function (t, e, i) {
                    var n =
                      arguments.length > 3 && void 0 !== arguments[3]
                        ? arguments[3]
                        : 0.5;
                    switch (i) {
                      case "none":
                        this.addNormalFilter(t, e);
                        break;
                      case "lighten":
                        this.addLightenFilter(t, e, { intensity: n });
                        break;
                      case "darken":
                        this.addDarkenFilter(t, e, { intensity: n });
                    }
                  },
                },
                {
                  key: "addShadow",
                  value: function (t, e, i) {
                    var n = i.blur,
                      a = i.top,
                      s = i.left,
                      r = i.color,
                      o = i.opacity,
                      l = t
                        .flood(Array.isArray(r) ? r[e] : r, o)
                        .composite(t.sourceAlpha, "in")
                        .offset(s, a)
                        .gaussianBlur(n)
                        .merge(t.source);
                    return t.blend(t.source, l);
                  },
                },
                {
                  key: "dropShadow",
                  value: function (t, e) {
                    var i =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : 0,
                      n = e.top,
                      a = e.left,
                      s = e.blur,
                      r = e.color,
                      o = e.opacity,
                      l = e.noUserSpaceOnUse,
                      c = this.w;
                    return (
                      t.unfilter(!0),
                      (v.isIE() && "radialBar" === c.config.chart.type) ||
                        ((r = Array.isArray(r) ? r[i] : r),
                        t.filter(function (t) {
                          var e;
                          (e =
                            v.isSafari() || v.isFirefox() || v.isIE()
                              ? t
                                  .flood(r, o)
                                  .composite(t.sourceAlpha, "in")
                                  .offset(a, n)
                                  .gaussianBlur(s)
                              : t
                                  .flood(r, o)
                                  .composite(t.sourceAlpha, "in")
                                  .offset(a, n)
                                  .gaussianBlur(s)
                                  .merge(t.source)),
                            t.blend(t.source, e);
                        }),
                        l ||
                          t.filterer.node.setAttribute(
                            "filterUnits",
                            "userSpaceOnUse"
                          ),
                        this._scaleFilterSize(t.filterer.node)),
                      t
                    );
                  },
                },
                {
                  key: "setSelectionFilter",
                  value: function (t, e, i) {
                    var n = this.w;
                    if (
                      void 0 !== n.globals.selectedDataPoints[e] &&
                      n.globals.selectedDataPoints[e].indexOf(i) > -1
                    ) {
                      t.node.setAttribute("selected", !0);
                      var a = n.config.states.active.filter;
                      "none" !== a && this.applyFilter(t, e, a.type, a.value);
                    }
                  },
                },
                {
                  key: "_scaleFilterSize",
                  value: function (t) {
                    !(function (e) {
                      for (var i in e)
                        e.hasOwnProperty(i) && t.setAttribute(i, e[i]);
                    })({ width: "200%", height: "200%", x: "-50%", y: "-50%" });
                  },
                },
              ]),
              t
            );
          })(),
          w = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.w = e.w);
            }
            return (
              o(
                t,
                [
                  {
                    key: "drawLine",
                    value: function (t, e, i, n) {
                      var a =
                          arguments.length > 4 && void 0 !== arguments[4]
                            ? arguments[4]
                            : "#a8a8a8",
                        s =
                          arguments.length > 5 && void 0 !== arguments[5]
                            ? arguments[5]
                            : 0,
                        r =
                          arguments.length > 6 && void 0 !== arguments[6]
                            ? arguments[6]
                            : null,
                        o =
                          arguments.length > 7 && void 0 !== arguments[7]
                            ? arguments[7]
                            : "butt",
                        l = this.w,
                        c = l.globals.dom.Paper.line().attr({
                          x1: t,
                          y1: e,
                          x2: i,
                          y2: n,
                          stroke: a,
                          "stroke-dasharray": s,
                          "stroke-width": r,
                          "stroke-linecap": o,
                        });
                      return c;
                    },
                  },
                  {
                    key: "drawRect",
                    value: function () {
                      var t =
                          arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : 0,
                        e =
                          arguments.length > 1 && void 0 !== arguments[1]
                            ? arguments[1]
                            : 0,
                        i =
                          arguments.length > 2 && void 0 !== arguments[2]
                            ? arguments[2]
                            : 0,
                        n =
                          arguments.length > 3 && void 0 !== arguments[3]
                            ? arguments[3]
                            : 0,
                        a =
                          arguments.length > 4 && void 0 !== arguments[4]
                            ? arguments[4]
                            : 0,
                        s =
                          arguments.length > 5 && void 0 !== arguments[5]
                            ? arguments[5]
                            : "#fefefe",
                        r =
                          arguments.length > 6 && void 0 !== arguments[6]
                            ? arguments[6]
                            : 1,
                        o =
                          arguments.length > 7 && void 0 !== arguments[7]
                            ? arguments[7]
                            : null,
                        l =
                          arguments.length > 8 && void 0 !== arguments[8]
                            ? arguments[8]
                            : null,
                        c =
                          arguments.length > 9 && void 0 !== arguments[9]
                            ? arguments[9]
                            : 0,
                        h = this.w,
                        d = h.globals.dom.Paper.rect();
                      return (
                        d.attr({
                          x: t,
                          y: e,
                          width: i > 0 ? i : 0,
                          height: n > 0 ? n : 0,
                          rx: a,
                          ry: a,
                          opacity: r,
                          "stroke-width": null !== o ? o : 0,
                          stroke: null !== l ? l : "none",
                          "stroke-dasharray": c,
                        }),
                        d.node.setAttribute("fill", s),
                        d
                      );
                    },
                  },
                  {
                    key: "drawPolygon",
                    value: function (t) {
                      var e =
                          arguments.length > 1 && void 0 !== arguments[1]
                            ? arguments[1]
                            : "#e1e1e1",
                        i =
                          arguments.length > 2 && void 0 !== arguments[2]
                            ? arguments[2]
                            : 1,
                        n =
                          arguments.length > 3 && void 0 !== arguments[3]
                            ? arguments[3]
                            : "none",
                        a = this.w,
                        s = a.globals.dom.Paper.polygon(t).attr({
                          fill: n,
                          stroke: e,
                          "stroke-width": i,
                        });
                      return s;
                    },
                  },
                  {
                    key: "drawCircle",
                    value: function (t) {
                      var e =
                          arguments.length > 1 && void 0 !== arguments[1]
                            ? arguments[1]
                            : null,
                        i = this.w;
                      t < 0 && (t = 0);
                      var n = i.globals.dom.Paper.circle(2 * t);
                      return null !== e && n.attr(e), n;
                    },
                  },
                  {
                    key: "drawPath",
                    value: function (t) {
                      var e = t.d,
                        i = void 0 === e ? "" : e,
                        n = t.stroke,
                        a = void 0 === n ? "#a8a8a8" : n,
                        s = t.strokeWidth,
                        r = void 0 === s ? 1 : s,
                        o = t.fill,
                        l = t.fillOpacity,
                        c = void 0 === l ? 1 : l,
                        h = t.strokeOpacity,
                        d = void 0 === h ? 1 : h,
                        u = t.classes,
                        f = t.strokeLinecap,
                        p = void 0 === f ? null : f,
                        g = t.strokeDashArray,
                        m = void 0 === g ? 0 : g,
                        x = this.w;
                      return (
                        null === p && (p = x.config.stroke.lineCap),
                        (i.indexOf("undefined") > -1 ||
                          i.indexOf("NaN") > -1) &&
                          (i = "M 0 ".concat(x.globals.gridHeight)),
                        x.globals.dom.Paper.path(i).attr({
                          fill: o,
                          "fill-opacity": c,
                          stroke: a,
                          "stroke-opacity": d,
                          "stroke-linecap": p,
                          "stroke-width": r,
                          "stroke-dasharray": m,
                          class: u,
                        })
                      );
                    },
                  },
                  {
                    key: "group",
                    value: function () {
                      var t =
                          arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : null,
                        e = this.w,
                        i = e.globals.dom.Paper.group();
                      return null !== t && i.attr(t), i;
                    },
                  },
                  {
                    key: "move",
                    value: function (t, e) {
                      return ["M", t, e].join(" ");
                    },
                  },
                  {
                    key: "line",
                    value: function (t, e) {
                      var i =
                          arguments.length > 2 && void 0 !== arguments[2]
                            ? arguments[2]
                            : null,
                        n = null;
                      return (
                        null === i
                          ? (n = ["L", t, e].join(" "))
                          : "H" === i
                          ? (n = ["H", t].join(" "))
                          : "V" === i && (n = ["V", e].join(" ")),
                        n
                      );
                    },
                  },
                  {
                    key: "curve",
                    value: function (t, e, i, n, a, s) {
                      return ["C", t, e, i, n, a, s].join(" ");
                    },
                  },
                  {
                    key: "quadraticCurve",
                    value: function (t, e, i, n) {
                      return ["Q", t, e, i, n].join(" ");
                    },
                  },
                  {
                    key: "arc",
                    value: function (t, e, i, n, a, s, r) {
                      var o =
                          arguments.length > 7 &&
                          void 0 !== arguments[7] &&
                          arguments[7],
                        l = "A";
                      o && (l = "a");
                      var c = [l, t, e, i, n, a, s, r].join(" ");
                      return c;
                    },
                  },
                  {
                    key: "renderPaths",
                    value: function (t) {
                      var e,
                        i = t.j,
                        n = t.realIndex,
                        a = t.pathFrom,
                        s = t.pathTo,
                        r = t.stroke,
                        o = t.strokeWidth,
                        l = t.strokeLinecap,
                        c = t.fill,
                        d = t.animationDelay,
                        u = t.initialSpeed,
                        f = t.dataChangeSpeed,
                        p = t.className,
                        g = t.shouldClipToGrid,
                        m = void 0 === g || g,
                        x = t.bindEventsOnPaths,
                        v = void 0 === x || x,
                        w = t.drawShadow,
                        k = void 0 === w || w,
                        S = this.w,
                        A = new y(this.ctx),
                        C = new b(this.ctx),
                        E = this.w.config.chart.animations.enabled,
                        T =
                          E &&
                          this.w.config.chart.animations.dynamicAnimation
                            .enabled,
                        L = !!(
                          (E && !S.globals.resized) ||
                          (T &&
                            S.globals.dataChanged &&
                            S.globals.shouldAnimate)
                        );
                      L ? (e = a) : ((e = s), (S.globals.animationEnded = !0));
                      var _,
                        P = S.config.stroke.dashArray;
                      _ = Array.isArray(P) ? P[n] : S.config.stroke.dashArray;
                      var I = this.drawPath({
                        d: e,
                        stroke: r,
                        strokeWidth: o,
                        fill: c,
                        fillOpacity: 1,
                        classes: p,
                        strokeLinecap: l,
                        strokeDashArray: _,
                      });
                      if (
                        (I.attr("index", n),
                        m &&
                          I.attr({
                            "clip-path": "url(#gridRectMask".concat(
                              S.globals.cuid,
                              ")"
                            ),
                          }),
                        "none" !== S.config.states.normal.filter.type)
                      )
                        A.getDefaultFilter(I, n);
                      else if (
                        S.config.chart.dropShadow.enabled &&
                        k &&
                        (!S.config.chart.dropShadow.enabledOnSeries ||
                          (S.config.chart.dropShadow.enabledOnSeries &&
                            -1 !==
                              S.config.chart.dropShadow.enabledOnSeries.indexOf(
                                n
                              )))
                      ) {
                        var M = S.config.chart.dropShadow;
                        A.dropShadow(I, M, n);
                      }
                      v &&
                        (I.node.addEventListener(
                          "mouseenter",
                          this.pathMouseEnter.bind(this, I)
                        ),
                        I.node.addEventListener(
                          "mouseleave",
                          this.pathMouseLeave.bind(this, I)
                        ),
                        I.node.addEventListener(
                          "mousedown",
                          this.pathMouseDown.bind(this, I)
                        )),
                        I.attr({ pathTo: s, pathFrom: a });
                      var N = {
                        el: I,
                        j: i,
                        realIndex: n,
                        pathFrom: a,
                        pathTo: s,
                        fill: c,
                        strokeWidth: o,
                        delay: d,
                      };
                      return (
                        !E || S.globals.resized || S.globals.dataChanged
                          ? (!S.globals.resized && S.globals.dataChanged) ||
                            C.showDelayedElements()
                          : C.animatePathsGradually(
                              h(h({}, N), {}, { speed: u })
                            ),
                        S.globals.dataChanged &&
                          T &&
                          L &&
                          C.animatePathsGradually(
                            h(h({}, N), {}, { speed: f })
                          ),
                        I
                      );
                    },
                  },
                  {
                    key: "drawPattern",
                    value: function (t, e, i) {
                      var n =
                          arguments.length > 3 && void 0 !== arguments[3]
                            ? arguments[3]
                            : "#a8a8a8",
                        a =
                          arguments.length > 4 && void 0 !== arguments[4]
                            ? arguments[4]
                            : 0,
                        s = this.w,
                        r = s.globals.dom.Paper.pattern(e, i, function (s) {
                          "horizontalLines" === t
                            ? s
                                .line(0, 0, i, 0)
                                .stroke({ color: n, width: a + 1 })
                            : "verticalLines" === t
                            ? s
                                .line(0, 0, 0, e)
                                .stroke({ color: n, width: a + 1 })
                            : "slantedLines" === t
                            ? s.line(0, 0, e, i).stroke({ color: n, width: a })
                            : "squares" === t
                            ? s
                                .rect(e, i)
                                .fill("none")
                                .stroke({ color: n, width: a })
                            : "circles" === t &&
                              s
                                .circle(e)
                                .fill("none")
                                .stroke({ color: n, width: a });
                        });
                      return r;
                    },
                  },
                  {
                    key: "drawGradient",
                    value: function (t, e, i, n, a) {
                      var s,
                        r =
                          arguments.length > 5 && void 0 !== arguments[5]
                            ? arguments[5]
                            : null,
                        o =
                          arguments.length > 6 && void 0 !== arguments[6]
                            ? arguments[6]
                            : null,
                        l =
                          arguments.length > 7 && void 0 !== arguments[7]
                            ? arguments[7]
                            : null,
                        c =
                          arguments.length > 8 && void 0 !== arguments[8]
                            ? arguments[8]
                            : 0,
                        h = this.w;
                      e.length < 9 &&
                        0 === e.indexOf("#") &&
                        (e = v.hexToRgba(e, n)),
                        i.length < 9 &&
                          0 === i.indexOf("#") &&
                          (i = v.hexToRgba(i, a));
                      var d = 0,
                        u = 1,
                        f = 1,
                        p = null;
                      null !== o &&
                        ((d = void 0 !== o[0] ? o[0] / 100 : 0),
                        (u = void 0 !== o[1] ? o[1] / 100 : 1),
                        (f = void 0 !== o[2] ? o[2] / 100 : 1),
                        (p = void 0 !== o[3] ? o[3] / 100 : null));
                      var g = !(
                        "donut" !== h.config.chart.type &&
                        "pie" !== h.config.chart.type &&
                        "polarArea" !== h.config.chart.type &&
                        "bubble" !== h.config.chart.type
                      );
                      if (
                        ((s =
                          null === l || 0 === l.length
                            ? h.globals.dom.Paper.gradient(
                                g ? "radial" : "linear",
                                function (t) {
                                  t.at(d, e, n),
                                    t.at(u, i, a),
                                    t.at(f, i, a),
                                    null !== p && t.at(p, e, n);
                                }
                              )
                            : h.globals.dom.Paper.gradient(
                                g ? "radial" : "linear",
                                function (t) {
                                  (Array.isArray(l[c]) ? l[c] : l).forEach(
                                    function (e) {
                                      t.at(e.offset / 100, e.color, e.opacity);
                                    }
                                  );
                                }
                              )),
                        g)
                      ) {
                        var m = h.globals.gridWidth / 2,
                          x = h.globals.gridHeight / 2;
                        "bubble" !== h.config.chart.type
                          ? s.attr({
                              gradientUnits: "userSpaceOnUse",
                              cx: m,
                              cy: x,
                              r,
                            })
                          : s.attr({
                              cx: 0.5,
                              cy: 0.5,
                              r: 0.8,
                              fx: 0.2,
                              fy: 0.2,
                            });
                      } else
                        "vertical" === t
                          ? s.from(0, 0).to(0, 1)
                          : "diagonal" === t
                          ? s.from(0, 0).to(1, 1)
                          : "horizontal" === t
                          ? s.from(0, 1).to(1, 1)
                          : "diagonal2" === t && s.from(1, 0).to(0, 1);
                      return s;
                    },
                  },
                  {
                    key: "drawText",
                    value: function (t) {
                      var e,
                        i = t.x,
                        n = t.y,
                        a = t.text,
                        s = t.textAnchor,
                        r = t.fontSize,
                        o = t.fontFamily,
                        l = t.fontWeight,
                        c = t.foreColor,
                        h = t.opacity,
                        d = t.cssClass,
                        u = void 0 === d ? "" : d,
                        f = t.isPlainText,
                        p = void 0 === f || f,
                        g = this.w;
                      return (
                        void 0 === a && (a = ""),
                        s || (s = "start"),
                        (c && c.length) || (c = g.config.chart.foreColor),
                        (o = o || g.config.chart.fontFamily),
                        (l = l || "regular"),
                        (e = Array.isArray(a)
                          ? g.globals.dom.Paper.text(function (t) {
                              for (var e = 0; e < a.length; e++)
                                0 === e
                                  ? t.tspan(a[e])
                                  : t.tspan(a[e]).newLine();
                            })
                          : p
                          ? g.globals.dom.Paper.plain(a)
                          : g.globals.dom.Paper.text(function (t) {
                              return t.tspan(a);
                            })).attr({
                          x: i,
                          y: n,
                          "text-anchor": s,
                          "dominant-baseline": "auto",
                          "font-size": r,
                          "font-family": o,
                          "font-weight": l,
                          fill: c,
                          class: "apexcharts-text " + u,
                        }),
                        (e.node.style.fontFamily = o),
                        (e.node.style.opacity = h),
                        e
                      );
                    },
                  },
                  {
                    key: "drawMarker",
                    value: function (t, e, i) {
                      t = t || 0;
                      var n = i.pSize || 0,
                        a = null;
                      if ("square" === i.shape || "rect" === i.shape) {
                        var s = void 0 === i.pRadius ? n / 2 : i.pRadius;
                        (null !== e && n) || ((n = 0), (s = 0));
                        var r = 1.2 * n + s,
                          o = this.drawRect(r, r, r, r, s);
                        o.attr({
                          x: t - r / 2,
                          y: e - r / 2,
                          cx: t,
                          cy: e,
                          class: i.class ? i.class : "",
                          fill: i.pointFillColor,
                          "fill-opacity": i.pointFillOpacity
                            ? i.pointFillOpacity
                            : 1,
                          stroke: i.pointStrokeColor,
                          "stroke-width": i.pointStrokeWidth
                            ? i.pointStrokeWidth
                            : 0,
                          "stroke-opacity": i.pointStrokeOpacity
                            ? i.pointStrokeOpacity
                            : 1,
                        }),
                          (a = o);
                      } else
                        ("circle" !== i.shape && i.shape) ||
                          (v.isNumber(e) || ((n = 0), (e = 0)),
                          (a = this.drawCircle(n, {
                            cx: t,
                            cy: e,
                            class: i.class ? i.class : "",
                            stroke: i.pointStrokeColor,
                            fill: i.pointFillColor,
                            "fill-opacity": i.pointFillOpacity
                              ? i.pointFillOpacity
                              : 1,
                            "stroke-width": i.pointStrokeWidth
                              ? i.pointStrokeWidth
                              : 0,
                            "stroke-opacity": i.pointStrokeOpacity
                              ? i.pointStrokeOpacity
                              : 1,
                          })));
                      return a;
                    },
                  },
                  {
                    key: "pathMouseEnter",
                    value: function (t, e) {
                      var i = this.w,
                        n = new y(this.ctx),
                        a = parseInt(t.node.getAttribute("index"), 10),
                        s = parseInt(t.node.getAttribute("j"), 10);
                      if (
                        ("function" ==
                          typeof i.config.chart.events.dataPointMouseEnter &&
                          i.config.chart.events.dataPointMouseEnter(
                            e,
                            this.ctx,
                            { seriesIndex: a, dataPointIndex: s, w: i }
                          ),
                        this.ctx.events.fireEvent("dataPointMouseEnter", [
                          e,
                          this.ctx,
                          { seriesIndex: a, dataPointIndex: s, w: i },
                        ]),
                        ("none" === i.config.states.active.filter.type ||
                          "true" !== t.node.getAttribute("selected")) &&
                          "none" !== i.config.states.hover.filter.type &&
                          "none" !== i.config.states.active.filter.type &&
                          !i.globals.isTouchDevice)
                      ) {
                        var r = i.config.states.hover.filter;
                        n.applyFilter(t, a, r.type, r.value);
                      }
                    },
                  },
                  {
                    key: "pathMouseLeave",
                    value: function (t, e) {
                      var i = this.w,
                        n = new y(this.ctx),
                        a = parseInt(t.node.getAttribute("index"), 10),
                        s = parseInt(t.node.getAttribute("j"), 10);
                      "function" ==
                        typeof i.config.chart.events.dataPointMouseLeave &&
                        i.config.chart.events.dataPointMouseLeave(e, this.ctx, {
                          seriesIndex: a,
                          dataPointIndex: s,
                          w: i,
                        }),
                        this.ctx.events.fireEvent("dataPointMouseLeave", [
                          e,
                          this.ctx,
                          { seriesIndex: a, dataPointIndex: s, w: i },
                        ]),
                        ("none" !== i.config.states.active.filter.type &&
                          "true" === t.node.getAttribute("selected")) ||
                          ("none" !== i.config.states.hover.filter.type &&
                            n.getDefaultFilter(t, a));
                    },
                  },
                  {
                    key: "pathMouseDown",
                    value: function (t, e) {
                      var i = this.w,
                        n = new y(this.ctx),
                        a = parseInt(t.node.getAttribute("index"), 10),
                        s = parseInt(t.node.getAttribute("j"), 10),
                        r = "false";
                      if ("true" === t.node.getAttribute("selected")) {
                        if (
                          (t.node.setAttribute("selected", "false"),
                          i.globals.selectedDataPoints[a].indexOf(s) > -1)
                        ) {
                          var o = i.globals.selectedDataPoints[a].indexOf(s);
                          i.globals.selectedDataPoints[a].splice(o, 1);
                        }
                      } else {
                        if (
                          !i.config.states.active
                            .allowMultipleDataPointsSelection &&
                          i.globals.selectedDataPoints.length > 0
                        ) {
                          i.globals.selectedDataPoints = [];
                          var l = i.globals.dom.Paper.select(
                              ".apexcharts-series path"
                            ).members,
                            c = i.globals.dom.Paper.select(
                              ".apexcharts-series circle, .apexcharts-series rect"
                            ).members,
                            h = function (t) {
                              Array.prototype.forEach.call(t, function (t) {
                                t.node.setAttribute("selected", "false"),
                                  n.getDefaultFilter(t, a);
                              });
                            };
                          h(l), h(c);
                        }
                        t.node.setAttribute("selected", "true"),
                          (r = "true"),
                          void 0 === i.globals.selectedDataPoints[a] &&
                            (i.globals.selectedDataPoints[a] = []),
                          i.globals.selectedDataPoints[a].push(s);
                      }
                      if ("true" === r) {
                        var d = i.config.states.active.filter;
                        "none" !== d && n.applyFilter(t, a, d.type, d.value);
                      } else
                        "none" !== i.config.states.active.filter.type &&
                          n.getDefaultFilter(t, a);
                      "function" ==
                        typeof i.config.chart.events.dataPointSelection &&
                        i.config.chart.events.dataPointSelection(e, this.ctx, {
                          selectedDataPoints: i.globals.selectedDataPoints,
                          seriesIndex: a,
                          dataPointIndex: s,
                          w: i,
                        }),
                        e &&
                          this.ctx.events.fireEvent("dataPointSelection", [
                            e,
                            this.ctx,
                            {
                              selectedDataPoints: i.globals.selectedDataPoints,
                              seriesIndex: a,
                              dataPointIndex: s,
                              w: i,
                            },
                          ]);
                    },
                  },
                  {
                    key: "rotateAroundCenter",
                    value: function (t) {
                      var e = t.getBBox();
                      return { x: e.x + e.width / 2, y: e.y + e.height / 2 };
                    },
                  },
                  {
                    key: "getTextRects",
                    value: function (t, e, i, n) {
                      var a =
                          !(arguments.length > 4 && void 0 !== arguments[4]) ||
                          arguments[4],
                        s = this.w,
                        r = this.drawText({
                          x: -200,
                          y: -200,
                          text: t,
                          textAnchor: "start",
                          fontSize: e,
                          fontFamily: i,
                          foreColor: "#fff",
                          opacity: 0,
                        });
                      n && r.attr("transform", n), s.globals.dom.Paper.add(r);
                      var o = r.bbox();
                      return (
                        a || (o = r.node.getBoundingClientRect()),
                        r.remove(),
                        { width: o.width, height: o.height }
                      );
                    },
                  },
                  {
                    key: "placeTextWithEllipsis",
                    value: function (t, e, i) {
                      if (
                        "function" == typeof t.getComputedTextLength &&
                        ((t.textContent = e),
                        e.length > 0 && t.getComputedTextLength() >= i / 1.1)
                      ) {
                        for (var n = e.length - 3; n > 0; n -= 3)
                          if (t.getSubStringLength(0, n) <= i / 1.1)
                            return void (t.textContent =
                              e.substring(0, n) + "...");
                        t.textContent = ".";
                      }
                    },
                  },
                ],
                [
                  {
                    key: "setAttrs",
                    value: function (t, e) {
                      for (var i in e)
                        e.hasOwnProperty(i) && t.setAttribute(i, e[i]);
                    },
                  },
                ]
              ),
              t
            );
          })(),
          k = (function () {
            function t(e) {
              s(this, t), (this.w = e.w), (this.annoCtx = e);
            }
            return (
              o(t, [
                {
                  key: "setOrientations",
                  value: function (t) {
                    var e =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : null,
                      i = this.w;
                    if ("vertical" === t.label.orientation) {
                      var n = null !== e ? e : 0,
                        a = i.globals.dom.baseEl.querySelector(
                          ".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='".concat(
                            n,
                            "']"
                          )
                        );
                      if (null !== a) {
                        var s = a.getBoundingClientRect();
                        a.setAttribute(
                          "x",
                          parseFloat(a.getAttribute("x")) - s.height + 4
                        ),
                          "top" === t.label.position
                            ? a.setAttribute(
                                "y",
                                parseFloat(a.getAttribute("y")) + s.width
                              )
                            : a.setAttribute(
                                "y",
                                parseFloat(a.getAttribute("y")) - s.width
                              );
                        var r = this.annoCtx.graphics.rotateAroundCenter(a),
                          o = r.x,
                          l = r.y;
                        a.setAttribute(
                          "transform",
                          "rotate(-90 ".concat(o, " ").concat(l, ")")
                        );
                      }
                    }
                  },
                },
                {
                  key: "addBackgroundToAnno",
                  value: function (t, e) {
                    var i = this.w;
                    if (
                      !t ||
                      !e.label.text ||
                      (e.label.text && !e.label.text.trim())
                    )
                      return null;
                    var n = i.globals.dom.baseEl
                        .querySelector(".apexcharts-grid")
                        .getBoundingClientRect(),
                      a = t.getBoundingClientRect(),
                      s = e.label.style.padding.left,
                      r = e.label.style.padding.right,
                      o = e.label.style.padding.top,
                      l = e.label.style.padding.bottom;
                    "vertical" === e.label.orientation &&
                      ((o = e.label.style.padding.left),
                      (l = e.label.style.padding.right),
                      (s = e.label.style.padding.top),
                      (r = e.label.style.padding.bottom));
                    var c = a.left - n.left - s,
                      h = a.top - n.top - o,
                      d = this.annoCtx.graphics.drawRect(
                        c - i.globals.barPadForNumericAxis,
                        h,
                        a.width + s + r,
                        a.height + o + l,
                        e.label.borderRadius,
                        e.label.style.background,
                        1,
                        e.label.borderWidth,
                        e.label.borderColor,
                        0
                      );
                    return e.id && d.node.classList.add(e.id), d;
                  },
                },
                {
                  key: "annotationsBackground",
                  value: function () {
                    var t = this,
                      e = this.w,
                      i = function (i, n, a) {
                        var s = e.globals.dom.baseEl.querySelector(
                          ".apexcharts-"
                            .concat(a, "-annotations .apexcharts-")
                            .concat(a, "-annotation-label[rel='")
                            .concat(n, "']")
                        );
                        if (s) {
                          var r = s.parentNode,
                            o = t.addBackgroundToAnno(s, i);
                          o && r.insertBefore(o.node, s);
                        }
                      };
                    e.config.annotations.xaxis.map(function (t, e) {
                      i(t, e, "xaxis");
                    }),
                      e.config.annotations.yaxis.map(function (t, e) {
                        i(t, e, "yaxis");
                      }),
                      e.config.annotations.points.map(function (t, e) {
                        i(t, e, "point");
                      });
                  },
                },
                {
                  key: "getStringX",
                  value: function (t) {
                    var e = this.w,
                      i = t;
                    e.config.xaxis.convertedCatToNumeric &&
                      e.globals.categoryLabels.length &&
                      (t = e.globals.categoryLabels.indexOf(t) + 1);
                    var n = e.globals.labels.indexOf(t),
                      a = e.globals.dom.baseEl.querySelector(
                        ".apexcharts-xaxis-texts-g text:nth-child(" +
                          (n + 1) +
                          ")"
                      );
                    return a && (i = parseFloat(a.getAttribute("x"))), i;
                  },
                },
              ]),
              t
            );
          })(),
          S = (function () {
            function t(e) {
              s(this, t),
                (this.w = e.w),
                (this.annoCtx = e),
                (this.invertAxis = this.annoCtx.invertAxis);
            }
            return (
              o(t, [
                {
                  key: "addXaxisAnnotation",
                  value: function (t, e, i) {
                    var n = this.w,
                      a = this.invertAxis ? n.globals.minY : n.globals.minX,
                      s = this.invertAxis ? n.globals.maxY : n.globals.maxX,
                      r = this.invertAxis
                        ? n.globals.yRange[0]
                        : n.globals.xRange,
                      o = (t.x - a) / (r / n.globals.gridWidth);
                    this.annoCtx.inversedReversedAxis &&
                      (o = (s - t.x) / (r / n.globals.gridWidth));
                    var l = t.label.text;
                    ("category" !== n.config.xaxis.type &&
                      !n.config.xaxis.convertedCatToNumeric) ||
                      this.invertAxis ||
                      n.globals.dataFormatXNumeric ||
                      (o = this.annoCtx.helpers.getStringX(t.x));
                    var c = t.strokeDashArray;
                    if (v.isNumber(o)) {
                      if (null === t.x2 || void 0 === t.x2) {
                        var h = this.annoCtx.graphics.drawLine(
                          o + t.offsetX,
                          0 + t.offsetY,
                          o + t.offsetX,
                          n.globals.gridHeight + t.offsetY,
                          t.borderColor,
                          c,
                          t.borderWidth
                        );
                        e.appendChild(h.node),
                          t.id && h.node.classList.add(t.id);
                      } else {
                        var d = (t.x2 - a) / (r / n.globals.gridWidth);
                        if (
                          (this.annoCtx.inversedReversedAxis &&
                            (d = (s - t.x2) / (r / n.globals.gridWidth)),
                          ("category" !== n.config.xaxis.type &&
                            !n.config.xaxis.convertedCatToNumeric) ||
                            this.invertAxis ||
                            n.globals.dataFormatXNumeric ||
                            (d = this.annoCtx.helpers.getStringX(t.x2)),
                          d < o)
                        ) {
                          var u = o;
                          (o = d), (d = u);
                        }
                        var f = this.annoCtx.graphics.drawRect(
                          o + t.offsetX,
                          0 + t.offsetY,
                          d - o,
                          n.globals.gridHeight + t.offsetY,
                          0,
                          t.fillColor,
                          t.opacity,
                          1,
                          t.borderColor,
                          c
                        );
                        f.node.classList.add("apexcharts-annotation-rect"),
                          f.attr(
                            "clip-path",
                            "url(#gridRectMask".concat(n.globals.cuid, ")")
                          ),
                          e.appendChild(f.node),
                          t.id && f.node.classList.add(t.id);
                      }
                      var p =
                          "top" === t.label.position ? 4 : n.globals.gridHeight,
                        g = this.annoCtx.graphics.getTextRects(
                          l,
                          parseFloat(t.label.style.fontSize)
                        ),
                        m = this.annoCtx.graphics.drawText({
                          x: o + t.label.offsetX,
                          y:
                            p +
                            t.label.offsetY -
                            ("vertical" === t.label.orientation
                              ? "top" === t.label.position
                                ? g.width / 2 - 12
                                : -g.width / 2
                              : 0),
                          text: l,
                          textAnchor: t.label.textAnchor,
                          fontSize: t.label.style.fontSize,
                          fontFamily: t.label.style.fontFamily,
                          fontWeight: t.label.style.fontWeight,
                          foreColor: t.label.style.color,
                          cssClass: "apexcharts-xaxis-annotation-label "
                            .concat(t.label.style.cssClass, " ")
                            .concat(t.id ? t.id : ""),
                        });
                      m.attr({ rel: i }),
                        e.appendChild(m.node),
                        this.annoCtx.helpers.setOrientations(t, i);
                    }
                  },
                },
                {
                  key: "drawXAxisAnnotations",
                  value: function () {
                    var t = this,
                      e = this.w,
                      i = this.annoCtx.graphics.group({
                        class: "apexcharts-xaxis-annotations",
                      });
                    return (
                      e.config.annotations.xaxis.map(function (e, n) {
                        t.addXaxisAnnotation(e, i.node, n);
                      }),
                      i
                    );
                  },
                },
              ]),
              t
            );
          })(),
          A = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.w = e.w);
            }
            return (
              o(
                t,
                [
                  {
                    key: "getStackedSeriesTotals",
                    value: function () {
                      var t = this.w,
                        e = [];
                      if (0 === t.globals.series.length) return e;
                      for (
                        var i = 0;
                        i <
                        t.globals.series[t.globals.maxValsInArrayIndex].length;
                        i++
                      ) {
                        for (var n = 0, a = 0; a < t.globals.series.length; a++)
                          void 0 !== t.globals.series[a][i] &&
                            (n += t.globals.series[a][i]);
                        e.push(n);
                      }
                      return (t.globals.stackedSeriesTotals = e), e;
                    },
                  },
                  {
                    key: "getSeriesTotalByIndex",
                    value: function () {
                      var t =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : null;
                      return null === t
                        ? this.w.config.series.reduce(function (t, e) {
                            return t + e;
                          }, 0)
                        : this.w.globals.series[t].reduce(function (t, e) {
                            return t + e;
                          }, 0);
                    },
                  },
                  {
                    key: "isSeriesNull",
                    value: function () {
                      var t =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : null;
                      return (
                        0 ===
                        (null === t
                          ? this.w.config.series.filter(function (t) {
                              return null !== t;
                            })
                          : this.w.config.series[t].data.filter(function (t) {
                              return null !== t;
                            })
                        ).length
                      );
                    },
                  },
                  {
                    key: "seriesHaveSameValues",
                    value: function (t) {
                      return this.w.globals.series[t].every(function (t, e, i) {
                        return t === i[0];
                      });
                    },
                  },
                  {
                    key: "getCategoryLabels",
                    value: function (t) {
                      var e = this.w,
                        i = t.slice();
                      return (
                        e.config.xaxis.convertedCatToNumeric &&
                          (i = t.map(function (t, i) {
                            return e.config.xaxis.labels.formatter(
                              t - e.globals.minX + 1
                            );
                          })),
                        i
                      );
                    },
                  },
                  {
                    key: "getLargestSeries",
                    value: function () {
                      var t = this.w;
                      t.globals.maxValsInArrayIndex = t.globals.series
                        .map(function (t) {
                          return t.length;
                        })
                        .indexOf(
                          Math.max.apply(
                            Math,
                            t.globals.series.map(function (t) {
                              return t.length;
                            })
                          )
                        );
                    },
                  },
                  {
                    key: "getLargestMarkerSize",
                    value: function () {
                      var t = this.w,
                        e = 0;
                      return (
                        t.globals.markers.size.forEach(function (t) {
                          e = Math.max(e, t);
                        }),
                        (t.globals.markers.largestSize = e),
                        e
                      );
                    },
                  },
                  {
                    key: "getSeriesTotals",
                    value: function () {
                      var t = this.w;
                      t.globals.seriesTotals = t.globals.series.map(function (
                        t,
                        e
                      ) {
                        var i = 0;
                        if (Array.isArray(t))
                          for (var n = 0; n < t.length; n++) i += t[n];
                        else i += t;
                        return i;
                      });
                    },
                  },
                  {
                    key: "getSeriesTotalsXRange",
                    value: function (t, e) {
                      var i = this.w;
                      return i.globals.series.map(function (n, a) {
                        for (var s = 0, r = 0; r < n.length; r++)
                          i.globals.seriesX[a][r] > t &&
                            i.globals.seriesX[a][r] < e &&
                            (s += n[r]);
                        return s;
                      });
                    },
                  },
                  {
                    key: "getPercentSeries",
                    value: function () {
                      var t = this.w;
                      t.globals.seriesPercent = t.globals.series.map(function (
                        e,
                        i
                      ) {
                        var n = [];
                        if (Array.isArray(e))
                          for (var a = 0; a < e.length; a++) {
                            var s = t.globals.stackedSeriesTotals[a],
                              r = 0;
                            s && (r = (100 * e[a]) / s), n.push(r);
                          }
                        else {
                          var o =
                            (100 * e) /
                            t.globals.seriesTotals.reduce(function (t, e) {
                              return t + e;
                            }, 0);
                          n.push(o);
                        }
                        return n;
                      });
                    },
                  },
                  {
                    key: "getCalculatedRatios",
                    value: function () {
                      var t,
                        e,
                        i,
                        n,
                        a = this.w.globals,
                        s = [],
                        r = 0,
                        o = [],
                        l = 0.1,
                        c = 0;
                      if (((a.yRange = []), a.isMultipleYAxis))
                        for (var h = 0; h < a.minYArr.length; h++)
                          a.yRange.push(Math.abs(a.minYArr[h] - a.maxYArr[h])),
                            o.push(0);
                      else a.yRange.push(Math.abs(a.minY - a.maxY));
                      (a.xRange = Math.abs(a.maxX - a.minX)),
                        (a.zRange = Math.abs(a.maxZ - a.minZ));
                      for (var d = 0; d < a.yRange.length; d++)
                        s.push(a.yRange[d] / a.gridHeight);
                      if (
                        ((e = a.xRange / a.gridWidth),
                        (i =
                          Math.abs(a.initialMaxX - a.initialMinX) /
                          a.gridWidth),
                        (t = a.yRange / a.gridWidth),
                        (n = a.xRange / a.gridHeight),
                        (r = (a.zRange / a.gridHeight) * 16) || (r = 1),
                        a.minY !== Number.MIN_VALUE &&
                          0 !== Math.abs(a.minY) &&
                          (a.hasNegs = !0),
                        a.isMultipleYAxis)
                      ) {
                        o = [];
                        for (var u = 0; u < s.length; u++)
                          o.push(-a.minYArr[u] / s[u]);
                      } else
                        o.push(-a.minY / s[0]),
                          a.minY !== Number.MIN_VALUE &&
                            0 !== Math.abs(a.minY) &&
                            ((l = -a.minY / t), (c = a.minX / e));
                      return {
                        yRatio: s,
                        invertedYRatio: t,
                        zRatio: r,
                        xRatio: e,
                        initialXRatio: i,
                        invertedXRatio: n,
                        baseLineInvertedY: l,
                        baseLineY: o,
                        baseLineX: c,
                      };
                    },
                  },
                  {
                    key: "getLogSeries",
                    value: function (t) {
                      var e = this,
                        i = this.w;
                      return (
                        (i.globals.seriesLog = t.map(function (t, n) {
                          return i.config.yaxis[n] &&
                            i.config.yaxis[n].logarithmic
                            ? t.map(function (t) {
                                return null === t ? null : e.getLogVal(t, n);
                              })
                            : t;
                        })),
                        i.globals.invalidLogScale ? t : i.globals.seriesLog
                      );
                    },
                  },
                  {
                    key: "getLogVal",
                    value: function (t, e) {
                      var i = this.w;
                      return (
                        (Math.log(t) - Math.log(i.globals.minYArr[e])) /
                        (Math.log(i.globals.maxYArr[e]) -
                          Math.log(i.globals.minYArr[e]))
                      );
                    },
                  },
                  {
                    key: "getLogYRatios",
                    value: function (t) {
                      var e = this,
                        i = this.w,
                        n = this.w.globals;
                      return (
                        (n.yLogRatio = t.slice()),
                        (n.logYRange = n.yRange.map(function (t, a) {
                          if (
                            i.config.yaxis[a] &&
                            e.w.config.yaxis[a].logarithmic
                          ) {
                            var s,
                              r = -Number.MAX_VALUE,
                              o = Number.MIN_VALUE;
                            return (
                              n.seriesLog.forEach(function (t, e) {
                                t.forEach(function (t) {
                                  i.config.yaxis[e] &&
                                    i.config.yaxis[e].logarithmic &&
                                    ((r = Math.max(t, r)),
                                    (o = Math.min(t, o)));
                                });
                              }),
                              (s = Math.pow(
                                n.yRange[a],
                                Math.abs(o - r) / n.yRange[a]
                              )),
                              (n.yLogRatio[a] = s / n.gridHeight),
                              s
                            );
                          }
                        })),
                        n.invalidLogScale ? t.slice() : n.yLogRatio
                      );
                    },
                  },
                ],
                [
                  {
                    key: "checkComboSeries",
                    value: function (t) {
                      var e = !1,
                        i = 0,
                        n = 0;
                      return (
                        t.length &&
                          void 0 !== t[0].type &&
                          t.forEach(function (t) {
                            ("bar" !== t.type &&
                              "column" !== t.type &&
                              "candlestick" !== t.type &&
                              "boxPlot" !== t.type) ||
                              i++,
                              void 0 !== t.type && n++;
                          }),
                        n > 1 && (e = !0),
                        { comboBarCount: i, comboCharts: e }
                      );
                    },
                  },
                  {
                    key: "extendArrayProps",
                    value: function (t, e, i) {
                      return (
                        e.yaxis && (e = t.extendYAxis(e, i)),
                        e.annotations &&
                          (e.annotations.yaxis &&
                            (e = t.extendYAxisAnnotations(e)),
                          e.annotations.xaxis &&
                            (e = t.extendXAxisAnnotations(e)),
                          e.annotations.points &&
                            (e = t.extendPointAnnotations(e))),
                        e
                      );
                    },
                  },
                ]
              ),
              t
            );
          })(),
          C = (function () {
            function t(e) {
              s(this, t), (this.w = e.w), (this.annoCtx = e);
            }
            return (
              o(t, [
                {
                  key: "addYaxisAnnotation",
                  value: function (t, e, i) {
                    var n,
                      a = this.w,
                      s = t.strokeDashArray,
                      r = this._getY1Y2("y1", t),
                      o = t.label.text;
                    if (null === t.y2 || void 0 === t.y2) {
                      var l = this.annoCtx.graphics.drawLine(
                        0 + t.offsetX,
                        r + t.offsetY,
                        this._getYAxisAnnotationWidth(t),
                        r + t.offsetY,
                        t.borderColor,
                        s,
                        t.borderWidth
                      );
                      e.appendChild(l.node), t.id && l.node.classList.add(t.id);
                    } else {
                      if ((n = this._getY1Y2("y2", t)) > r) {
                        var c = r;
                        (r = n), (n = c);
                      }
                      var h = this.annoCtx.graphics.drawRect(
                        0 + t.offsetX,
                        n + t.offsetY,
                        this._getYAxisAnnotationWidth(t),
                        r - n,
                        0,
                        t.fillColor,
                        t.opacity,
                        1,
                        t.borderColor,
                        s
                      );
                      h.node.classList.add("apexcharts-annotation-rect"),
                        h.attr(
                          "clip-path",
                          "url(#gridRectMask".concat(a.globals.cuid, ")")
                        ),
                        e.appendChild(h.node),
                        t.id && h.node.classList.add(t.id);
                    }
                    var d =
                        "right" === t.label.position ? a.globals.gridWidth : 0,
                      u = this.annoCtx.graphics.drawText({
                        x: d + t.label.offsetX,
                        y: (n || r) + t.label.offsetY - 3,
                        text: o,
                        textAnchor: t.label.textAnchor,
                        fontSize: t.label.style.fontSize,
                        fontFamily: t.label.style.fontFamily,
                        fontWeight: t.label.style.fontWeight,
                        foreColor: t.label.style.color,
                        cssClass: "apexcharts-yaxis-annotation-label "
                          .concat(t.label.style.cssClass, " ")
                          .concat(t.id ? t.id : ""),
                      });
                    u.attr({ rel: i }), e.appendChild(u.node);
                  },
                },
                {
                  key: "_getY1Y2",
                  value: function (t, e) {
                    var i,
                      n = "y1" === t ? e.y : e.y2,
                      a = this.w;
                    if (this.annoCtx.invertAxis) {
                      var s = a.globals.labels.indexOf(n);
                      a.config.xaxis.convertedCatToNumeric &&
                        (s = a.globals.categoryLabels.indexOf(n));
                      var r = a.globals.dom.baseEl.querySelector(
                        ".apexcharts-yaxis-texts-g text:nth-child(" +
                          (s + 1) +
                          ")"
                      );
                      r && (i = parseFloat(r.getAttribute("y")));
                    } else {
                      var o;
                      (o = a.config.yaxis[e.yAxisIndex].logarithmic
                        ? (n = new A(this.annoCtx.ctx).getLogVal(
                            n,
                            e.yAxisIndex
                          )) / a.globals.yLogRatio[e.yAxisIndex]
                        : (n - a.globals.minYArr[e.yAxisIndex]) /
                          (a.globals.yRange[e.yAxisIndex] /
                            a.globals.gridHeight)),
                        (i = a.globals.gridHeight - o),
                        a.config.yaxis[e.yAxisIndex] &&
                          a.config.yaxis[e.yAxisIndex].reversed &&
                          (i = o);
                    }
                    return i;
                  },
                },
                {
                  key: "_getYAxisAnnotationWidth",
                  value: function (t) {
                    var e = this.w;
                    return (
                      e.globals.gridWidth,
                      (t.width.indexOf("%") > -1
                        ? (e.globals.gridWidth * parseInt(t.width, 10)) / 100
                        : parseInt(t.width, 10)) + t.offsetX
                    );
                  },
                },
                {
                  key: "drawYAxisAnnotations",
                  value: function () {
                    var t = this,
                      e = this.w,
                      i = this.annoCtx.graphics.group({
                        class: "apexcharts-yaxis-annotations",
                      });
                    return (
                      e.config.annotations.yaxis.map(function (e, n) {
                        t.addYaxisAnnotation(e, i.node, n);
                      }),
                      i
                    );
                  },
                },
              ]),
              t
            );
          })(),
          E = (function () {
            function t(e) {
              s(this, t), (this.w = e.w), (this.annoCtx = e);
            }
            return (
              o(t, [
                {
                  key: "addPointAnnotation",
                  value: function (t, e, i) {
                    var n = this.w,
                      a = 0,
                      s = 0,
                      r = 0;
                    this.annoCtx.invertAxis &&
                      console.warn(
                        "Point annotation is not supported in horizontal bar charts."
                      );
                    var o = parseFloat(t.y);
                    if ("string" == typeof t.x) {
                      var l = n.globals.labels.indexOf(t.x);
                      n.config.xaxis.convertedCatToNumeric &&
                        (l = n.globals.categoryLabels.indexOf(t.x)),
                        (a = this.annoCtx.helpers.getStringX(t.x)),
                        null === t.y &&
                          (o = n.globals.series[t.seriesIndex][l]);
                    } else
                      a =
                        (t.x - n.globals.minX) /
                        (n.globals.xRange / n.globals.gridWidth);
                    for (var c, h = [], d = 0, u = 0; u <= t.seriesIndex; u++) {
                      var f = n.config.yaxis[u].seriesName;
                      if (f)
                        for (var p = u + 1; p <= t.seriesIndex; p++)
                          n.config.yaxis[p].seriesName === f &&
                            -1 === h.indexOf(f) &&
                            (d++, h.push(f));
                    }
                    if (n.config.yaxis[t.yAxisIndex].logarithmic)
                      c =
                        (o = new A(this.annoCtx.ctx).getLogVal(
                          o,
                          t.yAxisIndex
                        )) / n.globals.yLogRatio[t.yAxisIndex];
                    else {
                      var g = t.yAxisIndex + d;
                      c =
                        (o - n.globals.minYArr[g]) /
                        (n.globals.yRange[g] / n.globals.gridHeight);
                    }
                    if (
                      ((s =
                        n.globals.gridHeight -
                        c -
                        parseFloat(t.label.style.fontSize) -
                        t.marker.size),
                      (r = n.globals.gridHeight - c),
                      n.config.yaxis[t.yAxisIndex] &&
                        n.config.yaxis[t.yAxisIndex].reversed &&
                        ((s =
                          c +
                          parseFloat(t.label.style.fontSize) +
                          t.marker.size),
                        (r = c)),
                      v.isNumber(a))
                    ) {
                      var m = {
                          pSize: t.marker.size,
                          pointStrokeWidth: t.marker.strokeWidth,
                          pointFillColor: t.marker.fillColor,
                          pointStrokeColor: t.marker.strokeColor,
                          shape: t.marker.shape,
                          pRadius: t.marker.radius,
                          class: "apexcharts-point-annotation-marker "
                            .concat(t.marker.cssClass, " ")
                            .concat(t.id ? t.id : ""),
                        },
                        x = this.annoCtx.graphics.drawMarker(
                          a + t.marker.offsetX,
                          r + t.marker.offsetY,
                          m
                        );
                      e.appendChild(x.node);
                      var b = t.label.text ? t.label.text : "",
                        y = this.annoCtx.graphics.drawText({
                          x: a + t.label.offsetX,
                          y: s + t.label.offsetY,
                          text: b,
                          textAnchor: t.label.textAnchor,
                          fontSize: t.label.style.fontSize,
                          fontFamily: t.label.style.fontFamily,
                          fontWeight: t.label.style.fontWeight,
                          foreColor: t.label.style.color,
                          cssClass: "apexcharts-point-annotation-label "
                            .concat(t.label.style.cssClass, " ")
                            .concat(t.id ? t.id : ""),
                        });
                      if (
                        (y.attr({ rel: i }),
                        e.appendChild(y.node),
                        t.customSVG.SVG)
                      ) {
                        var w = this.annoCtx.graphics.group({
                          class:
                            "apexcharts-point-annotations-custom-svg " +
                            t.customSVG.cssClass,
                        });
                        w.attr({
                          transform: "translate("
                            .concat(a + t.customSVG.offsetX, ", ")
                            .concat(s + t.customSVG.offsetY, ")"),
                        }),
                          (w.node.innerHTML = t.customSVG.SVG),
                          e.appendChild(w.node);
                      }
                      if (t.image.path) {
                        var k = t.image.width ? t.image.width : 20,
                          S = t.image.height ? t.image.height : 20;
                        this.annoCtx.addImage({
                          x: a + t.image.offsetX - k / 2,
                          y: s + t.image.offsetY - S / 2,
                          width: k,
                          height: S,
                          path: t.image.path,
                          appendTo: ".apexcharts-point-annotations",
                        });
                      }
                    }
                  },
                },
                {
                  key: "drawPointAnnotations",
                  value: function () {
                    var t = this,
                      e = this.w,
                      i = this.annoCtx.graphics.group({
                        class: "apexcharts-point-annotations",
                      });
                    return (
                      e.config.annotations.points.map(function (e, n) {
                        t.addPointAnnotation(e, i.node, n);
                      }),
                      i
                    );
                  },
                },
              ]),
              t
            );
          })(),
          T = {
            name: "en",
            options: {
              months: [
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December",
              ],
              shortMonths: [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec",
              ],
              days: [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday",
              ],
              shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
              toolbar: {
                exportToSVG: "Download SVG",
                exportToPNG: "Download PNG",
                exportToCSV: "Download CSV",
                menu: "Menu",
                selection: "Selection",
                selectionZoom: "Selection Zoom",
                zoomIn: "Zoom In",
                zoomOut: "Zoom Out",
                pan: "Panning",
                reset: "Reset Zoom",
              },
            },
          },
          L = (function () {
            function t() {
              s(this, t),
                (this.yAxis = {
                  show: !0,
                  showAlways: !1,
                  showForNullSeries: !0,
                  seriesName: void 0,
                  opposite: !1,
                  reversed: !1,
                  logarithmic: !1,
                  logBase: 10,
                  tickAmount: void 0,
                  forceNiceScale: !1,
                  max: void 0,
                  min: void 0,
                  floating: !1,
                  decimalsInFloat: void 0,
                  labels: {
                    show: !0,
                    minWidth: 0,
                    maxWidth: 160,
                    offsetX: 0,
                    offsetY: 0,
                    align: void 0,
                    rotate: 0,
                    padding: 20,
                    style: {
                      colors: [],
                      fontSize: "11px",
                      fontWeight: 400,
                      fontFamily: void 0,
                      cssClass: "",
                    },
                    formatter: void 0,
                  },
                  axisBorder: {
                    show: !1,
                    color: "#e0e0e0",
                    width: 1,
                    offsetX: 0,
                    offsetY: 0,
                  },
                  axisTicks: {
                    show: !1,
                    color: "#e0e0e0",
                    width: 6,
                    offsetX: 0,
                    offsetY: 0,
                  },
                  title: {
                    text: void 0,
                    rotate: -90,
                    offsetY: 0,
                    offsetX: 0,
                    style: {
                      color: void 0,
                      fontSize: "11px",
                      fontWeight: 900,
                      fontFamily: void 0,
                      cssClass: "",
                    },
                  },
                  tooltip: { enabled: !1, offsetX: 0 },
                  crosshairs: {
                    show: !0,
                    position: "front",
                    stroke: { color: "#b6b6b6", width: 1, dashArray: 0 },
                  },
                }),
                (this.pointAnnotation = {
                  x: 0,
                  y: null,
                  yAxisIndex: 0,
                  seriesIndex: 0,
                  marker: {
                    size: 4,
                    fillColor: "#fff",
                    strokeWidth: 2,
                    strokeColor: "#333",
                    shape: "circle",
                    offsetX: 0,
                    offsetY: 0,
                    radius: 2,
                    cssClass: "",
                  },
                  label: {
                    borderColor: "#c2c2c2",
                    borderWidth: 1,
                    borderRadius: 2,
                    text: void 0,
                    textAnchor: "middle",
                    offsetX: 0,
                    offsetY: 0,
                    style: {
                      background: "#fff",
                      color: void 0,
                      fontSize: "11px",
                      fontFamily: void 0,
                      fontWeight: 400,
                      cssClass: "",
                      padding: { left: 5, right: 5, top: 2, bottom: 2 },
                    },
                  },
                  customSVG: {
                    SVG: void 0,
                    cssClass: void 0,
                    offsetX: 0,
                    offsetY: 0,
                  },
                  image: {
                    path: void 0,
                    width: 20,
                    height: 20,
                    offsetX: 0,
                    offsetY: 0,
                  },
                }),
                (this.yAxisAnnotation = {
                  y: 0,
                  y2: null,
                  strokeDashArray: 1,
                  fillColor: "#c2c2c2",
                  borderColor: "#c2c2c2",
                  borderWidth: 1,
                  opacity: 0.3,
                  offsetX: 0,
                  offsetY: 0,
                  width: "100%",
                  yAxisIndex: 0,
                  label: {
                    borderColor: "#c2c2c2",
                    borderWidth: 1,
                    borderRadius: 2,
                    text: void 0,
                    textAnchor: "end",
                    position: "right",
                    offsetX: 0,
                    offsetY: -3,
                    style: {
                      background: "#fff",
                      color: void 0,
                      fontSize: "11px",
                      fontFamily: void 0,
                      fontWeight: 400,
                      cssClass: "",
                      padding: { left: 5, right: 5, top: 2, bottom: 2 },
                    },
                  },
                }),
                (this.xAxisAnnotation = {
                  x: 0,
                  x2: null,
                  strokeDashArray: 1,
                  fillColor: "#c2c2c2",
                  borderColor: "#c2c2c2",
                  borderWidth: 1,
                  opacity: 0.3,
                  offsetX: 0,
                  offsetY: 0,
                  label: {
                    borderColor: "#c2c2c2",
                    borderWidth: 1,
                    borderRadius: 2,
                    text: void 0,
                    textAnchor: "middle",
                    orientation: "vertical",
                    position: "top",
                    offsetX: 0,
                    offsetY: 0,
                    style: {
                      background: "#fff",
                      color: void 0,
                      fontSize: "11px",
                      fontFamily: void 0,
                      fontWeight: 400,
                      cssClass: "",
                      padding: { left: 5, right: 5, top: 2, bottom: 2 },
                    },
                  },
                }),
                (this.text = {
                  x: 0,
                  y: 0,
                  text: "",
                  textAnchor: "start",
                  foreColor: void 0,
                  fontSize: "13px",
                  fontFamily: void 0,
                  fontWeight: 400,
                  appendTo: ".apexcharts-annotations",
                  backgroundColor: "transparent",
                  borderColor: "#c2c2c2",
                  borderRadius: 0,
                  borderWidth: 0,
                  paddingLeft: 4,
                  paddingRight: 4,
                  paddingTop: 2,
                  paddingBottom: 2,
                });
            }
            return (
              o(t, [
                {
                  key: "init",
                  value: function () {
                    return {
                      annotations: {
                        position: "front",
                        yaxis: [this.yAxisAnnotation],
                        xaxis: [this.xAxisAnnotation],
                        points: [this.pointAnnotation],
                        texts: [],
                        images: [],
                        shapes: [],
                      },
                      chart: {
                        animations: {
                          enabled: !0,
                          easing: "easeinout",
                          speed: 800,
                          animateGradually: { delay: 150, enabled: !0 },
                          dynamicAnimation: { enabled: !0, speed: 350 },
                        },
                        background: "transparent",
                        locales: [T],
                        defaultLocale: "en",
                        dropShadow: {
                          enabled: !1,
                          enabledOnSeries: void 0,
                          top: 2,
                          left: 2,
                          blur: 4,
                          color: "#000",
                          opacity: 0.35,
                        },
                        events: {
                          animationEnd: void 0,
                          beforeMount: void 0,
                          mounted: void 0,
                          updated: void 0,
                          click: void 0,
                          mouseMove: void 0,
                          mouseLeave: void 0,
                          legendClick: void 0,
                          markerClick: void 0,
                          selection: void 0,
                          dataPointSelection: void 0,
                          dataPointMouseEnter: void 0,
                          dataPointMouseLeave: void 0,
                          beforeZoom: void 0,
                          beforeResetZoom: void 0,
                          zoomed: void 0,
                          scrolled: void 0,
                          brushScrolled: void 0,
                        },
                        foreColor: "#373d3f",
                        fontFamily: "Helvetica, Arial, sans-serif",
                        height: "auto",
                        parentHeightOffset: 15,
                        redrawOnParentResize: !0,
                        redrawOnWindowResize: !0,
                        id: void 0,
                        group: void 0,
                        offsetX: 0,
                        offsetY: 0,
                        selection: {
                          enabled: !1,
                          type: "x",
                          fill: { color: "#24292e", opacity: 0.1 },
                          stroke: {
                            width: 1,
                            color: "#24292e",
                            opacity: 0.4,
                            dashArray: 3,
                          },
                          xaxis: { min: void 0, max: void 0 },
                          yaxis: { min: void 0, max: void 0 },
                        },
                        sparkline: { enabled: !1 },
                        brush: {
                          enabled: !1,
                          autoScaleYaxis: !0,
                          target: void 0,
                        },
                        stacked: !1,
                        stackType: "normal",
                        toolbar: {
                          show: !0,
                          offsetX: 0,
                          offsetY: 0,
                          tools: {
                            download: !0,
                            selection: !0,
                            zoom: !0,
                            zoomin: !0,
                            zoomout: !0,
                            pan: !0,
                            reset: !0,
                            customIcons: [],
                          },
                          export: {
                            csv: {
                              filename: void 0,
                              columnDelimiter: ",",
                              headerCategory: "category",
                              headerValue: "value",
                              dateFormatter: function (t) {
                                return new Date(t).toDateString();
                              },
                            },
                            png: { filename: void 0 },
                            svg: { filename: void 0 },
                          },
                          autoSelected: "zoom",
                        },
                        type: "line",
                        width: "100%",
                        zoom: {
                          enabled: !0,
                          type: "x",
                          autoScaleYaxis: !1,
                          zoomedArea: {
                            fill: { color: "#90CAF9", opacity: 0.4 },
                            stroke: {
                              color: "#0D47A1",
                              opacity: 0.4,
                              width: 1,
                            },
                          },
                        },
                      },
                      plotOptions: {
                        area: { fillTo: "origin" },
                        bar: {
                          horizontal: !1,
                          columnWidth: "70%",
                          barHeight: "70%",
                          distributed: !1,
                          borderRadius: 0,
                          rangeBarOverlap: !0,
                          rangeBarGroupRows: !1,
                          colors: {
                            ranges: [],
                            backgroundBarColors: [],
                            backgroundBarOpacity: 1,
                            backgroundBarRadius: 0,
                          },
                          dataLabels: {
                            position: "top",
                            maxItems: 100,
                            hideOverflowingLabels: !0,
                            orientation: "horizontal",
                          },
                        },
                        bubble: {
                          minBubbleRadius: void 0,
                          maxBubbleRadius: void 0,
                        },
                        candlestick: {
                          colors: { upward: "#00B746", downward: "#EF403C" },
                          wick: { useFillColor: !0 },
                        },
                        boxPlot: {
                          colors: { upper: "#00E396", lower: "#008FFB" },
                        },
                        heatmap: {
                          radius: 2,
                          enableShades: !0,
                          shadeIntensity: 0.5,
                          reverseNegativeShade: !1,
                          distributed: !1,
                          useFillColorAsStroke: !1,
                          colorScale: {
                            inverse: !1,
                            ranges: [],
                            min: void 0,
                            max: void 0,
                          },
                        },
                        treemap: {
                          enableShades: !0,
                          shadeIntensity: 0.5,
                          distributed: !1,
                          reverseNegativeShade: !1,
                          useFillColorAsStroke: !1,
                          colorScale: {
                            inverse: !1,
                            ranges: [],
                            min: void 0,
                            max: void 0,
                          },
                        },
                        radialBar: {
                          inverseOrder: !1,
                          startAngle: 0,
                          endAngle: 360,
                          offsetX: 0,
                          offsetY: 0,
                          hollow: {
                            margin: 5,
                            size: "50%",
                            background: "transparent",
                            image: void 0,
                            imageWidth: 150,
                            imageHeight: 150,
                            imageOffsetX: 0,
                            imageOffsetY: 0,
                            imageClipped: !0,
                            position: "front",
                            dropShadow: {
                              enabled: !1,
                              top: 0,
                              left: 0,
                              blur: 3,
                              color: "#000",
                              opacity: 0.5,
                            },
                          },
                          track: {
                            show: !0,
                            startAngle: void 0,
                            endAngle: void 0,
                            background: "#f2f2f2",
                            strokeWidth: "97%",
                            opacity: 1,
                            margin: 5,
                            dropShadow: {
                              enabled: !1,
                              top: 0,
                              left: 0,
                              blur: 3,
                              color: "#000",
                              opacity: 0.5,
                            },
                          },
                          dataLabels: {
                            show: !0,
                            name: {
                              show: !0,
                              fontSize: "16px",
                              fontFamily: void 0,
                              fontWeight: 600,
                              color: void 0,
                              offsetY: 0,
                              formatter: function (t) {
                                return t;
                              },
                            },
                            value: {
                              show: !0,
                              fontSize: "14px",
                              fontFamily: void 0,
                              fontWeight: 400,
                              color: void 0,
                              offsetY: 16,
                              formatter: function (t) {
                                return t + "%";
                              },
                            },
                            total: {
                              show: !1,
                              label: "Total",
                              fontSize: "16px",
                              fontWeight: 600,
                              fontFamily: void 0,
                              color: void 0,
                              formatter: function (t) {
                                return (
                                  t.globals.seriesTotals.reduce(function (
                                    t,
                                    e
                                  ) {
                                    return t + e;
                                  },
                                  0) /
                                    t.globals.series.length +
                                  "%"
                                );
                              },
                            },
                          },
                        },
                        pie: {
                          customScale: 1,
                          offsetX: 0,
                          offsetY: 0,
                          startAngle: 0,
                          endAngle: 360,
                          expandOnClick: !0,
                          dataLabels: { offset: 0, minAngleToShowLabel: 10 },
                          donut: {
                            size: "65%",
                            background: "transparent",
                            labels: {
                              show: !1,
                              name: {
                                show: !0,
                                fontSize: "16px",
                                fontFamily: void 0,
                                fontWeight: 600,
                                color: void 0,
                                offsetY: -10,
                                formatter: function (t) {
                                  return t;
                                },
                              },
                              value: {
                                show: !0,
                                fontSize: "20px",
                                fontFamily: void 0,
                                fontWeight: 400,
                                color: void 0,
                                offsetY: 10,
                                formatter: function (t) {
                                  return t;
                                },
                              },
                              total: {
                                show: !1,
                                showAlways: !1,
                                label: "Total",
                                fontSize: "16px",
                                fontWeight: 400,
                                fontFamily: void 0,
                                color: void 0,
                                formatter: function (t) {
                                  return t.globals.seriesTotals.reduce(
                                    function (t, e) {
                                      return t + e;
                                    },
                                    0
                                  );
                                },
                              },
                            },
                          },
                        },
                        polarArea: {
                          rings: { strokeWidth: 1, strokeColor: "#e8e8e8" },
                          spokes: {
                            strokeWidth: 1,
                            connectorColors: "#e8e8e8",
                          },
                        },
                        radar: {
                          size: void 0,
                          offsetX: 0,
                          offsetY: 0,
                          polygons: {
                            strokeWidth: 1,
                            strokeColors: "#e8e8e8",
                            connectorColors: "#e8e8e8",
                            fill: { colors: void 0 },
                          },
                        },
                      },
                      colors: void 0,
                      dataLabels: {
                        enabled: !0,
                        enabledOnSeries: void 0,
                        formatter: function (t) {
                          return null !== t ? t : "";
                        },
                        textAnchor: "middle",
                        distributed: !1,
                        offsetX: 0,
                        offsetY: 0,
                        style: {
                          fontSize: "12px",
                          fontFamily: void 0,
                          fontWeight: 600,
                          colors: void 0,
                        },
                        background: {
                          enabled: !0,
                          foreColor: "#fff",
                          borderRadius: 2,
                          padding: 4,
                          opacity: 0.9,
                          borderWidth: 1,
                          borderColor: "#fff",
                          dropShadow: {
                            enabled: !1,
                            top: 1,
                            left: 1,
                            blur: 1,
                            color: "#000",
                            opacity: 0.45,
                          },
                        },
                        dropShadow: {
                          enabled: !1,
                          top: 1,
                          left: 1,
                          blur: 1,
                          color: "#000",
                          opacity: 0.45,
                        },
                      },
                      fill: {
                        type: "solid",
                        colors: void 0,
                        opacity: 0.85,
                        gradient: {
                          shade: "dark",
                          type: "horizontal",
                          shadeIntensity: 0.5,
                          gradientToColors: void 0,
                          inverseColors: !0,
                          opacityFrom: 1,
                          opacityTo: 1,
                          stops: [0, 50, 100],
                          colorStops: [],
                        },
                        image: { src: [], width: void 0, height: void 0 },
                        pattern: {
                          style: "squares",
                          width: 6,
                          height: 6,
                          strokeWidth: 2,
                        },
                      },
                      forecastDataPoints: {
                        count: 0,
                        fillOpacity: 0.5,
                        strokeWidth: void 0,
                        dashArray: 4,
                      },
                      grid: {
                        show: !0,
                        borderColor: "#e0e0e0",
                        strokeDashArray: 0,
                        position: "back",
                        xaxis: { lines: { show: !1 } },
                        yaxis: { lines: { show: !0 } },
                        row: { colors: void 0, opacity: 0.5 },
                        column: { colors: void 0, opacity: 0.5 },
                        padding: { top: 0, right: 10, bottom: 0, left: 12 },
                      },
                      labels: [],
                      legend: {
                        show: !0,
                        showForSingleSeries: !1,
                        showForNullSeries: !0,
                        showForZeroSeries: !0,
                        floating: !1,
                        position: "bottom",
                        horizontalAlign: "center",
                        inverseOrder: !1,
                        fontSize: "12px",
                        fontFamily: void 0,
                        fontWeight: 400,
                        width: void 0,
                        height: void 0,
                        formatter: void 0,
                        tooltipHoverFormatter: void 0,
                        offsetX: -20,
                        offsetY: 4,
                        customLegendItems: [],
                        labels: { colors: void 0, useSeriesColors: !1 },
                        markers: {
                          width: 12,
                          height: 12,
                          strokeWidth: 0,
                          fillColors: void 0,
                          strokeColor: "#fff",
                          radius: 12,
                          customHTML: void 0,
                          offsetX: 0,
                          offsetY: 0,
                          onClick: void 0,
                        },
                        itemMargin: { horizontal: 5, vertical: 2 },
                        onItemClick: { toggleDataSeries: !0 },
                        onItemHover: { highlightDataSeries: !0 },
                      },
                      markers: {
                        discrete: [],
                        size: 0,
                        colors: void 0,
                        strokeColors: "#fff",
                        strokeWidth: 2,
                        strokeOpacity: 0.9,
                        strokeDashArray: 0,
                        fillOpacity: 1,
                        shape: "circle",
                        width: 8,
                        height: 8,
                        radius: 2,
                        offsetX: 0,
                        offsetY: 0,
                        onClick: void 0,
                        onDblClick: void 0,
                        showNullDataPoints: !0,
                        hover: { size: void 0, sizeOffset: 3 },
                      },
                      noData: {
                        text: void 0,
                        align: "center",
                        verticalAlign: "middle",
                        offsetX: 0,
                        offsetY: 0,
                        style: {
                          color: void 0,
                          fontSize: "14px",
                          fontFamily: void 0,
                        },
                      },
                      responsive: [],
                      series: void 0,
                      states: {
                        normal: { filter: { type: "none", value: 0 } },
                        hover: { filter: { type: "lighten", value: 0.1 } },
                        active: {
                          allowMultipleDataPointsSelection: !1,
                          filter: { type: "darken", value: 0.5 },
                        },
                      },
                      title: {
                        text: void 0,
                        align: "left",
                        margin: 5,
                        offsetX: 0,
                        offsetY: 0,
                        floating: !1,
                        style: {
                          fontSize: "14px",
                          fontWeight: 900,
                          fontFamily: void 0,
                          color: void 0,
                        },
                      },
                      subtitle: {
                        text: void 0,
                        align: "left",
                        margin: 5,
                        offsetX: 0,
                        offsetY: 30,
                        floating: !1,
                        style: {
                          fontSize: "12px",
                          fontWeight: 400,
                          fontFamily: void 0,
                          color: void 0,
                        },
                      },
                      stroke: {
                        show: !0,
                        curve: "smooth",
                        lineCap: "butt",
                        width: 2,
                        colors: void 0,
                        dashArray: 0,
                      },
                      tooltip: {
                        enabled: !0,
                        enabledOnSeries: void 0,
                        shared: !0,
                        followCursor: !1,
                        intersect: !1,
                        inverseOrder: !1,
                        custom: void 0,
                        fillSeriesColor: !1,
                        theme: "light",
                        style: { fontSize: "12px", fontFamily: void 0 },
                        onDatasetHover: { highlightDataSeries: !1 },
                        x: { show: !0, format: "dd MMM", formatter: void 0 },
                        y: {
                          formatter: void 0,
                          title: {
                            formatter: function (t) {
                              return t ? t + ": " : "";
                            },
                          },
                        },
                        z: { formatter: void 0, title: "Size: " },
                        marker: { show: !0, fillColors: void 0 },
                        items: { display: "flex" },
                        fixed: {
                          enabled: !1,
                          position: "topRight",
                          offsetX: 0,
                          offsetY: 0,
                        },
                      },
                      xaxis: {
                        type: "category",
                        categories: [],
                        convertedCatToNumeric: !1,
                        offsetX: 0,
                        offsetY: 0,
                        overwriteCategories: void 0,
                        labels: {
                          show: !0,
                          rotate: -45,
                          rotateAlways: !1,
                          hideOverlappingLabels: !0,
                          trim: !1,
                          minHeight: void 0,
                          maxHeight: 120,
                          showDuplicates: !0,
                          style: {
                            colors: [],
                            fontSize: "12px",
                            fontWeight: 400,
                            fontFamily: void 0,
                            cssClass: "",
                          },
                          offsetX: 0,
                          offsetY: 0,
                          format: void 0,
                          formatter: void 0,
                          datetimeUTC: !0,
                          datetimeFormatter: {
                            year: "yyyy",
                            month: "MMM 'yy",
                            day: "dd MMM",
                            hour: "HH:mm",
                            minute: "HH:mm:ss",
                            second: "HH:mm:ss",
                          },
                        },
                        axisBorder: {
                          show: !0,
                          color: "#e0e0e0",
                          width: "100%",
                          height: 1,
                          offsetX: 0,
                          offsetY: 0,
                        },
                        axisTicks: {
                          show: !0,
                          color: "#e0e0e0",
                          height: 6,
                          offsetX: 0,
                          offsetY: 0,
                        },
                        tickAmount: void 0,
                        tickPlacement: "on",
                        min: void 0,
                        max: void 0,
                        range: void 0,
                        floating: !1,
                        decimalsInFloat: void 0,
                        position: "bottom",
                        title: {
                          text: void 0,
                          offsetX: 0,
                          offsetY: 0,
                          style: {
                            color: void 0,
                            fontSize: "12px",
                            fontWeight: 900,
                            fontFamily: void 0,
                            cssClass: "",
                          },
                        },
                        crosshairs: {
                          show: !0,
                          width: 1,
                          position: "back",
                          opacity: 0.9,
                          stroke: { color: "#b6b6b6", width: 1, dashArray: 3 },
                          fill: {
                            type: "solid",
                            color: "#B1B9C4",
                            gradient: {
                              colorFrom: "#D8E3F0",
                              colorTo: "#BED1E6",
                              stops: [0, 100],
                              opacityFrom: 0.4,
                              opacityTo: 0.5,
                            },
                          },
                          dropShadow: {
                            enabled: !1,
                            left: 0,
                            top: 0,
                            blur: 1,
                            opacity: 0.4,
                          },
                        },
                        tooltip: {
                          enabled: !0,
                          offsetY: 0,
                          formatter: void 0,
                          style: { fontSize: "12px", fontFamily: void 0 },
                        },
                      },
                      yaxis: this.yAxis,
                      theme: {
                        mode: "light",
                        palette: "palette1",
                        monochrome: {
                          enabled: !1,
                          color: "#008FFB",
                          shadeTo: "light",
                          shadeIntensity: 0.65,
                        },
                      },
                    };
                  },
                },
              ]),
              t
            );
          })(),
          _ = (function () {
            function t(e) {
              s(this, t),
                (this.ctx = e),
                (this.w = e.w),
                (this.graphics = new w(this.ctx)),
                this.w.globals.isBarHorizontal && (this.invertAxis = !0),
                (this.helpers = new k(this)),
                (this.xAxisAnnotations = new S(this)),
                (this.yAxisAnnotations = new C(this)),
                (this.pointsAnnotations = new E(this)),
                this.w.globals.isBarHorizontal &&
                  this.w.config.yaxis[0].reversed &&
                  (this.inversedReversedAxis = !0),
                (this.xDivision =
                  this.w.globals.gridWidth / this.w.globals.dataPoints);
            }
            return (
              o(t, [
                {
                  key: "drawAxesAnnotations",
                  value: function () {
                    var t = this.w;
                    if (t.globals.axisCharts) {
                      for (
                        var e = this.yAxisAnnotations.drawYAxisAnnotations(),
                          i = this.xAxisAnnotations.drawXAxisAnnotations(),
                          n = this.pointsAnnotations.drawPointAnnotations(),
                          a = t.config.chart.animations.enabled,
                          s = [e, i, n],
                          r = [i.node, e.node, n.node],
                          o = 0;
                        o < 3;
                        o++
                      )
                        t.globals.dom.elGraphical.add(s[o]),
                          !a ||
                            t.globals.resized ||
                            t.globals.dataChanged ||
                            ("scatter" !== t.config.chart.type &&
                              "bubble" !== t.config.chart.type &&
                              t.globals.dataPoints > 1 &&
                              r[o].classList.add("apexcharts-element-hidden")),
                          t.globals.delayedElements.push({
                            el: r[o],
                            index: 0,
                          });
                      this.helpers.annotationsBackground();
                    }
                  },
                },
                {
                  key: "drawImageAnnos",
                  value: function () {
                    var t = this;
                    this.w.config.annotations.images.map(function (e, i) {
                      t.addImage(e, i);
                    });
                  },
                },
                {
                  key: "drawTextAnnos",
                  value: function () {
                    var t = this;
                    this.w.config.annotations.texts.map(function (e, i) {
                      t.addText(e, i);
                    });
                  },
                },
                {
                  key: "addXaxisAnnotation",
                  value: function (t, e, i) {
                    this.xAxisAnnotations.addXaxisAnnotation(t, e, i);
                  },
                },
                {
                  key: "addYaxisAnnotation",
                  value: function (t, e, i) {
                    this.yAxisAnnotations.addYaxisAnnotation(t, e, i);
                  },
                },
                {
                  key: "addPointAnnotation",
                  value: function (t, e, i) {
                    this.pointsAnnotations.addPointAnnotation(t, e, i);
                  },
                },
                {
                  key: "addText",
                  value: function (t, e) {
                    var i = t.x,
                      n = t.y,
                      a = t.text,
                      s = t.textAnchor,
                      r = t.foreColor,
                      o = t.fontSize,
                      l = t.fontFamily,
                      c = t.fontWeight,
                      h = t.cssClass,
                      d = t.backgroundColor,
                      u = t.borderWidth,
                      f = t.strokeDashArray,
                      p = t.borderRadius,
                      g = t.borderColor,
                      m = t.appendTo,
                      x = void 0 === m ? ".apexcharts-annotations" : m,
                      v = t.paddingLeft,
                      b = void 0 === v ? 4 : v,
                      y = t.paddingRight,
                      w = void 0 === y ? 4 : y,
                      k = t.paddingBottom,
                      S = void 0 === k ? 2 : k,
                      A = t.paddingTop,
                      C = void 0 === A ? 2 : A,
                      E = this.w,
                      T = this.graphics.drawText({
                        x: i,
                        y: n,
                        text: a,
                        textAnchor: s || "start",
                        fontSize: o || "12px",
                        fontWeight: c || "regular",
                        fontFamily: l || E.config.chart.fontFamily,
                        foreColor: r || E.config.chart.foreColor,
                        cssClass: h,
                      }),
                      L = E.globals.dom.baseEl.querySelector(x);
                    L && L.appendChild(T.node);
                    var _ = T.bbox();
                    if (a) {
                      var P = this.graphics.drawRect(
                        _.x - b,
                        _.y - C,
                        _.width + b + w,
                        _.height + S + C,
                        p,
                        d || "transparent",
                        1,
                        u,
                        g,
                        f
                      );
                      L.insertBefore(P.node, T.node);
                    }
                  },
                },
                {
                  key: "addImage",
                  value: function (t, e) {
                    var i = this.w,
                      n = t.path,
                      a = t.x,
                      s = void 0 === a ? 0 : a,
                      r = t.y,
                      o = void 0 === r ? 0 : r,
                      l = t.width,
                      c = void 0 === l ? 20 : l,
                      h = t.height,
                      d = void 0 === h ? 20 : h,
                      u = t.appendTo,
                      f = void 0 === u ? ".apexcharts-annotations" : u,
                      p = i.globals.dom.Paper.image(n);
                    p.size(c, d).move(s, o);
                    var g = i.globals.dom.baseEl.querySelector(f);
                    g && g.appendChild(p.node);
                  },
                },
                {
                  key: "addXaxisAnnotationExternal",
                  value: function (t, e, i) {
                    return (
                      this.addAnnotationExternal({
                        params: t,
                        pushToMemory: e,
                        context: i,
                        type: "xaxis",
                        contextMethod: i.addXaxisAnnotation,
                      }),
                      i
                    );
                  },
                },
                {
                  key: "addYaxisAnnotationExternal",
                  value: function (t, e, i) {
                    return (
                      this.addAnnotationExternal({
                        params: t,
                        pushToMemory: e,
                        context: i,
                        type: "yaxis",
                        contextMethod: i.addYaxisAnnotation,
                      }),
                      i
                    );
                  },
                },
                {
                  key: "addPointAnnotationExternal",
                  value: function (t, e, i) {
                    return (
                      void 0 === this.invertAxis &&
                        (this.invertAxis = i.w.globals.isBarHorizontal),
                      this.addAnnotationExternal({
                        params: t,
                        pushToMemory: e,
                        context: i,
                        type: "point",
                        contextMethod: i.addPointAnnotation,
                      }),
                      i
                    );
                  },
                },
                {
                  key: "addAnnotationExternal",
                  value: function (t) {
                    var e = t.params,
                      i = t.pushToMemory,
                      n = t.context,
                      a = t.type,
                      s = t.contextMethod,
                      r = n,
                      o = r.w,
                      l = o.globals.dom.baseEl.querySelector(
                        ".apexcharts-".concat(a, "-annotations")
                      ),
                      c = l.childNodes.length + 1,
                      h = new L(),
                      d = Object.assign(
                        {},
                        "xaxis" === a
                          ? h.xAxisAnnotation
                          : "yaxis" === a
                          ? h.yAxisAnnotation
                          : h.pointAnnotation
                      ),
                      u = v.extend(d, e);
                    switch (a) {
                      case "xaxis":
                        this.addXaxisAnnotation(u, l, c);
                        break;
                      case "yaxis":
                        this.addYaxisAnnotation(u, l, c);
                        break;
                      case "point":
                        this.addPointAnnotation(u, l, c);
                    }
                    var f = o.globals.dom.baseEl.querySelector(
                        ".apexcharts-"
                          .concat(a, "-annotations .apexcharts-")
                          .concat(a, "-annotation-label[rel='")
                          .concat(c, "']")
                      ),
                      p = this.helpers.addBackgroundToAnno(f, u);
                    return (
                      p && l.insertBefore(p.node, f),
                      i &&
                        o.globals.memory.methodsToExec.push({
                          context: r,
                          id: u.id ? u.id : v.randomId(),
                          method: s,
                          label: "addAnnotation",
                          params: e,
                        }),
                      n
                    );
                  },
                },
                {
                  key: "clearAnnotations",
                  value: function (t) {
                    var e = t.w,
                      i = e.globals.dom.baseEl.querySelectorAll(
                        ".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations"
                      );
                    e.globals.memory.methodsToExec.map(function (t, i) {
                      ("addText" !== t.label && "addAnnotation" !== t.label) ||
                        e.globals.memory.methodsToExec.splice(i, 1);
                    }),
                      (i = v.listToArray(i)),
                      Array.prototype.forEach.call(i, function (t) {
                        for (; t.firstChild; ) t.removeChild(t.firstChild);
                      });
                  },
                },
                {
                  key: "removeAnnotation",
                  value: function (t, e) {
                    var i = t.w,
                      n = i.globals.dom.baseEl.querySelectorAll(".".concat(e));
                    n &&
                      (i.globals.memory.methodsToExec.map(function (t, n) {
                        t.id === e &&
                          i.globals.memory.methodsToExec.splice(n, 1);
                      }),
                      Array.prototype.forEach.call(n, function (t) {
                        t.parentElement.removeChild(t);
                      }));
                  },
                },
              ]),
              t
            );
          })(),
          P = (function () {
            function t(e) {
              s(this, t),
                (this.ctx = e),
                (this.w = e.w),
                (this.opts = null),
                (this.seriesIndex = 0);
            }
            return (
              o(t, [
                {
                  key: "clippedImgArea",
                  value: function (t) {
                    var e = this.w,
                      i = e.config,
                      n = parseInt(e.globals.gridWidth, 10),
                      a = parseInt(e.globals.gridHeight, 10),
                      s = n > a ? n : a,
                      r = t.image,
                      o = 0,
                      l = 0;
                    void 0 === t.width && void 0 === t.height
                      ? void 0 !== i.fill.image.width &&
                        void 0 !== i.fill.image.height
                        ? ((o = i.fill.image.width + 1),
                          (l = i.fill.image.height))
                        : ((o = s + 1), (l = s))
                      : ((o = t.width), (l = t.height));
                    var c = document.createElementNS(
                      e.globals.SVGNS,
                      "pattern"
                    );
                    w.setAttrs(c, {
                      id: t.patternID,
                      patternUnits: t.patternUnits
                        ? t.patternUnits
                        : "userSpaceOnUse",
                      width: o + "px",
                      height: l + "px",
                    });
                    var h = document.createElementNS(e.globals.SVGNS, "image");
                    c.appendChild(h),
                      h.setAttributeNS(window.SVG.xlink, "href", r),
                      w.setAttrs(h, {
                        x: 0,
                        y: 0,
                        preserveAspectRatio: "none",
                        width: o + "px",
                        height: l + "px",
                      }),
                      (h.style.opacity = t.opacity),
                      e.globals.dom.elDefs.node.appendChild(c);
                  },
                },
                {
                  key: "getSeriesIndex",
                  value: function (t) {
                    var e = this.w;
                    return (
                      (("bar" === e.config.chart.type ||
                        "rangeBar" === e.config.chart.type) &&
                        e.config.plotOptions.bar.distributed) ||
                      "heatmap" === e.config.chart.type ||
                      "treemap" === e.config.chart.type
                        ? (this.seriesIndex = t.seriesNumber)
                        : (this.seriesIndex =
                            t.seriesNumber % e.globals.series.length),
                      this.seriesIndex
                    );
                  },
                },
                {
                  key: "fillPath",
                  value: function (t) {
                    var e = this.w;
                    this.opts = t;
                    var i,
                      n,
                      a,
                      s = this.w.config;
                    this.seriesIndex = this.getSeriesIndex(t);
                    var r = this.getFillColors()[this.seriesIndex];
                    void 0 !== e.globals.seriesColors[this.seriesIndex] &&
                      (r = e.globals.seriesColors[this.seriesIndex]),
                      "function" == typeof r &&
                        (r = r({
                          seriesIndex: this.seriesIndex,
                          dataPointIndex: t.dataPointIndex,
                          value: t.value,
                          w: e,
                        }));
                    var o = this.getFillType(this.seriesIndex),
                      l = Array.isArray(s.fill.opacity)
                        ? s.fill.opacity[this.seriesIndex]
                        : s.fill.opacity;
                    t.color && (r = t.color);
                    var c = r;
                    if (
                      (-1 === r.indexOf("rgb")
                        ? r.length < 9 && (c = v.hexToRgba(r, l))
                        : r.indexOf("rgba") > -1 &&
                          (l = v.getOpacityFromRGBA(r)),
                      t.opacity && (l = t.opacity),
                      "pattern" === o &&
                        (n = this.handlePatternFill(n, r, l, c)),
                      "gradient" === o &&
                        (a = this.handleGradientFill(r, l, this.seriesIndex)),
                      "image" === o)
                    ) {
                      var h = s.fill.image.src,
                        d = t.patternID ? t.patternID : "";
                      this.clippedImgArea({
                        opacity: l,
                        image: Array.isArray(h)
                          ? t.seriesNumber < h.length
                            ? h[t.seriesNumber]
                            : h[0]
                          : h,
                        width: t.width ? t.width : void 0,
                        height: t.height ? t.height : void 0,
                        patternUnits: t.patternUnits,
                        patternID: "pattern"
                          .concat(e.globals.cuid)
                          .concat(t.seriesNumber + 1)
                          .concat(d),
                      }),
                        (i = "url(#pattern"
                          .concat(e.globals.cuid)
                          .concat(t.seriesNumber + 1)
                          .concat(d, ")"));
                    } else i = "gradient" === o ? a : "pattern" === o ? n : c;
                    return t.solid && (i = c), i;
                  },
                },
                {
                  key: "getFillType",
                  value: function (t) {
                    var e = this.w;
                    return Array.isArray(e.config.fill.type)
                      ? e.config.fill.type[t]
                      : e.config.fill.type;
                  },
                },
                {
                  key: "getFillColors",
                  value: function () {
                    var t = this.w,
                      e = t.config,
                      i = this.opts,
                      n = [];
                    return (
                      t.globals.comboCharts
                        ? "line" === t.config.series[this.seriesIndex].type
                          ? Array.isArray(t.globals.stroke.colors)
                            ? (n = t.globals.stroke.colors)
                            : n.push(t.globals.stroke.colors)
                          : Array.isArray(t.globals.fill.colors)
                          ? (n = t.globals.fill.colors)
                          : n.push(t.globals.fill.colors)
                        : "line" === e.chart.type
                        ? Array.isArray(t.globals.stroke.colors)
                          ? (n = t.globals.stroke.colors)
                          : n.push(t.globals.stroke.colors)
                        : Array.isArray(t.globals.fill.colors)
                        ? (n = t.globals.fill.colors)
                        : n.push(t.globals.fill.colors),
                      void 0 !== i.fillColors &&
                        ((n = []),
                        Array.isArray(i.fillColors)
                          ? (n = i.fillColors.slice())
                          : n.push(i.fillColors)),
                      n
                    );
                  },
                },
                {
                  key: "handlePatternFill",
                  value: function (t, e, i, n) {
                    var a = this.w.config,
                      s = this.opts,
                      r = new w(this.ctx),
                      o =
                        void 0 === a.fill.pattern.strokeWidth
                          ? Array.isArray(a.stroke.width)
                            ? a.stroke.width[this.seriesIndex]
                            : a.stroke.width
                          : Array.isArray(a.fill.pattern.strokeWidth)
                          ? a.fill.pattern.strokeWidth[this.seriesIndex]
                          : a.fill.pattern.strokeWidth,
                      l = e;
                    return Array.isArray(a.fill.pattern.style)
                      ? void 0 !== a.fill.pattern.style[s.seriesNumber]
                        ? r.drawPattern(
                            a.fill.pattern.style[s.seriesNumber],
                            a.fill.pattern.width,
                            a.fill.pattern.height,
                            l,
                            o,
                            i
                          )
                        : n
                      : r.drawPattern(
                          a.fill.pattern.style,
                          a.fill.pattern.width,
                          a.fill.pattern.height,
                          l,
                          o,
                          i
                        );
                  },
                },
                {
                  key: "handleGradientFill",
                  value: function (t, e, i) {
                    var n,
                      a = this.w.config,
                      s = this.opts,
                      r = new w(this.ctx),
                      o = new v(),
                      l = a.fill.gradient.type,
                      c = t,
                      h =
                        void 0 === a.fill.gradient.opacityFrom
                          ? e
                          : Array.isArray(a.fill.gradient.opacityFrom)
                          ? a.fill.gradient.opacityFrom[i]
                          : a.fill.gradient.opacityFrom;
                    c.indexOf("rgba") > -1 && (h = v.getOpacityFromRGBA(c));
                    var d =
                      void 0 === a.fill.gradient.opacityTo
                        ? e
                        : Array.isArray(a.fill.gradient.opacityTo)
                        ? a.fill.gradient.opacityTo[i]
                        : a.fill.gradient.opacityTo;
                    if (
                      void 0 === a.fill.gradient.gradientToColors ||
                      0 === a.fill.gradient.gradientToColors.length
                    )
                      n =
                        "dark" === a.fill.gradient.shade
                          ? o.shadeColor(
                              -1 * parseFloat(a.fill.gradient.shadeIntensity),
                              t.indexOf("rgb") > -1 ? v.rgb2hex(t) : t
                            )
                          : o.shadeColor(
                              parseFloat(a.fill.gradient.shadeIntensity),
                              t.indexOf("rgb") > -1 ? v.rgb2hex(t) : t
                            );
                    else if (a.fill.gradient.gradientToColors[s.seriesNumber]) {
                      var u = a.fill.gradient.gradientToColors[s.seriesNumber];
                      (n = u),
                        u.indexOf("rgba") > -1 && (d = v.getOpacityFromRGBA(u));
                    } else n = t;
                    if (a.fill.gradient.inverseColors) {
                      var f = c;
                      (c = n), (n = f);
                    }
                    return (
                      c.indexOf("rgb") > -1 && (c = v.rgb2hex(c)),
                      n.indexOf("rgb") > -1 && (n = v.rgb2hex(n)),
                      r.drawGradient(
                        l,
                        c,
                        n,
                        h,
                        d,
                        s.size,
                        a.fill.gradient.stops,
                        a.fill.gradient.colorStops,
                        i
                      )
                    );
                  },
                },
              ]),
              t
            );
          })(),
          I = (function () {
            function t(e, i) {
              s(this, t), (this.ctx = e), (this.w = e.w);
            }
            return (
              o(t, [
                {
                  key: "setGlobalMarkerSize",
                  value: function () {
                    var t = this.w;
                    if (
                      ((t.globals.markers.size = Array.isArray(
                        t.config.markers.size
                      )
                        ? t.config.markers.size
                        : [t.config.markers.size]),
                      t.globals.markers.size.length > 0)
                    ) {
                      if (
                        t.globals.markers.size.length <
                        t.globals.series.length + 1
                      )
                        for (var e = 0; e <= t.globals.series.length; e++)
                          void 0 === t.globals.markers.size[e] &&
                            t.globals.markers.size.push(
                              t.globals.markers.size[0]
                            );
                    } else
                      t.globals.markers.size = t.config.series.map(function (
                        e
                      ) {
                        return t.config.markers.size;
                      });
                  },
                },
                {
                  key: "plotChartMarkers",
                  value: function (t, e, i, n) {
                    var a,
                      s =
                        arguments.length > 4 &&
                        void 0 !== arguments[4] &&
                        arguments[4],
                      r = this.w,
                      o = e,
                      l = t,
                      c = null,
                      h = new w(this.ctx);
                    if (
                      ((r.globals.markers.size[e] > 0 || s) &&
                        (c = h.group({
                          class: s ? "" : "apexcharts-series-markers",
                        })).attr(
                          "clip-path",
                          "url(#gridRectMarkerMask".concat(r.globals.cuid, ")")
                        ),
                      Array.isArray(l.x))
                    )
                      for (var d = 0; d < l.x.length; d++) {
                        var u = i;
                        1 === i && 0 === d && (u = 0),
                          1 === i && 1 === d && (u = 1);
                        var f = "apexcharts-marker";
                        ("line" !== r.config.chart.type &&
                          "area" !== r.config.chart.type) ||
                          r.globals.comboCharts ||
                          r.config.tooltip.intersect ||
                          (f += " no-pointer-events");
                        var p = Array.isArray(r.config.markers.size)
                          ? r.globals.markers.size[e] > 0
                          : r.config.markers.size > 0;
                        if (p || s) {
                          v.isNumber(l.y[d])
                            ? (f += " w".concat(v.randomId()))
                            : (f = "apexcharts-nullpoint");
                          var g = this.getMarkerConfig({
                            cssClass: f,
                            seriesIndex: e,
                            dataPointIndex: u,
                          });
                          r.config.series[o].data[u] &&
                            (r.config.series[o].data[u].fillColor &&
                              (g.pointFillColor =
                                r.config.series[o].data[u].fillColor),
                            r.config.series[o].data[u].strokeColor &&
                              (g.pointStrokeColor =
                                r.config.series[o].data[u].strokeColor)),
                            n && (g.pSize = n),
                            (a = h.drawMarker(l.x[d], l.y[d], g)).attr(
                              "rel",
                              u
                            ),
                            a.attr("j", u),
                            a.attr("index", e),
                            a.node.setAttribute("default-marker-size", g.pSize);
                          var m = new y(this.ctx);
                          m.setSelectionFilter(a, e, u),
                            this.addEvents(a),
                            c && c.add(a);
                        } else
                          void 0 === r.globals.pointsArray[e] &&
                            (r.globals.pointsArray[e] = []),
                            r.globals.pointsArray[e].push([l.x[d], l.y[d]]);
                      }
                    return c;
                  },
                },
                {
                  key: "getMarkerConfig",
                  value: function (t) {
                    var e = t.cssClass,
                      i = t.seriesIndex,
                      n = t.dataPointIndex,
                      a = void 0 === n ? null : n,
                      s = t.finishRadius,
                      r = void 0 === s ? null : s,
                      o = this.w,
                      l = this.getMarkerStyle(i),
                      c = o.globals.markers.size[i],
                      h = o.config.markers;
                    return (
                      null !== a &&
                        h.discrete.length &&
                        h.discrete.map(function (t) {
                          t.seriesIndex === i &&
                            t.dataPointIndex === a &&
                            ((l.pointStrokeColor = t.strokeColor),
                            (l.pointFillColor = t.fillColor),
                            (c = t.size),
                            (l.pointShape = t.shape));
                        }),
                      {
                        pSize: null === r ? c : r,
                        pRadius: h.radius,
                        width: Array.isArray(h.width) ? h.width[i] : h.width,
                        height: Array.isArray(h.height)
                          ? h.height[i]
                          : h.height,
                        pointStrokeWidth: Array.isArray(h.strokeWidth)
                          ? h.strokeWidth[i]
                          : h.strokeWidth,
                        pointStrokeColor: l.pointStrokeColor,
                        pointFillColor: l.pointFillColor,
                        shape:
                          l.pointShape ||
                          (Array.isArray(h.shape) ? h.shape[i] : h.shape),
                        class: e,
                        pointStrokeOpacity: Array.isArray(h.strokeOpacity)
                          ? h.strokeOpacity[i]
                          : h.strokeOpacity,
                        pointStrokeDashArray: Array.isArray(h.strokeDashArray)
                          ? h.strokeDashArray[i]
                          : h.strokeDashArray,
                        pointFillOpacity: Array.isArray(h.fillOpacity)
                          ? h.fillOpacity[i]
                          : h.fillOpacity,
                        seriesIndex: i,
                      }
                    );
                  },
                },
                {
                  key: "addEvents",
                  value: function (t) {
                    var e = this.w,
                      i = new w(this.ctx);
                    t.node.addEventListener(
                      "mouseenter",
                      i.pathMouseEnter.bind(this.ctx, t)
                    ),
                      t.node.addEventListener(
                        "mouseleave",
                        i.pathMouseLeave.bind(this.ctx, t)
                      ),
                      t.node.addEventListener(
                        "mousedown",
                        i.pathMouseDown.bind(this.ctx, t)
                      ),
                      t.node.addEventListener(
                        "click",
                        e.config.markers.onClick
                      ),
                      t.node.addEventListener(
                        "dblclick",
                        e.config.markers.onDblClick
                      ),
                      t.node.addEventListener(
                        "touchstart",
                        i.pathMouseDown.bind(this.ctx, t),
                        { passive: !0 }
                      );
                  },
                },
                {
                  key: "getMarkerStyle",
                  value: function (t) {
                    var e = this.w,
                      i = e.globals.markers.colors,
                      n =
                        e.config.markers.strokeColor ||
                        e.config.markers.strokeColors;
                    return {
                      pointStrokeColor: Array.isArray(n) ? n[t] : n,
                      pointFillColor: Array.isArray(i) ? i[t] : i,
                    };
                  },
                },
              ]),
              t
            );
          })(),
          M = (function () {
            function t(e) {
              s(this, t),
                (this.ctx = e),
                (this.w = e.w),
                (this.initialAnim = this.w.config.chart.animations.enabled),
                (this.dynamicAnim =
                  this.initialAnim &&
                  this.w.config.chart.animations.dynamicAnimation.enabled);
            }
            return (
              o(t, [
                {
                  key: "draw",
                  value: function (t, e, i) {
                    var n = this.w,
                      a = new w(this.ctx),
                      s = i.realIndex,
                      r = i.pointsPos,
                      o = i.zRatio,
                      l = i.elParent,
                      c = a.group({
                        class:
                          "apexcharts-series-markers apexcharts-series-".concat(
                            n.config.chart.type
                          ),
                      });
                    if (
                      (c.attr(
                        "clip-path",
                        "url(#gridRectMarkerMask".concat(n.globals.cuid, ")")
                      ),
                      Array.isArray(r.x))
                    )
                      for (var h = 0; h < r.x.length; h++) {
                        var d = e + 1,
                          u = !0;
                        0 === e && 0 === h && (d = 0),
                          0 === e && 1 === h && (d = 1);
                        var f = 0,
                          p = n.globals.markers.size[s];
                        if (o !== 1 / 0) {
                          p = n.globals.seriesZ[s][d] / o;
                          var g = n.config.plotOptions.bubble;
                          g.minBubbleRadius &&
                            p < g.minBubbleRadius &&
                            (p = g.minBubbleRadius),
                            g.maxBubbleRadius &&
                              p > g.maxBubbleRadius &&
                              (p = g.maxBubbleRadius);
                        }
                        n.config.chart.animations.enabled || (f = p);
                        var m = r.x[h],
                          x = r.y[h];
                        if (
                          ((f = f || 0),
                          (null !== x && void 0 !== n.globals.series[s][d]) ||
                            (u = !1),
                          u)
                        ) {
                          var v = this.drawPoint(m, x, f, p, s, d, e);
                          c.add(v);
                        }
                        l.add(c);
                      }
                  },
                },
                {
                  key: "drawPoint",
                  value: function (t, e, i, n, a, s, r) {
                    var o = this.w,
                      l = a,
                      c = new b(this.ctx),
                      h = new y(this.ctx),
                      d = new P(this.ctx),
                      u = new I(this.ctx),
                      f = new w(this.ctx),
                      p = u.getMarkerConfig({
                        cssClass: "apexcharts-marker",
                        seriesIndex: l,
                        dataPointIndex: s,
                        finishRadius:
                          "bubble" === o.config.chart.type ||
                          (o.globals.comboCharts &&
                            o.config.series[a] &&
                            "bubble" === o.config.series[a].type)
                            ? n
                            : null,
                      });
                    n = p.pSize;
                    var g,
                      m = d.fillPath({
                        seriesNumber: a,
                        dataPointIndex: s,
                        color: p.pointFillColor,
                        patternUnits: "objectBoundingBox",
                        value: o.globals.series[a][r],
                      });
                    if (
                      ("circle" === p.shape
                        ? (g = f.drawCircle(i))
                        : ("square" !== p.shape && "rect" !== p.shape) ||
                          (g = f.drawRect(
                            0,
                            0,
                            p.width - p.pointStrokeWidth / 2,
                            p.height - p.pointStrokeWidth / 2,
                            p.pRadius
                          )),
                      o.config.series[l].data[s] &&
                        o.config.series[l].data[s].fillColor &&
                        (m = o.config.series[l].data[s].fillColor),
                      g.attr({
                        x: t - p.width / 2 - p.pointStrokeWidth / 2,
                        y: e - p.height / 2 - p.pointStrokeWidth / 2,
                        cx: t,
                        cy: e,
                        fill: m,
                        "fill-opacity": p.pointFillOpacity,
                        stroke: p.pointStrokeColor,
                        r: n,
                        "stroke-width": p.pointStrokeWidth,
                        "stroke-dasharray": p.pointStrokeDashArray,
                        "stroke-opacity": p.pointStrokeOpacity,
                      }),
                      o.config.chart.dropShadow.enabled)
                    ) {
                      var x = o.config.chart.dropShadow;
                      h.dropShadow(g, x, a);
                    }
                    if (
                      !this.initialAnim ||
                      o.globals.dataChanged ||
                      o.globals.resized
                    )
                      o.globals.animationEnded = !0;
                    else {
                      var v = o.config.chart.animations.speed;
                      c.animateMarker(
                        g,
                        0,
                        "circle" === p.shape
                          ? n
                          : { width: p.width, height: p.height },
                        v,
                        o.globals.easing,
                        function () {
                          window.setTimeout(function () {
                            c.animationCompleted(g);
                          }, 100);
                        }
                      );
                    }
                    if (o.globals.dataChanged && "circle" === p.shape)
                      if (this.dynamicAnim) {
                        var k,
                          S,
                          A,
                          C,
                          E = o.config.chart.animations.dynamicAnimation.speed;
                        null !=
                          (C =
                            o.globals.previousPaths[a] &&
                            o.globals.previousPaths[a][r]) &&
                          ((k = C.x),
                          (S = C.y),
                          (A = void 0 !== C.r ? C.r : n));
                        for (
                          var T = 0;
                          T < o.globals.collapsedSeries.length;
                          T++
                        )
                          o.globals.collapsedSeries[T].index === a &&
                            ((E = 1), (n = 0));
                        0 === t && 0 === e && (n = 0),
                          c.animateCircle(
                            g,
                            { cx: k, cy: S, r: A },
                            { cx: t, cy: e, r: n },
                            E,
                            o.globals.easing
                          );
                      } else g.attr({ r: n });
                    return (
                      g.attr({
                        rel: s,
                        j: s,
                        index: a,
                        "default-marker-size": n,
                      }),
                      h.setSelectionFilter(g, a, s),
                      u.addEvents(g),
                      g.node.classList.add("apexcharts-marker"),
                      g
                    );
                  },
                },
                {
                  key: "centerTextInBubble",
                  value: function (t) {
                    var e = this.w;
                    return {
                      y: (t +=
                        parseInt(e.config.dataLabels.style.fontSize, 10) / 4),
                    };
                  },
                },
              ]),
              t
            );
          })(),
          N = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.w = e.w);
            }
            return (
              o(t, [
                {
                  key: "dataLabelsCorrection",
                  value: function (t, e, i, n, a, s, r) {
                    var o = this.w,
                      l = !1,
                      c = new w(this.ctx).getTextRects(i, r),
                      h = c.width,
                      d = c.height;
                    e < 0 && (e = 0),
                      e > o.globals.gridHeight + d &&
                        (e = o.globals.gridHeight + d / 2),
                      void 0 === o.globals.dataLabelsRects[n] &&
                        (o.globals.dataLabelsRects[n] = []),
                      o.globals.dataLabelsRects[n].push({
                        x: t,
                        y: e,
                        width: h,
                        height: d,
                      });
                    var u = o.globals.dataLabelsRects[n].length - 2,
                      f =
                        void 0 !== o.globals.lastDrawnDataLabelsIndexes[n]
                          ? o.globals.lastDrawnDataLabelsIndexes[n][
                              o.globals.lastDrawnDataLabelsIndexes[n].length - 1
                            ]
                          : 0;
                    if (void 0 !== o.globals.dataLabelsRects[n][u]) {
                      var p = o.globals.dataLabelsRects[n][f];
                      (t > p.x + p.width + 2 ||
                        e > p.y + p.height + 2 ||
                        t + h < p.x) &&
                        (l = !0);
                    }
                    return (
                      (0 === a || s) && (l = !0),
                      { x: t, y: e, textRects: c, drawnextLabel: l }
                    );
                  },
                },
                {
                  key: "drawDataLabel",
                  value: function (t, e, i) {
                    var n = this,
                      a =
                        arguments.length > 4 && void 0 !== arguments[4]
                          ? arguments[4]
                          : 2,
                      s = this.w,
                      r = new w(this.ctx),
                      o = s.config.dataLabels,
                      l = 0,
                      c = 0,
                      h = i,
                      d = null;
                    if (!o.enabled || !Array.isArray(t.x)) return d;
                    d = r.group({ class: "apexcharts-data-labels" });
                    for (var u = 0; u < t.x.length; u++)
                      if (
                        ((l = t.x[u] + o.offsetX),
                        (c = t.y[u] + o.offsetY + a),
                        !isNaN(l))
                      ) {
                        1 === i && 0 === u && (h = 0),
                          1 === i && 1 === u && (h = 1);
                        var f = s.globals.series[e][h],
                          p = "",
                          g = function (t) {
                            return s.config.dataLabels.formatter(t, {
                              ctx: n.ctx,
                              seriesIndex: e,
                              dataPointIndex: h,
                              w: s,
                            });
                          };
                        if ("bubble" === s.config.chart.type) {
                          (p = g((f = s.globals.seriesZ[e][h]))), (c = t.y[u]);
                          var m = new M(this.ctx),
                            x = m.centerTextInBubble(c, e, h);
                          c = x.y;
                        } else void 0 !== f && (p = g(f));
                        this.plotDataLabelsText({
                          x: l,
                          y: c,
                          text: p,
                          i: e,
                          j: h,
                          parent: d,
                          offsetCorrection: !0,
                          dataLabelsConfig: s.config.dataLabels,
                        });
                      }
                    return d;
                  },
                },
                {
                  key: "plotDataLabelsText",
                  value: function (t) {
                    var e = this.w,
                      i = new w(this.ctx),
                      n = t.x,
                      a = t.y,
                      s = t.i,
                      r = t.j,
                      o = t.text,
                      l = t.textAnchor,
                      c = t.fontSize,
                      h = t.parent,
                      d = t.dataLabelsConfig,
                      u = t.color,
                      f = t.alwaysDrawDataLabel,
                      p = t.offsetCorrection;
                    if (
                      !(
                        Array.isArray(e.config.dataLabels.enabledOnSeries) &&
                        e.config.dataLabels.enabledOnSeries.indexOf(s) < 0
                      )
                    ) {
                      var g = { x: n, y: a, drawnextLabel: !0 };
                      p &&
                        (g = this.dataLabelsCorrection(
                          n,
                          a,
                          o,
                          s,
                          r,
                          f,
                          parseInt(d.style.fontSize, 10)
                        )),
                        e.globals.zoomed || ((n = g.x), (a = g.y)),
                        g.textRects &&
                          (n < -10 - g.textRects.width ||
                            n > e.globals.gridWidth + g.textRects.width + 10) &&
                          (o = "");
                      var m = e.globals.dataLabels.style.colors[s];
                      ((("bar" === e.config.chart.type ||
                        "rangeBar" === e.config.chart.type) &&
                        e.config.plotOptions.bar.distributed) ||
                        e.config.dataLabels.distributed) &&
                        (m = e.globals.dataLabels.style.colors[r]),
                        "function" == typeof m &&
                          (m = m({
                            series: e.globals.series,
                            seriesIndex: s,
                            dataPointIndex: r,
                            w: e,
                          })),
                        u && (m = u);
                      var x = d.offsetX,
                        v = d.offsetY;
                      if (
                        (("bar" !== e.config.chart.type &&
                          "rangeBar" !== e.config.chart.type) ||
                          ((x = 0), (v = 0)),
                        g.drawnextLabel)
                      ) {
                        var b = i.drawText({
                          width: 100,
                          height: parseInt(d.style.fontSize, 10),
                          x: n + x,
                          y: a + v,
                          foreColor: m,
                          textAnchor: l || d.textAnchor,
                          text: o,
                          fontSize: c || d.style.fontSize,
                          fontFamily: d.style.fontFamily,
                          fontWeight: d.style.fontWeight || "normal",
                        });
                        if (
                          (b.attr({
                            class: "apexcharts-datalabel",
                            cx: n,
                            cy: a,
                          }),
                          d.dropShadow.enabled)
                        ) {
                          var k = d.dropShadow;
                          new y(this.ctx).dropShadow(b, k);
                        }
                        h.add(b),
                          void 0 === e.globals.lastDrawnDataLabelsIndexes[s] &&
                            (e.globals.lastDrawnDataLabelsIndexes[s] = []),
                          e.globals.lastDrawnDataLabelsIndexes[s].push(r);
                      }
                    }
                  },
                },
                {
                  key: "addBackgroundToDataLabel",
                  value: function (t, e) {
                    var i = this.w,
                      n = i.config.dataLabels.background,
                      a = n.padding,
                      s = n.padding / 2,
                      r = e.width,
                      o = e.height,
                      l = new w(this.ctx).drawRect(
                        e.x - a,
                        e.y - s / 2,
                        r + 2 * a,
                        o + s,
                        n.borderRadius,
                        "transparent" === i.config.chart.background
                          ? "#fff"
                          : i.config.chart.background,
                        n.opacity,
                        n.borderWidth,
                        n.borderColor
                      );
                    return (
                      n.dropShadow.enabled &&
                        new y(this.ctx).dropShadow(l, n.dropShadow),
                      l
                    );
                  },
                },
                {
                  key: "dataLabelsBackground",
                  value: function () {
                    var t = this.w;
                    if ("bubble" !== t.config.chart.type)
                      for (
                        var e = t.globals.dom.baseEl.querySelectorAll(
                            ".apexcharts-datalabels text"
                          ),
                          i = 0;
                        i < e.length;
                        i++
                      ) {
                        var n = e[i],
                          a = n.getBBox(),
                          s = null;
                        if (
                          (a.width &&
                            a.height &&
                            (s = this.addBackgroundToDataLabel(n, a)),
                          s)
                        ) {
                          n.parentNode.insertBefore(s.node, n);
                          var r = n.getAttribute("fill");
                          !t.config.chart.animations.enabled ||
                          t.globals.resized ||
                          t.globals.dataChanged
                            ? s.attr({ fill: r })
                            : s.animate().attr({ fill: r }),
                            n.setAttribute(
                              "fill",
                              t.config.dataLabels.background.foreColor
                            );
                        }
                      }
                  },
                },
                {
                  key: "bringForward",
                  value: function () {
                    for (
                      var t = this.w,
                        e = t.globals.dom.baseEl.querySelectorAll(
                          ".apexcharts-datalabels"
                        ),
                        i = t.globals.dom.baseEl.querySelector(
                          ".apexcharts-plot-series:last-child"
                        ),
                        n = 0;
                      n < e.length;
                      n++
                    )
                      i && i.insertBefore(e[n], i.nextSibling);
                  },
                },
              ]),
              t
            );
          })(),
          D = (function () {
            function t(e) {
              s(this, t), (this.w = e.w), (this.barCtx = e);
            }
            return (
              o(t, [
                {
                  key: "handleBarDataLabels",
                  value: function (t) {
                    var e = t.x,
                      i = t.y,
                      n = t.y1,
                      a = t.y2,
                      s = t.i,
                      r = t.j,
                      o = t.realIndex,
                      l = t.series,
                      c = t.barHeight,
                      h = t.barWidth,
                      d = t.barYPosition,
                      u = t.visibleSeries,
                      f = t.renderedPath,
                      p = this.w,
                      g = new w(this.barCtx.ctx),
                      m = Array.isArray(this.barCtx.strokeWidth)
                        ? this.barCtx.strokeWidth[o]
                        : this.barCtx.strokeWidth,
                      x = e + parseFloat(h * u),
                      v = i + parseFloat(c * u);
                    p.globals.isXNumeric &&
                      !p.globals.isBarHorizontal &&
                      ((x = e + parseFloat(h * (u + 1))),
                      (v = i + parseFloat(c * (u + 1)) - m));
                    var b,
                      y = e,
                      k = i,
                      S = p.config.dataLabels,
                      A = this.barCtx.barOptions.dataLabels;
                    void 0 !== d &&
                      this.barCtx.isRangeBar &&
                      ((v = d), (k = d));
                    var C = S.offsetX,
                      E = S.offsetY,
                      T = { width: 0, height: 0 };
                    if (p.config.dataLabels.enabled) {
                      var L = this.barCtx.series[s][r];
                      T = g.getTextRects(
                        p.globals.yLabelFormatters[0](L),
                        parseFloat(S.style.fontSize)
                      );
                    }
                    var _ = {
                      x: e,
                      y: i,
                      i: s,
                      j: r,
                      renderedPath: f,
                      bcx: x,
                      bcy: v,
                      barHeight: c,
                      barWidth: h,
                      textRects: T,
                      strokeWidth: m,
                      dataLabelsX: y,
                      dataLabelsY: k,
                      barDataLabelsConfig: A,
                      offX: C,
                      offY: E,
                    };
                    return (
                      (b = this.barCtx.isHorizontal
                        ? this.calculateBarsDataLabelsPosition(_)
                        : this.calculateColumnsDataLabelsPosition(_)),
                      f.attr({
                        cy: b.bcy,
                        cx: b.bcx,
                        j: r,
                        val: l[s][r],
                        barHeight: c,
                        barWidth: h,
                      }),
                      this.drawCalculatedDataLabels({
                        x: b.dataLabelsX,
                        y: b.dataLabelsY,
                        val: this.barCtx.isRangeBar ? [n, a] : l[s][r],
                        i: o,
                        j: r,
                        barWidth: h,
                        barHeight: c,
                        textRects: T,
                        dataLabelsConfig: S,
                      })
                    );
                  },
                },
                {
                  key: "calculateColumnsDataLabelsPosition",
                  value: function (t) {
                    var e,
                      i = this.w,
                      n = t.i,
                      a = t.j,
                      s = t.y,
                      r = t.bcx,
                      o = t.barWidth,
                      l = t.barHeight,
                      c = t.textRects,
                      h = t.dataLabelsY,
                      d = t.barDataLabelsConfig,
                      u = t.strokeWidth,
                      f = t.offX,
                      p = t.offY;
                    l = Math.abs(l);
                    var g =
                      "vertical" ===
                      i.config.plotOptions.bar.dataLabels.orientation;
                    r -= u / 2;
                    var m = i.globals.gridWidth / i.globals.dataPoints;
                    (e = i.globals.isXNumeric
                      ? r - o / 2 + f
                      : r - m + o / 2 + f),
                      g && (e = e + c.height / 2 - u / 2 - 2);
                    var x = this.barCtx.series[n][a] < 0,
                      v = s;
                    switch (
                      (this.barCtx.isReversed &&
                        ((v = s - l + (x ? 2 * l : 0)), (s -= l)),
                      d.position)
                    ) {
                      case "center":
                        h = g
                          ? x
                            ? v + l / 2 + p
                            : v + l / 2 - p
                          : x
                          ? v - l / 2 + c.height / 2 + p
                          : v + l / 2 + c.height / 2 - p;
                        break;
                      case "bottom":
                        h = g
                          ? x
                            ? v + l + p
                            : v + l - p
                          : x
                          ? v - l + c.height + u + p
                          : v + l - c.height / 2 + u - p;
                        break;
                      case "top":
                        h = g
                          ? x
                            ? v + p
                            : v - p
                          : x
                          ? v - c.height / 2 - p
                          : v + c.height + p;
                    }
                    return (
                      i.config.chart.stacked ||
                        (h < 0
                          ? (h = 0 + u)
                          : h + c.height / 3 > i.globals.gridHeight &&
                            (h = i.globals.gridHeight - u)),
                      { bcx: r, bcy: s, dataLabelsX: e, dataLabelsY: h }
                    );
                  },
                },
                {
                  key: "calculateBarsDataLabelsPosition",
                  value: function (t) {
                    var e = this.w,
                      i = t.x,
                      n = t.i,
                      a = t.j,
                      s = t.bcy,
                      r = t.barHeight,
                      o = t.barWidth,
                      l = t.textRects,
                      c = t.dataLabelsX,
                      h = t.strokeWidth,
                      d = t.barDataLabelsConfig,
                      u = t.offX,
                      f = t.offY,
                      p = e.globals.gridHeight / e.globals.dataPoints;
                    o = Math.abs(o);
                    var g =
                        s -
                        (this.barCtx.isRangeBar ? 0 : p) +
                        r / 2 +
                        l.height / 2 +
                        f -
                        3,
                      m = this.barCtx.series[n][a] < 0,
                      x = i;
                    switch (
                      (this.barCtx.isReversed &&
                        ((x = i + o - (m ? 2 * o : 0)),
                        (i = e.globals.gridWidth - o)),
                      d.position)
                    ) {
                      case "center":
                        c = m
                          ? x + o / 2 - u
                          : Math.max(l.width / 2, x - o / 2) + u;
                        break;
                      case "bottom":
                        c = m
                          ? x + o - h - Math.round(l.width / 2) - u
                          : x - o + h + Math.round(l.width / 2) + u;
                        break;
                      case "top":
                        c = m
                          ? x - h + Math.round(l.width / 2) - u
                          : x - h - Math.round(l.width / 2) + u;
                    }
                    return (
                      e.config.chart.stacked ||
                        (c < 0
                          ? (c = c + l.width + h)
                          : c + l.width / 2 > e.globals.gridWidth &&
                            (c = e.globals.gridWidth - l.width - h)),
                      { bcx: i, bcy: s, dataLabelsX: c, dataLabelsY: g }
                    );
                  },
                },
                {
                  key: "drawCalculatedDataLabels",
                  value: function (t) {
                    var e = t.x,
                      i = t.y,
                      n = t.val,
                      a = t.i,
                      s = t.j,
                      r = t.textRects,
                      o = t.barHeight,
                      l = t.barWidth,
                      c = t.dataLabelsConfig,
                      d = this.w,
                      u = "rotate(0)";
                    "vertical" ===
                      d.config.plotOptions.bar.dataLabels.orientation &&
                      (u = "rotate(-90, ".concat(e, ", ").concat(i, ")"));
                    var f = new N(this.barCtx.ctx),
                      p = new w(this.barCtx.ctx),
                      g = c.formatter,
                      m = null,
                      x = d.globals.collapsedSeriesIndices.indexOf(a) > -1;
                    if (c.enabled && !x) {
                      m = p.group({
                        class: "apexcharts-data-labels",
                        transform: u,
                      });
                      var v = "";
                      void 0 !== n &&
                        (v = g(n, { seriesIndex: a, dataPointIndex: s, w: d }));
                      var b = d.globals.series[a][s] < 0,
                        y = d.config.plotOptions.bar.dataLabels.position;
                      "vertical" ===
                        d.config.plotOptions.bar.dataLabels.orientation &&
                        ("top" === y && (c.textAnchor = b ? "end" : "start"),
                        "center" === y && (c.textAnchor = "middle"),
                        "bottom" === y && (c.textAnchor = b ? "end" : "start")),
                        this.barCtx.isRangeBar &&
                          this.barCtx.barOptions.dataLabels
                            .hideOverflowingLabels &&
                          l <
                            p.getTextRects(v, parseFloat(c.style.fontSize))
                              .width &&
                          (v = ""),
                        d.config.chart.stacked &&
                          this.barCtx.barOptions.dataLabels
                            .hideOverflowingLabels &&
                          (this.barCtx.isHorizontal
                            ? r.width / 1.6 > Math.abs(l) && (v = "")
                            : r.height / 1.6 > Math.abs(o) && (v = ""));
                      var k = h({}, c);
                      this.barCtx.isHorizontal &&
                        n < 0 &&
                        ("start" === c.textAnchor
                          ? (k.textAnchor = "end")
                          : "end" === c.textAnchor && (k.textAnchor = "start")),
                        f.plotDataLabelsText({
                          x: e,
                          y: i,
                          text: v,
                          i: a,
                          j: s,
                          parent: m,
                          dataLabelsConfig: k,
                          alwaysDrawDataLabel: !0,
                          offsetCorrection: !0,
                        });
                    }
                    return m;
                  },
                },
              ]),
              t
            );
          })(),
          z = (function () {
            function t(e) {
              s(this, t),
                (this.ctx = e),
                (this.w = e.w),
                (this.legendInactiveClass = "legend-mouseover-inactive");
            }
            return (
              o(t, [
                {
                  key: "getAllSeriesEls",
                  value: function () {
                    return this.w.globals.dom.baseEl.getElementsByClassName(
                      "apexcharts-series"
                    );
                  },
                },
                {
                  key: "getSeriesByName",
                  value: function (t) {
                    return this.w.globals.dom.baseEl.querySelector(
                      ".apexcharts-inner .apexcharts-series[seriesName='".concat(
                        v.escapeString(t),
                        "']"
                      )
                    );
                  },
                },
                {
                  key: "isSeriesHidden",
                  value: function (t) {
                    var e = this.getSeriesByName(t),
                      i = parseInt(e.getAttribute("data:realIndex"), 10);
                    return {
                      isHidden: e.classList.contains(
                        "apexcharts-series-collapsed"
                      ),
                      realIndex: i,
                    };
                  },
                },
                {
                  key: "addCollapsedClassToSeries",
                  value: function (t, e) {
                    var i = this.w;
                    function n(i) {
                      for (var n = 0; n < i.length; n++)
                        i[n].index === e &&
                          t.node.classList.add("apexcharts-series-collapsed");
                    }
                    n(i.globals.collapsedSeries),
                      n(i.globals.ancillaryCollapsedSeries);
                  },
                },
                {
                  key: "toggleSeries",
                  value: function (t) {
                    var e = this.isSeriesHidden(t);
                    return (
                      this.ctx.legend.legendHelpers.toggleDataSeries(
                        e.realIndex,
                        e.isHidden
                      ),
                      e.isHidden
                    );
                  },
                },
                {
                  key: "showSeries",
                  value: function (t) {
                    var e = this.isSeriesHidden(t);
                    e.isHidden &&
                      this.ctx.legend.legendHelpers.toggleDataSeries(
                        e.realIndex,
                        !0
                      );
                  },
                },
                {
                  key: "hideSeries",
                  value: function (t) {
                    var e = this.isSeriesHidden(t);
                    e.isHidden ||
                      this.ctx.legend.legendHelpers.toggleDataSeries(
                        e.realIndex,
                        !1
                      );
                  },
                },
                {
                  key: "resetSeries",
                  value: function () {
                    var t =
                        !(arguments.length > 0 && void 0 !== arguments[0]) ||
                        arguments[0],
                      e =
                        !(arguments.length > 1 && void 0 !== arguments[1]) ||
                        arguments[1],
                      i =
                        !(arguments.length > 2 && void 0 !== arguments[2]) ||
                        arguments[2],
                      n = this.w,
                      a = v.clone(n.globals.initialSeries);
                    (n.globals.previousPaths = []),
                      i
                        ? ((n.globals.collapsedSeries = []),
                          (n.globals.ancillaryCollapsedSeries = []),
                          (n.globals.collapsedSeriesIndices = []),
                          (n.globals.ancillaryCollapsedSeriesIndices = []))
                        : (a = this.emptyCollapsedSeries(a)),
                      (n.config.series = a),
                      t &&
                        (e &&
                          ((n.globals.zoomed = !1),
                          this.ctx.updateHelpers.revertDefaultAxisMinMax()),
                        this.ctx.updateHelpers._updateSeries(
                          a,
                          n.config.chart.animations.dynamicAnimation.enabled
                        ));
                  },
                },
                {
                  key: "emptyCollapsedSeries",
                  value: function (t) {
                    for (var e = this.w, i = 0; i < t.length; i++)
                      e.globals.collapsedSeriesIndices.indexOf(i) > -1 &&
                        (t[i].data = []);
                    return t;
                  },
                },
                {
                  key: "toggleSeriesOnHover",
                  value: function (t, e) {
                    var i = this.w;
                    e || (e = t.target);
                    var n = i.globals.dom.baseEl.querySelectorAll(
                      ".apexcharts-series, .apexcharts-datalabels"
                    );
                    if ("mousemove" === t.type) {
                      var a = parseInt(e.getAttribute("rel"), 10) - 1,
                        s = null,
                        r = null;
                      i.globals.axisCharts ||
                      "radialBar" === i.config.chart.type
                        ? i.globals.axisCharts
                          ? ((s = i.globals.dom.baseEl.querySelector(
                              ".apexcharts-series[data\\:realIndex='".concat(
                                a,
                                "']"
                              )
                            )),
                            (r = i.globals.dom.baseEl.querySelector(
                              ".apexcharts-datalabels[data\\:realIndex='".concat(
                                a,
                                "']"
                              )
                            )))
                          : (s = i.globals.dom.baseEl.querySelector(
                              ".apexcharts-series[rel='".concat(a + 1, "']")
                            ))
                        : (s = i.globals.dom.baseEl.querySelector(
                            ".apexcharts-series[rel='".concat(a + 1, "'] path")
                          ));
                      for (var o = 0; o < n.length; o++)
                        n[o].classList.add(this.legendInactiveClass);
                      null !== s &&
                        (i.globals.axisCharts ||
                          s.parentNode.classList.remove(
                            this.legendInactiveClass
                          ),
                        s.classList.remove(this.legendInactiveClass),
                        null !== r &&
                          r.classList.remove(this.legendInactiveClass));
                    } else if ("mouseout" === t.type)
                      for (var l = 0; l < n.length; l++)
                        n[l].classList.remove(this.legendInactiveClass);
                  },
                },
                {
                  key: "highlightRangeInSeries",
                  value: function (t, e) {
                    var i = this,
                      n = this.w,
                      a = n.globals.dom.baseEl.getElementsByClassName(
                        "apexcharts-heatmap-rect"
                      ),
                      s = function (t) {
                        for (var e = 0; e < a.length; e++)
                          a[e].classList[t](i.legendInactiveClass);
                      };
                    if ("mousemove" === t.type) {
                      var r = parseInt(e.getAttribute("rel"), 10) - 1;
                      s("add"),
                        (function (t) {
                          for (var e = 0; e < a.length; e++) {
                            var n = parseInt(a[e].getAttribute("val"), 10);
                            n >= t.from &&
                              n <= t.to &&
                              a[e].classList.remove(i.legendInactiveClass);
                          }
                        })(n.config.plotOptions.heatmap.colorScale.ranges[r]);
                    } else "mouseout" === t.type && s("remove");
                  },
                },
                {
                  key: "getActiveConfigSeriesIndex",
                  value: function () {
                    var t =
                        arguments.length > 0 &&
                        void 0 !== arguments[0] &&
                        arguments[0],
                      e =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : "asc",
                      i = this.w,
                      n = 0;
                    if (i.config.series.length > 1)
                      for (
                        var a = i.config.series.map(function (e, n) {
                            var a = !1;
                            return (
                              t &&
                                (a =
                                  "bar" === i.config.series[n].type ||
                                  "column" === i.config.series[n].type),
                              e.data && e.data.length > 0 && !a ? n : -1
                            );
                          }),
                          s = "asc" === e ? 0 : a.length - 1;
                        "asc" === e ? s < a.length : s >= 0;
                        "asc" === e ? s++ : s--
                      )
                        if (-1 !== a[s]) {
                          n = a[s];
                          break;
                        }
                    return n;
                  },
                },
                {
                  key: "getPreviousPaths",
                  value: function () {
                    var t = this.w;
                    function e(e, i, n) {
                      for (
                        var a = e[i].childNodes,
                          s = {
                            type: n,
                            paths: [],
                            realIndex: e[i].getAttribute("data:realIndex"),
                          },
                          r = 0;
                        r < a.length;
                        r++
                      )
                        if (a[r].hasAttribute("pathTo")) {
                          var o = a[r].getAttribute("pathTo");
                          s.paths.push({ d: o });
                        }
                      t.globals.previousPaths.push(s);
                    }
                    (t.globals.previousPaths = []),
                      [
                        "line",
                        "area",
                        "bar",
                        "rangebar",
                        "candlestick",
                        "radar",
                      ].forEach(function (i) {
                        for (
                          var n,
                            a =
                              ((n = i),
                              t.globals.dom.baseEl.querySelectorAll(
                                ".apexcharts-".concat(
                                  n,
                                  "-series .apexcharts-series"
                                )
                              )),
                            s = 0;
                          s < a.length;
                          s++
                        )
                          e(a, s, i);
                      }),
                      this.handlePrevBubbleScatterPaths("bubble"),
                      this.handlePrevBubbleScatterPaths("scatter");
                    var i = t.globals.dom.baseEl.querySelectorAll(
                      ".apexcharts-".concat(
                        t.config.chart.type,
                        " .apexcharts-series"
                      )
                    );
                    if (i.length > 0)
                      for (
                        var n = function (e) {
                            for (
                              var i = t.globals.dom.baseEl.querySelectorAll(
                                  ".apexcharts-"
                                    .concat(
                                      t.config.chart.type,
                                      " .apexcharts-series[data\\:realIndex='"
                                    )
                                    .concat(e, "'] rect")
                                ),
                                n = [],
                                a = function (t) {
                                  var e = function (e) {
                                      return i[t].getAttribute(e);
                                    },
                                    a = {
                                      x: parseFloat(e("x")),
                                      y: parseFloat(e("y")),
                                      width: parseFloat(e("width")),
                                      height: parseFloat(e("height")),
                                    };
                                  n.push({
                                    rect: a,
                                    color: i[t].getAttribute("color"),
                                  });
                                },
                                s = 0;
                              s < i.length;
                              s++
                            )
                              a(s);
                            t.globals.previousPaths.push(n);
                          },
                          a = 0;
                        a < i.length;
                        a++
                      )
                        n(a);
                    t.globals.axisCharts ||
                      (t.globals.previousPaths = t.globals.series);
                  },
                },
                {
                  key: "handlePrevBubbleScatterPaths",
                  value: function (t) {
                    var e = this.w,
                      i = e.globals.dom.baseEl.querySelectorAll(
                        ".apexcharts-".concat(t, "-series .apexcharts-series")
                      );
                    if (i.length > 0)
                      for (var n = 0; n < i.length; n++) {
                        for (
                          var a = e.globals.dom.baseEl.querySelectorAll(
                              ".apexcharts-"
                                .concat(
                                  t,
                                  "-series .apexcharts-series[data\\:realIndex='"
                                )
                                .concat(n, "'] circle")
                            ),
                            s = [],
                            r = 0;
                          r < a.length;
                          r++
                        )
                          s.push({
                            x: a[r].getAttribute("cx"),
                            y: a[r].getAttribute("cy"),
                            r: a[r].getAttribute("r"),
                          });
                        e.globals.previousPaths.push(s);
                      }
                  },
                },
                {
                  key: "clearPreviousPaths",
                  value: function () {
                    var t = this.w;
                    (t.globals.previousPaths = []),
                      (t.globals.allSeriesCollapsed = !1);
                  },
                },
                {
                  key: "handleNoData",
                  value: function () {
                    var t = this.w,
                      e = t.config.noData,
                      i = new w(this.ctx),
                      n = t.globals.svgWidth / 2,
                      a = t.globals.svgHeight / 2,
                      s = "middle";
                    if (
                      ((t.globals.noData = !0),
                      (t.globals.animationEnded = !0),
                      "left" === e.align
                        ? ((n = 10), (s = "start"))
                        : "right" === e.align &&
                          ((n = t.globals.svgWidth - 10), (s = "end")),
                      "top" === e.verticalAlign
                        ? (a = 50)
                        : "bottom" === e.verticalAlign &&
                          (a = t.globals.svgHeight - 50),
                      (n += e.offsetX),
                      (a = a + parseInt(e.style.fontSize, 10) + 2 + e.offsetY),
                      void 0 !== e.text && "" !== e.text)
                    ) {
                      var r = i.drawText({
                        x: n,
                        y: a,
                        text: e.text,
                        textAnchor: s,
                        fontSize: e.style.fontSize,
                        fontFamily: e.style.fontFamily,
                        foreColor: e.style.color,
                        opacity: 1,
                        class: "apexcharts-text-nodata",
                      });
                      t.globals.dom.Paper.add(r);
                    }
                  },
                },
                {
                  key: "setNullSeriesToZeroValues",
                  value: function (t) {
                    for (var e = this.w, i = 0; i < t.length; i++)
                      if (0 === t[i].length)
                        for (
                          var n = 0;
                          n < t[e.globals.maxValsInArrayIndex].length;
                          n++
                        )
                          t[i].push(0);
                    return t;
                  },
                },
                {
                  key: "hasAllSeriesEqualX",
                  value: function () {
                    for (
                      var t = !0, e = this.w, i = this.filteredSeriesX(), n = 0;
                      n < i.length - 1;
                      n++
                    )
                      if (i[n][0] !== i[n + 1][0]) {
                        t = !1;
                        break;
                      }
                    return (e.globals.allSeriesHasEqualX = t), t;
                  },
                },
                {
                  key: "filteredSeriesX",
                  value: function () {
                    return this.w.globals.seriesX.map(function (t) {
                      return t.length > 0 ? t : [];
                    });
                  },
                },
              ]),
              t
            );
          })(),
          O = (function () {
            function t(e) {
              s(this, t), (this.w = e.w), (this.barCtx = e);
            }
            return (
              o(t, [
                {
                  key: "initVariables",
                  value: function (t) {
                    var e = this.w;
                    (this.barCtx.series = t),
                      (this.barCtx.totalItems = 0),
                      (this.barCtx.seriesLen = 0),
                      (this.barCtx.visibleI = -1),
                      (this.barCtx.visibleItems = 1);
                    for (var i = 0; i < t.length; i++)
                      if (
                        (t[i].length > 0 &&
                          ((this.barCtx.seriesLen = this.barCtx.seriesLen + 1),
                          (this.barCtx.totalItems += t[i].length)),
                        e.globals.isXNumeric)
                      )
                        for (var n = 0; n < t[i].length; n++)
                          e.globals.seriesX[i][n] > e.globals.minX &&
                            e.globals.seriesX[i][n] < e.globals.maxX &&
                            this.barCtx.visibleItems++;
                      else this.barCtx.visibleItems = e.globals.dataPoints;
                    0 === this.barCtx.seriesLen && (this.barCtx.seriesLen = 1),
                      (this.barCtx.zeroSerieses = []),
                      (this.barCtx.radiusOnSeriesNumber = t.length - 1),
                      e.globals.comboCharts ||
                        this.checkZeroSeries({ series: t });
                  },
                },
                {
                  key: "initialPositions",
                  value: function () {
                    var t,
                      e,
                      i,
                      n,
                      a,
                      s,
                      r,
                      o,
                      l = this.w,
                      c = l.globals.dataPoints;
                    this.barCtx.isRangeBar && (c = l.globals.labels.length);
                    var h = this.barCtx.seriesLen;
                    if (
                      (l.config.plotOptions.bar.rangeBarGroupRows && (h = 1),
                      this.barCtx.isHorizontal)
                    )
                      (a = (i = l.globals.gridHeight / c) / h),
                        l.globals.isXNumeric &&
                          (a =
                            (i =
                              l.globals.gridHeight / this.barCtx.totalItems) /
                            this.barCtx.seriesLen),
                        (a =
                          (a * parseInt(this.barCtx.barOptions.barHeight, 10)) /
                          100),
                        (o =
                          this.barCtx.baseLineInvertedY +
                          l.globals.padHorizontal +
                          (this.barCtx.isReversed ? l.globals.gridWidth : 0) -
                          (this.barCtx.isReversed
                            ? 2 * this.barCtx.baseLineInvertedY
                            : 0)),
                        (e = (i - a * this.barCtx.seriesLen) / 2);
                    else {
                      if (
                        ((n = l.globals.gridWidth / this.barCtx.visibleItems),
                        l.config.xaxis.convertedCatToNumeric &&
                          (n = l.globals.gridWidth / l.globals.dataPoints),
                        (s =
                          ((n / this.barCtx.seriesLen) *
                            parseInt(this.barCtx.barOptions.columnWidth, 10)) /
                          100),
                        l.globals.isXNumeric)
                      ) {
                        var d = this.barCtx.xRatio;
                        l.config.xaxis.convertedCatToNumeric &&
                          (d = this.barCtx.initialXRatio),
                          l.globals.minXDiff &&
                            0.5 !== l.globals.minXDiff &&
                            l.globals.minXDiff / d > 0 &&
                            (n = l.globals.minXDiff / d),
                          (s =
                            ((n / this.barCtx.seriesLen) *
                              parseInt(
                                this.barCtx.barOptions.columnWidth,
                                10
                              )) /
                            100) < 1 && (s = 1);
                      }
                      (r =
                        l.globals.gridHeight -
                        this.barCtx.baseLineY[this.barCtx.yaxisIndex] -
                        (this.barCtx.isReversed ? l.globals.gridHeight : 0) +
                        (this.barCtx.isReversed
                          ? 2 * this.barCtx.baseLineY[this.barCtx.yaxisIndex]
                          : 0)),
                        (t =
                          l.globals.padHorizontal +
                          (n - s * this.barCtx.seriesLen) / 2);
                    }
                    return {
                      x: t,
                      y: e,
                      yDivision: i,
                      xDivision: n,
                      barHeight: a,
                      barWidth: s,
                      zeroH: r,
                      zeroW: o,
                    };
                  },
                },
                {
                  key: "getPathFillColor",
                  value: function (t, e, i, n) {
                    var a = this.w,
                      s = new P(this.barCtx.ctx),
                      r = null,
                      o = this.barCtx.barOptions.distributed ? i : e;
                    return (
                      this.barCtx.barOptions.colors.ranges.length > 0 &&
                        this.barCtx.barOptions.colors.ranges.map(function (n) {
                          t[e][i] >= n.from && t[e][i] <= n.to && (r = n.color);
                        }),
                      a.config.series[e].data[i] &&
                        a.config.series[e].data[i].fillColor &&
                        (r = a.config.series[e].data[i].fillColor),
                      s.fillPath({
                        seriesNumber: this.barCtx.barOptions.distributed
                          ? o
                          : n,
                        dataPointIndex: i,
                        color: r,
                        value: t[e][i],
                      })
                    );
                  },
                },
                {
                  key: "getStrokeWidth",
                  value: function (t, e, i) {
                    var n = 0,
                      a = this.w;
                    return (
                      void 0 === this.barCtx.series[t][e] ||
                      null === this.barCtx.series[t][e]
                        ? (this.barCtx.isNullValue = !0)
                        : (this.barCtx.isNullValue = !1),
                      a.config.stroke.show &&
                        (this.barCtx.isNullValue ||
                          (n = Array.isArray(this.barCtx.strokeWidth)
                            ? this.barCtx.strokeWidth[i]
                            : this.barCtx.strokeWidth)),
                      n
                    );
                  },
                },
                {
                  key: "barBackground",
                  value: function (t) {
                    var e = t.j,
                      i = t.i,
                      n = t.x1,
                      a = t.x2,
                      s = t.y1,
                      r = t.y2,
                      o = t.elSeries,
                      l = this.w,
                      c = new w(this.barCtx.ctx),
                      h = new z(this.barCtx.ctx).getActiveConfigSeriesIndex();
                    if (
                      this.barCtx.barOptions.colors.backgroundBarColors.length >
                        0 &&
                      h === i
                    ) {
                      e >=
                        this.barCtx.barOptions.colors.backgroundBarColors
                          .length &&
                        (e -=
                          this.barCtx.barOptions.colors.backgroundBarColors
                            .length);
                      var d =
                          this.barCtx.barOptions.colors.backgroundBarColors[e],
                        u = c.drawRect(
                          void 0 !== n ? n : 0,
                          void 0 !== s ? s : 0,
                          void 0 !== a ? a : l.globals.gridWidth,
                          void 0 !== r ? r : l.globals.gridHeight,
                          this.barCtx.barOptions.colors.backgroundBarRadius,
                          d,
                          this.barCtx.barOptions.colors.backgroundBarOpacity
                        );
                      o.add(u),
                        u.node.classList.add("apexcharts-backgroundBar");
                    }
                  },
                },
                {
                  key: "getColumnPaths",
                  value: function (t) {
                    var e = t.barWidth,
                      i = t.barXPosition,
                      n = t.yRatio,
                      a = t.y1,
                      s = t.y2,
                      r = t.strokeWidth,
                      o = t.series,
                      l = t.realIndex,
                      c = t.i,
                      h = t.j,
                      d = t.w,
                      u = new w(this.barCtx.ctx);
                    (r = Array.isArray(r) ? r[l] : r) || (r = 0);
                    var f = {
                        barWidth: e,
                        strokeWidth: r,
                        yRatio: n,
                        barXPosition: i,
                        y1: a,
                        y2: s,
                      },
                      p = this.getRoundedBars(d, f, o, c, h),
                      g = i,
                      m = i + e,
                      x = u.move(g, a),
                      v = u.move(g, a),
                      b = u.line(m - r, a);
                    return (
                      d.globals.previousPaths.length > 0 &&
                        (v = this.barCtx.getPreviousPath(l, h, !1)),
                      (x =
                        x +
                        u.line(g, p.y2) +
                        p.pathWithRadius +
                        u.line(m - r, p.y2) +
                        b +
                        b +
                        "z"),
                      (v = v + u.line(g, a) + b + b + b + b + b + u.line(g, a)),
                      d.config.chart.stacked &&
                        (this.barCtx.yArrj.push(p.y2),
                        this.barCtx.yArrjF.push(Math.abs(a - p.y2)),
                        this.barCtx.yArrjVal.push(this.barCtx.series[c][h])),
                      { pathTo: x, pathFrom: v }
                    );
                  },
                },
                {
                  key: "getBarpaths",
                  value: function (t) {
                    var e = t.barYPosition,
                      i = t.barHeight,
                      n = t.x1,
                      a = t.x2,
                      s = t.strokeWidth,
                      r = t.series,
                      o = t.realIndex,
                      l = t.i,
                      c = t.j,
                      h = t.w,
                      d = new w(this.barCtx.ctx);
                    (s = Array.isArray(s) ? s[o] : s) || (s = 0);
                    var u = {
                        barHeight: i,
                        strokeWidth: s,
                        barYPosition: e,
                        x2: a,
                        x1: n,
                      },
                      f = this.getRoundedBars(h, u, r, l, c),
                      p = d.move(n, e),
                      g = d.move(n, e);
                    h.globals.previousPaths.length > 0 &&
                      (g = this.barCtx.getPreviousPath(o, c, !1));
                    var m = e,
                      x = e + i,
                      v = d.line(n, x - s);
                    return (
                      (p =
                        p +
                        d.line(f.x2, m) +
                        f.pathWithRadius +
                        d.line(f.x2, x - s) +
                        v +
                        v +
                        "z"),
                      (g = g + d.line(n, m) + v + v + v + v + v + d.line(n, m)),
                      h.config.chart.stacked &&
                        (this.barCtx.xArrj.push(f.x2),
                        this.barCtx.xArrjF.push(Math.abs(n - f.x2)),
                        this.barCtx.xArrjVal.push(this.barCtx.series[l][c])),
                      { pathTo: p, pathFrom: g }
                    );
                  },
                },
                {
                  key: "getRoundedBars",
                  value: function (t, e, i, n, a) {
                    var s = new w(this.barCtx.ctx),
                      r = 0,
                      o = t.config.plotOptions.bar.borderRadius,
                      l = Array.isArray(o);
                    if (
                      ((r = l ? o[n > o.length - 1 ? o.length - 1 : n] : o),
                      t.config.chart.stacked &&
                        i.length > 1 &&
                        n !== this.barCtx.radiusOnSeriesNumber &&
                        !l &&
                        (r = 0),
                      this.barCtx.isHorizontal)
                    ) {
                      var c = "",
                        h = e.x2;
                      if (
                        (Math.abs(e.x1 - e.x2) < r &&
                          (r = Math.abs(e.x1 - e.x2)),
                        void 0 !== i[n][a] || null !== i[n][a])
                      ) {
                        var d = this.barCtx.isReversed
                          ? i[n][a] > 0
                          : i[n][a] < 0;
                        d && (r *= -1),
                          (h -= r),
                          (c =
                            s.quadraticCurve(
                              h + r,
                              e.barYPosition,
                              h + r,
                              e.barYPosition + (d ? -1 * r : r)
                            ) +
                            s.line(
                              h + r,
                              e.barYPosition +
                                e.barHeight -
                                e.strokeWidth -
                                (d ? -1 * r : r)
                            ) +
                            s.quadraticCurve(
                              h + r,
                              e.barYPosition + e.barHeight - e.strokeWidth,
                              h,
                              e.barYPosition + e.barHeight - e.strokeWidth
                            ));
                      }
                      return { pathWithRadius: c, x2: h };
                    }
                    var u = "",
                      f = e.y2;
                    if (
                      (Math.abs(e.y1 - e.y2) < r && (r = Math.abs(e.y1 - e.y2)),
                      void 0 !== i[n][a] || null !== i[n][a])
                    ) {
                      var p = i[n][a] < 0;
                      p && (r *= -1),
                        (f += r),
                        (u =
                          s.quadraticCurve(
                            e.barXPosition,
                            f - r,
                            e.barXPosition + (p ? -1 * r : r),
                            f - r
                          ) +
                          s.line(
                            e.barXPosition +
                              e.barWidth -
                              e.strokeWidth -
                              (p ? -1 * r : r),
                            f - r
                          ) +
                          s.quadraticCurve(
                            e.barXPosition + e.barWidth - e.strokeWidth,
                            f - r,
                            e.barXPosition + e.barWidth - e.strokeWidth,
                            f
                          ));
                    }
                    return { pathWithRadius: u, y2: f };
                  },
                },
                {
                  key: "checkZeroSeries",
                  value: function (t) {
                    for (
                      var e = t.series, i = this.w, n = 0;
                      n < e.length;
                      n++
                    ) {
                      for (
                        var a = 0, s = 0;
                        s < e[i.globals.maxValsInArrayIndex].length;
                        s++
                      )
                        a += e[n][s];
                      0 === a && this.barCtx.zeroSerieses.push(n);
                    }
                    for (var r = e.length - 1; r >= 0; r--)
                      this.barCtx.zeroSerieses.indexOf(r) > -1 &&
                        r === this.radiusOnSeriesNumber &&
                        (this.barCtx.radiusOnSeriesNumber -= 1);
                    for (var o = e.length - 1; o >= 0; o--)
                      i.globals.collapsedSeriesIndices.indexOf(
                        this.barCtx.radiusOnSeriesNumber
                      ) > -1 && (this.barCtx.radiusOnSeriesNumber -= 1);
                  },
                },
                {
                  key: "getXForValue",
                  value: function (t, e) {
                    var i =
                        !(arguments.length > 2 && void 0 !== arguments[2]) ||
                        arguments[2],
                      n = i ? e : null;
                    return (
                      null != t &&
                        (n =
                          e +
                          t / this.barCtx.invertedYRatio -
                          2 *
                            (this.barCtx.isReversed
                              ? t / this.barCtx.invertedYRatio
                              : 0)),
                      n
                    );
                  },
                },
                {
                  key: "getYForValue",
                  value: function (t, e) {
                    var i =
                        !(arguments.length > 2 && void 0 !== arguments[2]) ||
                        arguments[2],
                      n = i ? e : null;
                    return (
                      null != t &&
                        (n =
                          e -
                          t / this.barCtx.yRatio[this.barCtx.yaxisIndex] +
                          2 *
                            (this.barCtx.isReversed
                              ? t / this.barCtx.yRatio[this.barCtx.yaxisIndex]
                              : 0)),
                      n
                    );
                  },
                },
                {
                  key: "getGoalValues",
                  value: function (t, e, i, n, a) {
                    var s = this,
                      r = this.w,
                      o = [];
                    return (
                      r.globals.seriesGoals[n] &&
                        r.globals.seriesGoals[n][a] &&
                        Array.isArray(r.globals.seriesGoals[n][a]) &&
                        r.globals.seriesGoals[n][a].forEach(function (n) {
                          var a;
                          o.push(
                            (l(
                              (a = {}),
                              t,
                              "x" === t
                                ? s.getXForValue(n.value, e, !1)
                                : s.getYForValue(n.value, i, !1)
                            ),
                            l(a, "attrs", n),
                            a)
                          );
                        }),
                      o
                    );
                  },
                },
                {
                  key: "drawGoalLine",
                  value: function (t) {
                    var e = t.barXPosition,
                      i = t.barYPosition,
                      n = t.goalX,
                      a = t.goalY,
                      s = t.barWidth,
                      r = t.barHeight,
                      o = new w(this.barCtx.ctx),
                      l = o.group({ className: "apexcharts-bar-goals-groups" }),
                      c = null;
                    return (
                      this.barCtx.isHorizontal
                        ? Array.isArray(n) &&
                          n.forEach(function (t) {
                            var e =
                                void 0 !== t.attrs.strokeHeight
                                  ? t.attrs.strokeHeight
                                  : r / 2,
                              n = i + e + r / 2;
                            (c = o.drawLine(
                              t.x,
                              n - 2 * e,
                              t.x,
                              n,
                              t.attrs.strokeColor
                                ? t.attrs.strokeColor
                                : void 0,
                              t.attrs.strokeDashArray,
                              t.attrs.strokeWidth ? t.attrs.strokeWidth : 2,
                              t.attrs.strokeLineCap
                            )),
                              l.add(c);
                          })
                        : Array.isArray(a) &&
                          a.forEach(function (t) {
                            var i =
                                void 0 !== t.attrs.strokeWidth
                                  ? t.attrs.strokeWidth
                                  : s / 2,
                              n = e + i + s / 2;
                            (c = o.drawLine(
                              n - 2 * i,
                              t.y,
                              n,
                              t.y,
                              t.attrs.strokeColor
                                ? t.attrs.strokeColor
                                : void 0,
                              t.attrs.strokeDashArray,
                              t.attrs.strokeHeight ? t.attrs.strokeHeight : 2,
                              t.attrs.strokeLineCap
                            )),
                              l.add(c);
                          }),
                      l
                    );
                  },
                },
              ]),
              t
            );
          })(),
          F = (function () {
            function t(e, i) {
              s(this, t), (this.ctx = e), (this.w = e.w);
              var n = this.w;
              (this.barOptions = n.config.plotOptions.bar),
                (this.isHorizontal = this.barOptions.horizontal),
                (this.strokeWidth = n.config.stroke.width),
                (this.isNullValue = !1),
                (this.isRangeBar =
                  n.globals.seriesRangeBar.length && this.isHorizontal),
                (this.xyRatios = i),
                null !== this.xyRatios &&
                  ((this.xRatio = i.xRatio),
                  (this.initialXRatio = i.initialXRatio),
                  (this.yRatio = i.yRatio),
                  (this.invertedXRatio = i.invertedXRatio),
                  (this.invertedYRatio = i.invertedYRatio),
                  (this.baseLineY = i.baseLineY),
                  (this.baseLineInvertedY = i.baseLineInvertedY)),
                (this.yaxisIndex = 0),
                (this.seriesLen = 0),
                (this.barHelpers = new O(this));
            }
            return (
              o(t, [
                {
                  key: "draw",
                  value: function (t, e) {
                    var i = this.w,
                      n = new w(this.ctx),
                      a = new A(this.ctx, i);
                    (t = a.getLogSeries(t)),
                      (this.series = t),
                      (this.yRatio = a.getLogYRatios(this.yRatio)),
                      this.barHelpers.initVariables(t);
                    var s = n.group({
                      class: "apexcharts-bar-series apexcharts-plot-series",
                    });
                    i.config.dataLabels.enabled &&
                      this.totalItems > this.barOptions.dataLabels.maxItems &&
                      console.warn(
                        "WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering."
                      );
                    for (var r = 0, o = 0; r < t.length; r++, o++) {
                      var l,
                        c,
                        d,
                        u,
                        f = void 0,
                        p = void 0,
                        g = [],
                        m = [],
                        x = i.globals.comboCharts ? e[r] : r,
                        b = n.group({
                          class: "apexcharts-series",
                          rel: r + 1,
                          seriesName: v.escapeString(i.globals.seriesNames[x]),
                          "data:realIndex": x,
                        });
                      this.ctx.series.addCollapsedClassToSeries(b, x),
                        t[r].length > 0 && (this.visibleI = this.visibleI + 1);
                      var y = 0,
                        k = 0;
                      this.yRatio.length > 1 && (this.yaxisIndex = x),
                        (this.isReversed =
                          i.config.yaxis[this.yaxisIndex] &&
                          i.config.yaxis[this.yaxisIndex].reversed);
                      var S = this.barHelpers.initialPositions();
                      (p = S.y),
                        (y = S.barHeight),
                        (c = S.yDivision),
                        (u = S.zeroW),
                        (f = S.x),
                        (k = S.barWidth),
                        (l = S.xDivision),
                        (d = S.zeroH),
                        this.horizontal || m.push(f + k / 2);
                      for (
                        var C = n.group({
                            class: "apexcharts-datalabels",
                            "data:realIndex": x,
                          }),
                          E = n.group({
                            class: "apexcharts-bar-goals-markers",
                            style: "pointer-events: none",
                          }),
                          T = 0;
                        T < i.globals.dataPoints;
                        T++
                      ) {
                        var L = this.barHelpers.getStrokeWidth(r, T, x),
                          _ = null,
                          P = {
                            indexes: { i: r, j: T, realIndex: x, bc: o },
                            x: f,
                            y: p,
                            strokeWidth: L,
                            elSeries: b,
                          };
                        this.isHorizontal
                          ? ((_ = this.drawBarPaths(
                              h(
                                h({}, P),
                                {},
                                { barHeight: y, zeroW: u, yDivision: c }
                              )
                            )),
                            (k = this.series[r][T] / this.invertedYRatio))
                          : ((_ = this.drawColumnPaths(
                              h(
                                h({}, P),
                                {},
                                { xDivision: l, barWidth: k, zeroH: d }
                              )
                            )),
                            (y =
                              this.series[r][T] /
                              this.yRatio[this.yaxisIndex]));
                        var I = this.barHelpers.drawGoalLine({
                          barXPosition: _.barXPosition,
                          barYPosition: _.barYPosition,
                          goalX: _.goalX,
                          goalY: _.goalY,
                          barHeight: y,
                          barWidth: k,
                        });
                        I && E.add(I),
                          (p = _.y),
                          (f = _.x),
                          T > 0 && m.push(f + k / 2),
                          g.push(p);
                        var M = this.barHelpers.getPathFillColor(t, r, T, x);
                        this.renderSeries({
                          realIndex: x,
                          pathFill: M,
                          j: T,
                          i: r,
                          pathFrom: _.pathFrom,
                          pathTo: _.pathTo,
                          strokeWidth: L,
                          elSeries: b,
                          x: f,
                          y: p,
                          series: t,
                          barHeight: y,
                          barWidth: k,
                          elDataLabelsWrap: C,
                          elGoalsMarkers: E,
                          visibleSeries: this.visibleI,
                          type: "bar",
                        });
                      }
                      (i.globals.seriesXvalues[x] = m),
                        (i.globals.seriesYvalues[x] = g),
                        s.add(b);
                    }
                    return s;
                  },
                },
                {
                  key: "renderSeries",
                  value: function (t) {
                    var e = t.realIndex,
                      i = t.pathFill,
                      n = t.lineFill,
                      a = t.j,
                      s = t.i,
                      r = t.pathFrom,
                      o = t.pathTo,
                      l = t.strokeWidth,
                      c = t.elSeries,
                      h = t.x,
                      d = t.y,
                      u = t.y1,
                      f = t.y2,
                      p = t.series,
                      g = t.barHeight,
                      m = t.barWidth,
                      x = t.barYPosition,
                      v = t.elDataLabelsWrap,
                      b = t.elGoalsMarkers,
                      k = t.visibleSeries,
                      S = t.type,
                      A = this.w,
                      C = new w(this.ctx);
                    n ||
                      (n = this.barOptions.distributed
                        ? A.globals.stroke.colors[a]
                        : A.globals.stroke.colors[e]),
                      A.config.series[s].data[a] &&
                        A.config.series[s].data[a].strokeColor &&
                        (n = A.config.series[s].data[a].strokeColor),
                      this.isNullValue && (i = "none");
                    var E =
                        ((a /
                          A.config.chart.animations.animateGradually.delay) *
                          (A.config.chart.animations.speed /
                            A.globals.dataPoints)) /
                        2.4,
                      T = C.renderPaths({
                        i: s,
                        j: a,
                        realIndex: e,
                        pathFrom: r,
                        pathTo: o,
                        stroke: n,
                        strokeWidth: l,
                        strokeLineCap: A.config.stroke.lineCap,
                        fill: i,
                        animationDelay: E,
                        initialSpeed: A.config.chart.animations.speed,
                        dataChangeSpeed:
                          A.config.chart.animations.dynamicAnimation.speed,
                        className: "apexcharts-".concat(S, "-area"),
                      });
                    T.attr(
                      "clip-path",
                      "url(#gridRectMask".concat(A.globals.cuid, ")")
                    );
                    var L = A.config.forecastDataPoints;
                    L.count > 0 &&
                      a >= A.globals.dataPoints - L.count &&
                      (T.node.setAttribute("stroke-dasharray", L.dashArray),
                      T.node.setAttribute("stroke-width", L.strokeWidth),
                      T.node.setAttribute("fill-opacity", L.fillOpacity)),
                      void 0 !== u &&
                        void 0 !== f &&
                        (T.attr("data-range-y1", u),
                        T.attr("data-range-y2", f)),
                      new y(this.ctx).setSelectionFilter(T, e, a),
                      c.add(T);
                    var _ = new D(this).handleBarDataLabels({
                      x: h,
                      y: d,
                      y1: u,
                      y2: f,
                      i: s,
                      j: a,
                      series: p,
                      realIndex: e,
                      barHeight: g,
                      barWidth: m,
                      barYPosition: x,
                      renderedPath: T,
                      visibleSeries: k,
                    });
                    return null !== _ && v.add(_), c.add(v), b && c.add(b), c;
                  },
                },
                {
                  key: "drawBarPaths",
                  value: function (t) {
                    var e = t.indexes,
                      i = t.barHeight,
                      n = t.strokeWidth,
                      a = t.zeroW,
                      s = t.x,
                      r = t.y,
                      o = t.yDivision,
                      l = t.elSeries,
                      c = this.w,
                      h = e.i,
                      d = e.j;
                    c.globals.isXNumeric &&
                      (r =
                        (c.globals.seriesX[h][d] - c.globals.minX) /
                          this.invertedXRatio -
                        i);
                    var u = r + i * this.visibleI;
                    s = this.barHelpers.getXForValue(this.series[h][d], a);
                    var f = this.barHelpers.getBarpaths({
                      barYPosition: u,
                      barHeight: i,
                      x1: a,
                      x2: s,
                      strokeWidth: n,
                      series: this.series,
                      realIndex: e.realIndex,
                      i: h,
                      j: d,
                      w: c,
                    });
                    return (
                      c.globals.isXNumeric || (r += o),
                      this.barHelpers.barBackground({
                        j: d,
                        i: h,
                        y1: u - i * this.visibleI,
                        y2: i * this.seriesLen,
                        elSeries: l,
                      }),
                      {
                        pathTo: f.pathTo,
                        pathFrom: f.pathFrom,
                        x: s,
                        y: r,
                        goalX: this.barHelpers.getGoalValues(
                          "x",
                          a,
                          null,
                          h,
                          d
                        ),
                        barYPosition: u,
                      }
                    );
                  },
                },
                {
                  key: "drawColumnPaths",
                  value: function (t) {
                    var e = t.indexes,
                      i = t.x,
                      n = t.y,
                      a = t.xDivision,
                      s = t.barWidth,
                      r = t.zeroH,
                      o = t.strokeWidth,
                      l = t.elSeries,
                      c = this.w,
                      h = e.realIndex,
                      d = e.i,
                      u = e.j,
                      f = e.bc;
                    if (c.globals.isXNumeric) {
                      var p = h;
                      c.globals.seriesX[h].length ||
                        (p = c.globals.maxValsInArrayIndex),
                        (i =
                          (c.globals.seriesX[p][u] - c.globals.minX) /
                            this.xRatio -
                          (s * this.seriesLen) / 2);
                    }
                    var g = i + s * this.visibleI;
                    n = this.barHelpers.getYForValue(this.series[d][u], r);
                    var m = this.barHelpers.getColumnPaths({
                      barXPosition: g,
                      barWidth: s,
                      y1: r,
                      y2: n,
                      strokeWidth: o,
                      series: this.series,
                      realIndex: e.realIndex,
                      i: d,
                      j: u,
                      w: c,
                    });
                    return (
                      c.globals.isXNumeric || (i += a),
                      this.barHelpers.barBackground({
                        bc: f,
                        j: u,
                        i: d,
                        x1: g - o / 2 - s * this.visibleI,
                        x2: s * this.seriesLen + o / 2,
                        elSeries: l,
                      }),
                      {
                        pathTo: m.pathTo,
                        pathFrom: m.pathFrom,
                        x: i,
                        y: n,
                        goalY: this.barHelpers.getGoalValues(
                          "y",
                          null,
                          r,
                          d,
                          u
                        ),
                        barXPosition: g,
                      }
                    );
                  },
                },
                {
                  key: "getPreviousPath",
                  value: function (t, e) {
                    for (
                      var i, n = this.w, a = 0;
                      a < n.globals.previousPaths.length;
                      a++
                    ) {
                      var s = n.globals.previousPaths[a];
                      s.paths &&
                        s.paths.length > 0 &&
                        parseInt(s.realIndex, 10) === parseInt(t, 10) &&
                        void 0 !== n.globals.previousPaths[a].paths[e] &&
                        (i = n.globals.previousPaths[a].paths[e].d);
                    }
                    return i;
                  },
                },
              ]),
              t
            );
          })(),
          X = (function () {
            function t(e) {
              s(this, t),
                (this.ctx = e),
                (this.w = e.w),
                (this.months31 = [1, 3, 5, 7, 8, 10, 12]),
                (this.months30 = [2, 4, 6, 9, 11]),
                (this.daysCntOfYear = [
                  0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334,
                ]);
            }
            return (
              o(t, [
                {
                  key: "isValidDate",
                  value: function (t) {
                    return !isNaN(this.parseDate(t));
                  },
                },
                {
                  key: "getTimeStamp",
                  value: function (t) {
                    return Date.parse(t)
                      ? this.w.config.xaxis.labels.datetimeUTC
                        ? new Date(
                            new Date(t).toISOString().substr(0, 25)
                          ).getTime()
                        : new Date(t).getTime()
                      : t;
                  },
                },
                {
                  key: "getDate",
                  value: function (t) {
                    return this.w.config.xaxis.labels.datetimeUTC
                      ? new Date(new Date(t).toUTCString())
                      : new Date(t);
                  },
                },
                {
                  key: "parseDate",
                  value: function (t) {
                    var e = Date.parse(t);
                    if (!isNaN(e)) return this.getTimeStamp(t);
                    var i = Date.parse(
                      t.replace(/-/g, "/").replace(/[a-z]+/gi, " ")
                    );
                    return this.getTimeStamp(i);
                  },
                },
                {
                  key: "parseDateWithTimezone",
                  value: function (t) {
                    return Date.parse(
                      t.replace(/-/g, "/").replace(/[a-z]+/gi, " ")
                    );
                  },
                },
                {
                  key: "formatDate",
                  value: function (t, e) {
                    var i = this.w.globals.locale,
                      n = this.w.config.xaxis.labels.datetimeUTC,
                      a = ["\0"].concat(m(i.months)),
                      s = [""].concat(m(i.shortMonths)),
                      r = [""].concat(m(i.days)),
                      o = [""].concat(m(i.shortDays));
                    function l(t, e) {
                      var i = t + "";
                      for (e = e || 2; i.length < e; ) i = "0" + i;
                      return i;
                    }
                    var c = n ? t.getUTCFullYear() : t.getFullYear();
                    e = (e = (e = e.replace(
                      /(^|[^\\])yyyy+/g,
                      "$1" + c
                    )).replace(
                      /(^|[^\\])yy/g,
                      "$1" + c.toString().substr(2, 2)
                    )).replace(/(^|[^\\])y/g, "$1" + c);
                    var h = (n ? t.getUTCMonth() : t.getMonth()) + 1;
                    e = (e = (e = (e = e.replace(
                      /(^|[^\\])MMMM+/g,
                      "$1" + a[0]
                    )).replace(/(^|[^\\])MMM/g, "$1" + s[0])).replace(
                      /(^|[^\\])MM/g,
                      "$1" + l(h)
                    )).replace(/(^|[^\\])M/g, "$1" + h);
                    var d = n ? t.getUTCDate() : t.getDate();
                    e = (e = (e = (e = e.replace(
                      /(^|[^\\])dddd+/g,
                      "$1" + r[0]
                    )).replace(/(^|[^\\])ddd/g, "$1" + o[0])).replace(
                      /(^|[^\\])dd/g,
                      "$1" + l(d)
                    )).replace(/(^|[^\\])d/g, "$1" + d);
                    var u = n ? t.getUTCHours() : t.getHours(),
                      f = u > 12 ? u - 12 : 0 === u ? 12 : u;
                    e = (e = (e = (e = e.replace(
                      /(^|[^\\])HH+/g,
                      "$1" + l(u)
                    )).replace(/(^|[^\\])H/g, "$1" + u)).replace(
                      /(^|[^\\])hh+/g,
                      "$1" + l(f)
                    )).replace(/(^|[^\\])h/g, "$1" + f);
                    var p = n ? t.getUTCMinutes() : t.getMinutes();
                    e = (e = e.replace(/(^|[^\\])mm+/g, "$1" + l(p))).replace(
                      /(^|[^\\])m/g,
                      "$1" + p
                    );
                    var g = n ? t.getUTCSeconds() : t.getSeconds();
                    e = (e = e.replace(/(^|[^\\])ss+/g, "$1" + l(g))).replace(
                      /(^|[^\\])s/g,
                      "$1" + g
                    );
                    var x = n ? t.getUTCMilliseconds() : t.getMilliseconds();
                    (e = e.replace(/(^|[^\\])fff+/g, "$1" + l(x, 3))),
                      (x = Math.round(x / 10)),
                      (e = e.replace(/(^|[^\\])ff/g, "$1" + l(x))),
                      (x = Math.round(x / 10));
                    var v = u < 12 ? "AM" : "PM";
                    e = (e = (e = e.replace(/(^|[^\\])f/g, "$1" + x)).replace(
                      /(^|[^\\])TT+/g,
                      "$1" + v
                    )).replace(/(^|[^\\])T/g, "$1" + v.charAt(0));
                    var b = v.toLowerCase();
                    e = (e = e.replace(/(^|[^\\])tt+/g, "$1" + b)).replace(
                      /(^|[^\\])t/g,
                      "$1" + b.charAt(0)
                    );
                    var y = -t.getTimezoneOffset(),
                      w = n || !y ? "Z" : y > 0 ? "+" : "-";
                    if (!n) {
                      var k = (y = Math.abs(y)) % 60;
                      w += l(Math.floor(y / 60)) + ":" + l(k);
                    }
                    e = e.replace(/(^|[^\\])K/g, "$1" + w);
                    var S = (n ? t.getUTCDay() : t.getDay()) + 1;
                    return (e = (e = (e = (e = e.replace(
                      new RegExp(r[0], "g"),
                      r[S]
                    )).replace(new RegExp(o[0], "g"), o[S])).replace(
                      new RegExp(a[0], "g"),
                      a[h]
                    )).replace(new RegExp(s[0], "g"), s[h])).replace(
                      /\\(.)/g,
                      "$1"
                    );
                  },
                },
                {
                  key: "getTimeUnitsfromTimestamp",
                  value: function (t, e, i) {
                    var n = this.w;
                    void 0 !== n.config.xaxis.min && (t = n.config.xaxis.min),
                      void 0 !== n.config.xaxis.max && (e = n.config.xaxis.max);
                    var a = this.getDate(t),
                      s = this.getDate(e),
                      r = this.formatDate(a, "yyyy MM dd HH mm ss fff").split(
                        " "
                      ),
                      o = this.formatDate(s, "yyyy MM dd HH mm ss fff").split(
                        " "
                      );
                    return {
                      minMillisecond: parseInt(r[6], 10),
                      maxMillisecond: parseInt(o[6], 10),
                      minSecond: parseInt(r[5], 10),
                      maxSecond: parseInt(o[5], 10),
                      minMinute: parseInt(r[4], 10),
                      maxMinute: parseInt(o[4], 10),
                      minHour: parseInt(r[3], 10),
                      maxHour: parseInt(o[3], 10),
                      minDate: parseInt(r[2], 10),
                      maxDate: parseInt(o[2], 10),
                      minMonth: parseInt(r[1], 10) - 1,
                      maxMonth: parseInt(o[1], 10) - 1,
                      minYear: parseInt(r[0], 10),
                      maxYear: parseInt(o[0], 10),
                    };
                  },
                },
                {
                  key: "isLeapYear",
                  value: function (t) {
                    return (t % 4 == 0 && t % 100 != 0) || t % 400 == 0;
                  },
                },
                {
                  key: "calculcateLastDaysOfMonth",
                  value: function (t, e, i) {
                    return this.determineDaysOfMonths(t, e) - i;
                  },
                },
                {
                  key: "determineDaysOfYear",
                  value: function (t) {
                    var e = 365;
                    return this.isLeapYear(t) && (e = 366), e;
                  },
                },
                {
                  key: "determineRemainingDaysOfYear",
                  value: function (t, e, i) {
                    var n = this.daysCntOfYear[e] + i;
                    return e > 1 && this.isLeapYear() && n++, n;
                  },
                },
                {
                  key: "determineDaysOfMonths",
                  value: function (t, e) {
                    var i = 30;
                    switch (((t = v.monthMod(t)), !0)) {
                      case this.months30.indexOf(t) > -1:
                        2 === t && (i = this.isLeapYear(e) ? 29 : 28);
                        break;
                      case this.months31.indexOf(t) > -1:
                      default:
                        i = 31;
                    }
                    return i;
                  },
                },
              ]),
              t
            );
          })(),
          R = (function (t) {
            d(i, F);
            var e = g(i);
            function i() {
              return s(this, i), e.apply(this, arguments);
            }
            return (
              o(i, [
                {
                  key: "draw",
                  value: function (t, e) {
                    var i = this.w,
                      n = new w(this.ctx);
                    (this.rangeBarOptions = this.w.config.plotOptions.rangeBar),
                      (this.series = t),
                      (this.seriesRangeStart = i.globals.seriesRangeStart),
                      (this.seriesRangeEnd = i.globals.seriesRangeEnd),
                      this.barHelpers.initVariables(t);
                    for (
                      var a = n.group({
                          class:
                            "apexcharts-rangebar-series apexcharts-plot-series",
                        }),
                        s = 0;
                      s < t.length;
                      s++
                    ) {
                      var r,
                        o,
                        l,
                        c = void 0,
                        d = void 0,
                        u = void 0,
                        f = i.globals.comboCharts ? e[s] : s,
                        p = n.group({
                          class: "apexcharts-series",
                          seriesName: v.escapeString(i.globals.seriesNames[f]),
                          rel: s + 1,
                          "data:realIndex": f,
                        });
                      t[s].length > 0 && (this.visibleI = this.visibleI + 1);
                      var g = 0,
                        m = 0;
                      this.yRatio.length > 1 && (this.yaxisIndex = f);
                      var x = this.barHelpers.initialPositions();
                      (d = x.y),
                        (l = x.zeroW),
                        (c = x.x),
                        (m = x.barWidth),
                        (r = x.xDivision),
                        (o = x.zeroH);
                      for (
                        var b = n.group({
                            class: "apexcharts-datalabels",
                            "data:realIndex": f,
                          }),
                          y = n.group({
                            class: "apexcharts-rangebar-goals-markers",
                            style: "pointer-events: none",
                          }),
                          k = 0;
                        k < i.globals.dataPoints;
                        k++
                      ) {
                        var S = this.barHelpers.getStrokeWidth(s, k, f),
                          A = this.seriesRangeStart[s][k],
                          C = this.seriesRangeEnd[s][k],
                          E = null,
                          T = null,
                          L = { x: c, y: d, strokeWidth: S, elSeries: p };
                        if (
                          ((u = x.yDivision),
                          (g = x.barHeight),
                          this.isHorizontal)
                        ) {
                          T = d + g * this.visibleI;
                          var _ = this.seriesLen;
                          i.config.plotOptions.bar.rangeBarGroupRows && (_ = 1);
                          var P = (u - g * _) / 2;
                          if (void 0 === i.config.series[s].data[k]) break;
                          if (i.config.series[s].data[k].x) {
                            var I = this.detectOverlappingBars({
                              i: s,
                              j: k,
                              barYPosition: T,
                              srty: P,
                              barHeight: g,
                              yDivision: u,
                              initPositions: x,
                            });
                            (g = I.barHeight), (T = I.barYPosition);
                          }
                          m = (E = this.drawRangeBarPaths(
                            h(
                              {
                                indexes: { i: s, j: k, realIndex: f },
                                barHeight: g,
                                barYPosition: T,
                                zeroW: l,
                                yDivision: u,
                                y1: A,
                                y2: C,
                              },
                              L
                            )
                          )).barWidth;
                        } else
                          g = (E = this.drawRangeColumnPaths(
                            h(
                              {
                                indexes: { i: s, j: k, realIndex: f },
                                zeroH: o,
                                barWidth: m,
                                xDivision: r,
                              },
                              L
                            )
                          )).barHeight;
                        var M = this.barHelpers.drawGoalLine({
                          barXPosition: E.barXPosition,
                          barYPosition: T,
                          goalX: E.goalX,
                          goalY: E.goalY,
                          barHeight: g,
                          barWidth: m,
                        });
                        M && y.add(M), (d = E.y), (c = E.x);
                        var N = this.barHelpers.getPathFillColor(t, s, k, f),
                          D = i.globals.stroke.colors[f];
                        this.renderSeries({
                          realIndex: f,
                          pathFill: N,
                          lineFill: D,
                          j: k,
                          i: s,
                          x: c,
                          y: d,
                          y1: A,
                          y2: C,
                          pathFrom: E.pathFrom,
                          pathTo: E.pathTo,
                          strokeWidth: S,
                          elSeries: p,
                          series: t,
                          barHeight: g,
                          barYPosition: T,
                          barWidth: m,
                          elDataLabelsWrap: b,
                          elGoalsMarkers: y,
                          visibleSeries: this.visibleI,
                          type: "rangebar",
                        });
                      }
                      a.add(p);
                    }
                    return a;
                  },
                },
                {
                  key: "detectOverlappingBars",
                  value: function (t) {
                    var e = t.i,
                      i = t.j,
                      n = t.barYPosition,
                      a = t.srty,
                      s = t.barHeight,
                      r = t.yDivision,
                      o = t.initPositions,
                      l = this.w,
                      c = [],
                      h = l.config.series[e].data[i].rangeName,
                      d = l.config.series[e].data[i].x,
                      u = l.globals.labels.indexOf(d),
                      f = l.globals.seriesRangeBar[e].findIndex(function (t) {
                        return t.x === d && t.overlaps.length > 0;
                      });
                    return (
                      (n = l.config.plotOptions.bar.rangeBarGroupRows
                        ? a + r * u
                        : a + s * this.visibleI + r * u),
                      f > -1 &&
                        !l.config.plotOptions.bar.rangeBarOverlap &&
                        (c = l.globals.seriesRangeBar[e][f].overlaps).indexOf(
                          h
                        ) > -1 &&
                        (n =
                          (s = o.barHeight / c.length) * this.visibleI +
                          (r *
                            (100 - parseInt(this.barOptions.barHeight, 10))) /
                            100 /
                            2 +
                          s * (this.visibleI + c.indexOf(h)) +
                          r * u),
                      { barYPosition: n, barHeight: s }
                    );
                  },
                },
                {
                  key: "drawRangeColumnPaths",
                  value: function (t) {
                    var e = t.indexes,
                      i = t.x;
                    t.strokeWidth;
                    var n = t.xDivision,
                      a = t.barWidth,
                      s = t.zeroH,
                      r = this.w,
                      o = e.i,
                      l = e.j,
                      c = this.yRatio[this.yaxisIndex],
                      h = e.realIndex,
                      d = this.getRangeValue(h, l),
                      u = Math.min(d.start, d.end),
                      f = Math.max(d.start, d.end);
                    r.globals.isXNumeric &&
                      (i =
                        (r.globals.seriesX[o][l] - r.globals.minX) /
                          this.xRatio -
                        a / 2);
                    var p = i + a * this.visibleI;
                    void 0 === this.series[o][l] || null === this.series[o][l]
                      ? (u = s)
                      : ((u = s - u / c), (f = s - f / c));
                    var g = Math.abs(f - u),
                      m = this.barHelpers.getColumnPaths({
                        barXPosition: p,
                        barWidth: a,
                        y1: u,
                        y2: f,
                        strokeWidth: this.strokeWidth,
                        series: this.seriesRangeEnd,
                        realIndex: e.realIndex,
                        i: h,
                        j: l,
                        w: r,
                      });
                    return (
                      r.globals.isXNumeric || (i += n),
                      {
                        pathTo: m.pathTo,
                        pathFrom: m.pathFrom,
                        barHeight: g,
                        x: i,
                        y: f,
                        goalY: this.barHelpers.getGoalValues(
                          "y",
                          null,
                          s,
                          o,
                          l
                        ),
                        barXPosition: p,
                      }
                    );
                  },
                },
                {
                  key: "drawRangeBarPaths",
                  value: function (t) {
                    var e = t.indexes,
                      i = t.y,
                      n = t.y1,
                      a = t.y2,
                      s = t.yDivision,
                      r = t.barHeight,
                      o = t.barYPosition,
                      l = t.zeroW,
                      c = this.w,
                      h = l + n / this.invertedYRatio,
                      d = l + a / this.invertedYRatio,
                      u = Math.abs(d - h),
                      f = this.barHelpers.getBarpaths({
                        barYPosition: o,
                        barHeight: r,
                        x1: h,
                        x2: d,
                        strokeWidth: this.strokeWidth,
                        series: this.seriesRangeEnd,
                        i: e.realIndex,
                        realIndex: e.realIndex,
                        j: e.j,
                        w: c,
                      });
                    return (
                      c.globals.isXNumeric || (i += s),
                      {
                        pathTo: f.pathTo,
                        pathFrom: f.pathFrom,
                        barWidth: u,
                        x: d,
                        goalX: this.barHelpers.getGoalValues(
                          "x",
                          l,
                          null,
                          e.realIndex,
                          e.j
                        ),
                        y: i,
                      }
                    );
                  },
                },
                {
                  key: "getRangeValue",
                  value: function (t, e) {
                    var i = this.w;
                    return {
                      start: i.globals.seriesRangeStart[t][e],
                      end: i.globals.seriesRangeEnd[t][e],
                    };
                  },
                },
                {
                  key: "getTooltipValues",
                  value: function (t) {
                    var e = t.ctx,
                      i = t.seriesIndex,
                      n = t.dataPointIndex,
                      a = t.y1,
                      s = t.y2,
                      r = t.w,
                      o = r.globals.seriesRangeStart[i][n],
                      l = r.globals.seriesRangeEnd[i][n],
                      c = r.globals.labels[n],
                      h = r.config.series[i].name
                        ? r.config.series[i].name
                        : "",
                      d = r.config.tooltip.y.formatter,
                      u = r.config.tooltip.y.title.formatter,
                      f = {
                        w: r,
                        seriesIndex: i,
                        dataPointIndex: n,
                        start: o,
                        end: l,
                      };
                    "function" == typeof u && (h = u(h, f)),
                      Number.isFinite(a) &&
                        Number.isFinite(s) &&
                        ((o = a),
                        (l = s),
                        r.config.series[i].data[n].x &&
                          (c = r.config.series[i].data[n].x + ":"),
                        "function" == typeof d && (c = d(c, f)));
                    var p = "",
                      g = "",
                      m = r.globals.colors[i];
                    if (void 0 === r.config.tooltip.x.formatter)
                      if ("datetime" === r.config.xaxis.type) {
                        var x = new X(e);
                        (p = x.formatDate(
                          x.getDate(o),
                          r.config.tooltip.x.format
                        )),
                          (g = x.formatDate(
                            x.getDate(l),
                            r.config.tooltip.x.format
                          ));
                      } else (p = o), (g = l);
                    else
                      (p = r.config.tooltip.x.formatter(o)),
                        (g = r.config.tooltip.x.formatter(l));
                    return {
                      start: o,
                      end: l,
                      startVal: p,
                      endVal: g,
                      ylabel: c,
                      color: m,
                      seriesName: h,
                    };
                  },
                },
                {
                  key: "buildCustomTooltipHTML",
                  value: function (t) {
                    return (
                      '<div class="apexcharts-tooltip-rangebar"><div> <span class="series-name" style="color: ' +
                      t.color +
                      '">' +
                      (t.seriesName || "") +
                      '</span></div><div> <span class="category">' +
                      t.ylabel +
                      ' </span> <span class="value start-value">' +
                      t.start +
                      '</span> <span class="separator">-</span> <span class="value end-value">' +
                      t.end +
                      "</span></div></div>"
                    );
                  },
                },
              ]),
              i
            );
          })(),
          H = (function () {
            function t(e) {
              s(this, t), (this.opts = e);
            }
            return (
              o(t, [
                {
                  key: "line",
                  value: function () {
                    return {
                      chart: { animations: { easing: "swing" } },
                      dataLabels: { enabled: !1 },
                      stroke: { width: 5, curve: "straight" },
                      markers: { size: 0, hover: { sizeOffset: 6 } },
                      xaxis: { crosshairs: { width: 1 } },
                    };
                  },
                },
                {
                  key: "sparkline",
                  value: function (t) {
                    return (
                      (this.opts.yaxis[0].show = !1),
                      (this.opts.yaxis[0].title.text = ""),
                      (this.opts.yaxis[0].axisBorder.show = !1),
                      (this.opts.yaxis[0].axisTicks.show = !1),
                      (this.opts.yaxis[0].floating = !0),
                      v.extend(t, {
                        grid: {
                          show: !1,
                          padding: { left: 0, right: 0, top: 0, bottom: 0 },
                        },
                        legend: { show: !1 },
                        xaxis: {
                          labels: { show: !1 },
                          tooltip: { enabled: !1 },
                          axisBorder: { show: !1 },
                          axisTicks: { show: !1 },
                        },
                        chart: { toolbar: { show: !1 }, zoom: { enabled: !1 } },
                        dataLabels: { enabled: !1 },
                      })
                    );
                  },
                },
                {
                  key: "bar",
                  value: function () {
                    return {
                      chart: { stacked: !1, animations: { easing: "swing" } },
                      plotOptions: {
                        bar: { dataLabels: { position: "center" } },
                      },
                      dataLabels: {
                        style: { colors: ["#fff"] },
                        background: { enabled: !1 },
                      },
                      stroke: { width: 0, lineCap: "round" },
                      fill: { opacity: 0.85 },
                      legend: {
                        markers: { shape: "square", radius: 2, size: 8 },
                      },
                      tooltip: { shared: !1, intersect: !0 },
                      xaxis: {
                        tooltip: { enabled: !1 },
                        tickPlacement: "between",
                        crosshairs: {
                          width: "barWidth",
                          position: "back",
                          fill: { type: "gradient" },
                          dropShadow: { enabled: !1 },
                          stroke: { width: 0 },
                        },
                      },
                    };
                  },
                },
                {
                  key: "candlestick",
                  value: function () {
                    var t = this;
                    return {
                      stroke: { width: 1, colors: ["#333"] },
                      fill: { opacity: 1 },
                      dataLabels: { enabled: !1 },
                      tooltip: {
                        shared: !0,
                        custom: function (e) {
                          var i = e.seriesIndex,
                            n = e.dataPointIndex,
                            a = e.w;
                          return t._getBoxTooltip(
                            a,
                            i,
                            n,
                            ["Open", "High", "", "Low", "Close"],
                            "candlestick"
                          );
                        },
                      },
                      states: { active: { filter: { type: "none" } } },
                      xaxis: { crosshairs: { width: 1 } },
                    };
                  },
                },
                {
                  key: "boxPlot",
                  value: function () {
                    var t = this;
                    return {
                      chart: {
                        animations: { dynamicAnimation: { enabled: !1 } },
                      },
                      stroke: { width: 1, colors: ["#24292e"] },
                      dataLabels: { enabled: !1 },
                      tooltip: {
                        shared: !0,
                        custom: function (e) {
                          var i = e.seriesIndex,
                            n = e.dataPointIndex,
                            a = e.w;
                          return t._getBoxTooltip(
                            a,
                            i,
                            n,
                            ["Minimum", "Q1", "Median", "Q3", "Maximum"],
                            "boxPlot"
                          );
                        },
                      },
                      markers: {
                        size: 5,
                        strokeWidth: 1,
                        strokeColors: "#111",
                      },
                      xaxis: { crosshairs: { width: 1 } },
                    };
                  },
                },
                {
                  key: "rangeBar",
                  value: function () {
                    return {
                      stroke: { width: 0, lineCap: "square" },
                      plotOptions: {
                        bar: {
                          borderRadius: 0,
                          dataLabels: { position: "center" },
                        },
                      },
                      dataLabels: {
                        enabled: !1,
                        formatter: function (t, e) {
                          e.ctx;
                          var i = e.seriesIndex,
                            n = e.dataPointIndex,
                            a = e.w,
                            s = a.globals.seriesRangeStart[i][n];
                          return a.globals.seriesRangeEnd[i][n] - s;
                        },
                        background: { enabled: !1 },
                        style: { colors: ["#fff"] },
                      },
                      tooltip: {
                        shared: !1,
                        followCursor: !0,
                        custom: function (t) {
                          return t.w.config.plotOptions &&
                            t.w.config.plotOptions.bar &&
                            t.w.config.plotOptions.bar.horizontal
                            ? (function (t) {
                                var e = new R(t.ctx, null),
                                  i = e.getTooltipValues(t),
                                  n = i.color,
                                  a = i.seriesName,
                                  s = i.ylabel,
                                  r = i.startVal,
                                  o = i.endVal;
                                return e.buildCustomTooltipHTML({
                                  color: n,
                                  seriesName: a,
                                  ylabel: s,
                                  start: r,
                                  end: o,
                                });
                              })(t)
                            : (function (t) {
                                var e = new R(t.ctx, null),
                                  i = e.getTooltipValues(t),
                                  n = i.color,
                                  a = i.seriesName,
                                  s = i.ylabel,
                                  r = i.start,
                                  o = i.end;
                                return e.buildCustomTooltipHTML({
                                  color: n,
                                  seriesName: a,
                                  ylabel: s,
                                  start: r,
                                  end: o,
                                });
                              })(t);
                        },
                      },
                      xaxis: {
                        tickPlacement: "between",
                        tooltip: { enabled: !1 },
                        crosshairs: { stroke: { width: 0 } },
                      },
                    };
                  },
                },
                {
                  key: "area",
                  value: function () {
                    return {
                      stroke: { width: 4 },
                      fill: {
                        type: "gradient",
                        gradient: {
                          inverseColors: !1,
                          shade: "light",
                          type: "vertical",
                          opacityFrom: 0.65,
                          opacityTo: 0.5,
                          stops: [0, 100, 100],
                        },
                      },
                      markers: { size: 0, hover: { sizeOffset: 6 } },
                      tooltip: { followCursor: !1 },
                    };
                  },
                },
                {
                  key: "brush",
                  value: function (t) {
                    return v.extend(t, {
                      chart: {
                        toolbar: { autoSelected: "selection", show: !1 },
                        zoom: { enabled: !1 },
                      },
                      dataLabels: { enabled: !1 },
                      stroke: { width: 1 },
                      tooltip: { enabled: !1 },
                      xaxis: { tooltip: { enabled: !1 } },
                    });
                  },
                },
                {
                  key: "stacked100",
                  value: function (t) {
                    (t.dataLabels = t.dataLabels || {}),
                      (t.dataLabels.formatter =
                        t.dataLabels.formatter || void 0);
                    var e = t.dataLabels.formatter;
                    return (
                      t.yaxis.forEach(function (e, i) {
                        (t.yaxis[i].min = 0), (t.yaxis[i].max = 100);
                      }),
                      "bar" === t.chart.type &&
                        (t.dataLabels.formatter =
                          e ||
                          function (t) {
                            return "number" == typeof t && t
                              ? t.toFixed(0) + "%"
                              : t;
                          }),
                      t
                    );
                  },
                },
                {
                  key: "convertCatToNumeric",
                  value: function (t) {
                    return (t.xaxis.convertedCatToNumeric = !0), t;
                  },
                },
                {
                  key: "convertCatToNumericXaxis",
                  value: function (t, e, i) {
                    (t.xaxis.type = "numeric"),
                      (t.xaxis.labels = t.xaxis.labels || {}),
                      (t.xaxis.labels.formatter =
                        t.xaxis.labels.formatter ||
                        function (t) {
                          return v.isNumber(t) ? Math.floor(t) : t;
                        });
                    var n = t.xaxis.labels.formatter,
                      a =
                        t.xaxis.categories && t.xaxis.categories.length
                          ? t.xaxis.categories
                          : t.labels;
                    return (
                      i &&
                        i.length &&
                        (a = i.map(function (t) {
                          return Array.isArray(t) ? t : String(t);
                        })),
                      a &&
                        a.length &&
                        (t.xaxis.labels.formatter = function (t) {
                          return v.isNumber(t) ? n(a[Math.floor(t) - 1]) : n(t);
                        }),
                      (t.xaxis.categories = []),
                      (t.labels = []),
                      (t.xaxis.tickAmount = t.xaxis.tickAmount || "dataPoints"),
                      t
                    );
                  },
                },
                {
                  key: "bubble",
                  value: function () {
                    return {
                      dataLabels: { style: { colors: ["#fff"] } },
                      tooltip: { shared: !1, intersect: !0 },
                      xaxis: { crosshairs: { width: 0 } },
                      fill: {
                        type: "solid",
                        gradient: {
                          shade: "light",
                          inverse: !0,
                          shadeIntensity: 0.55,
                          opacityFrom: 0.4,
                          opacityTo: 0.8,
                        },
                      },
                    };
                  },
                },
                {
                  key: "scatter",
                  value: function () {
                    return {
                      dataLabels: { enabled: !1 },
                      tooltip: { shared: !1, intersect: !0 },
                      markers: {
                        size: 6,
                        strokeWidth: 1,
                        hover: { sizeOffset: 2 },
                      },
                    };
                  },
                },
                {
                  key: "heatmap",
                  value: function () {
                    return {
                      chart: { stacked: !1 },
                      fill: { opacity: 1 },
                      dataLabels: { style: { colors: ["#fff"] } },
                      stroke: { colors: ["#fff"] },
                      tooltip: {
                        followCursor: !0,
                        marker: { show: !1 },
                        x: { show: !1 },
                      },
                      legend: {
                        position: "top",
                        markers: { shape: "square", size: 10, offsetY: 2 },
                      },
                      grid: { padding: { right: 20 } },
                    };
                  },
                },
                {
                  key: "treemap",
                  value: function () {
                    return {
                      chart: { zoom: { enabled: !1 } },
                      dataLabels: {
                        style: {
                          fontSize: 14,
                          fontWeight: 600,
                          colors: ["#fff"],
                        },
                      },
                      stroke: { show: !0, width: 2, colors: ["#fff"] },
                      legend: { show: !1 },
                      fill: { gradient: { stops: [0, 100] } },
                      tooltip: { followCursor: !0, x: { show: !1 } },
                      grid: { padding: { left: 0, right: 0 } },
                      xaxis: {
                        crosshairs: { show: !1 },
                        tooltip: { enabled: !1 },
                      },
                    };
                  },
                },
                {
                  key: "pie",
                  value: function () {
                    return {
                      chart: { toolbar: { show: !1 } },
                      plotOptions: { pie: { donut: { labels: { show: !1 } } } },
                      dataLabels: {
                        formatter: function (t) {
                          return t.toFixed(1) + "%";
                        },
                        style: { colors: ["#fff"] },
                        background: { enabled: !1 },
                        dropShadow: { enabled: !0 },
                      },
                      stroke: { colors: ["#fff"] },
                      fill: {
                        opacity: 1,
                        gradient: { shade: "light", stops: [0, 100] },
                      },
                      tooltip: { theme: "dark", fillSeriesColor: !0 },
                      legend: { position: "right" },
                    };
                  },
                },
                {
                  key: "donut",
                  value: function () {
                    return {
                      chart: { toolbar: { show: !1 } },
                      dataLabels: {
                        formatter: function (t) {
                          return t.toFixed(1) + "%";
                        },
                        style: { colors: ["#fff"] },
                        background: { enabled: !1 },
                        dropShadow: { enabled: !0 },
                      },
                      stroke: { colors: ["#fff"] },
                      fill: {
                        opacity: 1,
                        gradient: {
                          shade: "light",
                          shadeIntensity: 0.35,
                          stops: [80, 100],
                          opacityFrom: 1,
                          opacityTo: 1,
                        },
                      },
                      tooltip: { theme: "dark", fillSeriesColor: !0 },
                      legend: { position: "right" },
                    };
                  },
                },
                {
                  key: "polarArea",
                  value: function () {
                    return (
                      (this.opts.yaxis[0].tickAmount = this.opts.yaxis[0]
                        .tickAmount
                        ? this.opts.yaxis[0].tickAmount
                        : 6),
                      {
                        chart: { toolbar: { show: !1 } },
                        dataLabels: {
                          formatter: function (t) {
                            return t.toFixed(1) + "%";
                          },
                          enabled: !1,
                        },
                        stroke: { show: !0, width: 2 },
                        fill: { opacity: 0.7 },
                        tooltip: { theme: "dark", fillSeriesColor: !0 },
                        legend: { position: "right" },
                      }
                    );
                  },
                },
                {
                  key: "radar",
                  value: function () {
                    return (
                      (this.opts.yaxis[0].labels.offsetY = this.opts.yaxis[0]
                        .labels.offsetY
                        ? this.opts.yaxis[0].labels.offsetY
                        : 6),
                      {
                        dataLabels: {
                          enabled: !1,
                          style: { fontSize: "11px" },
                        },
                        stroke: { width: 2 },
                        markers: { size: 3, strokeWidth: 1, strokeOpacity: 1 },
                        fill: { opacity: 0.2 },
                        tooltip: {
                          shared: !1,
                          intersect: !0,
                          followCursor: !0,
                        },
                        grid: { show: !1 },
                        xaxis: {
                          labels: {
                            formatter: function (t) {
                              return t;
                            },
                            style: { colors: ["#a8a8a8"], fontSize: "11px" },
                          },
                          tooltip: { enabled: !1 },
                          crosshairs: { show: !1 },
                        },
                      }
                    );
                  },
                },
                {
                  key: "radialBar",
                  value: function () {
                    return {
                      chart: {
                        animations: {
                          dynamicAnimation: { enabled: !0, speed: 800 },
                        },
                        toolbar: { show: !1 },
                      },
                      fill: {
                        gradient: {
                          shade: "dark",
                          shadeIntensity: 0.4,
                          inverseColors: !1,
                          type: "diagonal2",
                          opacityFrom: 1,
                          opacityTo: 1,
                          stops: [70, 98, 100],
                        },
                      },
                      legend: { show: !1, position: "right" },
                      tooltip: { enabled: !1, fillSeriesColor: !0 },
                    };
                  },
                },
                {
                  key: "_getBoxTooltip",
                  value: function (t, e, i, n, a) {
                    var s = t.globals.seriesCandleO[e][i],
                      r = t.globals.seriesCandleH[e][i],
                      o = t.globals.seriesCandleM[e][i],
                      l = t.globals.seriesCandleL[e][i],
                      c = t.globals.seriesCandleC[e][i];
                    return t.config.series[e].type &&
                      t.config.series[e].type !== a
                      ? '<div class="apexcharts-custom-tooltip">\n          '
                          .concat(
                            t.config.series[e].name
                              ? t.config.series[e].name
                              : "series-" + (e + 1),
                            ": <strong>"
                          )
                          .concat(
                            t.globals.series[e][i],
                            "</strong>\n        </div>"
                          )
                      : '<div class="apexcharts-tooltip-box apexcharts-tooltip-'.concat(
                          t.config.chart.type,
                          '">'
                        ) +
                          "<div>".concat(n[0], ': <span class="value">') +
                          s +
                          "</span></div>" +
                          "<div>".concat(n[1], ': <span class="value">') +
                          r +
                          "</span></div>" +
                          (o
                            ? "<div>".concat(n[2], ': <span class="value">') +
                              o +
                              "</span></div>"
                            : "") +
                          "<div>".concat(n[3], ': <span class="value">') +
                          l +
                          "</span></div>" +
                          "<div>".concat(n[4], ': <span class="value">') +
                          c +
                          "</span></div></div>";
                  },
                },
              ]),
              t
            );
          })(),
          Y = (function () {
            function t(e) {
              s(this, t), (this.opts = e);
            }
            return (
              o(t, [
                {
                  key: "init",
                  value: function (t) {
                    var e = t.responsiveOverride,
                      i = this.opts,
                      n = new L(),
                      s = new H(i);
                    (this.chartType = i.chart.type),
                      "histogram" === this.chartType &&
                        ((i.chart.type = "bar"),
                        (i = v.extend(
                          { plotOptions: { bar: { columnWidth: "99.99%" } } },
                          i
                        ))),
                      (i = this.extendYAxis(i)),
                      (i = this.extendAnnotations(i));
                    var r = n.init(),
                      o = {};
                    if (i && "object" === a(i)) {
                      var l = {};
                      (l =
                        -1 !==
                        [
                          "line",
                          "area",
                          "bar",
                          "candlestick",
                          "boxPlot",
                          "rangeBar",
                          "histogram",
                          "bubble",
                          "scatter",
                          "heatmap",
                          "treemap",
                          "pie",
                          "polarArea",
                          "donut",
                          "radar",
                          "radialBar",
                        ].indexOf(i.chart.type)
                          ? s[i.chart.type]()
                          : s.line()),
                        i.chart.brush &&
                          i.chart.brush.enabled &&
                          (l = s.brush(l)),
                        i.chart.stacked &&
                          "100%" === i.chart.stackType &&
                          (i = s.stacked100(i)),
                        this.checkForDarkTheme(window.Apex),
                        this.checkForDarkTheme(i),
                        (i.xaxis = i.xaxis || window.Apex.xaxis || {}),
                        e || (i.xaxis.convertedCatToNumeric = !1),
                        (((i = this.checkForCatToNumericXAxis(
                          this.chartType,
                          l,
                          i
                        )).chart.sparkline &&
                          i.chart.sparkline.enabled) ||
                          (window.Apex.chart &&
                            window.Apex.chart.sparkline &&
                            window.Apex.chart.sparkline.enabled)) &&
                          (l = s.sparkline(l)),
                        (o = v.extend(r, l));
                    }
                    var c = v.extend(o, window.Apex);
                    return (r = v.extend(c, i)), this.handleUserInputErrors(r);
                  },
                },
                {
                  key: "checkForCatToNumericXAxis",
                  value: function (t, e, i) {
                    var n = new H(i),
                      a =
                        "bar" === t &&
                        i.plotOptions &&
                        i.plotOptions.bar &&
                        i.plotOptions.bar.horizontal,
                      s =
                        "pie" === t ||
                        "polarArea" === t ||
                        "donut" === t ||
                        "radar" === t ||
                        "radialBar" === t ||
                        "heatmap" === t,
                      r =
                        "datetime" !== i.xaxis.type &&
                        "numeric" !== i.xaxis.type,
                      o = i.xaxis.tickPlacement
                        ? i.xaxis.tickPlacement
                        : e.xaxis && e.xaxis.tickPlacement;
                    return (
                      a ||
                        s ||
                        !r ||
                        "between" === o ||
                        (i = n.convertCatToNumeric(i)),
                      i
                    );
                  },
                },
                {
                  key: "extendYAxis",
                  value: function (t, e) {
                    var i = new L();
                    (void 0 === t.yaxis ||
                      !t.yaxis ||
                      (Array.isArray(t.yaxis) && 0 === t.yaxis.length)) &&
                      (t.yaxis = {}),
                      t.yaxis.constructor !== Array &&
                        window.Apex.yaxis &&
                        window.Apex.yaxis.constructor !== Array &&
                        (t.yaxis = v.extend(t.yaxis, window.Apex.yaxis)),
                      t.yaxis.constructor !== Array
                        ? (t.yaxis = [v.extend(i.yAxis, t.yaxis)])
                        : (t.yaxis = v.extendArray(t.yaxis, i.yAxis));
                    var n = !1;
                    t.yaxis.forEach(function (t) {
                      t.logarithmic && (n = !0);
                    });
                    var a = t.series;
                    return (
                      e && !a && (a = e.config.series),
                      n &&
                        a.length !== t.yaxis.length &&
                        a.length &&
                        (t.yaxis = a.map(function (e, n) {
                          if (
                            (e.name || (a[n].name = "series-".concat(n + 1)),
                            t.yaxis[n])
                          )
                            return (
                              (t.yaxis[n].seriesName = a[n].name), t.yaxis[n]
                            );
                          var s = v.extend(i.yAxis, t.yaxis[0]);
                          return (s.show = !1), s;
                        })),
                      n &&
                        a.length > 1 &&
                        a.length !== t.yaxis.length &&
                        console.warn(
                          "A multi-series logarithmic chart should have equal number of series and y-axes. Please make sure to equalize both."
                        ),
                      t
                    );
                  },
                },
                {
                  key: "extendAnnotations",
                  value: function (t) {
                    return (
                      void 0 === t.annotations &&
                        ((t.annotations = {}),
                        (t.annotations.yaxis = []),
                        (t.annotations.xaxis = []),
                        (t.annotations.points = [])),
                      (t = this.extendYAxisAnnotations(t)),
                      (t = this.extendXAxisAnnotations(t)),
                      this.extendPointAnnotations(t)
                    );
                  },
                },
                {
                  key: "extendYAxisAnnotations",
                  value: function (t) {
                    var e = new L();
                    return (
                      (t.annotations.yaxis = v.extendArray(
                        void 0 !== t.annotations.yaxis
                          ? t.annotations.yaxis
                          : [],
                        e.yAxisAnnotation
                      )),
                      t
                    );
                  },
                },
                {
                  key: "extendXAxisAnnotations",
                  value: function (t) {
                    var e = new L();
                    return (
                      (t.annotations.xaxis = v.extendArray(
                        void 0 !== t.annotations.xaxis
                          ? t.annotations.xaxis
                          : [],
                        e.xAxisAnnotation
                      )),
                      t
                    );
                  },
                },
                {
                  key: "extendPointAnnotations",
                  value: function (t) {
                    var e = new L();
                    return (
                      (t.annotations.points = v.extendArray(
                        void 0 !== t.annotations.points
                          ? t.annotations.points
                          : [],
                        e.pointAnnotation
                      )),
                      t
                    );
                  },
                },
                {
                  key: "checkForDarkTheme",
                  value: function (t) {
                    t.theme &&
                      "dark" === t.theme.mode &&
                      (t.tooltip || (t.tooltip = {}),
                      "light" !== t.tooltip.theme && (t.tooltip.theme = "dark"),
                      t.chart.foreColor || (t.chart.foreColor = "#f6f7f8"),
                      t.chart.background || (t.chart.background = "#424242"),
                      t.theme.palette || (t.theme.palette = "palette4"));
                  },
                },
                {
                  key: "handleUserInputErrors",
                  value: function (t) {
                    var e = t;
                    if (e.tooltip.shared && e.tooltip.intersect)
                      throw new Error(
                        "tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false."
                      );
                    if (
                      "bar" === e.chart.type &&
                      e.plotOptions.bar.horizontal
                    ) {
                      if (e.yaxis.length > 1)
                        throw new Error(
                          "Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false"
                        );
                      e.yaxis[0].reversed && (e.yaxis[0].opposite = !0),
                        (e.xaxis.tooltip.enabled = !1),
                        (e.yaxis[0].tooltip.enabled = !1),
                        (e.chart.zoom.enabled = !1);
                    }
                    return (
                      ("bar" !== e.chart.type && "rangeBar" !== e.chart.type) ||
                        (e.tooltip.shared &&
                          "barWidth" === e.xaxis.crosshairs.width &&
                          e.series.length > 1 &&
                          (e.xaxis.crosshairs.width = "tickWidth")),
                      ("candlestick" !== e.chart.type &&
                        "boxPlot" !== e.chart.type) ||
                        (e.yaxis[0].reversed &&
                          (console.warn(
                            "Reversed y-axis in ".concat(
                              e.chart.type,
                              " chart is not supported."
                            )
                          ),
                          (e.yaxis[0].reversed = !1))),
                      Array.isArray(e.stroke.width) &&
                        "line" !== e.chart.type &&
                        "area" !== e.chart.type &&
                        (console.warn(
                          "stroke.width option accepts array only for line and area charts. Reverted back to Number"
                        ),
                        (e.stroke.width = e.stroke.width[0])),
                      e
                    );
                  },
                },
              ]),
              t
            );
          })(),
          W = (function () {
            function t() {
              s(this, t);
            }
            return (
              o(t, [
                {
                  key: "initGlobalVars",
                  value: function (t) {
                    (t.series = []),
                      (t.seriesCandleO = []),
                      (t.seriesCandleH = []),
                      (t.seriesCandleM = []),
                      (t.seriesCandleL = []),
                      (t.seriesCandleC = []),
                      (t.seriesRangeStart = []),
                      (t.seriesRangeEnd = []),
                      (t.seriesRangeBar = []),
                      (t.seriesPercent = []),
                      (t.seriesGoals = []),
                      (t.seriesX = []),
                      (t.seriesZ = []),
                      (t.seriesNames = []),
                      (t.seriesTotals = []),
                      (t.seriesLog = []),
                      (t.seriesColors = []),
                      (t.stackedSeriesTotals = []),
                      (t.seriesXvalues = []),
                      (t.seriesYvalues = []),
                      (t.labels = []),
                      (t.categoryLabels = []),
                      (t.timescaleLabels = []),
                      (t.noLabelsProvided = !1),
                      (t.resizeTimer = null),
                      (t.selectionResizeTimer = null),
                      (t.delayedElements = []),
                      (t.pointsArray = []),
                      (t.dataLabelsRects = []),
                      (t.isXNumeric = !1),
                      (t.xaxisLabelsCount = 0),
                      (t.skipLastTimelinelabel = !1),
                      (t.skipFirstTimelinelabel = !1),
                      (t.isDataXYZ = !1),
                      (t.isMultiLineX = !1),
                      (t.isMultipleYAxis = !1),
                      (t.maxY = -Number.MAX_VALUE),
                      (t.minY = Number.MIN_VALUE),
                      (t.minYArr = []),
                      (t.maxYArr = []),
                      (t.maxX = -Number.MAX_VALUE),
                      (t.minX = Number.MAX_VALUE),
                      (t.initialMaxX = -Number.MAX_VALUE),
                      (t.initialMinX = Number.MAX_VALUE),
                      (t.maxDate = 0),
                      (t.minDate = Number.MAX_VALUE),
                      (t.minZ = Number.MAX_VALUE),
                      (t.maxZ = -Number.MAX_VALUE),
                      (t.minXDiff = Number.MAX_VALUE),
                      (t.yAxisScale = []),
                      (t.xAxisScale = null),
                      (t.xAxisTicksPositions = []),
                      (t.yLabelsCoords = []),
                      (t.yTitleCoords = []),
                      (t.barPadForNumericAxis = 0),
                      (t.padHorizontal = 0),
                      (t.xRange = 0),
                      (t.yRange = []),
                      (t.zRange = 0),
                      (t.dataPoints = 0),
                      (t.xTickAmount = 0);
                  },
                },
                {
                  key: "globalVars",
                  value: function (t) {
                    return {
                      chartID: null,
                      cuid: null,
                      events: {
                        beforeMount: [],
                        mounted: [],
                        updated: [],
                        clicked: [],
                        selection: [],
                        dataPointSelection: [],
                        zoomed: [],
                        scrolled: [],
                      },
                      colors: [],
                      clientX: null,
                      clientY: null,
                      fill: { colors: [] },
                      stroke: { colors: [] },
                      dataLabels: { style: { colors: [] } },
                      radarPolygons: { fill: { colors: [] } },
                      markers: {
                        colors: [],
                        size: t.markers.size,
                        largestSize: 0,
                      },
                      animationEnded: !1,
                      isTouchDevice:
                        "ontouchstart" in window || navigator.msMaxTouchPoints,
                      isDirty: !1,
                      isExecCalled: !1,
                      initialConfig: null,
                      initialSeries: [],
                      lastXAxis: [],
                      lastYAxis: [],
                      columnSeries: null,
                      labels: [],
                      timescaleLabels: [],
                      noLabelsProvided: !1,
                      allSeriesCollapsed: !1,
                      collapsedSeries: [],
                      collapsedSeriesIndices: [],
                      ancillaryCollapsedSeries: [],
                      ancillaryCollapsedSeriesIndices: [],
                      risingSeries: [],
                      dataFormatXNumeric: !1,
                      capturedSeriesIndex: -1,
                      capturedDataPointIndex: -1,
                      selectedDataPoints: [],
                      goldenPadding: 35,
                      invalidLogScale: !1,
                      ignoreYAxisIndexes: [],
                      yAxisSameScaleIndices: [],
                      maxValsInArrayIndex: 0,
                      radialSize: 0,
                      selection: void 0,
                      zoomEnabled:
                        "zoom" === t.chart.toolbar.autoSelected &&
                        t.chart.toolbar.tools.zoom &&
                        t.chart.zoom.enabled,
                      panEnabled:
                        "pan" === t.chart.toolbar.autoSelected &&
                        t.chart.toolbar.tools.pan,
                      selectionEnabled:
                        "selection" === t.chart.toolbar.autoSelected &&
                        t.chart.toolbar.tools.selection,
                      yaxis: null,
                      mousedown: !1,
                      lastClientPosition: {},
                      visibleXRange: void 0,
                      yValueDecimal: 0,
                      total: 0,
                      SVGNS: "http://www.w3.org/2000/svg",
                      svgWidth: 0,
                      svgHeight: 0,
                      noData: !1,
                      locale: {},
                      dom: {},
                      memory: { methodsToExec: [] },
                      shouldAnimate: !0,
                      skipLastTimelinelabel: !1,
                      skipFirstTimelinelabel: !1,
                      delayedElements: [],
                      axisCharts: !0,
                      isDataXYZ: !1,
                      resized: !1,
                      resizeTimer: null,
                      comboCharts: !1,
                      dataChanged: !1,
                      previousPaths: [],
                      allSeriesHasEqualX: !0,
                      pointsArray: [],
                      dataLabelsRects: [],
                      lastDrawnDataLabelsIndexes: [],
                      hasNullValues: !1,
                      easing: null,
                      zoomed: !1,
                      gridWidth: 0,
                      gridHeight: 0,
                      rotateXLabels: !1,
                      defaultLabels: !1,
                      xLabelFormatter: void 0,
                      yLabelFormatters: [],
                      xaxisTooltipFormatter: void 0,
                      ttKeyFormatter: void 0,
                      ttVal: void 0,
                      ttZFormatter: void 0,
                      LINE_HEIGHT_RATIO: 1.618,
                      xAxisLabelsHeight: 0,
                      xAxisLabelsWidth: 0,
                      yAxisLabelsWidth: 0,
                      scaleX: 1,
                      scaleY: 1,
                      translateX: 0,
                      translateY: 0,
                      translateYAxisX: [],
                      yAxisWidths: [],
                      translateXAxisY: 0,
                      translateXAxisX: 0,
                      tooltip: null,
                    };
                  },
                },
                {
                  key: "init",
                  value: function (t) {
                    var e = this.globalVars(t);
                    return (
                      this.initGlobalVars(e),
                      (e.initialConfig = v.extend({}, t)),
                      (e.initialSeries = v.clone(t.series)),
                      (e.lastXAxis = v.clone(e.initialConfig.xaxis)),
                      (e.lastYAxis = v.clone(e.initialConfig.yaxis)),
                      e
                    );
                  },
                },
              ]),
              t
            );
          })(),
          B = (function () {
            function t(e) {
              s(this, t), (this.opts = e);
            }
            return (
              o(t, [
                {
                  key: "init",
                  value: function () {
                    var t = new Y(this.opts).init({ responsiveOverride: !1 });
                    return { config: t, globals: new W().init(t) };
                  },
                },
              ]),
              t
            );
          })(),
          j = (function () {
            function t(e) {
              s(this, t),
                (this.ctx = e),
                (this.w = e.w),
                (this.twoDSeries = []),
                (this.threeDSeries = []),
                (this.twoDSeriesX = []),
                (this.seriesGoals = []),
                (this.coreUtils = new A(this.ctx));
            }
            return (
              o(t, [
                {
                  key: "isMultiFormat",
                  value: function () {
                    return this.isFormatXY() || this.isFormat2DArray();
                  },
                },
                {
                  key: "isFormatXY",
                  value: function () {
                    var t = this.w.config.series.slice(),
                      e = new z(this.ctx);
                    if (
                      ((this.activeSeriesIndex =
                        e.getActiveConfigSeriesIndex()),
                      void 0 !== t[this.activeSeriesIndex].data &&
                        t[this.activeSeriesIndex].data.length > 0 &&
                        null !== t[this.activeSeriesIndex].data[0] &&
                        void 0 !== t[this.activeSeriesIndex].data[0].x &&
                        null !== t[this.activeSeriesIndex].data[0])
                    )
                      return !0;
                  },
                },
                {
                  key: "isFormat2DArray",
                  value: function () {
                    var t = this.w.config.series.slice(),
                      e = new z(this.ctx);
                    if (
                      ((this.activeSeriesIndex =
                        e.getActiveConfigSeriesIndex()),
                      void 0 !== t[this.activeSeriesIndex].data &&
                        t[this.activeSeriesIndex].data.length > 0 &&
                        void 0 !== t[this.activeSeriesIndex].data[0] &&
                        null !== t[this.activeSeriesIndex].data[0] &&
                        t[this.activeSeriesIndex].data[0].constructor === Array)
                    )
                      return !0;
                  },
                },
                {
                  key: "handleFormat2DArray",
                  value: function (t, e) {
                    for (
                      var i = this.w.config,
                        n = this.w.globals,
                        a =
                          "boxPlot" === i.chart.type ||
                          "boxPlot" === i.series[e].type,
                        s = 0;
                      s < t[e].data.length;
                      s++
                    )
                      if (
                        (void 0 !== t[e].data[s][1] &&
                          (Array.isArray(t[e].data[s][1]) &&
                          4 === t[e].data[s][1].length &&
                          !a
                            ? this.twoDSeries.push(
                                v.parseNumber(t[e].data[s][1][3])
                              )
                            : t[e].data[s].length >= 5
                            ? this.twoDSeries.push(
                                v.parseNumber(t[e].data[s][4])
                              )
                            : this.twoDSeries.push(
                                v.parseNumber(t[e].data[s][1])
                              ),
                          (n.dataFormatXNumeric = !0)),
                        "datetime" === i.xaxis.type)
                      ) {
                        var r = new Date(t[e].data[s][0]);
                        (r = new Date(r).getTime()), this.twoDSeriesX.push(r);
                      } else this.twoDSeriesX.push(t[e].data[s][0]);
                    for (var o = 0; o < t[e].data.length; o++)
                      void 0 !== t[e].data[o][2] &&
                        (this.threeDSeries.push(t[e].data[o][2]),
                        (n.isDataXYZ = !0));
                  },
                },
                {
                  key: "handleFormatXY",
                  value: function (t, e) {
                    var i = this.w.config,
                      n = this.w.globals,
                      a = new X(this.ctx),
                      s = e;
                    n.collapsedSeriesIndices.indexOf(e) > -1 &&
                      (s = this.activeSeriesIndex);
                    for (var r = 0; r < t[e].data.length; r++)
                      void 0 !== t[e].data[r].y &&
                        (Array.isArray(t[e].data[r].y)
                          ? this.twoDSeries.push(
                              v.parseNumber(
                                t[e].data[r].y[t[e].data[r].y.length - 1]
                              )
                            )
                          : this.twoDSeries.push(
                              v.parseNumber(t[e].data[r].y)
                            )),
                        void 0 !== t[e].data[r].goals &&
                        Array.isArray(t[e].data[r].goals)
                          ? (void 0 === this.seriesGoals[e] &&
                              (this.seriesGoals[e] = []),
                            this.seriesGoals[e].push(t[e].data[r].goals))
                          : (void 0 === this.seriesGoals[e] &&
                              (this.seriesGoals[e] = []),
                            this.seriesGoals[e].push(null));
                    for (var o = 0; o < t[s].data.length; o++) {
                      var l = "string" == typeof t[s].data[o].x,
                        c = Array.isArray(t[s].data[o].x),
                        h = !c && !!a.isValidDate(t[s].data[o].x.toString());
                      if (l || h)
                        if (l || i.xaxis.convertedCatToNumeric) {
                          var d = n.isBarHorizontal && n.isRangeData;
                          "datetime" !== i.xaxis.type || d
                            ? ((this.fallbackToCategory = !0),
                              this.twoDSeriesX.push(t[s].data[o].x))
                            : this.twoDSeriesX.push(
                                a.parseDate(t[s].data[o].x)
                              );
                        } else
                          "datetime" === i.xaxis.type
                            ? this.twoDSeriesX.push(
                                a.parseDate(t[s].data[o].x.toString())
                              )
                            : ((n.dataFormatXNumeric = !0),
                              (n.isXNumeric = !0),
                              this.twoDSeriesX.push(
                                parseFloat(t[s].data[o].x)
                              ));
                      else
                        c
                          ? ((this.fallbackToCategory = !0),
                            this.twoDSeriesX.push(t[s].data[o].x))
                          : ((n.isXNumeric = !0),
                            (n.dataFormatXNumeric = !0),
                            this.twoDSeriesX.push(t[s].data[o].x));
                    }
                    if (t[e].data[0] && void 0 !== t[e].data[0].z) {
                      for (var u = 0; u < t[e].data.length; u++)
                        this.threeDSeries.push(t[e].data[u].z);
                      n.isDataXYZ = !0;
                    }
                  },
                },
                {
                  key: "handleRangeData",
                  value: function (t, e) {
                    var i = this.w.globals,
                      n = {};
                    return (
                      this.isFormat2DArray()
                        ? (n = this.handleRangeDataFormat("array", t, e))
                        : this.isFormatXY() &&
                          (n = this.handleRangeDataFormat("xy", t, e)),
                      i.seriesRangeStart.push(n.start),
                      i.seriesRangeEnd.push(n.end),
                      i.seriesRangeBar.push(n.rangeUniques),
                      i.seriesRangeBar.forEach(function (t, e) {
                        t &&
                          t.forEach(function (t, e) {
                            t.y.forEach(function (e, i) {
                              for (var n = 0; n < t.y.length; n++)
                                if (i !== n) {
                                  var a = e.y1,
                                    s = e.y2,
                                    r = t.y[n].y1;
                                  a <= t.y[n].y2 &&
                                    r <= s &&
                                    (t.overlaps.indexOf(e.rangeName) < 0 &&
                                      t.overlaps.push(e.rangeName),
                                    t.overlaps.indexOf(t.y[n].rangeName) < 0 &&
                                      t.overlaps.push(t.y[n].rangeName));
                                }
                            });
                          });
                      }),
                      n
                    );
                  },
                },
                {
                  key: "handleCandleStickBoxData",
                  value: function (t, e) {
                    var i = this.w.globals,
                      n = {};
                    return (
                      this.isFormat2DArray()
                        ? (n = this.handleCandleStickBoxDataFormat(
                            "array",
                            t,
                            e
                          ))
                        : this.isFormatXY() &&
                          (n = this.handleCandleStickBoxDataFormat("xy", t, e)),
                      (i.seriesCandleO[e] = n.o),
                      (i.seriesCandleH[e] = n.h),
                      (i.seriesCandleM[e] = n.m),
                      (i.seriesCandleL[e] = n.l),
                      (i.seriesCandleC[e] = n.c),
                      n
                    );
                  },
                },
                {
                  key: "handleRangeDataFormat",
                  value: function (t, e, i) {
                    var n = [],
                      a = [],
                      s = e[i].data
                        .filter(function (t, e, i) {
                          return (
                            e ===
                            i.findIndex(function (e) {
                              return e.x === t.x;
                            })
                          );
                        })
                        .map(function (t, e) {
                          return { x: t.x, overlaps: [], y: [] };
                        }),
                      r =
                        "Please provide [Start, End] values in valid format. Read more https://apexcharts.com/docs/series/#rangecharts",
                      o = new z(this.ctx).getActiveConfigSeriesIndex();
                    if ("array" === t) {
                      if (2 !== e[o].data[0][1].length) throw new Error(r);
                      for (var l = 0; l < e[i].data.length; l++)
                        n.push(e[i].data[l][1][0]), a.push(e[i].data[l][1][1]);
                    } else if ("xy" === t) {
                      if (2 !== e[o].data[0].y.length) throw new Error(r);
                      for (
                        var c = function (t) {
                            var r = v.randomId(),
                              o = e[i].data[t].x,
                              l = {
                                y1: e[i].data[t].y[0],
                                y2: e[i].data[t].y[1],
                                rangeName: r,
                              };
                            e[i].data[t].rangeName = r;
                            var c = s.findIndex(function (t) {
                              return t.x === o;
                            });
                            s[c].y.push(l), n.push(l.y1), a.push(l.y2);
                          },
                          h = 0;
                        h < e[i].data.length;
                        h++
                      )
                        c(h);
                    }
                    return { start: n, end: a, rangeUniques: s };
                  },
                },
                {
                  key: "handleCandleStickBoxDataFormat",
                  value: function (t, e, i) {
                    var n = this.w,
                      a =
                        "boxPlot" === n.config.chart.type ||
                        "boxPlot" === n.config.series[i].type,
                      s = [],
                      r = [],
                      o = [],
                      l = [],
                      c = [];
                    if ("array" === t)
                      if (
                        (a && 6 === e[i].data[0].length) ||
                        (!a && 5 === e[i].data[0].length)
                      )
                        for (var h = 0; h < e[i].data.length; h++)
                          s.push(e[i].data[h][1]),
                            r.push(e[i].data[h][2]),
                            a
                              ? (o.push(e[i].data[h][3]),
                                l.push(e[i].data[h][4]),
                                c.push(e[i].data[h][5]))
                              : (l.push(e[i].data[h][3]),
                                c.push(e[i].data[h][4]));
                      else
                        for (var d = 0; d < e[i].data.length; d++)
                          Array.isArray(e[i].data[d][1]) &&
                            (s.push(e[i].data[d][1][0]),
                            r.push(e[i].data[d][1][1]),
                            a
                              ? (o.push(e[i].data[d][1][2]),
                                l.push(e[i].data[d][1][3]),
                                c.push(e[i].data[d][1][4]))
                              : (l.push(e[i].data[d][1][2]),
                                c.push(e[i].data[d][1][3])));
                    else if ("xy" === t)
                      for (var u = 0; u < e[i].data.length; u++)
                        Array.isArray(e[i].data[u].y) &&
                          (s.push(e[i].data[u].y[0]),
                          r.push(e[i].data[u].y[1]),
                          a
                            ? (o.push(e[i].data[u].y[2]),
                              l.push(e[i].data[u].y[3]),
                              c.push(e[i].data[u].y[4]))
                            : (l.push(e[i].data[u].y[2]),
                              c.push(e[i].data[u].y[3])));
                    return { o: s, h: r, m: o, l, c };
                  },
                },
                {
                  key: "parseDataAxisCharts",
                  value: function (t) {
                    var e = this,
                      i =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : this.ctx,
                      n = this.w.config,
                      a = this.w.globals,
                      s = new X(i),
                      r =
                        n.labels.length > 0
                          ? n.labels.slice()
                          : n.xaxis.categories.slice();
                    a.isRangeBar =
                      "rangeBar" === n.chart.type && a.isBarHorizontal;
                    for (
                      var o = function () {
                          for (var t = 0; t < r.length; t++)
                            if ("string" == typeof r[t]) {
                              if (!s.isValidDate(r[t]))
                                throw new Error(
                                  "You have provided invalid Date format. Please provide a valid JavaScript Date"
                                );
                              e.twoDSeriesX.push(s.parseDate(r[t]));
                            } else e.twoDSeriesX.push(r[t]);
                        },
                        l = 0;
                      l < t.length;
                      l++
                    ) {
                      if (
                        ((this.twoDSeries = []),
                        (this.twoDSeriesX = []),
                        (this.threeDSeries = []),
                        void 0 === t[l].data)
                      )
                        return void console.error(
                          "It is a possibility that you may have not included 'data' property in series."
                        );
                      if (
                        (("rangeBar" !== n.chart.type &&
                          "rangeArea" !== n.chart.type &&
                          "rangeBar" !== t[l].type &&
                          "rangeArea" !== t[l].type) ||
                          ((a.isRangeData = !0), this.handleRangeData(t, l)),
                        this.isMultiFormat())
                      )
                        this.isFormat2DArray()
                          ? this.handleFormat2DArray(t, l)
                          : this.isFormatXY() && this.handleFormatXY(t, l),
                          ("candlestick" !== n.chart.type &&
                            "candlestick" !== t[l].type &&
                            "boxPlot" !== n.chart.type &&
                            "boxPlot" !== t[l].type) ||
                            this.handleCandleStickBoxData(t, l),
                          a.series.push(this.twoDSeries),
                          a.labels.push(this.twoDSeriesX),
                          a.seriesX.push(this.twoDSeriesX),
                          (a.seriesGoals = this.seriesGoals),
                          l !== this.activeSeriesIndex ||
                            this.fallbackToCategory ||
                            (a.isXNumeric = !0);
                      else {
                        "datetime" === n.xaxis.type
                          ? ((a.isXNumeric = !0),
                            o(),
                            a.seriesX.push(this.twoDSeriesX))
                          : "numeric" === n.xaxis.type &&
                            ((a.isXNumeric = !0),
                            r.length > 0 &&
                              ((this.twoDSeriesX = r),
                              a.seriesX.push(this.twoDSeriesX))),
                          a.labels.push(this.twoDSeriesX);
                        var c = t[l].data.map(function (t) {
                          return v.parseNumber(t);
                        });
                        a.series.push(c);
                      }
                      a.seriesZ.push(this.threeDSeries),
                        void 0 !== t[l].name
                          ? a.seriesNames.push(t[l].name)
                          : a.seriesNames.push("series-" + parseInt(l + 1, 10)),
                        void 0 !== t[l].color
                          ? a.seriesColors.push(t[l].color)
                          : a.seriesColors.push(void 0);
                    }
                    return this.w;
                  },
                },
                {
                  key: "parseDataNonAxisCharts",
                  value: function (t) {
                    var e = this.w.globals,
                      i = this.w.config;
                    (e.series = t.slice()), (e.seriesNames = i.labels.slice());
                    for (var n = 0; n < e.series.length; n++)
                      void 0 === e.seriesNames[n] &&
                        e.seriesNames.push("series-" + (n + 1));
                    return this.w;
                  },
                },
                {
                  key: "handleExternalLabelsData",
                  value: function (t) {
                    var e = this.w.config,
                      i = this.w.globals;
                    e.xaxis.categories.length > 0
                      ? (i.labels = e.xaxis.categories)
                      : e.labels.length > 0
                      ? (i.labels = e.labels.slice())
                      : this.fallbackToCategory
                      ? ((i.labels = i.labels[0]),
                        i.seriesRangeBar.length &&
                          (i.seriesRangeBar.map(function (t) {
                            t.forEach(function (t) {
                              i.labels.indexOf(t.x) < 0 &&
                                t.x &&
                                i.labels.push(t.x);
                            });
                          }),
                          (i.labels = i.labels.filter(function (t, e, i) {
                            return i.indexOf(t) === e;
                          }))),
                        e.xaxis.convertedCatToNumeric &&
                          (new H(e).convertCatToNumericXaxis(
                            e,
                            this.ctx,
                            i.seriesX[0]
                          ),
                          this._generateExternalLabels(t)))
                      : this._generateExternalLabels(t);
                  },
                },
                {
                  key: "_generateExternalLabels",
                  value: function (t) {
                    var e = this.w.globals,
                      i = this.w.config,
                      n = [];
                    if (e.axisCharts) {
                      if (e.series.length > 0)
                        for (
                          var a = 0;
                          a < e.series[e.maxValsInArrayIndex].length;
                          a++
                        )
                          n.push(a + 1);
                      e.seriesX = [];
                      for (var s = 0; s < t.length; s++) e.seriesX.push(n);
                      e.isXNumeric = !0;
                    }
                    if (0 === n.length) {
                      n = e.axisCharts
                        ? []
                        : e.series.map(function (t, e) {
                            return e + 1;
                          });
                      for (var r = 0; r < t.length; r++) e.seriesX.push(n);
                    }
                    (e.labels = n),
                      i.xaxis.convertedCatToNumeric &&
                        (e.categoryLabels = n.map(function (t) {
                          return i.xaxis.labels.formatter(t);
                        })),
                      (e.noLabelsProvided = !0);
                  },
                },
                {
                  key: "parseData",
                  value: function (t) {
                    var e = this.w,
                      i = e.config,
                      n = e.globals;
                    if (
                      (this.excludeCollapsedSeriesInYAxis(),
                      (this.fallbackToCategory = !1),
                      this.ctx.core.resetGlobals(),
                      this.ctx.core.isMultipleY(),
                      n.axisCharts
                        ? this.parseDataAxisCharts(t)
                        : this.parseDataNonAxisCharts(t),
                      this.coreUtils.getLargestSeries(),
                      "bar" === i.chart.type && i.chart.stacked)
                    ) {
                      var a = new z(this.ctx);
                      n.series = a.setNullSeriesToZeroValues(n.series);
                    }
                    this.coreUtils.getSeriesTotals(),
                      n.axisCharts && this.coreUtils.getStackedSeriesTotals(),
                      this.coreUtils.getPercentSeries(),
                      n.dataFormatXNumeric ||
                        (n.isXNumeric &&
                          ("numeric" !== i.xaxis.type ||
                            0 !== i.labels.length ||
                            0 !== i.xaxis.categories.length)) ||
                        this.handleExternalLabelsData(t);
                    for (
                      var s = this.coreUtils.getCategoryLabels(n.labels), r = 0;
                      r < s.length;
                      r++
                    )
                      if (Array.isArray(s[r])) {
                        n.isMultiLineX = !0;
                        break;
                      }
                  },
                },
                {
                  key: "excludeCollapsedSeriesInYAxis",
                  value: function () {
                    var t = this,
                      e = this.w;
                    e.globals.ignoreYAxisIndexes =
                      e.globals.collapsedSeries.map(function (i, n) {
                        if (
                          t.w.globals.isMultipleYAxis &&
                          !e.config.chart.stacked
                        )
                          return i.index;
                      });
                  },
                },
              ]),
              t
            );
          })(),
          V = (function () {
            function t(e) {
              s(this, t),
                (this.ctx = e),
                (this.w = e.w),
                (this.tooltipKeyFormat = "dd MMM");
            }
            return (
              o(t, [
                {
                  key: "xLabelFormat",
                  value: function (t, e, i, n) {
                    var a = this.w;
                    if (
                      "datetime" === a.config.xaxis.type &&
                      void 0 === a.config.xaxis.labels.formatter &&
                      void 0 === a.config.tooltip.x.formatter
                    ) {
                      var s = new X(this.ctx);
                      return s.formatDate(
                        s.getDate(e),
                        a.config.tooltip.x.format
                      );
                    }
                    return t(e, i, n);
                  },
                },
                {
                  key: "defaultGeneralFormatter",
                  value: function (t) {
                    return Array.isArray(t)
                      ? t.map(function (t) {
                          return t;
                        })
                      : t;
                  },
                },
                {
                  key: "defaultYFormatter",
                  value: function (t, e, i) {
                    var n = this.w;
                    return (
                      v.isNumber(t) &&
                        (t =
                          0 !== n.globals.yValueDecimal
                            ? t.toFixed(
                                void 0 !== e.decimalsInFloat
                                  ? e.decimalsInFloat
                                  : n.globals.yValueDecimal
                              )
                            : n.globals.maxYArr[i] - n.globals.minYArr[i] < 5
                            ? t.toFixed(1)
                            : t.toFixed(0)),
                      t
                    );
                  },
                },
                {
                  key: "setLabelFormatters",
                  value: function () {
                    var t = this,
                      e = this.w;
                    return (
                      (e.globals.xaxisTooltipFormatter = function (e) {
                        return t.defaultGeneralFormatter(e);
                      }),
                      (e.globals.ttKeyFormatter = function (e) {
                        return t.defaultGeneralFormatter(e);
                      }),
                      (e.globals.ttZFormatter = function (t) {
                        return t;
                      }),
                      (e.globals.legendFormatter = function (e) {
                        return t.defaultGeneralFormatter(e);
                      }),
                      void 0 !== e.config.xaxis.labels.formatter
                        ? (e.globals.xLabelFormatter =
                            e.config.xaxis.labels.formatter)
                        : (e.globals.xLabelFormatter = function (t) {
                            if (v.isNumber(t)) {
                              if (
                                !e.config.xaxis.convertedCatToNumeric &&
                                "numeric" === e.config.xaxis.type
                              ) {
                                if (v.isNumber(e.config.xaxis.decimalsInFloat))
                                  return t.toFixed(
                                    e.config.xaxis.decimalsInFloat
                                  );
                                var i = e.globals.maxX - e.globals.minX;
                                return i > 0 && i < 100
                                  ? t.toFixed(1)
                                  : t.toFixed(0);
                              }
                              return e.globals.isBarHorizontal &&
                                e.globals.maxY - e.globals.minYArr < 4
                                ? t.toFixed(1)
                                : t.toFixed(0);
                            }
                            return t;
                          }),
                      "function" == typeof e.config.tooltip.x.formatter
                        ? (e.globals.ttKeyFormatter =
                            e.config.tooltip.x.formatter)
                        : (e.globals.ttKeyFormatter =
                            e.globals.xLabelFormatter),
                      "function" == typeof e.config.xaxis.tooltip.formatter &&
                        (e.globals.xaxisTooltipFormatter =
                          e.config.xaxis.tooltip.formatter),
                      (Array.isArray(e.config.tooltip.y) ||
                        void 0 !== e.config.tooltip.y.formatter) &&
                        (e.globals.ttVal = e.config.tooltip.y),
                      void 0 !== e.config.tooltip.z.formatter &&
                        (e.globals.ttZFormatter = e.config.tooltip.z.formatter),
                      void 0 !== e.config.legend.formatter &&
                        (e.globals.legendFormatter = e.config.legend.formatter),
                      e.config.yaxis.forEach(function (i, n) {
                        void 0 !== i.labels.formatter
                          ? (e.globals.yLabelFormatters[n] = i.labels.formatter)
                          : (e.globals.yLabelFormatters[n] = function (a) {
                              return e.globals.xyCharts
                                ? Array.isArray(a)
                                  ? a.map(function (e) {
                                      return t.defaultYFormatter(e, i, n);
                                    })
                                  : t.defaultYFormatter(a, i, n)
                                : a;
                            });
                      }),
                      e.globals
                    );
                  },
                },
                {
                  key: "heatmapLabelFormatters",
                  value: function () {
                    var t = this.w;
                    if ("heatmap" === t.config.chart.type) {
                      t.globals.yAxisScale[0].result =
                        t.globals.seriesNames.slice();
                      var e = t.globals.seriesNames.reduce(function (t, e) {
                        return t.length > e.length ? t : e;
                      }, 0);
                      (t.globals.yAxisScale[0].niceMax = e),
                        (t.globals.yAxisScale[0].niceMin = e);
                    }
                  },
                },
              ]),
              t
            );
          })(),
          G = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.w = e.w);
            }
            return (
              o(t, [
                {
                  key: "getLabel",
                  value: function (t, e, i, n) {
                    var a =
                        arguments.length > 4 && void 0 !== arguments[4]
                          ? arguments[4]
                          : [],
                      s =
                        arguments.length > 5 && void 0 !== arguments[5]
                          ? arguments[5]
                          : "12px",
                      r = this.w,
                      o = void 0 === t[n] ? "" : t[n],
                      l = o,
                      c = r.globals.xLabelFormatter,
                      h = r.config.xaxis.labels.formatter,
                      d = !1,
                      u = new V(this.ctx),
                      f = o;
                    (l = u.xLabelFormat(c, o, f, {
                      i: n,
                      dateFormatter: new X(this.ctx).formatDate,
                      w: r,
                    })),
                      void 0 !== h &&
                        (l = h(o, t[n], {
                          i: n,
                          dateFormatter: new X(this.ctx).formatDate,
                          w: r,
                        }));
                    var p = function (t) {
                      var i = null;
                      return (
                        e.forEach(function (t) {
                          "month" === t.unit
                            ? (i = "year")
                            : "day" === t.unit
                            ? (i = "month")
                            : "hour" === t.unit
                            ? (i = "day")
                            : "minute" === t.unit && (i = "hour");
                        }),
                        i === t
                      );
                    };
                    e.length > 0
                      ? ((d = p(e[n].unit)),
                        (i = e[n].position),
                        (l = e[n].value))
                      : "datetime" === r.config.xaxis.type &&
                        void 0 === h &&
                        (l = ""),
                      void 0 === l && (l = ""),
                      (l = Array.isArray(l) ? l : l.toString());
                    var g = new w(this.ctx),
                      m = {};
                    m = r.globals.rotateXLabels
                      ? g.getTextRects(
                          l,
                          parseInt(s, 10),
                          null,
                          "rotate(".concat(
                            r.config.xaxis.labels.rotate,
                            " 0 0)"
                          ),
                          !1
                        )
                      : g.getTextRects(l, parseInt(s, 10));
                    var x =
                      !r.config.xaxis.labels.showDuplicates &&
                      this.ctx.timeScale;
                    return (
                      !Array.isArray(l) &&
                        (0 === l.indexOf("NaN") ||
                          0 === l.toLowerCase().indexOf("invalid") ||
                          l.toLowerCase().indexOf("infinity") >= 0 ||
                          (a.indexOf(l) >= 0 && x)) &&
                        (l = ""),
                      { x: i, text: l, textRect: m, isBold: d }
                    );
                  },
                },
                {
                  key: "checkLabelBasedOnTickamount",
                  value: function (t, e, i) {
                    var n = this.w,
                      a = n.config.xaxis.tickAmount;
                    return (
                      "dataPoints" === a &&
                        (a = Math.round(n.globals.gridWidth / 120)),
                      a > i ||
                        t % Math.round(i / (a + 1)) == 0 ||
                        (e.text = ""),
                      e
                    );
                  },
                },
                {
                  key: "checkForOverflowingLabels",
                  value: function (t, e, i, n, a) {
                    var s = this.w;
                    if (
                      (0 === t &&
                        s.globals.skipFirstTimelinelabel &&
                        (e.text = ""),
                      t === i - 1 &&
                        s.globals.skipLastTimelinelabel &&
                        (e.text = ""),
                      s.config.xaxis.labels.hideOverlappingLabels &&
                        n.length > 0)
                    ) {
                      var r = a[a.length - 1];
                      e.x <
                        r.textRect.width /
                          (s.globals.rotateXLabels
                            ? Math.abs(s.config.xaxis.labels.rotate) / 12
                            : 1.01) +
                          r.x && (e.text = "");
                    }
                    return e;
                  },
                },
                {
                  key: "checkForReversedLabels",
                  value: function (t, e) {
                    var i = this.w;
                    return (
                      i.config.yaxis[t] &&
                        i.config.yaxis[t].reversed &&
                        e.reverse(),
                      e
                    );
                  },
                },
                {
                  key: "isYAxisHidden",
                  value: function (t) {
                    var e = this.w,
                      i = new A(this.ctx);
                    return (
                      !e.config.yaxis[t].show ||
                      (!e.config.yaxis[t].showForNullSeries &&
                        i.isSeriesNull(t) &&
                        -1 === e.globals.collapsedSeriesIndices.indexOf(t))
                    );
                  },
                },
                {
                  key: "getYAxisForeColor",
                  value: function (t, e) {
                    var i = this.w;
                    return (
                      Array.isArray(t) &&
                        i.globals.yAxisScale[e] &&
                        this.ctx.theme.pushExtraColors(
                          t,
                          i.globals.yAxisScale[e].result.length,
                          !1
                        ),
                      t
                    );
                  },
                },
                {
                  key: "drawYAxisTicks",
                  value: function (t, e, i, n, a, s, r) {
                    var o = this.w,
                      l = new w(this.ctx),
                      c = o.globals.translateY;
                    if (n.show && e > 0) {
                      !0 === o.config.yaxis[a].opposite && (t += n.width);
                      for (var h = e; h >= 0; h--) {
                        var d =
                          c + e / 10 + o.config.yaxis[a].labels.offsetY - 1;
                        o.globals.isBarHorizontal && (d = s * h),
                          "heatmap" === o.config.chart.type && (d += s / 2);
                        var u = l.drawLine(
                          t + i.offsetX - n.width + n.offsetX,
                          d + n.offsetY,
                          t + i.offsetX + n.offsetX,
                          d + n.offsetY,
                          n.color
                        );
                        r.add(u), (c += s);
                      }
                    }
                  },
                },
              ]),
              t
            );
          })(),
          q = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.w = e.w);
            }
            return (
              o(t, [
                {
                  key: "scaleSvgNode",
                  value: function (t, e) {
                    var i = parseFloat(t.getAttributeNS(null, "width")),
                      n = parseFloat(t.getAttributeNS(null, "height"));
                    t.setAttributeNS(null, "width", i * e),
                      t.setAttributeNS(null, "height", n * e),
                      t.setAttributeNS(null, "viewBox", "0 0 " + i + " " + n);
                  },
                },
                {
                  key: "fixSvgStringForIe11",
                  value: function (t) {
                    if (!v.isIE11()) return t;
                    var e = 0,
                      i = t.replace(
                        /xmlns="http:\/\/www.w3.org\/2000\/svg"/g,
                        function (t) {
                          return 2 == ++e
                            ? 'xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.dev"'
                            : t;
                        }
                      );
                    return (i = i.replace(/xmlns:NS\d+=""/g, "")).replace(
                      /NS\d+:(\w+:\w+=")/g,
                      "$1"
                    );
                  },
                },
                {
                  key: "getSvgString",
                  value: function (t) {
                    var e = this.w.globals.dom.Paper.svg();
                    if (1 !== t) {
                      var i = this.w.globals.dom.Paper.node.cloneNode(!0);
                      this.scaleSvgNode(i, t),
                        (e = new XMLSerializer().serializeToString(i));
                    }
                    return this.fixSvgStringForIe11(e);
                  },
                },
                {
                  key: "cleanup",
                  value: function () {
                    var t = this.w,
                      e = t.globals.dom.baseEl.getElementsByClassName(
                        "apexcharts-xcrosshairs"
                      ),
                      i = t.globals.dom.baseEl.getElementsByClassName(
                        "apexcharts-ycrosshairs"
                      ),
                      n = t.globals.dom.baseEl.querySelectorAll(
                        ".apexcharts-zoom-rect, .apexcharts-selection-rect"
                      );
                    Array.prototype.forEach.call(n, function (t) {
                      t.setAttribute("width", 0);
                    }),
                      e &&
                        e[0] &&
                        (e[0].setAttribute("x", -500),
                        e[0].setAttribute("x1", -500),
                        e[0].setAttribute("x2", -500)),
                      i &&
                        i[0] &&
                        (i[0].setAttribute("y", -100),
                        i[0].setAttribute("y1", -100),
                        i[0].setAttribute("y2", -100));
                  },
                },
                {
                  key: "svgUrl",
                  value: function () {
                    this.cleanup();
                    var t = this.getSvgString(),
                      e = new Blob([t], {
                        type: "image/svg+xml;charset=utf-8",
                      });
                    return URL.createObjectURL(e);
                  },
                },
                {
                  key: "dataURI",
                  value: function (t) {
                    var e = this;
                    return new Promise(function (i) {
                      var n = e.w,
                        a = t ? t.scale || t.width / n.globals.svgWidth : 1;
                      e.cleanup();
                      var s = document.createElement("canvas");
                      (s.width = n.globals.svgWidth * a),
                        (s.height =
                          parseInt(n.globals.dom.elWrap.style.height, 10) * a);
                      var r =
                          "transparent" === n.config.chart.background
                            ? "#fff"
                            : n.config.chart.background,
                        o = s.getContext("2d");
                      (o.fillStyle = r),
                        o.fillRect(0, 0, s.width * a, s.height * a);
                      var l = e.getSvgString(a);
                      if (window.canvg && v.isIE11()) {
                        var c = window.canvg.Canvg.fromString(o, l, {
                          ignoreClear: !0,
                          ignoreDimensions: !0,
                        });
                        c.start();
                        var h = s.msToBlob();
                        c.stop(), i({ blob: h });
                      } else {
                        var d = "data:image/svg+xml," + encodeURIComponent(l),
                          u = new Image();
                        (u.crossOrigin = "anonymous"),
                          (u.onload = function () {
                            if ((o.drawImage(u, 0, 0), s.msToBlob)) {
                              var t = s.msToBlob();
                              i({ blob: t });
                            } else {
                              var e = s.toDataURL("image/png");
                              i({ imgURI: e });
                            }
                          }),
                          (u.src = d);
                      }
                    });
                  },
                },
                {
                  key: "exportToSVG",
                  value: function () {
                    this.triggerDownload(
                      this.svgUrl(),
                      this.w.config.chart.toolbar.export.svg.filename,
                      ".svg"
                    );
                  },
                },
                {
                  key: "exportToPng",
                  value: function () {
                    var t = this;
                    this.dataURI().then(function (e) {
                      var i = e.imgURI,
                        n = e.blob;
                      n
                        ? navigator.msSaveOrOpenBlob(
                            n,
                            t.w.globals.chartID + ".png"
                          )
                        : t.triggerDownload(
                            i,
                            t.w.config.chart.toolbar.export.png.filename,
                            ".png"
                          );
                    });
                  },
                },
                {
                  key: "exportToCSV",
                  value: function (t) {
                    var e = this,
                      i = t.series,
                      n = t.columnDelimiter,
                      a = t.lineDelimiter,
                      s = void 0 === a ? "\n" : a,
                      r = this.w,
                      o = [],
                      l = [],
                      c = "data:text/csv;charset=utf-8,\ufeff",
                      h = new j(this.ctx),
                      d = new G(this.ctx),
                      u = function (t) {
                        var i = "";
                        if (r.globals.axisCharts) {
                          if (
                            "category" === r.config.xaxis.type ||
                            r.config.xaxis.convertedCatToNumeric
                          )
                            if (r.globals.isBarHorizontal) {
                              var a = r.globals.yLabelFormatters[0],
                                s = new z(e.ctx).getActiveConfigSeriesIndex();
                              i = a(r.globals.labels[t], {
                                seriesIndex: s,
                                dataPointIndex: t,
                                w: r,
                              });
                            } else
                              i = d.getLabel(
                                r.globals.labels,
                                r.globals.timescaleLabels,
                                0,
                                t
                              ).text;
                          "datetime" === r.config.xaxis.type &&
                            (r.config.xaxis.categories.length
                              ? (i = r.config.xaxis.categories[t])
                              : r.config.labels.length &&
                                (i = r.config.labels[t]));
                        } else i = r.config.labels[t];
                        return (
                          Array.isArray(i) && (i = i.join(" ")),
                          v.isNumber(i) ? i : i.split(n).join("")
                        );
                      };
                    o.push(r.config.chart.toolbar.export.csv.headerCategory),
                      i.map(function (t, e) {
                        var i = t.name ? t.name : "series-".concat(e);
                        r.globals.axisCharts &&
                          o.push(
                            i.split(n).join("")
                              ? i.split(n).join("")
                              : "series-".concat(e)
                          );
                      }),
                      r.globals.axisCharts ||
                        (o.push(r.config.chart.toolbar.export.csv.headerValue),
                        l.push(o.join(n))),
                      i.map(function (t, e) {
                        r.globals.axisCharts
                          ? (function (t, e) {
                              if (
                                (o.length && 0 === e && l.push(o.join(n)),
                                t.data && t.data.length)
                              )
                                for (var a = 0; a < t.data.length; a++) {
                                  o = [];
                                  var s = u(a);
                                  if (
                                    (s ||
                                      (h.isFormatXY()
                                        ? (s = i[e].data[a].x)
                                        : h.isFormat2DArray() &&
                                          (s = i[e].data[a]
                                            ? i[e].data[a][0]
                                            : "")),
                                    0 === e)
                                  ) {
                                    o.push(
                                      ((d = s),
                                      "datetime" === r.config.xaxis.type &&
                                      String(d).length >= 10
                                        ? r.config.chart.toolbar.export.csv.dateFormatter(
                                            s
                                          )
                                        : v.isNumber(s)
                                        ? s
                                        : s.split(n).join(""))
                                    );
                                    for (
                                      var c = 0;
                                      c < r.globals.series.length;
                                      c++
                                    )
                                      o.push(r.globals.series[c][a]);
                                  }
                                  ("candlestick" === r.config.chart.type ||
                                    (t.type && "candlestick" === t.type)) &&
                                    (o.pop(),
                                    o.push(r.globals.seriesCandleO[e][a]),
                                    o.push(r.globals.seriesCandleH[e][a]),
                                    o.push(r.globals.seriesCandleL[e][a]),
                                    o.push(r.globals.seriesCandleC[e][a])),
                                    ("boxPlot" === r.config.chart.type ||
                                      (t.type && "boxPlot" === t.type)) &&
                                      (o.pop(),
                                      o.push(r.globals.seriesCandleO[e][a]),
                                      o.push(r.globals.seriesCandleH[e][a]),
                                      o.push(r.globals.seriesCandleM[e][a]),
                                      o.push(r.globals.seriesCandleL[e][a]),
                                      o.push(r.globals.seriesCandleC[e][a])),
                                    "rangeBar" === r.config.chart.type &&
                                      (o.pop(),
                                      o.push(r.globals.seriesRangeStart[e][a]),
                                      o.push(r.globals.seriesRangeEnd[e][a])),
                                    o.length && l.push(o.join(n));
                                }
                              var d;
                            })(t, e)
                          : ((o = []).push(
                              r.globals.labels[e].split(n).join("")
                            ),
                            o.push(r.globals.series[e]),
                            l.push(o.join(n)));
                      }),
                      (c += l.join(s)),
                      this.triggerDownload(
                        encodeURI(c),
                        r.config.chart.toolbar.export.csv.filename,
                        ".csv"
                      );
                  },
                },
                {
                  key: "triggerDownload",
                  value: function (t, e, i) {
                    var n = document.createElement("a");
                    (n.href = t),
                      (n.download = (e || this.w.globals.chartID) + i),
                      document.body.appendChild(n),
                      n.click(),
                      document.body.removeChild(n);
                  },
                },
              ]),
              t
            );
          })(),
          U = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.w = e.w);
              var i = this.w;
              (this.axesUtils = new G(e)),
                (this.xaxisLabels = i.globals.labels.slice()),
                i.globals.timescaleLabels.length > 0 &&
                  !i.globals.isBarHorizontal &&
                  (this.xaxisLabels = i.globals.timescaleLabels.slice()),
                i.config.xaxis.overwriteCategories &&
                  (this.xaxisLabels = i.config.xaxis.overwriteCategories),
                (this.drawnLabels = []),
                (this.drawnLabelsRects = []),
                "top" === i.config.xaxis.position
                  ? (this.offY = 0)
                  : (this.offY = i.globals.gridHeight + 1),
                (this.offY = this.offY + i.config.xaxis.axisBorder.offsetY),
                (this.isCategoryBarHorizontal =
                  "bar" === i.config.chart.type &&
                  i.config.plotOptions.bar.horizontal),
                (this.xaxisFontSize = i.config.xaxis.labels.style.fontSize),
                (this.xaxisFontFamily = i.config.xaxis.labels.style.fontFamily),
                (this.xaxisForeColors = i.config.xaxis.labels.style.colors),
                (this.xaxisBorderWidth = i.config.xaxis.axisBorder.width),
                this.isCategoryBarHorizontal &&
                  (this.xaxisBorderWidth =
                    i.config.yaxis[0].axisBorder.width.toString()),
                this.xaxisBorderWidth.indexOf("%") > -1
                  ? (this.xaxisBorderWidth =
                      (i.globals.gridWidth *
                        parseInt(this.xaxisBorderWidth, 10)) /
                      100)
                  : (this.xaxisBorderWidth = parseInt(
                      this.xaxisBorderWidth,
                      10
                    )),
                (this.xaxisBorderHeight = i.config.xaxis.axisBorder.height),
                (this.yaxis = i.config.yaxis[0]);
            }
            return (
              o(t, [
                {
                  key: "drawXaxis",
                  value: function () {
                    var t,
                      e = this,
                      i = this.w,
                      n = new w(this.ctx),
                      a = n.group({
                        class: "apexcharts-xaxis",
                        transform: "translate("
                          .concat(i.config.xaxis.offsetX, ", ")
                          .concat(i.config.xaxis.offsetY, ")"),
                      }),
                      s = n.group({
                        class: "apexcharts-xaxis-texts-g",
                        transform: "translate("
                          .concat(i.globals.translateXAxisX, ", ")
                          .concat(i.globals.translateXAxisY, ")"),
                      });
                    a.add(s);
                    for (
                      var r = i.globals.padHorizontal, o = [], l = 0;
                      l < this.xaxisLabels.length;
                      l++
                    )
                      o.push(this.xaxisLabels[l]);
                    var c = o.length;
                    if (i.globals.isXNumeric) {
                      var h = c > 1 ? c - 1 : c;
                      (t = i.globals.gridWidth / h),
                        (r = r + t / 2 + i.config.xaxis.labels.offsetX);
                    } else
                      (t = i.globals.gridWidth / o.length),
                        (r = r + t + i.config.xaxis.labels.offsetX);
                    for (
                      var d = function (a) {
                          var l = r - t / 2 + i.config.xaxis.labels.offsetX;
                          0 === a &&
                            1 === c &&
                            t / 2 === r &&
                            1 === i.globals.dataPoints &&
                            (l = i.globals.gridWidth / 2);
                          var h = e.axesUtils.getLabel(
                              o,
                              i.globals.timescaleLabels,
                              l,
                              a,
                              e.drawnLabels,
                              e.xaxisFontSize
                            ),
                            d = 28;
                          if (
                            (i.globals.rotateXLabels && (d = 22),
                            (h =
                              void 0 !== i.config.xaxis.tickAmount &&
                              "dataPoints" !== i.config.xaxis.tickAmount &&
                              "datetime" !== i.config.xaxis.type
                                ? e.axesUtils.checkLabelBasedOnTickamount(
                                    a,
                                    h,
                                    c
                                  )
                                : e.axesUtils.checkForOverflowingLabels(
                                    a,
                                    h,
                                    c,
                                    e.drawnLabels,
                                    e.drawnLabelsRects
                                  )).text && i.globals.xaxisLabelsCount++,
                            i.config.xaxis.labels.show)
                          ) {
                            var u = n.drawText({
                              x: h.x,
                              y:
                                e.offY +
                                i.config.xaxis.labels.offsetY +
                                d -
                                ("top" === i.config.xaxis.position
                                  ? i.globals.xAxisHeight +
                                    i.config.xaxis.axisTicks.height -
                                    2
                                  : 0),
                              text: h.text,
                              textAnchor: "middle",
                              fontWeight: h.isBold
                                ? 600
                                : i.config.xaxis.labels.style.fontWeight,
                              fontSize: e.xaxisFontSize,
                              fontFamily: e.xaxisFontFamily,
                              foreColor: Array.isArray(e.xaxisForeColors)
                                ? i.config.xaxis.convertedCatToNumeric
                                  ? e.xaxisForeColors[i.globals.minX + a - 1]
                                  : e.xaxisForeColors[a]
                                : e.xaxisForeColors,
                              isPlainText: !1,
                              cssClass:
                                "apexcharts-xaxis-label " +
                                i.config.xaxis.labels.style.cssClass,
                            });
                            s.add(u);
                            var f = document.createElementNS(
                              i.globals.SVGNS,
                              "title"
                            );
                            (f.textContent = Array.isArray(h.text)
                              ? h.text.join(" ")
                              : h.text),
                              u.node.appendChild(f),
                              "" !== h.text &&
                                (e.drawnLabels.push(h.text),
                                e.drawnLabelsRects.push(h));
                          }
                          r += t;
                        },
                        u = 0;
                      u <= c - 1;
                      u++
                    )
                      d(u);
                    if (void 0 !== i.config.xaxis.title.text) {
                      var f = n.group({ class: "apexcharts-xaxis-title" }),
                        p = n.drawText({
                          x:
                            i.globals.gridWidth / 2 +
                            i.config.xaxis.title.offsetX,
                          y:
                            this.offY +
                            parseFloat(this.xaxisFontSize) +
                            i.globals.xAxisLabelsHeight +
                            i.config.xaxis.title.offsetY,
                          text: i.config.xaxis.title.text,
                          textAnchor: "middle",
                          fontSize: i.config.xaxis.title.style.fontSize,
                          fontFamily: i.config.xaxis.title.style.fontFamily,
                          fontWeight: i.config.xaxis.title.style.fontWeight,
                          foreColor: i.config.xaxis.title.style.color,
                          cssClass:
                            "apexcharts-xaxis-title-text " +
                            i.config.xaxis.title.style.cssClass,
                        });
                      f.add(p), a.add(f);
                    }
                    if (i.config.xaxis.axisBorder.show) {
                      var g = i.globals.barPadForNumericAxis,
                        m = n.drawLine(
                          i.globals.padHorizontal +
                            i.config.xaxis.axisBorder.offsetX -
                            g,
                          this.offY,
                          this.xaxisBorderWidth + g,
                          this.offY,
                          i.config.xaxis.axisBorder.color,
                          0,
                          this.xaxisBorderHeight
                        );
                      a.add(m);
                    }
                    return a;
                  },
                },
                {
                  key: "drawXaxisInversed",
                  value: function (t) {
                    var e,
                      i,
                      n = this,
                      a = this.w,
                      s = new w(this.ctx),
                      r = a.config.yaxis[0].opposite
                        ? a.globals.translateYAxisX[t]
                        : 0,
                      o = s.group({
                        class: "apexcharts-yaxis apexcharts-xaxis-inversed",
                        rel: t,
                      }),
                      l = s.group({
                        class:
                          "apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g",
                        transform: "translate(" + r + ", 0)",
                      });
                    o.add(l);
                    var c = [];
                    if (a.config.yaxis[t].show)
                      for (var h = 0; h < this.xaxisLabels.length; h++)
                        c.push(this.xaxisLabels[h]);
                    (e = a.globals.gridHeight / c.length), (i = -e / 2.2);
                    var d = a.globals.yLabelFormatters[0],
                      u = a.config.yaxis[0].labels;
                    if (u.show)
                      for (
                        var f = function (r) {
                            var o = void 0 === c[r] ? "" : c[r];
                            o = d(o, {
                              seriesIndex: t,
                              dataPointIndex: r,
                              w: a,
                            });
                            var h = n.axesUtils.getYAxisForeColor(
                                u.style.colors,
                                t
                              ),
                              f = 0;
                            Array.isArray(o) &&
                              (f =
                                (o.length / 2) *
                                parseInt(u.style.fontSize, 10));
                            var p = s.drawText({
                              x: u.offsetX - 15,
                              y: i + e + u.offsetY - f,
                              text: o,
                              textAnchor: n.yaxis.opposite ? "start" : "end",
                              foreColor: Array.isArray(h) ? h[r] : h,
                              fontSize: u.style.fontSize,
                              fontFamily: u.style.fontFamily,
                              fontWeight: u.style.fontWeight,
                              isPlainText: !1,
                              cssClass:
                                "apexcharts-yaxis-label " + u.style.cssClass,
                            });
                            l.add(p);
                            var g = document.createElementNS(
                              a.globals.SVGNS,
                              "title"
                            );
                            if (
                              ((g.textContent = Array.isArray(o)
                                ? o.join(" ")
                                : o),
                              p.node.appendChild(g),
                              0 !== a.config.yaxis[t].labels.rotate)
                            ) {
                              var m = s.rotateAroundCenter(p.node);
                              p.node.setAttribute(
                                "transform",
                                "rotate("
                                  .concat(
                                    a.config.yaxis[t].labels.rotate,
                                    " 0 "
                                  )
                                  .concat(m.y, ")")
                              );
                            }
                            i += e;
                          },
                          p = 0;
                        p <= c.length - 1;
                        p++
                      )
                        f(p);
                    if (void 0 !== a.config.yaxis[0].title.text) {
                      var g = s.group({
                          class:
                            "apexcharts-yaxis-title apexcharts-xaxis-title-inversed",
                          transform: "translate(" + r + ", 0)",
                        }),
                        m = s.drawText({
                          x: 0,
                          y: a.globals.gridHeight / 2,
                          text: a.config.yaxis[0].title.text,
                          textAnchor: "middle",
                          foreColor: a.config.yaxis[0].title.style.color,
                          fontSize: a.config.yaxis[0].title.style.fontSize,
                          fontWeight: a.config.yaxis[0].title.style.fontWeight,
                          fontFamily: a.config.yaxis[0].title.style.fontFamily,
                          cssClass:
                            "apexcharts-yaxis-title-text " +
                            a.config.yaxis[0].title.style.cssClass,
                        });
                      g.add(m), o.add(g);
                    }
                    var x = 0;
                    this.isCategoryBarHorizontal &&
                      a.config.yaxis[0].opposite &&
                      (x = a.globals.gridWidth);
                    var v = a.config.xaxis.axisBorder;
                    if (v.show) {
                      var b = s.drawLine(
                        a.globals.padHorizontal + v.offsetX + x,
                        1 + v.offsetY,
                        a.globals.padHorizontal + v.offsetX + x,
                        a.globals.gridHeight + v.offsetY,
                        v.color,
                        0
                      );
                      o.add(b);
                    }
                    return (
                      a.config.yaxis[0].axisTicks.show &&
                        this.axesUtils.drawYAxisTicks(
                          x,
                          c.length,
                          a.config.yaxis[0].axisBorder,
                          a.config.yaxis[0].axisTicks,
                          0,
                          e,
                          o
                        ),
                      o
                    );
                  },
                },
                {
                  key: "drawXaxisTicks",
                  value: function (t, e) {
                    var i = this.w,
                      n = t;
                    if (!(t < 0 || t - 2 > i.globals.gridWidth)) {
                      var a = this.offY + i.config.xaxis.axisTicks.offsetY,
                        s = a + i.config.xaxis.axisTicks.height;
                      if (
                        ("top" === i.config.xaxis.position &&
                          (s = a - i.config.xaxis.axisTicks.height),
                        i.config.xaxis.axisTicks.show)
                      ) {
                        var r = new w(this.ctx).drawLine(
                          t + i.config.xaxis.axisTicks.offsetX,
                          a + i.config.xaxis.offsetY,
                          n + i.config.xaxis.axisTicks.offsetX,
                          s + i.config.xaxis.offsetY,
                          i.config.xaxis.axisTicks.color
                        );
                        e.add(r), r.node.classList.add("apexcharts-xaxis-tick");
                      }
                    }
                  },
                },
                {
                  key: "getXAxisTicksPositions",
                  value: function () {
                    var t = this.w,
                      e = [],
                      i = this.xaxisLabels.length,
                      n = t.globals.padHorizontal;
                    if (t.globals.timescaleLabels.length > 0)
                      for (var a = 0; a < i; a++)
                        (n = this.xaxisLabels[a].position), e.push(n);
                    else
                      for (var s = i, r = 0; r < s; r++) {
                        var o = s;
                        t.globals.isXNumeric &&
                          "bar" !== t.config.chart.type &&
                          (o -= 1),
                          (n += t.globals.gridWidth / o),
                          e.push(n);
                      }
                    return e;
                  },
                },
                {
                  key: "xAxisLabelCorrections",
                  value: function () {
                    var t = this.w,
                      e = new w(this.ctx),
                      i = t.globals.dom.baseEl.querySelector(
                        ".apexcharts-xaxis-texts-g"
                      ),
                      n = t.globals.dom.baseEl.querySelectorAll(
                        ".apexcharts-xaxis-texts-g text"
                      ),
                      a = t.globals.dom.baseEl.querySelectorAll(
                        ".apexcharts-yaxis-inversed text"
                      ),
                      s = t.globals.dom.baseEl.querySelectorAll(
                        ".apexcharts-xaxis-inversed-texts-g text tspan"
                      );
                    if (
                      t.globals.rotateXLabels ||
                      t.config.xaxis.labels.rotateAlways
                    )
                      for (var r = 0; r < n.length; r++) {
                        var o = e.rotateAroundCenter(n[r]);
                        (o.y = o.y - 1),
                          (o.x = o.x + 1),
                          n[r].setAttribute(
                            "transform",
                            "rotate("
                              .concat(t.config.xaxis.labels.rotate, " ")
                              .concat(o.x, " ")
                              .concat(o.y, ")")
                          ),
                          n[r].setAttribute("text-anchor", "end"),
                          i.setAttribute(
                            "transform",
                            "translate(0, ".concat(-10, ")")
                          );
                        var l = n[r].childNodes;
                        t.config.xaxis.labels.trim &&
                          Array.prototype.forEach.call(l, function (i) {
                            e.placeTextWithEllipsis(
                              i,
                              i.textContent,
                              t.globals.xAxisLabelsHeight -
                                ("bottom" === t.config.legend.position
                                  ? 20
                                  : 10)
                            );
                          });
                      }
                    else
                      !(function () {
                        for (
                          var i =
                              t.globals.gridWidth /
                              (t.globals.labels.length + 1),
                            a = 0;
                          a < n.length;
                          a++
                        ) {
                          var s = n[a].childNodes;
                          t.config.xaxis.labels.trim &&
                            "datetime" !== t.config.xaxis.type &&
                            Array.prototype.forEach.call(s, function (t) {
                              e.placeTextWithEllipsis(t, t.textContent, i);
                            });
                        }
                      })();
                    if (a.length > 0) {
                      var c = a[a.length - 1].getBBox(),
                        h = a[0].getBBox();
                      c.x < -20 &&
                        a[a.length - 1].parentNode.removeChild(a[a.length - 1]),
                        h.x + h.width > t.globals.gridWidth &&
                          !t.globals.isBarHorizontal &&
                          a[0].parentNode.removeChild(a[0]);
                      for (var d = 0; d < s.length; d++)
                        e.placeTextWithEllipsis(
                          s[d],
                          s[d].textContent,
                          t.config.yaxis[0].labels.maxWidth -
                            2 *
                              parseFloat(
                                t.config.yaxis[0].title.style.fontSize
                              ) -
                            20
                        );
                    }
                  },
                },
              ]),
              t
            );
          })(),
          $ = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.w = e.w);
              var i = this.w;
              (this.xaxisLabels = i.globals.labels.slice()),
                (this.axesUtils = new G(e)),
                (this.isRangeBar = i.globals.seriesRangeBar.length),
                i.globals.timescaleLabels.length > 0 &&
                  (this.xaxisLabels = i.globals.timescaleLabels.slice());
            }
            return (
              o(t, [
                {
                  key: "drawGridArea",
                  value: function () {
                    var t =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : null,
                      e = this.w,
                      i = new w(this.ctx);
                    null === t && (t = i.group({ class: "apexcharts-grid" }));
                    var n = i.drawLine(
                        e.globals.padHorizontal,
                        1,
                        e.globals.padHorizontal,
                        e.globals.gridHeight,
                        "transparent"
                      ),
                      a = i.drawLine(
                        e.globals.padHorizontal,
                        e.globals.gridHeight,
                        e.globals.gridWidth,
                        e.globals.gridHeight,
                        "transparent"
                      );
                    return t.add(a), t.add(n), t;
                  },
                },
                {
                  key: "drawGrid",
                  value: function () {
                    var t = null;
                    return (
                      this.w.globals.axisCharts &&
                        ((t = this.renderGrid()), this.drawGridArea(t.el)),
                      t
                    );
                  },
                },
                {
                  key: "createGridMask",
                  value: function () {
                    var t = this.w,
                      e = t.globals,
                      i = new w(this.ctx),
                      n = Array.isArray(t.config.stroke.width)
                        ? 0
                        : t.config.stroke.width;
                    if (Array.isArray(t.config.stroke.width)) {
                      var a = 0;
                      t.config.stroke.width.forEach(function (t) {
                        a = Math.max(a, t);
                      }),
                        (n = a);
                    }
                    (e.dom.elGridRectMask = document.createElementNS(
                      e.SVGNS,
                      "clipPath"
                    )),
                      e.dom.elGridRectMask.setAttribute(
                        "id",
                        "gridRectMask".concat(e.cuid)
                      ),
                      (e.dom.elGridRectMarkerMask = document.createElementNS(
                        e.SVGNS,
                        "clipPath"
                      )),
                      e.dom.elGridRectMarkerMask.setAttribute(
                        "id",
                        "gridRectMarkerMask".concat(e.cuid)
                      ),
                      (e.dom.elForecastMask = document.createElementNS(
                        e.SVGNS,
                        "clipPath"
                      )),
                      e.dom.elForecastMask.setAttribute(
                        "id",
                        "forecastMask".concat(e.cuid)
                      ),
                      (e.dom.elNonForecastMask = document.createElementNS(
                        e.SVGNS,
                        "clipPath"
                      )),
                      e.dom.elNonForecastMask.setAttribute(
                        "id",
                        "nonForecastMask".concat(e.cuid)
                      );
                    var s = t.config.chart.type,
                      r = 0,
                      o = 0;
                    ("bar" === s ||
                      "rangeBar" === s ||
                      "candlestick" === s ||
                      "boxPlot" === s ||
                      t.globals.comboBarCount > 0) &&
                      t.globals.isXNumeric &&
                      !t.globals.isBarHorizontal &&
                      ((r = t.config.grid.padding.left),
                      (o = t.config.grid.padding.right),
                      e.barPadForNumericAxis > r &&
                        ((r = e.barPadForNumericAxis),
                        (o = e.barPadForNumericAxis))),
                      (e.dom.elGridRect = i.drawRect(
                        -n / 2 - r - 2,
                        -n / 2,
                        e.gridWidth + n + o + r + 4,
                        e.gridHeight + n,
                        0,
                        "#fff"
                      )),
                      new A(this).getLargestMarkerSize();
                    var l = t.globals.markers.largestSize + 1;
                    (e.dom.elGridRectMarker = i.drawRect(
                      2 * -l,
                      2 * -l,
                      e.gridWidth + 4 * l,
                      e.gridHeight + 4 * l,
                      0,
                      "#fff"
                    )),
                      e.dom.elGridRectMask.appendChild(e.dom.elGridRect.node),
                      e.dom.elGridRectMarkerMask.appendChild(
                        e.dom.elGridRectMarker.node
                      );
                    var c = e.dom.baseEl.querySelector("defs");
                    c.appendChild(e.dom.elGridRectMask),
                      c.appendChild(e.dom.elForecastMask),
                      c.appendChild(e.dom.elNonForecastMask),
                      c.appendChild(e.dom.elGridRectMarkerMask);
                  },
                },
                {
                  key: "_drawGridLines",
                  value: function (t) {
                    var e = t.i,
                      i = t.x1,
                      n = t.y1,
                      a = t.x2,
                      s = t.y2,
                      r = t.xCount,
                      o = t.parent,
                      l = this.w;
                    (0 === e && l.globals.skipFirstTimelinelabel) ||
                      (e === r - 1 &&
                        l.globals.skipLastTimelinelabel &&
                        !l.config.xaxis.labels.formatter) ||
                      "radar" === l.config.chart.type ||
                      (l.config.grid.xaxis.lines.show &&
                        this._drawGridLine({
                          x1: i,
                          y1: n,
                          x2: a,
                          y2: s,
                          parent: o,
                        }),
                      new U(this.ctx).drawXaxisTicks(i, this.elg));
                  },
                },
                {
                  key: "_drawGridLine",
                  value: function (t) {
                    var e = t.x1,
                      i = t.y1,
                      n = t.x2,
                      a = t.y2,
                      s = t.parent,
                      r = this.w,
                      o = s.node.classList.contains(
                        "apexcharts-gridlines-horizontal"
                      ),
                      l = r.config.grid.strokeDashArray,
                      c = r.globals.barPadForNumericAxis,
                      h = new w(this).drawLine(
                        e - (o ? c : 0),
                        i,
                        n + (o ? c : 0),
                        a,
                        r.config.grid.borderColor,
                        l
                      );
                    h.node.classList.add("apexcharts-gridline"), s.add(h);
                  },
                },
                {
                  key: "_drawGridBandRect",
                  value: function (t) {
                    var e = t.c,
                      i = t.x1,
                      n = t.y1,
                      a = t.x2,
                      s = t.y2,
                      r = t.type,
                      o = this.w,
                      l = new w(this.ctx),
                      c = o.globals.barPadForNumericAxis;
                    if ("column" !== r || "datetime" !== o.config.xaxis.type) {
                      var h = o.config.grid[r].colors[e],
                        d = l.drawRect(
                          i - ("row" === r ? c : 0),
                          n,
                          a + ("row" === r ? 2 * c : 0),
                          s,
                          0,
                          h,
                          o.config.grid[r].opacity
                        );
                      this.elg.add(d),
                        d.attr(
                          "clip-path",
                          "url(#gridRectMask".concat(o.globals.cuid, ")")
                        ),
                        d.node.classList.add("apexcharts-grid-".concat(r));
                    }
                  },
                },
                {
                  key: "_drawXYLines",
                  value: function (t) {
                    var e = this,
                      i = t.xCount,
                      n = t.tickAmount,
                      a = this.w;
                    if (
                      a.config.grid.xaxis.lines.show ||
                      a.config.xaxis.axisTicks.show
                    ) {
                      var s,
                        r = a.globals.padHorizontal,
                        o = a.globals.gridHeight;
                      a.globals.timescaleLabels.length
                        ? (function (t) {
                            for (
                              var n = t.xC,
                                a = t.x1,
                                s = t.y1,
                                r = t.x2,
                                o = t.y2,
                                l = 0;
                              l < n;
                              l++
                            )
                              (a = e.xaxisLabels[l].position),
                                (r = e.xaxisLabels[l].position),
                                e._drawGridLines({
                                  i: l,
                                  x1: a,
                                  y1: s,
                                  x2: r,
                                  y2: o,
                                  xCount: i,
                                  parent: e.elgridLinesV,
                                });
                          })({ xC: i, x1: r, y1: 0, x2: s, y2: o })
                        : (a.globals.isXNumeric &&
                            (i = a.globals.xAxisScale.result.length),
                          a.config.xaxis.convertedCatToNumeric &&
                            (i = a.globals.xaxisLabelsCount),
                          (function (t) {
                            var n = t.xC,
                              s = t.x1,
                              r = t.y1,
                              o = t.x2,
                              l = t.y2;
                            if (
                              void 0 !== a.config.xaxis.tickAmount &&
                              "dataPoints" !== a.config.xaxis.tickAmount
                            )
                              a.globals.dom.baseEl
                                .querySelectorAll(
                                  ".apexcharts-text.apexcharts-xaxis-label tspan:not(:empty)"
                                )
                                .forEach(function (t, n) {
                                  var a = t.getBBox();
                                  e._drawGridLines({
                                    i: n,
                                    x1: a.x + a.width / 2,
                                    y1: r,
                                    x2: a.x + a.width / 2,
                                    y2: l,
                                    xCount: i,
                                    parent: e.elgridLinesV,
                                  });
                                });
                            else
                              for (
                                var c = 0;
                                c < n + (a.globals.isXNumeric ? 0 : 1);
                                c++
                              )
                                0 === c &&
                                  1 === n &&
                                  1 === a.globals.dataPoints &&
                                  (o = s = a.globals.gridWidth / 2),
                                  e._drawGridLines({
                                    i: c,
                                    x1: s,
                                    y1: r,
                                    x2: o,
                                    y2: l,
                                    xCount: i,
                                    parent: e.elgridLinesV,
                                  }),
                                  (o = s +=
                                    a.globals.gridWidth /
                                    (a.globals.isXNumeric ? n - 1 : n));
                          })({ xC: i, x1: r, y1: 0, x2: s, y2: o }));
                    }
                    if (a.config.grid.yaxis.lines.show) {
                      var l = 0,
                        c = 0,
                        h = a.globals.gridWidth,
                        d = n + 1;
                      this.isRangeBar && (d = a.globals.labels.length);
                      for (var u = 0; u < d + (this.isRangeBar ? 1 : 0); u++)
                        this._drawGridLine({
                          x1: 0,
                          y1: l,
                          x2: h,
                          y2: c,
                          parent: this.elgridLinesH,
                        }),
                          (c = l +=
                            a.globals.gridHeight / (this.isRangeBar ? d : n));
                    }
                  },
                },
                {
                  key: "_drawInvertedXYLines",
                  value: function (t) {
                    var e = t.xCount,
                      i = this.w;
                    if (
                      i.config.grid.xaxis.lines.show ||
                      i.config.xaxis.axisTicks.show
                    )
                      for (
                        var n,
                          a = i.globals.padHorizontal,
                          s = i.globals.gridHeight,
                          r = 0;
                        r < e + 1;
                        r++
                      )
                        i.config.grid.xaxis.lines.show &&
                          this._drawGridLine({
                            x1: a,
                            y1: 0,
                            x2: n,
                            y2: s,
                            parent: this.elgridLinesV,
                          }),
                          new U(this.ctx).drawXaxisTicks(a, this.elg),
                          (n = a = a + i.globals.gridWidth / e + 0.3);
                    if (i.config.grid.yaxis.lines.show)
                      for (
                        var o = 0, l = 0, c = i.globals.gridWidth, h = 0;
                        h < i.globals.dataPoints + 1;
                        h++
                      )
                        this._drawGridLine({
                          x1: 0,
                          y1: o,
                          x2: c,
                          y2: l,
                          parent: this.elgridLinesH,
                        }),
                          (l = o +=
                            i.globals.gridHeight / i.globals.dataPoints);
                  },
                },
                {
                  key: "renderGrid",
                  value: function () {
                    var t = this.w,
                      e = new w(this.ctx);
                    (this.elg = e.group({ class: "apexcharts-grid" })),
                      (this.elgridLinesH = e.group({
                        class: "apexcharts-gridlines-horizontal",
                      })),
                      (this.elgridLinesV = e.group({
                        class: "apexcharts-gridlines-vertical",
                      })),
                      this.elg.add(this.elgridLinesH),
                      this.elg.add(this.elgridLinesV),
                      t.config.grid.show ||
                        (this.elgridLinesV.hide(), this.elgridLinesH.hide());
                    for (
                      var i,
                        n = t.globals.yAxisScale.length
                          ? t.globals.yAxisScale[0].result.length - 1
                          : 5,
                        a = 0;
                      a < t.globals.series.length &&
                      (void 0 !== t.globals.yAxisScale[a] &&
                        (n = t.globals.yAxisScale[a].result.length - 1),
                      !(n > 2));
                      a++
                    );
                    return (
                      !t.globals.isBarHorizontal || this.isRangeBar
                        ? ((i = this.xaxisLabels.length),
                          this.isRangeBar &&
                            ((n = t.globals.labels.length),
                            t.config.xaxis.tickAmount &&
                              t.config.xaxis.labels.formatter &&
                              (i = t.config.xaxis.tickAmount)),
                          this._drawXYLines({ xCount: i, tickAmount: n }))
                        : ((i = n),
                          (n = t.globals.xTickAmount),
                          this._drawInvertedXYLines({
                            xCount: i,
                            tickAmount: n,
                          })),
                      this.drawGridBands(i, n),
                      { el: this.elg, xAxisTickWidth: t.globals.gridWidth / i }
                    );
                  },
                },
                {
                  key: "drawGridBands",
                  value: function (t, e) {
                    var i = this.w;
                    if (
                      void 0 !== i.config.grid.row.colors &&
                      i.config.grid.row.colors.length > 0
                    )
                      for (
                        var n = 0,
                          a = i.globals.gridHeight / e,
                          s = i.globals.gridWidth,
                          r = 0,
                          o = 0;
                        r < e;
                        r++, o++
                      )
                        o >= i.config.grid.row.colors.length && (o = 0),
                          this._drawGridBandRect({
                            c: o,
                            x1: 0,
                            y1: n,
                            x2: s,
                            y2: a,
                            type: "row",
                          }),
                          (n += i.globals.gridHeight / e);
                    if (
                      void 0 !== i.config.grid.column.colors &&
                      i.config.grid.column.colors.length > 0
                    )
                      for (
                        var l =
                            i.globals.isBarHorizontal ||
                            ("category" !== i.config.xaxis.type &&
                              !i.config.xaxis.convertedCatToNumeric)
                              ? t
                              : t - 1,
                          c = i.globals.padHorizontal,
                          h = i.globals.padHorizontal + i.globals.gridWidth / l,
                          d = i.globals.gridHeight,
                          u = 0,
                          f = 0;
                        u < t;
                        u++, f++
                      )
                        f >= i.config.grid.column.colors.length && (f = 0),
                          this._drawGridBandRect({
                            c: f,
                            x1: c,
                            y1: 0,
                            x2: h,
                            y2: d,
                            type: "column",
                          }),
                          (c += i.globals.gridWidth / l);
                  },
                },
              ]),
              t
            );
          })(),
          Z = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.w = e.w);
            }
            return (
              o(t, [
                {
                  key: "niceScale",
                  value: function (t, e) {
                    var i =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : 10,
                      n =
                        arguments.length > 3 && void 0 !== arguments[3]
                          ? arguments[3]
                          : 0,
                      a = arguments.length > 4 ? arguments[4] : void 0,
                      s = this.w,
                      r = Math.abs(e - t);
                    if (
                      ("dataPoints" ===
                        (i = this._adjustTicksForSmallRange(i, n, r)) &&
                        (i = s.globals.dataPoints - 1),
                      (t === Number.MIN_VALUE && 0 === e) ||
                        (!v.isNumber(t) && !v.isNumber(e)) ||
                        (t === Number.MIN_VALUE && e === -Number.MAX_VALUE))
                    ) {
                      (t = 0), (e = i);
                      var o = this.linearScale(t, e, i);
                      return o;
                    }
                    t > e
                      ? (console.warn(
                          "axis.min cannot be greater than axis.max"
                        ),
                        (e = t + 0.1))
                      : t === e &&
                        ((t = 0 === t ? 0 : t - 0.5),
                        (e = 0 === e ? 2 : e + 0.5));
                    var l = [];
                    r < 1 &&
                      a &&
                      ("candlestick" === s.config.chart.type ||
                        "candlestick" === s.config.series[n].type ||
                        "boxPlot" === s.config.chart.type ||
                        "boxPlot" === s.config.series[n].type ||
                        s.globals.isRangeData) &&
                      (e *= 1.01);
                    var c = i + 1;
                    c < 2 ? (c = 2) : c > 2 && (c -= 2);
                    var h = r / c,
                      d = Math.floor(v.log10(h)),
                      u = Math.pow(10, d),
                      f = Math.round(h / u);
                    f < 1 && (f = 1);
                    var p = f * u,
                      g = p * Math.floor(t / p),
                      m = p * Math.ceil(e / p),
                      x = g;
                    if (a && r > 2) {
                      for (; l.push(x), !((x += p) > m); );
                      return {
                        result: l,
                        niceMin: l[0],
                        niceMax: l[l.length - 1],
                      };
                    }
                    var b = t;
                    (l = []).push(b);
                    for (var y = Math.abs(e - t) / i, w = 0; w <= i; w++)
                      (b += y), l.push(b);
                    return (
                      l[l.length - 2] >= e && l.pop(),
                      { result: l, niceMin: l[0], niceMax: l[l.length - 1] }
                    );
                  },
                },
                {
                  key: "linearScale",
                  value: function (t, e) {
                    var i =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : 10,
                      n = arguments.length > 3 ? arguments[3] : void 0,
                      a = Math.abs(e - t);
                    "dataPoints" ===
                      (i = this._adjustTicksForSmallRange(i, n, a)) &&
                      (i = this.w.globals.dataPoints - 1);
                    var s = a / i;
                    i === Number.MAX_VALUE && ((i = 10), (s = 1));
                    for (var r = [], o = t; i >= 0; )
                      r.push(o), (o += s), (i -= 1);
                    return {
                      result: r,
                      niceMin: r[0],
                      niceMax: r[r.length - 1],
                    };
                  },
                },
                {
                  key: "logarithmicScale",
                  value: function (t, e) {
                    for (
                      var i = [],
                        n = Math.ceil(Math.log(t) / Math.log(e)) + 1,
                        a = 0;
                      a < n;
                      a++
                    )
                      i.push(Math.pow(e, a));
                    return {
                      result: i,
                      niceMin: i[0],
                      niceMax: i[i.length - 1],
                    };
                  },
                },
                {
                  key: "_adjustTicksForSmallRange",
                  value: function (t, e, i) {
                    var n = t;
                    if (
                      void 0 !== e &&
                      this.w.config.yaxis[e].labels.formatter &&
                      void 0 === this.w.config.yaxis[e].tickAmount
                    ) {
                      var a = this.w.config.yaxis[e].labels.formatter(1);
                      v.isNumber(Number(a)) &&
                        !v.isFloat(a) &&
                        (n = Math.ceil(i));
                    }
                    return n < t ? n : t;
                  },
                },
                {
                  key: "setYScaleForIndex",
                  value: function (t, e, i) {
                    var n = this.w.globals,
                      a = this.w.config,
                      s = n.isBarHorizontal ? a.xaxis : a.yaxis[t];
                    void 0 === n.yAxisScale[t] && (n.yAxisScale[t] = []);
                    var r = Math.abs(i - e);
                    if (
                      (s.logarithmic && r <= 5 && (n.invalidLogScale = !0),
                      s.logarithmic && r > 5)
                    )
                      (n.allSeriesCollapsed = !1),
                        (n.yAxisScale[t] = this.logarithmicScale(i, s.logBase));
                    else if (i !== -Number.MAX_VALUE && v.isNumber(i))
                      if (
                        ((n.allSeriesCollapsed = !1),
                        (void 0 === s.min && void 0 === s.max) ||
                          s.forceNiceScale)
                      ) {
                        var o =
                          (void 0 === a.yaxis[t].max &&
                            void 0 === a.yaxis[t].min) ||
                          a.yaxis[t].forceNiceScale;
                        n.yAxisScale[t] = this.niceScale(
                          e,
                          i,
                          s.tickAmount
                            ? s.tickAmount
                            : r < 5 && r > 1
                            ? r + 1
                            : 5,
                          t,
                          o
                        );
                      } else
                        n.yAxisScale[t] = this.linearScale(
                          e,
                          i,
                          s.tickAmount,
                          t
                        );
                    else n.yAxisScale[t] = this.linearScale(0, 5, 5);
                  },
                },
                {
                  key: "setXScale",
                  value: function (t, e) {
                    var i = this.w,
                      n = i.globals,
                      a = i.config.xaxis,
                      s = Math.abs(e - t);
                    return (
                      e !== -Number.MAX_VALUE && v.isNumber(e)
                        ? (n.xAxisScale = this.linearScale(
                            t,
                            e,
                            a.tickAmount
                              ? a.tickAmount
                              : s < 5 && s > 1
                              ? s + 1
                              : 5,
                            0
                          ))
                        : (n.xAxisScale = this.linearScale(0, 5, 5)),
                      n.xAxisScale
                    );
                  },
                },
                {
                  key: "setMultipleYScales",
                  value: function () {
                    var t = this,
                      e = this.w.globals,
                      i = this.w.config,
                      n = e.minYArr.concat([]),
                      a = e.maxYArr.concat([]),
                      s = [];
                    i.yaxis.forEach(function (e, r) {
                      var o = r;
                      i.series.forEach(function (t, i) {
                        t.name === e.seriesName &&
                          ((o = i),
                          r !== i
                            ? s.push({
                                index: i,
                                similarIndex: r,
                                alreadyExists: !0,
                              })
                            : s.push({ index: i }));
                      });
                      var l = n[o],
                        c = a[o];
                      t.setYScaleForIndex(r, l, c);
                    }),
                      this.sameScaleInMultipleAxes(n, a, s);
                  },
                },
                {
                  key: "sameScaleInMultipleAxes",
                  value: function (t, e, i) {
                    var n = this,
                      a = this.w.config,
                      s = this.w.globals,
                      r = [];
                    i.forEach(function (t) {
                      t.alreadyExists &&
                        (void 0 === r[t.index] && (r[t.index] = []),
                        r[t.index].push(t.index),
                        r[t.index].push(t.similarIndex));
                    }),
                      (s.yAxisSameScaleIndices = r),
                      r.forEach(function (t, e) {
                        r.forEach(function (i, n) {
                          var a, s;
                          e !== n &&
                            ((a = t),
                            (s = i),
                            a.filter(function (t) {
                              return -1 !== s.indexOf(t);
                            })).length > 0 &&
                            (r[e] = r[e].concat(r[n]));
                        });
                      });
                    var o = r
                      .map(function (t) {
                        return t.filter(function (e, i) {
                          return t.indexOf(e) === i;
                        });
                      })
                      .map(function (t) {
                        return t.sort();
                      });
                    r = r.filter(function (t) {
                      return !!t;
                    });
                    var l = o.slice(),
                      c = l.map(function (t) {
                        return JSON.stringify(t);
                      });
                    l = l.filter(function (t, e) {
                      return c.indexOf(JSON.stringify(t)) === e;
                    });
                    var h = [],
                      d = [];
                    t.forEach(function (t, i) {
                      l.forEach(function (n, a) {
                        n.indexOf(i) > -1 &&
                          (void 0 === h[a] && ((h[a] = []), (d[a] = [])),
                          h[a].push({ key: i, value: t }),
                          d[a].push({ key: i, value: e[i] }));
                      });
                    });
                    var u = Array.apply(null, Array(l.length)).map(
                        Number.prototype.valueOf,
                        Number.MIN_VALUE
                      ),
                      f = Array.apply(null, Array(l.length)).map(
                        Number.prototype.valueOf,
                        -Number.MAX_VALUE
                      );
                    h.forEach(function (t, e) {
                      t.forEach(function (t, i) {
                        u[e] = Math.min(t.value, u[e]);
                      });
                    }),
                      d.forEach(function (t, e) {
                        t.forEach(function (t, i) {
                          f[e] = Math.max(t.value, f[e]);
                        });
                      }),
                      t.forEach(function (t, e) {
                        d.forEach(function (t, i) {
                          var r = u[i],
                            o = f[i];
                          a.chart.stacked &&
                            ((o = 0),
                            t.forEach(function (t, e) {
                              t.value !== -Number.MAX_VALUE && (o += t.value),
                                r !== Number.MIN_VALUE && (r += h[i][e].value);
                            })),
                            t.forEach(function (i, l) {
                              t[l].key === e &&
                                (void 0 !== a.yaxis[e].min &&
                                  (r =
                                    "function" == typeof a.yaxis[e].min
                                      ? a.yaxis[e].min(s.minY)
                                      : a.yaxis[e].min),
                                void 0 !== a.yaxis[e].max &&
                                  (o =
                                    "function" == typeof a.yaxis[e].max
                                      ? a.yaxis[e].max(s.maxY)
                                      : a.yaxis[e].max),
                                n.setYScaleForIndex(e, r, o));
                            });
                        });
                      });
                  },
                },
                {
                  key: "autoScaleY",
                  value: function (t, e, i) {
                    t || (t = this);
                    var n = t.w;
                    if (
                      n.globals.isMultipleYAxis ||
                      n.globals.collapsedSeries.length
                    )
                      return (
                        console.warn(
                          "autoScaleYaxis is not supported in a multi-yaxis chart."
                        ),
                        e
                      );
                    var a = n.globals.seriesX[0],
                      s = n.config.chart.stacked;
                    return (
                      e.forEach(function (t, r) {
                        for (var o = 0, l = 0; l < a.length; l++)
                          if (a[l] >= i.xaxis.min) {
                            o = l;
                            break;
                          }
                        var c,
                          h,
                          d = n.globals.minYArr[r],
                          u = n.globals.maxYArr[r],
                          f = n.globals.stackedSeriesTotals;
                        n.globals.series.forEach(function (r, l) {
                          var p = r[o];
                          s
                            ? ((p = f[o]),
                              (c = h = p),
                              f.forEach(function (t, e) {
                                a[e] <= i.xaxis.max &&
                                  a[e] >= i.xaxis.min &&
                                  (t > h && null !== t && (h = t),
                                  r[e] < c && null !== r[e] && (c = r[e]));
                              }))
                            : ((c = h = p),
                              r.forEach(function (t, e) {
                                if (
                                  a[e] <= i.xaxis.max &&
                                  a[e] >= i.xaxis.min
                                ) {
                                  var s = t,
                                    r = t;
                                  n.globals.series.forEach(function (i, n) {
                                    null !== t &&
                                      ((s = Math.min(i[e], s)),
                                      (r = Math.max(i[e], r)));
                                  }),
                                    r > h && null !== r && (h = r),
                                    s < c && null !== s && (c = s);
                                }
                              })),
                            void 0 === c && void 0 === h && ((c = d), (h = u)),
                            (h *= h < 0 ? 0.9 : 1.1) < 0 && h < u && (h = u),
                            (c *= c < 0 ? 1.1 : 0.9) < 0 && c > d && (c = d),
                            e.length > 1
                              ? ((e[l].min = void 0 === t.min ? c : t.min),
                                (e[l].max = void 0 === t.max ? h : t.max))
                              : ((e[0].min = void 0 === t.min ? c : t.min),
                                (e[0].max = void 0 === t.max ? h : t.max));
                        });
                      }),
                      e
                    );
                  },
                },
              ]),
              t
            );
          })(),
          Q = (function () {
            function t(e) {
              s(this, t),
                (this.ctx = e),
                (this.w = e.w),
                (this.scales = new Z(e));
            }
            return (
              o(t, [
                {
                  key: "init",
                  value: function () {
                    this.setYRange(), this.setXRange(), this.setZRange();
                  },
                },
                {
                  key: "getMinYMaxY",
                  value: function (t) {
                    var e =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : Number.MAX_VALUE,
                      i =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : -Number.MAX_VALUE,
                      n =
                        arguments.length > 3 && void 0 !== arguments[3]
                          ? arguments[3]
                          : null,
                      a = this.w.config,
                      s = this.w.globals,
                      r = -Number.MAX_VALUE,
                      o = Number.MIN_VALUE;
                    null === n && (n = t + 1);
                    var l = s.series,
                      c = l,
                      h = l;
                    "candlestick" === a.chart.type
                      ? ((c = s.seriesCandleL), (h = s.seriesCandleH))
                      : "boxPlot" === a.chart.type
                      ? ((c = s.seriesCandleO), (h = s.seriesCandleC))
                      : s.isRangeData &&
                        ((c = s.seriesRangeStart), (h = s.seriesRangeEnd));
                    for (var d = t; d < n; d++) {
                      s.dataPoints = Math.max(s.dataPoints, l[d].length);
                      for (var u = 0; u < s.series[d].length; u++) {
                        var f = l[d][u];
                        null !== f && v.isNumber(f)
                          ? (void 0 !== h[d][u] &&
                              ((r = Math.max(r, h[d][u])),
                              (e = Math.min(e, h[d][u]))),
                            void 0 !== c[d][u] &&
                              ((e = Math.min(e, c[d][u])),
                              (i = Math.max(i, c[d][u]))),
                            ("candlestick" !== this.w.config.chart.type &&
                              "boxPlot" !== this.w.config.chart.type) ||
                              (void 0 !== s.seriesCandleC[d][u] &&
                                ((r = Math.max(r, s.seriesCandleO[d][u])),
                                (r = Math.max(r, s.seriesCandleH[d][u])),
                                (r = Math.max(r, s.seriesCandleL[d][u])),
                                (r = Math.max(r, s.seriesCandleC[d][u])),
                                "boxPlot" === this.w.config.chart.type &&
                                  (r = Math.max(r, s.seriesCandleM[d][u]))),
                              !a.series[d].type ||
                                ("candlestick" === a.series[d].type &&
                                  "boxPlot" === a.series[d].type) ||
                                ((r = Math.max(r, s.series[d][u])),
                                (e = Math.min(e, s.series[d][u]))),
                              (i = r)),
                            s.seriesGoals[d] &&
                              s.seriesGoals[d][u] &&
                              Array.isArray(s.seriesGoals[d][u]) &&
                              s.seriesGoals[d][u].forEach(function (t) {
                                o !== Number.MIN_VALUE &&
                                  ((o = Math.min(o, t.value)), (e = o)),
                                  (r = Math.max(r, t.value)),
                                  (i = r);
                              }),
                            v.isFloat(f) &&
                              ((f = v.noExponents(f)),
                              (s.yValueDecimal = Math.max(
                                s.yValueDecimal,
                                f.toString().split(".")[1].length
                              ))),
                            o > c[d][u] && c[d][u] < 0 && (o = c[d][u]))
                          : (s.hasNullValues = !0);
                      }
                    }
                    return (
                      "rangeBar" === a.chart.type &&
                        s.seriesRangeStart.length &&
                        s.isBarHorizontal &&
                        (o = e),
                      "bar" === a.chart.type &&
                        (o < 0 && r < 0 && (r = 0),
                        o === Number.MIN_VALUE && (o = 0)),
                      { minY: o, maxY: r, lowestY: e, highestY: i }
                    );
                  },
                },
                {
                  key: "setYRange",
                  value: function () {
                    var t = this.w.globals,
                      e = this.w.config;
                    (t.maxY = -Number.MAX_VALUE), (t.minY = Number.MIN_VALUE);
                    var i = Number.MAX_VALUE;
                    if (t.isMultipleYAxis)
                      for (var n = 0; n < t.series.length; n++) {
                        var a = this.getMinYMaxY(n, i, null, n + 1);
                        t.minYArr.push(a.minY),
                          t.maxYArr.push(a.maxY),
                          (i = a.lowestY);
                      }
                    var s = this.getMinYMaxY(0, i, null, t.series.length);
                    if (
                      ((t.minY = s.minY),
                      (t.maxY = s.maxY),
                      (i = s.lowestY),
                      e.chart.stacked && this._setStackedMinMax(),
                      ("line" === e.chart.type ||
                        "area" === e.chart.type ||
                        "candlestick" === e.chart.type ||
                        "boxPlot" === e.chart.type ||
                        ("rangeBar" === e.chart.type && !t.isBarHorizontal)) &&
                        t.minY === Number.MIN_VALUE &&
                        i !== -Number.MAX_VALUE &&
                        i !== t.maxY)
                    ) {
                      var r = t.maxY - i;
                      ((i >= 0 && i <= 10) ||
                        void 0 !== e.yaxis[0].min ||
                        void 0 !== e.yaxis[0].max) &&
                        (r = 0),
                        (t.minY = i - (5 * r) / 100),
                        i > 0 && t.minY < 0 && (t.minY = 0),
                        (t.maxY = t.maxY + (5 * r) / 100);
                    }
                    return (
                      e.yaxis.forEach(function (e, i) {
                        void 0 !== e.max &&
                          ("number" == typeof e.max
                            ? (t.maxYArr[i] = e.max)
                            : "function" == typeof e.max &&
                              (t.maxYArr[i] = e.max(
                                t.isMultipleYAxis ? t.maxYArr[i] : t.maxY
                              )),
                          (t.maxY = t.maxYArr[i])),
                          void 0 !== e.min &&
                            ("number" == typeof e.min
                              ? (t.minYArr[i] = e.min)
                              : "function" == typeof e.min &&
                                (t.minYArr[i] = e.min(
                                  t.isMultipleYAxis
                                    ? t.minYArr[i] === Number.MIN_VALUE
                                      ? 0
                                      : t.minYArr[i]
                                    : t.minY
                                )),
                            (t.minY = t.minYArr[i]));
                      }),
                      t.isBarHorizontal &&
                        ["min", "max"].forEach(function (i) {
                          void 0 !== e.xaxis[i] &&
                            "number" == typeof e.xaxis[i] &&
                            ("min" === i
                              ? (t.minY = e.xaxis[i])
                              : (t.maxY = e.xaxis[i]));
                        }),
                      t.isMultipleYAxis
                        ? (this.scales.setMultipleYScales(),
                          (t.minY = i),
                          t.yAxisScale.forEach(function (e, i) {
                            (t.minYArr[i] = e.niceMin),
                              (t.maxYArr[i] = e.niceMax);
                          }))
                        : (this.scales.setYScaleForIndex(0, t.minY, t.maxY),
                          (t.minY = t.yAxisScale[0].niceMin),
                          (t.maxY = t.yAxisScale[0].niceMax),
                          (t.minYArr[0] = t.yAxisScale[0].niceMin),
                          (t.maxYArr[0] = t.yAxisScale[0].niceMax)),
                      {
                        minY: t.minY,
                        maxY: t.maxY,
                        minYArr: t.minYArr,
                        maxYArr: t.maxYArr,
                        yAxisScale: t.yAxisScale,
                      }
                    );
                  },
                },
                {
                  key: "setXRange",
                  value: function () {
                    var t = this.w.globals,
                      e = this.w.config,
                      i =
                        "numeric" === e.xaxis.type ||
                        "datetime" === e.xaxis.type ||
                        ("category" === e.xaxis.type && !t.noLabelsProvided) ||
                        t.noLabelsProvided ||
                        t.isXNumeric;
                    if (
                      (t.isXNumeric &&
                        (function () {
                          for (var e = 0; e < t.series.length; e++)
                            if (t.labels[e])
                              for (var i = 0; i < t.labels[e].length; i++)
                                null !== t.labels[e][i] &&
                                  v.isNumber(t.labels[e][i]) &&
                                  ((t.maxX = Math.max(t.maxX, t.labels[e][i])),
                                  (t.initialMaxX = Math.max(
                                    t.maxX,
                                    t.labels[e][i]
                                  )),
                                  (t.minX = Math.min(t.minX, t.labels[e][i])),
                                  (t.initialMinX = Math.min(
                                    t.minX,
                                    t.labels[e][i]
                                  )));
                        })(),
                      t.noLabelsProvided &&
                        0 === e.xaxis.categories.length &&
                        ((t.maxX = t.labels[t.labels.length - 1]),
                        (t.initialMaxX = t.labels[t.labels.length - 1]),
                        (t.minX = 1),
                        (t.initialMinX = 1)),
                      t.isXNumeric ||
                        t.noLabelsProvided ||
                        t.dataFormatXNumeric)
                    ) {
                      var n;
                      if (
                        (void 0 === e.xaxis.tickAmount
                          ? ((n = Math.round(t.svgWidth / 150)),
                            "numeric" === e.xaxis.type &&
                              t.dataPoints < 30 &&
                              (n = t.dataPoints - 1),
                            n > t.dataPoints &&
                              0 !== t.dataPoints &&
                              (n = t.dataPoints - 1))
                          : "dataPoints" === e.xaxis.tickAmount
                          ? (t.series.length > 1 &&
                              (n = t.series[t.maxValsInArrayIndex].length - 1),
                            t.isXNumeric && (n = t.maxX - t.minX - 1))
                          : (n = e.xaxis.tickAmount),
                        (t.xTickAmount = n),
                        void 0 !== e.xaxis.max &&
                          "number" == typeof e.xaxis.max &&
                          (t.maxX = e.xaxis.max),
                        void 0 !== e.xaxis.min &&
                          "number" == typeof e.xaxis.min &&
                          (t.minX = e.xaxis.min),
                        void 0 !== e.xaxis.range &&
                          (t.minX = t.maxX - e.xaxis.range),
                        t.minX !== Number.MAX_VALUE &&
                          t.maxX !== -Number.MAX_VALUE)
                      )
                        if (
                          e.xaxis.convertedCatToNumeric &&
                          !t.dataFormatXNumeric
                        ) {
                          for (var a = [], s = t.minX - 1; s < t.maxX; s++)
                            a.push(s + 1);
                          t.xAxisScale = {
                            result: a,
                            niceMin: a[0],
                            niceMax: a[a.length - 1],
                          };
                        } else
                          t.xAxisScale = this.scales.setXScale(t.minX, t.maxX);
                      else
                        (t.xAxisScale = this.scales.linearScale(1, n, n)),
                          t.noLabelsProvided &&
                            t.labels.length > 0 &&
                            ((t.xAxisScale = this.scales.linearScale(
                              1,
                              t.labels.length,
                              n - 1
                            )),
                            (t.seriesX = t.labels.slice()));
                      i && (t.labels = t.xAxisScale.result.slice());
                    }
                    return (
                      t.isBarHorizontal &&
                        t.labels.length &&
                        (t.xTickAmount = t.labels.length),
                      this._handleSingleDataPoint(),
                      this._getMinXDiff(),
                      { minX: t.minX, maxX: t.maxX }
                    );
                  },
                },
                {
                  key: "setZRange",
                  value: function () {
                    var t = this.w.globals;
                    if (t.isDataXYZ)
                      for (var e = 0; e < t.series.length; e++)
                        if (void 0 !== t.seriesZ[e])
                          for (var i = 0; i < t.seriesZ[e].length; i++)
                            null !== t.seriesZ[e][i] &&
                              v.isNumber(t.seriesZ[e][i]) &&
                              ((t.maxZ = Math.max(t.maxZ, t.seriesZ[e][i])),
                              (t.minZ = Math.min(t.minZ, t.seriesZ[e][i])));
                  },
                },
                {
                  key: "_handleSingleDataPoint",
                  value: function () {
                    var t = this.w.globals,
                      e = this.w.config;
                    if (t.minX === t.maxX) {
                      var i = new X(this.ctx);
                      if ("datetime" === e.xaxis.type) {
                        var n = i.getDate(t.minX);
                        n.setUTCDate(n.getDate() - 2),
                          (t.minX = new Date(n).getTime());
                        var a = i.getDate(t.maxX);
                        a.setUTCDate(a.getDate() + 2),
                          (t.maxX = new Date(a).getTime());
                      } else
                        ("numeric" === e.xaxis.type ||
                          ("category" === e.xaxis.type &&
                            !t.noLabelsProvided)) &&
                          ((t.minX = t.minX - 2),
                          (t.initialMinX = t.minX),
                          (t.maxX = t.maxX + 2),
                          (t.initialMaxX = t.maxX));
                    }
                  },
                },
                {
                  key: "_getMinXDiff",
                  value: function () {
                    var t = this.w.globals;
                    t.isXNumeric &&
                      t.seriesX.forEach(function (e, i) {
                        1 === e.length &&
                          e.push(
                            t.seriesX[t.maxValsInArrayIndex][
                              t.seriesX[t.maxValsInArrayIndex].length - 1
                            ]
                          );
                        var n = e.slice();
                        n.sort(function (t, e) {
                          return t - e;
                        }),
                          n.forEach(function (e, i) {
                            if (i > 0) {
                              var a = e - n[i - 1];
                              a > 0 && (t.minXDiff = Math.min(a, t.minXDiff));
                            }
                          }),
                          1 === t.dataPoints &&
                            t.minXDiff === Number.MAX_VALUE &&
                            (t.minXDiff = 0.5);
                      });
                  },
                },
                {
                  key: "_setStackedMinMax",
                  value: function () {
                    var t = this.w.globals,
                      e = [],
                      i = [];
                    if (t.series.length)
                      for (
                        var n = 0;
                        n < t.series[t.maxValsInArrayIndex].length;
                        n++
                      )
                        for (var a = 0, s = 0, r = 0; r < t.series.length; r++)
                          null !== t.series[r][n] &&
                            v.isNumber(t.series[r][n]) &&
                            (t.series[r][n] > 0
                              ? (a = a + parseFloat(t.series[r][n]) + 1e-4)
                              : (s += parseFloat(t.series[r][n]))),
                            r === t.series.length - 1 && (e.push(a), i.push(s));
                    for (var o = 0; o < e.length; o++)
                      (t.maxY = Math.max(t.maxY, e[o])),
                        (t.minY = Math.min(t.minY, i[o]));
                  },
                },
              ]),
              t
            );
          })(),
          K = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.w = e.w);
              var i = this.w;
              (this.xaxisFontSize = i.config.xaxis.labels.style.fontSize),
                (this.axisFontFamily = i.config.xaxis.labels.style.fontFamily),
                (this.xaxisForeColors = i.config.xaxis.labels.style.colors),
                (this.isCategoryBarHorizontal =
                  "bar" === i.config.chart.type &&
                  i.config.plotOptions.bar.horizontal),
                (this.xAxisoffX = 0),
                "bottom" === i.config.xaxis.position &&
                  (this.xAxisoffX = i.globals.gridHeight),
                (this.drawnLabels = []),
                (this.axesUtils = new G(e));
            }
            return (
              o(t, [
                {
                  key: "drawYaxis",
                  value: function (t) {
                    var e = this,
                      i = this.w,
                      n = new w(this.ctx),
                      a = i.config.yaxis[t].labels.style,
                      s = a.fontSize,
                      r = a.fontFamily,
                      o = a.fontWeight,
                      l = n.group({
                        class: "apexcharts-yaxis",
                        rel: t,
                        transform:
                          "translate(" + i.globals.translateYAxisX[t] + ", 0)",
                      });
                    if (this.axesUtils.isYAxisHidden(t)) return l;
                    var c = n.group({ class: "apexcharts-yaxis-texts-g" });
                    l.add(c);
                    var h = i.globals.yAxisScale[t].result.length - 1,
                      d = i.globals.gridHeight / h,
                      u = i.globals.translateY,
                      f = i.globals.yLabelFormatters[t],
                      p = i.globals.yAxisScale[t].result.slice();
                    p = this.axesUtils.checkForReversedLabels(t, p);
                    var g = "";
                    if (i.config.yaxis[t].labels.show)
                      for (
                        var m = function (l) {
                            var m = p[l];
                            m = f(m, l, i);
                            var x = i.config.yaxis[t].labels.padding;
                            i.config.yaxis[t].opposite &&
                              0 !== i.config.yaxis.length &&
                              (x *= -1);
                            var v = e.axesUtils.getYAxisForeColor(a.colors, t),
                              b = n.drawText({
                                x,
                                y:
                                  u +
                                  h / 10 +
                                  i.config.yaxis[t].labels.offsetY +
                                  1,
                                text: m,
                                textAnchor: i.config.yaxis[t].opposite
                                  ? "start"
                                  : "end",
                                fontSize: s,
                                fontFamily: r,
                                fontWeight: o,
                                foreColor: Array.isArray(v) ? v[l] : v,
                                isPlainText: !1,
                                cssClass:
                                  "apexcharts-yaxis-label " + a.cssClass,
                              });
                            l === h && (g = b), c.add(b);
                            var y = document.createElementNS(
                              i.globals.SVGNS,
                              "title"
                            );
                            if (
                              ((y.textContent = Array.isArray(m)
                                ? m.join(" ")
                                : m),
                              b.node.appendChild(y),
                              0 !== i.config.yaxis[t].labels.rotate)
                            ) {
                              var w = n.rotateAroundCenter(g.node),
                                k = n.rotateAroundCenter(b.node);
                              b.node.setAttribute(
                                "transform",
                                "rotate("
                                  .concat(i.config.yaxis[t].labels.rotate, " ")
                                  .concat(w.x, " ")
                                  .concat(k.y, ")")
                              );
                            }
                            u += d;
                          },
                          x = h;
                        x >= 0;
                        x--
                      )
                        m(x);
                    if (void 0 !== i.config.yaxis[t].title.text) {
                      var v = n.group({ class: "apexcharts-yaxis-title" }),
                        b = 0;
                      i.config.yaxis[t].opposite &&
                        (b = i.globals.translateYAxisX[t]);
                      var y = n.drawText({
                        x: b,
                        y:
                          i.globals.gridHeight / 2 +
                          i.globals.translateY +
                          i.config.yaxis[t].title.offsetY,
                        text: i.config.yaxis[t].title.text,
                        textAnchor: "end",
                        foreColor: i.config.yaxis[t].title.style.color,
                        fontSize: i.config.yaxis[t].title.style.fontSize,
                        fontWeight: i.config.yaxis[t].title.style.fontWeight,
                        fontFamily: i.config.yaxis[t].title.style.fontFamily,
                        cssClass:
                          "apexcharts-yaxis-title-text " +
                          i.config.yaxis[t].title.style.cssClass,
                      });
                      v.add(y), l.add(v);
                    }
                    var k = i.config.yaxis[t].axisBorder,
                      S = 31 + k.offsetX;
                    if (
                      (i.config.yaxis[t].opposite && (S = -31 - k.offsetX),
                      k.show)
                    ) {
                      var A = n.drawLine(
                        S,
                        i.globals.translateY + k.offsetY - 2,
                        S,
                        i.globals.gridHeight +
                          i.globals.translateY +
                          k.offsetY +
                          2,
                        k.color,
                        0,
                        k.width
                      );
                      l.add(A);
                    }
                    return (
                      i.config.yaxis[t].axisTicks.show &&
                        this.axesUtils.drawYAxisTicks(
                          S,
                          h,
                          k,
                          i.config.yaxis[t].axisTicks,
                          t,
                          d,
                          l
                        ),
                      l
                    );
                  },
                },
                {
                  key: "drawYaxisInversed",
                  value: function (t) {
                    var e = this.w,
                      i = new w(this.ctx),
                      n = i.group({
                        class: "apexcharts-xaxis apexcharts-yaxis-inversed",
                      }),
                      a = i.group({
                        class: "apexcharts-xaxis-texts-g",
                        transform: "translate("
                          .concat(e.globals.translateXAxisX, ", ")
                          .concat(e.globals.translateXAxisY, ")"),
                      });
                    n.add(a);
                    var s = e.globals.yAxisScale[t].result.length - 1,
                      r = e.globals.gridWidth / s + 0.1,
                      o = r + e.config.xaxis.labels.offsetX,
                      l = e.globals.xLabelFormatter,
                      c = e.globals.yAxisScale[t].result.slice(),
                      h = e.globals.timescaleLabels;
                    h.length > 0 &&
                      ((this.xaxisLabels = h.slice()),
                      (s = (c = h.slice()).length)),
                      (c = this.axesUtils.checkForReversedLabels(t, c));
                    var d = h.length;
                    if (e.config.xaxis.labels.show)
                      for (
                        var u = d ? 0 : s;
                        d ? u < d : u >= 0;
                        d ? u++ : u--
                      ) {
                        var f = c[u];
                        f = l(f, u, e);
                        var p =
                          e.globals.gridWidth +
                          e.globals.padHorizontal -
                          (o - r + e.config.xaxis.labels.offsetX);
                        if (h.length) {
                          var g = this.axesUtils.getLabel(
                            c,
                            h,
                            p,
                            u,
                            this.drawnLabels,
                            this.xaxisFontSize
                          );
                          (p = g.x),
                            (f = g.text),
                            this.drawnLabels.push(g.text),
                            0 === u &&
                              e.globals.skipFirstTimelinelabel &&
                              (f = ""),
                            u === c.length - 1 &&
                              e.globals.skipLastTimelinelabel &&
                              (f = "");
                        }
                        var m = i.drawText({
                          x: p,
                          y:
                            this.xAxisoffX +
                            e.config.xaxis.labels.offsetY +
                            30 -
                            ("top" === e.config.xaxis.position
                              ? e.globals.xAxisHeight +
                                e.config.xaxis.axisTicks.height -
                                2
                              : 0),
                          text: f,
                          textAnchor: "middle",
                          foreColor: Array.isArray(this.xaxisForeColors)
                            ? this.xaxisForeColors[t]
                            : this.xaxisForeColors,
                          fontSize: this.xaxisFontSize,
                          fontFamily: this.xaxisFontFamily,
                          fontWeight: e.config.xaxis.labels.style.fontWeight,
                          isPlainText: !1,
                          cssClass:
                            "apexcharts-xaxis-label " +
                            e.config.xaxis.labels.style.cssClass,
                        });
                        a.add(m), m.tspan(f);
                        var x = document.createElementNS(
                          e.globals.SVGNS,
                          "title"
                        );
                        (x.textContent = f), m.node.appendChild(x), (o += r);
                      }
                    return (
                      this.inversedYAxisTitleText(n),
                      this.inversedYAxisBorder(n),
                      n
                    );
                  },
                },
                {
                  key: "inversedYAxisBorder",
                  value: function (t) {
                    var e = this.w,
                      i = new w(this.ctx),
                      n = e.config.xaxis.axisBorder;
                    if (n.show) {
                      var a = 0;
                      "bar" === e.config.chart.type &&
                        e.globals.isXNumeric &&
                        (a -= 15);
                      var s = i.drawLine(
                        e.globals.padHorizontal + a + n.offsetX,
                        this.xAxisoffX,
                        e.globals.gridWidth,
                        this.xAxisoffX,
                        n.color,
                        0,
                        n.height
                      );
                      t.add(s);
                    }
                  },
                },
                {
                  key: "inversedYAxisTitleText",
                  value: function (t) {
                    var e = this.w,
                      i = new w(this.ctx);
                    if (void 0 !== e.config.xaxis.title.text) {
                      var n = i.group({
                          class:
                            "apexcharts-xaxis-title apexcharts-yaxis-title-inversed",
                        }),
                        a = i.drawText({
                          x:
                            e.globals.gridWidth / 2 +
                            e.config.xaxis.title.offsetX,
                          y:
                            this.xAxisoffX +
                            parseFloat(this.xaxisFontSize) +
                            parseFloat(e.config.xaxis.title.style.fontSize) +
                            e.config.xaxis.title.offsetY +
                            20,
                          text: e.config.xaxis.title.text,
                          textAnchor: "middle",
                          fontSize: e.config.xaxis.title.style.fontSize,
                          fontFamily: e.config.xaxis.title.style.fontFamily,
                          fontWeight: e.config.xaxis.title.style.fontWeight,
                          foreColor: e.config.xaxis.title.style.color,
                          cssClass:
                            "apexcharts-xaxis-title-text " +
                            e.config.xaxis.title.style.cssClass,
                        });
                      n.add(a), t.add(n);
                    }
                  },
                },
                {
                  key: "yAxisTitleRotate",
                  value: function (t, e) {
                    var i = this.w,
                      n = new w(this.ctx),
                      a = { width: 0, height: 0 },
                      s = { width: 0, height: 0 },
                      r = i.globals.dom.baseEl.querySelector(
                        " .apexcharts-yaxis[rel='".concat(
                          t,
                          "'] .apexcharts-yaxis-texts-g"
                        )
                      );
                    null !== r && (a = r.getBoundingClientRect());
                    var o = i.globals.dom.baseEl.querySelector(
                      ".apexcharts-yaxis[rel='".concat(
                        t,
                        "'] .apexcharts-yaxis-title text"
                      )
                    );
                    if (
                      (null !== o && (s = o.getBoundingClientRect()),
                      null !== o)
                    ) {
                      var l = this.xPaddingForYAxisTitle(t, a, s, e);
                      o.setAttribute("x", l.xPos - (e ? 10 : 0));
                    }
                    if (null !== o) {
                      var c = n.rotateAroundCenter(o);
                      o.setAttribute(
                        "transform",
                        "rotate("
                          .concat(
                            e
                              ? -1 * i.config.yaxis[t].title.rotate
                              : i.config.yaxis[t].title.rotate,
                            " "
                          )
                          .concat(c.x, " ")
                          .concat(c.y, ")")
                      );
                    }
                  },
                },
                {
                  key: "xPaddingForYAxisTitle",
                  value: function (t, e, i, n) {
                    var a = this.w,
                      s = 0,
                      r = 0,
                      o = 10;
                    return void 0 === a.config.yaxis[t].title.text || t < 0
                      ? { xPos: r, padd: 0 }
                      : (n
                          ? ((r =
                              e.width +
                              a.config.yaxis[t].title.offsetX +
                              i.width / 2 +
                              o / 2),
                            0 === (s += 1) && (r -= o / 2))
                          : ((r =
                              -1 * e.width +
                              a.config.yaxis[t].title.offsetX +
                              o / 2 +
                              i.width / 2),
                            a.globals.isBarHorizontal &&
                              ((o = 25),
                              (r =
                                -1 * e.width -
                                a.config.yaxis[t].title.offsetX -
                                o))),
                        { xPos: r, padd: o });
                  },
                },
                {
                  key: "setYAxisXPosition",
                  value: function (t, e) {
                    var i = this.w,
                      n = 0,
                      a = 0,
                      s = 18,
                      r = 1;
                    i.config.yaxis.length > 1 && (this.multipleYs = !0),
                      i.config.yaxis.map(function (o, l) {
                        var c =
                            i.globals.ignoreYAxisIndexes.indexOf(l) > -1 ||
                            !o.show ||
                            o.floating ||
                            0 === t[l].width,
                          h = t[l].width + e[l].width;
                        o.opposite
                          ? i.globals.isBarHorizontal
                            ? ((a =
                                i.globals.gridWidth + i.globals.translateX - 1),
                              (i.globals.translateYAxisX[l] =
                                a - o.labels.offsetX))
                            : ((a =
                                i.globals.gridWidth + i.globals.translateX + r),
                              c || (r = r + h + 20),
                              (i.globals.translateYAxisX[l] =
                                a - o.labels.offsetX + 20))
                          : ((n = i.globals.translateX - s),
                            c || (s = s + h + 20),
                            (i.globals.translateYAxisX[l] =
                              n + o.labels.offsetX));
                      });
                  },
                },
                {
                  key: "setYAxisTextAlignments",
                  value: function () {
                    var t = this.w,
                      e =
                        t.globals.dom.baseEl.getElementsByClassName(
                          "apexcharts-yaxis"
                        );
                    (e = v.listToArray(e)).forEach(function (e, i) {
                      var n = t.config.yaxis[i];
                      if (n && void 0 !== n.labels.align) {
                        var a = t.globals.dom.baseEl.querySelector(
                            ".apexcharts-yaxis[rel='".concat(
                              i,
                              "'] .apexcharts-yaxis-texts-g"
                            )
                          ),
                          s = t.globals.dom.baseEl.querySelectorAll(
                            ".apexcharts-yaxis[rel='".concat(
                              i,
                              "'] .apexcharts-yaxis-label"
                            )
                          );
                        s = v.listToArray(s);
                        var r = a.getBoundingClientRect();
                        "left" === n.labels.align
                          ? (s.forEach(function (t, e) {
                              t.setAttribute("text-anchor", "start");
                            }),
                            n.opposite ||
                              a.setAttribute(
                                "transform",
                                "translate(-".concat(r.width, ", 0)")
                              ))
                          : "center" === n.labels.align
                          ? (s.forEach(function (t, e) {
                              t.setAttribute("text-anchor", "middle");
                            }),
                            a.setAttribute(
                              "transform",
                              "translate(".concat(
                                (r.width / 2) * (n.opposite ? 1 : -1),
                                ", 0)"
                              )
                            ))
                          : "right" === n.labels.align &&
                            (s.forEach(function (t, e) {
                              t.setAttribute("text-anchor", "end");
                            }),
                            n.opposite &&
                              a.setAttribute(
                                "transform",
                                "translate(".concat(r.width, ", 0)")
                              ));
                      }
                    });
                  },
                },
              ]),
              t
            );
          })(),
          J = (function () {
            function t(e) {
              s(this, t),
                (this.ctx = e),
                (this.w = e.w),
                (this.documentEvent = v.bind(this.documentEvent, this));
            }
            return (
              o(t, [
                {
                  key: "addEventListener",
                  value: function (t, e) {
                    var i = this.w;
                    i.globals.events.hasOwnProperty(t)
                      ? i.globals.events[t].push(e)
                      : (i.globals.events[t] = [e]);
                  },
                },
                {
                  key: "removeEventListener",
                  value: function (t, e) {
                    var i = this.w;
                    if (i.globals.events.hasOwnProperty(t)) {
                      var n = i.globals.events[t].indexOf(e);
                      -1 !== n && i.globals.events[t].splice(n, 1);
                    }
                  },
                },
                {
                  key: "fireEvent",
                  value: function (t, e) {
                    var i = this.w;
                    if (i.globals.events.hasOwnProperty(t)) {
                      (e && e.length) || (e = []);
                      for (
                        var n = i.globals.events[t], a = n.length, s = 0;
                        s < a;
                        s++
                      )
                        n[s].apply(null, e);
                    }
                  },
                },
                {
                  key: "setupEventHandlers",
                  value: function () {
                    var t = this,
                      e = this.w,
                      i = this.ctx,
                      n = e.globals.dom.baseEl.querySelector(
                        e.globals.chartClass
                      );
                    this.ctx.eventList.forEach(function (t) {
                      n.addEventListener(
                        t,
                        function (t) {
                          var n = Object.assign({}, e, {
                            seriesIndex: e.globals.capturedSeriesIndex,
                            dataPointIndex: e.globals.capturedDataPointIndex,
                          });
                          "mousemove" === t.type || "touchmove" === t.type
                            ? "function" ==
                                typeof e.config.chart.events.mouseMove &&
                              e.config.chart.events.mouseMove(t, i, n)
                            : "mouseleave" === t.type || "touchleave" === t.type
                            ? "function" ==
                                typeof e.config.chart.events.mouseLeave &&
                              e.config.chart.events.mouseLeave(t, i, n)
                            : (("mouseup" === t.type && 1 === t.which) ||
                                "touchend" === t.type) &&
                              ("function" ==
                                typeof e.config.chart.events.click &&
                                e.config.chart.events.click(t, i, n),
                              i.ctx.events.fireEvent("click", [t, i, n]));
                        },
                        { capture: !1, passive: !0 }
                      );
                    }),
                      this.ctx.eventList.forEach(function (i) {
                        e.globals.dom.baseEl.addEventListener(
                          i,
                          t.documentEvent,
                          { passive: !0 }
                        );
                      }),
                      this.ctx.core.setupBrushHandler();
                  },
                },
                {
                  key: "documentEvent",
                  value: function (t) {
                    var e = this.w,
                      i = t.target.className;
                    if ("click" === t.type) {
                      var n =
                        e.globals.dom.baseEl.querySelector(".apexcharts-menu");
                      n &&
                        n.classList.contains("apexcharts-menu-open") &&
                        "apexcharts-menu-icon" !== i &&
                        n.classList.remove("apexcharts-menu-open");
                    }
                    (e.globals.clientX =
                      "touchmove" === t.type
                        ? t.touches[0].clientX
                        : t.clientX),
                      (e.globals.clientY =
                        "touchmove" === t.type
                          ? t.touches[0].clientY
                          : t.clientY);
                  },
                },
              ]),
              t
            );
          })(),
          tt = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.w = e.w);
            }
            return (
              o(t, [
                {
                  key: "setCurrentLocaleValues",
                  value: function (t) {
                    var e = this.w.config.chart.locales;
                    window.Apex.chart &&
                      window.Apex.chart.locales &&
                      window.Apex.chart.locales.length > 0 &&
                      (e = this.w.config.chart.locales.concat(
                        window.Apex.chart.locales
                      ));
                    var i = e.filter(function (e) {
                      return e.name === t;
                    })[0];
                    if (!i)
                      throw new Error(
                        "Wrong locale name provided. Please make sure you set the correct locale name in options"
                      );
                    var n = v.extend(T, i);
                    this.w.globals.locale = n.options;
                  },
                },
              ]),
              t
            );
          })(),
          et = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.w = e.w);
            }
            return (
              o(t, [
                {
                  key: "drawAxis",
                  value: function (t, e) {
                    var i,
                      n,
                      a = this.w.globals,
                      s = this.w.config,
                      r = new U(this.ctx),
                      o = new K(this.ctx);
                    a.axisCharts &&
                      "radar" !== t &&
                      (a.isBarHorizontal
                        ? ((n = o.drawYaxisInversed(0)),
                          (i = r.drawXaxisInversed(0)),
                          a.dom.elGraphical.add(i),
                          a.dom.elGraphical.add(n))
                        : ((i = r.drawXaxis()),
                          a.dom.elGraphical.add(i),
                          s.yaxis.map(function (t, e) {
                            -1 === a.ignoreYAxisIndexes.indexOf(e) &&
                              ((n = o.drawYaxis(e)), a.dom.Paper.add(n));
                          })));
                  },
                },
              ]),
              t
            );
          })(),
          it = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.w = e.w);
            }
            return (
              o(t, [
                {
                  key: "drawXCrosshairs",
                  value: function () {
                    var t = this.w,
                      e = new w(this.ctx),
                      i = new y(this.ctx),
                      n = t.config.xaxis.crosshairs.fill.gradient,
                      a = t.config.xaxis.crosshairs.dropShadow,
                      s = t.config.xaxis.crosshairs.fill.type,
                      r = n.colorFrom,
                      o = n.colorTo,
                      l = n.opacityFrom,
                      c = n.opacityTo,
                      h = n.stops,
                      d = a.enabled,
                      u = a.left,
                      f = a.top,
                      p = a.blur,
                      g = a.color,
                      m = a.opacity,
                      x = t.config.xaxis.crosshairs.fill.color;
                    if (t.config.xaxis.crosshairs.show) {
                      "gradient" === s &&
                        (x = e.drawGradient(
                          "vertical",
                          r,
                          o,
                          l,
                          c,
                          null,
                          h,
                          null
                        ));
                      var b = e.drawRect();
                      1 === t.config.xaxis.crosshairs.width &&
                        (b = e.drawLine());
                      var k = t.globals.gridHeight;
                      (!v.isNumber(k) || k < 0) && (k = 0);
                      var S = t.config.xaxis.crosshairs.width;
                      (!v.isNumber(S) || S < 0) && (S = 0),
                        b.attr({
                          class: "apexcharts-xcrosshairs",
                          x: 0,
                          y: 0,
                          y2: k,
                          width: S,
                          height: k,
                          fill: x,
                          filter: "none",
                          "fill-opacity": t.config.xaxis.crosshairs.opacity,
                          stroke: t.config.xaxis.crosshairs.stroke.color,
                          "stroke-width":
                            t.config.xaxis.crosshairs.stroke.width,
                          "stroke-dasharray":
                            t.config.xaxis.crosshairs.stroke.dashArray,
                        }),
                        d &&
                          (b = i.dropShadow(b, {
                            left: u,
                            top: f,
                            blur: p,
                            color: g,
                            opacity: m,
                          })),
                        t.globals.dom.elGraphical.add(b);
                    }
                  },
                },
                {
                  key: "drawYCrosshairs",
                  value: function () {
                    var t = this.w,
                      e = new w(this.ctx),
                      i = t.config.yaxis[0].crosshairs,
                      n = t.globals.barPadForNumericAxis;
                    if (t.config.yaxis[0].crosshairs.show) {
                      var a = e.drawLine(
                        -n,
                        0,
                        t.globals.gridWidth + n,
                        0,
                        i.stroke.color,
                        i.stroke.dashArray,
                        i.stroke.width
                      );
                      a.attr({ class: "apexcharts-ycrosshairs" }),
                        t.globals.dom.elGraphical.add(a);
                    }
                    var s = e.drawLine(
                      -n,
                      0,
                      t.globals.gridWidth + n,
                      0,
                      i.stroke.color,
                      0,
                      0
                    );
                    s.attr({ class: "apexcharts-ycrosshairs-hidden" }),
                      t.globals.dom.elGraphical.add(s);
                  },
                },
              ]),
              t
            );
          })(),
          nt = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.w = e.w);
            }
            return (
              o(t, [
                {
                  key: "checkResponsiveConfig",
                  value: function (t) {
                    var e = this,
                      i = this.w,
                      n = i.config;
                    if (0 !== n.responsive.length) {
                      var a = n.responsive.slice();
                      a.sort(function (t, e) {
                        return t.breakpoint > e.breakpoint
                          ? 1
                          : e.breakpoint > t.breakpoint
                          ? -1
                          : 0;
                      }).reverse();
                      var s = new Y({}),
                        r = function () {
                          var t =
                              arguments.length > 0 && void 0 !== arguments[0]
                                ? arguments[0]
                                : {},
                            n = a[0].breakpoint,
                            r =
                              window.innerWidth > 0
                                ? window.innerWidth
                                : screen.width;
                          if (r > n) {
                            var o = A.extendArrayProps(
                              s,
                              i.globals.initialConfig,
                              i
                            );
                            (t = v.extend(o, t)),
                              (t = v.extend(i.config, t)),
                              e.overrideResponsiveOptions(t);
                          } else
                            for (var l = 0; l < a.length; l++)
                              r < a[l].breakpoint &&
                                ((t = A.extendArrayProps(s, a[l].options, i)),
                                (t = v.extend(i.config, t)),
                                e.overrideResponsiveOptions(t));
                        };
                      if (t) {
                        var o = A.extendArrayProps(s, t, i);
                        (o = v.extend(i.config, o)), r((o = v.extend(o, t)));
                      } else r({});
                    }
                  },
                },
                {
                  key: "overrideResponsiveOptions",
                  value: function (t) {
                    var e = new Y(t).init({ responsiveOverride: !0 });
                    this.w.config = e;
                  },
                },
              ]),
              t
            );
          })(),
          at = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.colors = []), (this.w = e.w);
              var i = this.w;
              (this.isColorFn = !1),
                (this.isHeatmapDistributed =
                  ("treemap" === i.config.chart.type &&
                    i.config.plotOptions.treemap.distributed) ||
                  ("heatmap" === i.config.chart.type &&
                    i.config.plotOptions.heatmap.distributed)),
                (this.isBarDistributed =
                  i.config.plotOptions.bar.distributed &&
                  ("bar" === i.config.chart.type ||
                    "rangeBar" === i.config.chart.type));
            }
            return (
              o(t, [
                {
                  key: "init",
                  value: function () {
                    this.setDefaultColors();
                  },
                },
                {
                  key: "setDefaultColors",
                  value: function () {
                    var t = this,
                      e = this.w,
                      i = new v();
                    if (
                      (e.globals.dom.elWrap.classList.add(
                        "apexcharts-theme-".concat(e.config.theme.mode)
                      ),
                      void 0 === e.config.colors
                        ? (e.globals.colors = this.predefined())
                        : ((e.globals.colors = e.config.colors),
                          Array.isArray(e.config.colors) &&
                            e.config.colors.length > 0 &&
                            "function" == typeof e.config.colors[0] &&
                            (e.globals.colors = e.config.series.map(function (
                              i,
                              n
                            ) {
                              var a = e.config.colors[n];
                              return (
                                a || (a = e.config.colors[0]),
                                "function" == typeof a
                                  ? ((t.isColorFn = !0),
                                    a({
                                      value: e.globals.axisCharts
                                        ? e.globals.series[n][0]
                                          ? e.globals.series[n][0]
                                          : 0
                                        : e.globals.series[n],
                                      seriesIndex: n,
                                      dataPointIndex: n,
                                      w: e,
                                    }))
                                  : a
                              );
                            }))),
                      e.globals.seriesColors.map(function (t, i) {
                        t && (e.globals.colors[i] = t);
                      }),
                      e.config.theme.monochrome.enabled)
                    ) {
                      var n = [],
                        a = e.globals.series.length;
                      (this.isBarDistributed || this.isHeatmapDistributed) &&
                        (a =
                          e.globals.series[0].length * e.globals.series.length);
                      for (
                        var s = e.config.theme.monochrome.color,
                          r =
                            1 / (a / e.config.theme.monochrome.shadeIntensity),
                          o = e.config.theme.monochrome.shadeTo,
                          l = 0,
                          c = 0;
                        c < a;
                        c++
                      ) {
                        var h = void 0;
                        "dark" === o
                          ? ((h = i.shadeColor(-1 * l, s)), (l += r))
                          : ((h = i.shadeColor(l, s)), (l += r)),
                          n.push(h);
                      }
                      e.globals.colors = n.slice();
                    }
                    var d = e.globals.colors.slice();
                    this.pushExtraColors(e.globals.colors),
                      ["fill", "stroke"].forEach(function (i) {
                        void 0 === e.config[i].colors
                          ? (e.globals[i].colors = t.isColorFn
                              ? e.config.colors
                              : d)
                          : (e.globals[i].colors = e.config[i].colors.slice()),
                          t.pushExtraColors(e.globals[i].colors);
                      }),
                      void 0 === e.config.dataLabels.style.colors
                        ? (e.globals.dataLabels.style.colors = d)
                        : (e.globals.dataLabels.style.colors =
                            e.config.dataLabels.style.colors.slice()),
                      this.pushExtraColors(
                        e.globals.dataLabels.style.colors,
                        50
                      ),
                      void 0 === e.config.plotOptions.radar.polygons.fill.colors
                        ? (e.globals.radarPolygons.fill.colors = [
                            "dark" === e.config.theme.mode ? "#424242" : "none",
                          ])
                        : (e.globals.radarPolygons.fill.colors =
                            e.config.plotOptions.radar.polygons.fill.colors.slice()),
                      this.pushExtraColors(
                        e.globals.radarPolygons.fill.colors,
                        20
                      ),
                      void 0 === e.config.markers.colors
                        ? (e.globals.markers.colors = d)
                        : (e.globals.markers.colors =
                            e.config.markers.colors.slice()),
                      this.pushExtraColors(e.globals.markers.colors);
                  },
                },
                {
                  key: "pushExtraColors",
                  value: function (t, e) {
                    var i =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : null,
                      n = this.w,
                      a = e || n.globals.series.length;
                    if (
                      (null === i &&
                        (i =
                          this.isBarDistributed ||
                          this.isHeatmapDistributed ||
                          ("heatmap" === n.config.chart.type &&
                            n.config.plotOptions.heatmap.colorScale.inverse)),
                      i &&
                        n.globals.series.length &&
                        (a =
                          n.globals.series[n.globals.maxValsInArrayIndex]
                            .length * n.globals.series.length),
                      t.length < a)
                    )
                      for (var s = a - t.length, r = 0; r < s; r++)
                        t.push(t[r]);
                  },
                },
                {
                  key: "updateThemeOptions",
                  value: function (t) {
                    (t.chart = t.chart || {}), (t.tooltip = t.tooltip || {});
                    var e = t.theme.mode || "light",
                      i = t.theme.palette
                        ? t.theme.palette
                        : "dark" === e
                        ? "palette4"
                        : "palette1",
                      n = t.chart.foreColor
                        ? t.chart.foreColor
                        : "dark" === e
                        ? "#f6f7f8"
                        : "#373d3f";
                    return (
                      (t.tooltip.theme = e),
                      (t.chart.foreColor = n),
                      (t.theme.palette = i),
                      t
                    );
                  },
                },
                {
                  key: "predefined",
                  value: function () {
                    switch (this.w.config.theme.palette) {
                      default:
                        this.colors = [
                          "#008FFB",
                          "#00E396",
                          "#FEB019",
                          "#FF4560",
                          "#775DD0",
                        ];
                        break;
                      case "palette2":
                        this.colors = [
                          "#3f51b5",
                          "#03a9f4",
                          "#4caf50",
                          "#f9ce1d",
                          "#FF9800",
                        ];
                        break;
                      case "palette3":
                        this.colors = [
                          "#33b2df",
                          "#546E7A",
                          "#d4526e",
                          "#13d8aa",
                          "#A5978B",
                        ];
                        break;
                      case "palette4":
                        this.colors = [
                          "#4ecdc4",
                          "#c7f464",
                          "#81D4FA",
                          "#fd6a6a",
                          "#546E7A",
                        ];
                        break;
                      case "palette5":
                        this.colors = [
                          "#2b908f",
                          "#f9a3a4",
                          "#90ee7e",
                          "#fa4443",
                          "#69d2e7",
                        ];
                        break;
                      case "palette6":
                        this.colors = [
                          "#449DD1",
                          "#F86624",
                          "#EA3546",
                          "#662E9B",
                          "#C5D86D",
                        ];
                        break;
                      case "palette7":
                        this.colors = [
                          "#D7263D",
                          "#1B998B",
                          "#2E294E",
                          "#F46036",
                          "#E2C044",
                        ];
                        break;
                      case "palette8":
                        this.colors = [
                          "#662E9B",
                          "#F86624",
                          "#F9C80E",
                          "#EA3546",
                          "#43BCCD",
                        ];
                        break;
                      case "palette9":
                        this.colors = [
                          "#5C4742",
                          "#A5978B",
                          "#8D5B4C",
                          "#5A2A27",
                          "#C4BBAF",
                        ];
                        break;
                      case "palette10":
                        this.colors = [
                          "#A300D6",
                          "#7D02EB",
                          "#5653FE",
                          "#2983FF",
                          "#00B1F2",
                        ];
                    }
                    return this.colors;
                  },
                },
              ]),
              t
            );
          })(),
          st = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.w = e.w);
            }
            return (
              o(t, [
                {
                  key: "draw",
                  value: function () {
                    this.drawTitleSubtitle("title"),
                      this.drawTitleSubtitle("subtitle");
                  },
                },
                {
                  key: "drawTitleSubtitle",
                  value: function (t) {
                    var e = this.w,
                      i = "title" === t ? e.config.title : e.config.subtitle,
                      n = e.globals.svgWidth / 2,
                      a = i.offsetY,
                      s = "middle";
                    if (
                      ("left" === i.align
                        ? ((n = 10), (s = "start"))
                        : "right" === i.align &&
                          ((n = e.globals.svgWidth - 10), (s = "end")),
                      (n += i.offsetX),
                      (a = a + parseInt(i.style.fontSize, 10) + i.margin / 2),
                      void 0 !== i.text)
                    ) {
                      var r = new w(this.ctx).drawText({
                        x: n,
                        y: a,
                        text: i.text,
                        textAnchor: s,
                        fontSize: i.style.fontSize,
                        fontFamily: i.style.fontFamily,
                        fontWeight: i.style.fontWeight,
                        foreColor: i.style.color,
                        opacity: 1,
                      });
                      r.node.setAttribute(
                        "class",
                        "apexcharts-".concat(t, "-text")
                      ),
                        e.globals.dom.Paper.add(r);
                    }
                  },
                },
              ]),
              t
            );
          })(),
          rt = (function () {
            function t(e) {
              s(this, t), (this.w = e.w), (this.dCtx = e);
            }
            return (
              o(t, [
                {
                  key: "getTitleSubtitleCoords",
                  value: function (t) {
                    var e = this.w,
                      i = 0,
                      n = 0,
                      a =
                        "title" === t
                          ? e.config.title.floating
                          : e.config.subtitle.floating,
                      s = e.globals.dom.baseEl.querySelector(
                        ".apexcharts-".concat(t, "-text")
                      );
                    if (null !== s && !a) {
                      var r = s.getBoundingClientRect();
                      (i = r.width),
                        (n = e.globals.axisCharts ? r.height + 5 : r.height);
                    }
                    return { width: i, height: n };
                  },
                },
                {
                  key: "getLegendsRect",
                  value: function () {
                    var t = this.w,
                      e =
                        t.globals.dom.baseEl.querySelector(
                          ".apexcharts-legend"
                        );
                    t.config.legend.height ||
                      ("top" !== t.config.legend.position &&
                        "bottom" !== t.config.legend.position) ||
                      (e.style.maxHeight = t.globals.svgHeight / 2 + "px");
                    var i = Object.assign({}, v.getBoundingClientRect(e));
                    return (
                      null !== e &&
                      !t.config.legend.floating &&
                      t.config.legend.show
                        ? (this.dCtx.lgRect = {
                            x: i.x,
                            y: i.y,
                            height: i.height,
                            width: 0 === i.height ? 0 : i.width,
                          })
                        : (this.dCtx.lgRect = {
                            x: 0,
                            y: 0,
                            height: 0,
                            width: 0,
                          }),
                      ("left" !== t.config.legend.position &&
                        "right" !== t.config.legend.position) ||
                        (1.5 * this.dCtx.lgRect.width > t.globals.svgWidth &&
                          (this.dCtx.lgRect.width = t.globals.svgWidth / 1.5)),
                      this.dCtx.lgRect
                    );
                  },
                },
                {
                  key: "getLargestStringFromMultiArr",
                  value: function (t, e) {
                    var i = t;
                    if (this.w.globals.isMultiLineX) {
                      var n = e.map(function (t, e) {
                          return Array.isArray(t) ? t.length : 1;
                        }),
                        a = Math.max.apply(Math, m(n));
                      i = e[n.indexOf(a)];
                    }
                    return i;
                  },
                },
              ]),
              t
            );
          })(),
          ot = (function () {
            function t(e) {
              s(this, t), (this.w = e.w), (this.dCtx = e);
            }
            return (
              o(t, [
                {
                  key: "getxAxisLabelsCoords",
                  value: function () {
                    var t,
                      e = this.w,
                      i = e.globals.labels.slice();
                    if (
                      (e.config.xaxis.convertedCatToNumeric &&
                        0 === i.length &&
                        (i = e.globals.categoryLabels),
                      e.globals.timescaleLabels.length > 0)
                    ) {
                      var n = this.getxAxisTimeScaleLabelsCoords();
                      (t = { width: n.width, height: n.height }),
                        (e.globals.rotateXLabels = !1);
                    } else {
                      this.dCtx.lgWidthForSideLegends =
                        ("left" !== e.config.legend.position &&
                          "right" !== e.config.legend.position) ||
                        e.config.legend.floating
                          ? 0
                          : this.dCtx.lgRect.width;
                      var a = e.globals.xLabelFormatter,
                        s = v.getLargestStringFromArr(i),
                        r = this.dCtx.dimHelpers.getLargestStringFromMultiArr(
                          s,
                          i
                        );
                      e.globals.isBarHorizontal &&
                        (r = s =
                          e.globals.yAxisScale[0].result.reduce(function (
                            t,
                            e
                          ) {
                            return t.length > e.length ? t : e;
                          },
                          0));
                      var o = new V(this.dCtx.ctx),
                        l = s;
                      (s = o.xLabelFormat(a, s, l, {
                        i: void 0,
                        dateFormatter: new X(this.dCtx.ctx).formatDate,
                        w: e,
                      })),
                        (r = o.xLabelFormat(a, r, l, {
                          i: void 0,
                          dateFormatter: new X(this.dCtx.ctx).formatDate,
                          w: e,
                        })),
                        ((e.config.xaxis.convertedCatToNumeric &&
                          void 0 === s) ||
                          "" === String(s).trim()) &&
                          (r = s = "1");
                      var c = new w(this.dCtx.ctx),
                        h = c.getTextRects(
                          s,
                          e.config.xaxis.labels.style.fontSize
                        ),
                        d = h;
                      if (
                        (s !== r &&
                          (d = c.getTextRects(
                            r,
                            e.config.xaxis.labels.style.fontSize
                          )),
                        ((t = {
                          width: h.width >= d.width ? h.width : d.width,
                          height: h.height >= d.height ? h.height : d.height,
                        }).width *
                          i.length >
                          e.globals.svgWidth -
                            this.dCtx.lgWidthForSideLegends -
                            this.dCtx.yAxisWidth -
                            this.dCtx.gridPad.left -
                            this.dCtx.gridPad.right &&
                          0 !== e.config.xaxis.labels.rotate) ||
                          e.config.xaxis.labels.rotateAlways)
                      ) {
                        if (!e.globals.isBarHorizontal) {
                          e.globals.rotateXLabels = !0;
                          var u = function (t) {
                            return c.getTextRects(
                              t,
                              e.config.xaxis.labels.style.fontSize,
                              e.config.xaxis.labels.style.fontFamily,
                              "rotate(".concat(
                                e.config.xaxis.labels.rotate,
                                " 0 0)"
                              ),
                              !1
                            );
                          };
                          (h = u(s)),
                            s !== r && (d = u(r)),
                            (t.height =
                              (h.height > d.height ? h.height : d.height) /
                              1.5),
                            (t.width = h.width > d.width ? h.width : d.width);
                        }
                      } else e.globals.rotateXLabels = !1;
                    }
                    return (
                      e.config.xaxis.labels.show ||
                        (t = { width: 0, height: 0 }),
                      { width: t.width, height: t.height }
                    );
                  },
                },
                {
                  key: "getxAxisTitleCoords",
                  value: function () {
                    var t = this.w,
                      e = 0,
                      i = 0;
                    if (void 0 !== t.config.xaxis.title.text) {
                      var n = new w(this.dCtx.ctx).getTextRects(
                        t.config.xaxis.title.text,
                        t.config.xaxis.title.style.fontSize
                      );
                      (e = n.width), (i = n.height);
                    }
                    return { width: e, height: i };
                  },
                },
                {
                  key: "getxAxisTimeScaleLabelsCoords",
                  value: function () {
                    var t,
                      e = this.w;
                    this.dCtx.timescaleLabels =
                      e.globals.timescaleLabels.slice();
                    var i = this.dCtx.timescaleLabels.map(function (t) {
                        return t.value;
                      }),
                      n = i.reduce(function (t, e) {
                        return void 0 === t
                          ? (console.error(
                              "You have possibly supplied invalid Date format. Please supply a valid JavaScript Date"
                            ),
                            0)
                          : t.length > e.length
                          ? t
                          : e;
                      }, 0);
                    return (
                      1.05 *
                        (t = new w(this.dCtx.ctx).getTextRects(
                          n,
                          e.config.xaxis.labels.style.fontSize
                        )).width *
                        i.length >
                        e.globals.gridWidth &&
                        0 !== e.config.xaxis.labels.rotate &&
                        (e.globals.overlappingXLabels = !0),
                      t
                    );
                  },
                },
                {
                  key: "additionalPaddingXLabels",
                  value: function (t) {
                    var e = this,
                      i = this.w,
                      n = i.globals,
                      a = i.config,
                      s = a.xaxis.type,
                      r = t.width;
                    (n.skipLastTimelinelabel = !1),
                      (n.skipFirstTimelinelabel = !1);
                    var o =
                        i.config.yaxis[0].opposite && i.globals.isBarHorizontal,
                      l = function (t, o) {
                        (function (t) {
                          return -1 !== n.collapsedSeriesIndices.indexOf(t);
                        })(o) ||
                          (function (t) {
                            if (
                              e.dCtx.timescaleLabels &&
                              e.dCtx.timescaleLabels.length
                            ) {
                              var o = e.dCtx.timescaleLabels[0],
                                l =
                                  e.dCtx.timescaleLabels[
                                    e.dCtx.timescaleLabels.length - 1
                                  ].position +
                                  r / 1.75 -
                                  e.dCtx.yAxisWidthRight,
                                c =
                                  o.position - r / 1.75 + e.dCtx.yAxisWidthLeft,
                                h =
                                  "right" === i.config.legend.position &&
                                  e.dCtx.lgRect.width > 0
                                    ? e.dCtx.lgRect.width
                                    : 0;
                              l > n.svgWidth - n.translateX - h &&
                                (n.skipLastTimelinelabel = !0),
                                c <
                                  -((t.show && !t.floating) ||
                                  ("bar" !== a.chart.type &&
                                    "candlestick" !== a.chart.type &&
                                    "rangeBar" !== a.chart.type &&
                                    "boxPlot" !== a.chart.type)
                                    ? 10
                                    : r / 1.75) &&
                                  (n.skipFirstTimelinelabel = !0);
                            } else
                              "datetime" === s
                                ? e.dCtx.gridPad.right < r &&
                                  !n.rotateXLabels &&
                                  (n.skipLastTimelinelabel = !0)
                                : "datetime" !== s &&
                                  e.dCtx.gridPad.right <
                                    r / 2 - e.dCtx.yAxisWidthRight &&
                                  !n.rotateXLabels &&
                                  !i.config.xaxis.labels.trim &&
                                  ("between" !== i.config.xaxis.tickPlacement ||
                                    i.globals.isBarHorizontal) &&
                                  (e.dCtx.xPadRight = r / 2 + 1);
                          })(t);
                      };
                    a.yaxis.forEach(function (t, i) {
                      o
                        ? (e.dCtx.gridPad.left < r &&
                            (e.dCtx.xPadLeft = r / 2 + 1),
                          (e.dCtx.xPadRight = r / 2 + 1))
                        : l(t, i);
                    });
                  },
                },
              ]),
              t
            );
          })(),
          lt = (function () {
            function t(e) {
              s(this, t), (this.w = e.w), (this.dCtx = e);
            }
            return (
              o(t, [
                {
                  key: "getyAxisLabelsCoords",
                  value: function () {
                    var t = this,
                      e = this.w,
                      i = [],
                      n = 10,
                      a = new G(this.dCtx.ctx);
                    return (
                      e.config.yaxis.map(function (s, r) {
                        var o = e.globals.yAxisScale[r],
                          l = 0;
                        if (
                          (!a.isYAxisHidden(r) &&
                            s.labels.show &&
                            void 0 !== s.labels.minWidth &&
                            (l = s.labels.minWidth),
                          !a.isYAxisHidden(r) &&
                            s.labels.show &&
                            o.result.length)
                        ) {
                          var c = e.globals.yLabelFormatters[r],
                            h = o.niceMin === Number.MIN_VALUE ? 0 : o.niceMin,
                            d =
                              String(h).length > String(o.niceMax).length
                                ? h
                                : o.niceMax,
                            u = c(d, {
                              seriesIndex: r,
                              dataPointIndex: -1,
                              w: e,
                            }),
                            f = u;
                          if (
                            ((void 0 !== u && 0 !== u.length) || (u = d),
                            e.globals.isBarHorizontal)
                          ) {
                            n = 0;
                            var p = e.globals.labels.slice();
                            (u = c((u = v.getLargestStringFromArr(p)), {
                              seriesIndex: r,
                              dataPointIndex: -1,
                              w: e,
                            })),
                              (f =
                                t.dCtx.dimHelpers.getLargestStringFromMultiArr(
                                  u,
                                  p
                                ));
                          }
                          var g = new w(t.dCtx.ctx),
                            m = "rotate(".concat(s.labels.rotate, " 0 0)"),
                            x = g.getTextRects(
                              u,
                              s.labels.style.fontSize,
                              s.labels.style.fontFamily,
                              m,
                              !1
                            ),
                            b = x;
                          u !== f &&
                            (b = g.getTextRects(
                              f,
                              s.labels.style.fontSize,
                              s.labels.style.fontFamily,
                              m,
                              !1
                            )),
                            i.push({
                              width:
                                (l > b.width || l > x.width
                                  ? l
                                  : b.width > x.width
                                  ? b.width
                                  : x.width) + n,
                              height: b.height > x.height ? b.height : x.height,
                            });
                        } else i.push({ width: 0, height: 0 });
                      }),
                      i
                    );
                  },
                },
                {
                  key: "getyAxisTitleCoords",
                  value: function () {
                    var t = this,
                      e = this.w,
                      i = [];
                    return (
                      e.config.yaxis.map(function (e, n) {
                        if (e.show && void 0 !== e.title.text) {
                          var a = new w(t.dCtx.ctx),
                            s = "rotate(".concat(e.title.rotate, " 0 0)"),
                            r = a.getTextRects(
                              e.title.text,
                              e.title.style.fontSize,
                              e.title.style.fontFamily,
                              s,
                              !1
                            );
                          i.push({ width: r.width, height: r.height });
                        } else i.push({ width: 0, height: 0 });
                      }),
                      i
                    );
                  },
                },
                {
                  key: "getTotalYAxisWidth",
                  value: function () {
                    var t = this.w,
                      e = 0,
                      i = 0,
                      n = 0,
                      a = t.globals.yAxisScale.length > 1 ? 10 : 0,
                      s = new G(this.dCtx.ctx),
                      r = function (r, o) {
                        var l = t.config.yaxis[o].floating,
                          c = 0;
                        r.width > 0 && !l
                          ? ((c = r.width + a),
                            (function (e) {
                              return (
                                t.globals.ignoreYAxisIndexes.indexOf(e) > -1
                              );
                            })(o) && (c = c - r.width - a))
                          : (c = l || s.isYAxisHidden(o) ? 0 : 5),
                          t.config.yaxis[o].opposite ? (n += c) : (i += c),
                          (e += c);
                      };
                    return (
                      t.globals.yLabelsCoords.map(function (t, e) {
                        r(t, e);
                      }),
                      t.globals.yTitleCoords.map(function (t, e) {
                        r(t, e);
                      }),
                      t.globals.isBarHorizontal &&
                        !t.config.yaxis[0].floating &&
                        (e =
                          t.globals.yLabelsCoords[0].width +
                          t.globals.yTitleCoords[0].width +
                          15),
                      (this.dCtx.yAxisWidthLeft = i),
                      (this.dCtx.yAxisWidthRight = n),
                      e
                    );
                  },
                },
              ]),
              t
            );
          })(),
          ct = (function () {
            function t(e) {
              s(this, t), (this.w = e.w), (this.dCtx = e);
            }
            return (
              o(t, [
                {
                  key: "gridPadForColumnsInNumericAxis",
                  value: function (t) {
                    var e = this.w;
                    if (e.globals.noData || e.globals.allSeriesCollapsed)
                      return 0;
                    var i = function (t) {
                        return (
                          "bar" === t ||
                          "rangeBar" === t ||
                          "candlestick" === t ||
                          "boxPlot" === t
                        );
                      },
                      n = e.config.chart.type,
                      a = 0,
                      s = i(n) ? e.config.series.length : 1;
                    if (
                      (e.globals.comboBarCount > 0 &&
                        (s = e.globals.comboBarCount),
                      e.globals.collapsedSeries.forEach(function (t) {
                        i(t.type) && (s -= 1);
                      }),
                      e.config.chart.stacked && (s = 1),
                      (i(n) || e.globals.comboBarCount > 0) &&
                        e.globals.isXNumeric &&
                        !e.globals.isBarHorizontal &&
                        s > 0)
                    ) {
                      var r,
                        o,
                        l = Math.abs(
                          e.globals.initialMaxX - e.globals.initialMinX
                        );
                      l <= 3 && (l = e.globals.dataPoints),
                        (r = l / t),
                        e.globals.minXDiff &&
                          e.globals.minXDiff / r > 0 &&
                          (o = e.globals.minXDiff / r),
                        o > t / 2 && (o /= 2),
                        (a =
                          ((o / s) *
                            parseInt(
                              e.config.plotOptions.bar.columnWidth,
                              10
                            )) /
                          100) < 1 && (a = 1),
                        (a = a / (s > 1 ? 1 : 1.5) + 5),
                        (e.globals.barPadForNumericAxis = a);
                    }
                    return a;
                  },
                },
                {
                  key: "gridPadFortitleSubtitle",
                  value: function () {
                    var t = this,
                      e = this.w,
                      i = e.globals,
                      n =
                        this.dCtx.isSparkline || !e.globals.axisCharts ? 0 : 10;
                    ["title", "subtitle"].forEach(function (i) {
                      void 0 !== e.config[i].text
                        ? (n += e.config[i].margin)
                        : (n +=
                            t.dCtx.isSparkline || !e.globals.axisCharts
                              ? 0
                              : 5);
                    }),
                      !e.config.legend.show ||
                        "bottom" !== e.config.legend.position ||
                        e.config.legend.floating ||
                        e.globals.axisCharts ||
                        (n += 10);
                    var a =
                        this.dCtx.dimHelpers.getTitleSubtitleCoords("title"),
                      s =
                        this.dCtx.dimHelpers.getTitleSubtitleCoords("subtitle");
                    (i.gridHeight = i.gridHeight - a.height - s.height - n),
                      (i.translateY = i.translateY + a.height + s.height + n);
                  },
                },
                {
                  key: "setGridXPosForDualYAxis",
                  value: function (t, e) {
                    var i = this.w,
                      n = new G(this.dCtx.ctx);
                    i.config.yaxis.map(function (a, s) {
                      -1 !== i.globals.ignoreYAxisIndexes.indexOf(s) ||
                        a.floating ||
                        n.isYAxisHidden(s) ||
                        (a.opposite &&
                          (i.globals.translateX =
                            i.globals.translateX -
                            (e[s].width + t[s].width) -
                            parseInt(
                              i.config.yaxis[s].labels.style.fontSize,
                              10
                            ) /
                              1.2 -
                            12),
                        i.globals.translateX < 2 && (i.globals.translateX = 2));
                    });
                  },
                },
              ]),
              t
            );
          })(),
          ht = (function () {
            function t(e) {
              s(this, t),
                (this.ctx = e),
                (this.w = e.w),
                (this.lgRect = {}),
                (this.yAxisWidth = 0),
                (this.yAxisWidthLeft = 0),
                (this.yAxisWidthRight = 0),
                (this.xAxisHeight = 0),
                (this.isSparkline = this.w.config.chart.sparkline.enabled),
                (this.dimHelpers = new rt(this)),
                (this.dimYAxis = new lt(this)),
                (this.dimXAxis = new ot(this)),
                (this.dimGrid = new ct(this)),
                (this.lgWidthForSideLegends = 0),
                (this.gridPad = this.w.config.grid.padding),
                (this.xPadRight = 0),
                (this.xPadLeft = 0);
            }
            return (
              o(t, [
                {
                  key: "plotCoords",
                  value: function () {
                    var t = this.w.globals;
                    (this.lgRect = this.dimHelpers.getLegendsRect()),
                      t.axisCharts
                        ? this.setDimensionsForAxisCharts()
                        : this.setDimensionsForNonAxisCharts(),
                      this.dimGrid.gridPadFortitleSubtitle(),
                      (t.gridHeight =
                        t.gridHeight - this.gridPad.top - this.gridPad.bottom),
                      (t.gridWidth =
                        t.gridWidth -
                        this.gridPad.left -
                        this.gridPad.right -
                        this.xPadRight -
                        this.xPadLeft);
                    var e = this.dimGrid.gridPadForColumnsInNumericAxis(
                      t.gridWidth
                    );
                    (t.gridWidth = t.gridWidth - 2 * e),
                      (t.translateX =
                        t.translateX +
                        this.gridPad.left +
                        this.xPadLeft +
                        (e > 0 ? e + 4 : 0)),
                      (t.translateY = t.translateY + this.gridPad.top);
                  },
                },
                {
                  key: "setDimensionsForAxisCharts",
                  value: function () {
                    var t = this,
                      e = this.w,
                      i = e.globals,
                      n = this.dimYAxis.getyAxisLabelsCoords(),
                      a = this.dimYAxis.getyAxisTitleCoords();
                    (e.globals.yLabelsCoords = []),
                      (e.globals.yTitleCoords = []),
                      e.config.yaxis.map(function (t, i) {
                        e.globals.yLabelsCoords.push({
                          width: n[i].width,
                          index: i,
                        }),
                          e.globals.yTitleCoords.push({
                            width: a[i].width,
                            index: i,
                          });
                      }),
                      (this.yAxisWidth = this.dimYAxis.getTotalYAxisWidth());
                    var s = this.dimXAxis.getxAxisLabelsCoords(),
                      r = this.dimXAxis.getxAxisTitleCoords();
                    this.conditionalChecksForAxisCoords(s, r),
                      (i.translateXAxisY = e.globals.rotateXLabels
                        ? this.xAxisHeight / 8
                        : -4),
                      (i.translateXAxisX =
                        e.globals.rotateXLabels &&
                        e.globals.isXNumeric &&
                        e.config.xaxis.labels.rotate <= -45
                          ? -this.xAxisWidth / 4
                          : 0),
                      e.globals.isBarHorizontal &&
                        ((i.rotateXLabels = !1),
                        (i.translateXAxisY =
                          (parseInt(e.config.xaxis.labels.style.fontSize, 10) /
                            1.5) *
                          -1)),
                      (i.translateXAxisY =
                        i.translateXAxisY + e.config.xaxis.labels.offsetY),
                      (i.translateXAxisX =
                        i.translateXAxisX + e.config.xaxis.labels.offsetX);
                    var o = this.yAxisWidth,
                      l = this.xAxisHeight;
                    (i.xAxisLabelsHeight = this.xAxisHeight - r.height),
                      (i.xAxisLabelsWidth = this.xAxisWidth),
                      (i.xAxisHeight = this.xAxisHeight);
                    var c = 10;
                    ("radar" === e.config.chart.type || this.isSparkline) &&
                      ((o = 0), (l = i.goldenPadding)),
                      this.isSparkline &&
                        (this.lgRect = { height: 0, width: 0 }),
                      (this.isSparkline || "treemap" === e.config.chart.type) &&
                        ((o = 0), (l = 0), (c = 0)),
                      this.isSparkline ||
                        this.dimXAxis.additionalPaddingXLabels(s);
                    var h = function () {
                      (i.translateX = o),
                        (i.gridHeight =
                          i.svgHeight -
                          t.lgRect.height -
                          l -
                          (t.isSparkline || "treemap" === e.config.chart.type
                            ? 0
                            : e.globals.rotateXLabels
                            ? 10
                            : 15)),
                        (i.gridWidth = i.svgWidth - o);
                    };
                    switch (
                      ("top" === e.config.xaxis.position &&
                        (c =
                          i.xAxisHeight - e.config.xaxis.axisTicks.height - 5),
                      e.config.legend.position)
                    ) {
                      case "bottom":
                        (i.translateY = c), h();
                        break;
                      case "top":
                        (i.translateY = this.lgRect.height + c), h();
                        break;
                      case "left":
                        (i.translateY = c),
                          (i.translateX = this.lgRect.width + o),
                          (i.gridHeight = i.svgHeight - l - 12),
                          (i.gridWidth = i.svgWidth - this.lgRect.width - o);
                        break;
                      case "right":
                        (i.translateY = c),
                          (i.translateX = o),
                          (i.gridHeight = i.svgHeight - l - 12),
                          (i.gridWidth =
                            i.svgWidth - this.lgRect.width - o - 5);
                        break;
                      default:
                        throw new Error("Legend position not supported");
                    }
                    this.dimGrid.setGridXPosForDualYAxis(a, n),
                      new K(this.ctx).setYAxisXPosition(n, a);
                  },
                },
                {
                  key: "setDimensionsForNonAxisCharts",
                  value: function () {
                    var t = this.w,
                      e = t.globals,
                      i = t.config,
                      n = 0;
                    t.config.legend.show &&
                      !t.config.legend.floating &&
                      (n = 20);
                    var a =
                        "pie" === i.chart.type ||
                        "polarArea" === i.chart.type ||
                        "donut" === i.chart.type
                          ? "pie"
                          : "radialBar",
                      s = i.plotOptions[a].offsetY,
                      r = i.plotOptions[a].offsetX;
                    if (!i.legend.show || i.legend.floating)
                      return (
                        (e.gridHeight =
                          e.svgHeight -
                          i.grid.padding.left +
                          i.grid.padding.right),
                        (e.gridWidth = e.gridHeight),
                        (e.translateY = s),
                        void (e.translateX = r + (e.svgWidth - e.gridWidth) / 2)
                      );
                    switch (i.legend.position) {
                      case "bottom":
                        (e.gridHeight =
                          e.svgHeight - this.lgRect.height - e.goldenPadding),
                          (e.gridWidth = e.svgWidth),
                          (e.translateY = s - 10),
                          (e.translateX = r + (e.svgWidth - e.gridWidth) / 2);
                        break;
                      case "top":
                        (e.gridHeight =
                          e.svgHeight - this.lgRect.height - e.goldenPadding),
                          (e.gridWidth = e.svgWidth),
                          (e.translateY = this.lgRect.height + s + 10),
                          (e.translateX = r + (e.svgWidth - e.gridWidth) / 2);
                        break;
                      case "left":
                        (e.gridWidth = e.svgWidth - this.lgRect.width - n),
                          (e.gridHeight =
                            "auto" !== i.chart.height
                              ? e.svgHeight
                              : e.gridWidth),
                          (e.translateY = s),
                          (e.translateX = r + this.lgRect.width + n);
                        break;
                      case "right":
                        (e.gridWidth = e.svgWidth - this.lgRect.width - n - 5),
                          (e.gridHeight =
                            "auto" !== i.chart.height
                              ? e.svgHeight
                              : e.gridWidth),
                          (e.translateY = s),
                          (e.translateX = r + 10);
                        break;
                      default:
                        throw new Error("Legend position not supported");
                    }
                  },
                },
                {
                  key: "conditionalChecksForAxisCoords",
                  value: function (t, e) {
                    var i = this.w,
                      n = t.height + e.height,
                      a = i.globals.isMultiLineX
                        ? 1.2
                        : i.globals.LINE_HEIGHT_RATIO,
                      s = i.globals.rotateXLabels ? 22 : 10,
                      r =
                        i.globals.rotateXLabels &&
                        "bottom" === i.config.legend.position
                          ? 10
                          : 0;
                    (this.xAxisHeight = n * a + s + r),
                      (this.xAxisWidth = t.width),
                      this.xAxisHeight - e.height >
                        i.config.xaxis.labels.maxHeight &&
                        (this.xAxisHeight = i.config.xaxis.labels.maxHeight),
                      i.config.xaxis.labels.minHeight &&
                        this.xAxisHeight < i.config.xaxis.labels.minHeight &&
                        (this.xAxisHeight = i.config.xaxis.labels.minHeight),
                      i.config.xaxis.floating && (this.xAxisHeight = 0);
                    var o = 0,
                      l = 0;
                    i.config.yaxis.forEach(function (t) {
                      (o += t.labels.minWidth), (l += t.labels.maxWidth);
                    }),
                      this.yAxisWidth < o && (this.yAxisWidth = o),
                      this.yAxisWidth > l && (this.yAxisWidth = l);
                  },
                },
              ]),
              t
            );
          })(),
          dt = (function () {
            function t(e) {
              s(this, t), (this.w = e.w), (this.lgCtx = e);
            }
            return (
              o(t, [
                {
                  key: "getLegendStyles",
                  value: function () {
                    var t = document.createElement("style");
                    t.setAttribute("type", "text/css");
                    var e = document.createTextNode(
                      "\t\n    \t\n      .apexcharts-legend {\t\n        display: flex;\t\n        overflow: auto;\t\n        padding: 0 10px;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {\t\n        flex-wrap: wrap\t\n      }\t\n      .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\t\n        flex-direction: column;\t\n        bottom: 0;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\t\n        justify-content: flex-start;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {\t\n        justify-content: center;  \t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {\t\n        justify-content: flex-end;\t\n      }\t\n      .apexcharts-legend-series {\t\n        cursor: pointer;\t\n        line-height: normal;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom .apexcharts-legend-series, .apexcharts-legend.apx-legend-position-top .apexcharts-legend-series{\t\n        display: flex;\t\n        align-items: center;\t\n      }\t\n      .apexcharts-legend-text {\t\n        position: relative;\t\n        font-size: 14px;\t\n      }\t\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {\t\n        pointer-events: none;\t\n      }\t\n      .apexcharts-legend-marker {\t\n        position: relative;\t\n        display: inline-block;\t\n        cursor: pointer;\t\n        margin-right: 3px;\t\n        border-style: solid;\n      }\t\n      \t\n      .apexcharts-legend.apexcharts-align-right .apexcharts-legend-series, .apexcharts-legend.apexcharts-align-left .apexcharts-legend-series{\t\n        display: inline-block;\t\n      }\t\n      .apexcharts-legend-series.apexcharts-no-click {\t\n        cursor: auto;\t\n      }\t\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {\t\n        display: none !important;\t\n      }\t\n      .apexcharts-inactive-legend {\t\n        opacity: 0.45;\t\n      }"
                    );
                    return t.appendChild(e), t;
                  },
                },
                {
                  key: "getLegendBBox",
                  value: function () {
                    var t = this.w.globals.dom.baseEl
                        .querySelector(".apexcharts-legend")
                        .getBoundingClientRect(),
                      e = t.width;
                    return { clwh: t.height, clww: e };
                  },
                },
                {
                  key: "appendToForeignObject",
                  value: function () {
                    var t = this.w.globals;
                    t.dom.elLegendForeign = document.createElementNS(
                      t.SVGNS,
                      "foreignObject"
                    );
                    var e = t.dom.elLegendForeign;
                    e.setAttribute("x", 0),
                      e.setAttribute("y", 0),
                      e.setAttribute("width", t.svgWidth),
                      e.setAttribute("height", t.svgHeight),
                      t.dom.elLegendWrap.setAttribute(
                        "xmlns",
                        "http://www.w3.org/1999/xhtml"
                      ),
                      e.appendChild(t.dom.elLegendWrap),
                      e.appendChild(this.getLegendStyles()),
                      t.dom.Paper.node.insertBefore(e, t.dom.elGraphical.node);
                  },
                },
                {
                  key: "toggleDataSeries",
                  value: function (t, e) {
                    var i = this,
                      n = this.w;
                    if (
                      n.globals.axisCharts ||
                      "radialBar" === n.config.chart.type
                    ) {
                      n.globals.resized = !0;
                      var a = null,
                        s = null;
                      (n.globals.risingSeries = []),
                        n.globals.axisCharts
                          ? ((a = n.globals.dom.baseEl.querySelector(
                              ".apexcharts-series[data\\:realIndex='".concat(
                                t,
                                "']"
                              )
                            )),
                            (s = parseInt(
                              a.getAttribute("data:realIndex"),
                              10
                            )))
                          : ((a = n.globals.dom.baseEl.querySelector(
                              ".apexcharts-series[rel='".concat(t + 1, "']")
                            )),
                            (s = parseInt(a.getAttribute("rel"), 10) - 1)),
                        e
                          ? [
                              {
                                cs: n.globals.collapsedSeries,
                                csi: n.globals.collapsedSeriesIndices,
                              },
                              {
                                cs: n.globals.ancillaryCollapsedSeries,
                                csi: n.globals.ancillaryCollapsedSeriesIndices,
                              },
                            ].forEach(function (t) {
                              i.riseCollapsedSeries(t.cs, t.csi, s);
                            })
                          : this.hideSeries({ seriesEl: a, realIndex: s });
                    } else {
                      var r = n.globals.dom.Paper.select(
                          " .apexcharts-series[rel='".concat(t + 1, "'] path")
                        ),
                        o = n.config.chart.type;
                      if ("pie" === o || "polarArea" === o || "donut" === o) {
                        var l = n.config.plotOptions.pie.donut.labels;
                        new w(this.lgCtx.ctx).pathMouseDown(r.members[0], null),
                          this.lgCtx.ctx.pie.printDataLabelsInner(
                            r.members[0].node,
                            l
                          );
                      }
                      r.fire("click");
                    }
                  },
                },
                {
                  key: "hideSeries",
                  value: function (t) {
                    var e = t.seriesEl,
                      i = t.realIndex,
                      n = this.w,
                      a = v.clone(n.config.series);
                    if (n.globals.axisCharts) {
                      var s = !1;
                      if (
                        (n.config.yaxis[i] &&
                          n.config.yaxis[i].show &&
                          n.config.yaxis[i].showAlways &&
                          ((s = !0),
                          n.globals.ancillaryCollapsedSeriesIndices.indexOf(i) <
                            0 &&
                            (n.globals.ancillaryCollapsedSeries.push({
                              index: i,
                              data: a[i].data.slice(),
                              type: e.parentNode.className.baseVal.split(
                                "-"
                              )[1],
                            }),
                            n.globals.ancillaryCollapsedSeriesIndices.push(i))),
                        !s)
                      ) {
                        n.globals.collapsedSeries.push({
                          index: i,
                          data: a[i].data.slice(),
                          type: e.parentNode.className.baseVal.split("-")[1],
                        }),
                          n.globals.collapsedSeriesIndices.push(i);
                        var r = n.globals.risingSeries.indexOf(i);
                        n.globals.risingSeries.splice(r, 1);
                      }
                    } else
                      n.globals.collapsedSeries.push({ index: i, data: a[i] }),
                        n.globals.collapsedSeriesIndices.push(i);
                    for (var o = e.childNodes, l = 0; l < o.length; l++)
                      o[l].classList.contains(
                        "apexcharts-series-markers-wrap"
                      ) &&
                        (o[l].classList.contains("apexcharts-hide")
                          ? o[l].classList.remove("apexcharts-hide")
                          : o[l].classList.add("apexcharts-hide"));
                    (n.globals.allSeriesCollapsed =
                      n.globals.collapsedSeries.length ===
                      n.config.series.length),
                      (a = this._getSeriesBasedOnCollapsedState(a)),
                      this.lgCtx.ctx.updateHelpers._updateSeries(
                        a,
                        n.config.chart.animations.dynamicAnimation.enabled
                      );
                  },
                },
                {
                  key: "riseCollapsedSeries",
                  value: function (t, e, i) {
                    var n = this.w,
                      a = v.clone(n.config.series);
                    if (t.length > 0) {
                      for (var s = 0; s < t.length; s++)
                        t[s].index === i &&
                          (n.globals.axisCharts
                            ? ((a[i].data = t[s].data.slice()),
                              t.splice(s, 1),
                              e.splice(s, 1),
                              n.globals.risingSeries.push(i))
                            : ((a[i] = t[s].data),
                              t.splice(s, 1),
                              e.splice(s, 1),
                              n.globals.risingSeries.push(i)));
                      (a = this._getSeriesBasedOnCollapsedState(a)),
                        this.lgCtx.ctx.updateHelpers._updateSeries(
                          a,
                          n.config.chart.animations.dynamicAnimation.enabled
                        );
                    }
                  },
                },
                {
                  key: "_getSeriesBasedOnCollapsedState",
                  value: function (t) {
                    var e = this.w;
                    return (
                      e.globals.axisCharts
                        ? t.forEach(function (i, n) {
                            e.globals.collapsedSeriesIndices.indexOf(n) > -1 &&
                              (t[n].data = []);
                          })
                        : t.forEach(function (i, n) {
                            e.globals.collapsedSeriesIndices.indexOf(n) > -1 &&
                              (t[n] = 0);
                          }),
                      t
                    );
                  },
                },
              ]),
              t
            );
          })(),
          ut = (function () {
            function t(e, i) {
              s(this, t),
                (this.ctx = e),
                (this.w = e.w),
                (this.onLegendClick = this.onLegendClick.bind(this)),
                (this.onLegendHovered = this.onLegendHovered.bind(this)),
                (this.isBarsDistributed =
                  "bar" === this.w.config.chart.type &&
                  this.w.config.plotOptions.bar.distributed &&
                  1 === this.w.config.series.length),
                (this.legendHelpers = new dt(this));
            }
            return (
              o(t, [
                {
                  key: "init",
                  value: function () {
                    var t = this.w,
                      e = t.globals,
                      i = t.config;
                    if (
                      ((i.legend.showForSingleSeries &&
                        1 === e.series.length) ||
                        this.isBarsDistributed ||
                        e.series.length > 1 ||
                        !e.axisCharts) &&
                      i.legend.show
                    ) {
                      for (; e.dom.elLegendWrap.firstChild; )
                        e.dom.elLegendWrap.removeChild(
                          e.dom.elLegendWrap.firstChild
                        );
                      this.drawLegends(),
                        v.isIE11()
                          ? document
                              .getElementsByTagName("head")[0]
                              .appendChild(this.legendHelpers.getLegendStyles())
                          : this.legendHelpers.appendToForeignObject(),
                        "bottom" === i.legend.position ||
                        "top" === i.legend.position
                          ? this.legendAlignHorizontal()
                          : ("right" !== i.legend.position &&
                              "left" !== i.legend.position) ||
                            this.legendAlignVertical();
                    }
                  },
                },
                {
                  key: "drawLegends",
                  value: function () {
                    var t = this,
                      e = this.w,
                      i = e.config.legend.fontFamily,
                      n = e.globals.seriesNames,
                      a = e.globals.colors.slice();
                    if ("heatmap" === e.config.chart.type) {
                      var s = e.config.plotOptions.heatmap.colorScale.ranges;
                      (n = s.map(function (t) {
                        return t.name ? t.name : t.from + " - " + t.to;
                      })),
                        (a = s.map(function (t) {
                          return t.color;
                        }));
                    } else
                      this.isBarsDistributed && (n = e.globals.labels.slice());
                    e.config.legend.customLegendItems.length &&
                      (n = e.config.legend.customLegendItems);
                    for (
                      var r = e.globals.legendFormatter,
                        o = e.config.legend.inverseOrder,
                        l = o ? n.length - 1 : 0;
                      o ? l >= 0 : l <= n.length - 1;
                      o ? l-- : l++
                    ) {
                      var c = r(n[l], { seriesIndex: l, w: e }),
                        h = !1,
                        d = !1;
                      if (e.globals.collapsedSeries.length > 0)
                        for (
                          var u = 0;
                          u < e.globals.collapsedSeries.length;
                          u++
                        )
                          e.globals.collapsedSeries[u].index === l && (h = !0);
                      if (e.globals.ancillaryCollapsedSeriesIndices.length > 0)
                        for (
                          var f = 0;
                          f < e.globals.ancillaryCollapsedSeriesIndices.length;
                          f++
                        )
                          e.globals.ancillaryCollapsedSeriesIndices[f] === l &&
                            (d = !0);
                      var p = document.createElement("span");
                      p.classList.add("apexcharts-legend-marker");
                      var g = e.config.legend.markers.offsetX,
                        m = e.config.legend.markers.offsetY,
                        x = e.config.legend.markers.height,
                        b = e.config.legend.markers.width,
                        y = e.config.legend.markers.strokeWidth,
                        k = e.config.legend.markers.strokeColor,
                        S = e.config.legend.markers.radius,
                        C = p.style;
                      (C.background = a[l]),
                        (C.color = a[l]),
                        C.setProperty("background", a[l], "important"),
                        e.config.legend.markers.fillColors &&
                          e.config.legend.markers.fillColors[l] &&
                          (C.background =
                            e.config.legend.markers.fillColors[l]),
                        void 0 !== e.globals.seriesColors[l] &&
                          ((C.background = e.globals.seriesColors[l]),
                          (C.color = e.globals.seriesColors[l])),
                        (C.height = Array.isArray(x)
                          ? parseFloat(x[l]) + "px"
                          : parseFloat(x) + "px"),
                        (C.width = Array.isArray(b)
                          ? parseFloat(b[l]) + "px"
                          : parseFloat(b) + "px"),
                        (C.left =
                          (Array.isArray(g)
                            ? parseFloat(g[l])
                            : parseFloat(g)) + "px"),
                        (C.top =
                          (Array.isArray(m)
                            ? parseFloat(m[l])
                            : parseFloat(m)) + "px"),
                        (C.borderWidth = Array.isArray(y) ? y[l] : y),
                        (C.borderColor = Array.isArray(k) ? k[l] : k),
                        (C.borderRadius = Array.isArray(S)
                          ? parseFloat(S[l]) + "px"
                          : parseFloat(S) + "px"),
                        e.config.legend.markers.customHTML &&
                          (Array.isArray(e.config.legend.markers.customHTML)
                            ? e.config.legend.markers.customHTML[l] &&
                              (p.innerHTML =
                                e.config.legend.markers.customHTML[l]())
                            : (p.innerHTML =
                                e.config.legend.markers.customHTML())),
                        w.setAttrs(p, { rel: l + 1, "data:collapsed": h || d }),
                        (h || d) &&
                          p.classList.add("apexcharts-inactive-legend");
                      var E = document.createElement("div"),
                        T = document.createElement("span");
                      T.classList.add("apexcharts-legend-text"),
                        (T.innerHTML = Array.isArray(c) ? c.join(" ") : c);
                      var L = e.config.legend.labels.useSeriesColors
                        ? e.globals.colors[l]
                        : e.config.legend.labels.colors;
                      L || (L = e.config.chart.foreColor),
                        (T.style.color = L),
                        (T.style.fontSize =
                          parseFloat(e.config.legend.fontSize) + "px"),
                        (T.style.fontWeight = e.config.legend.fontWeight),
                        (T.style.fontFamily = i || e.config.chart.fontFamily),
                        w.setAttrs(T, {
                          rel: l + 1,
                          i: l,
                          "data:default-text": encodeURIComponent(c),
                          "data:collapsed": h || d,
                        }),
                        E.appendChild(p),
                        E.appendChild(T);
                      var _ = new A(this.ctx);
                      e.config.legend.showForZeroSeries ||
                        (0 === _.getSeriesTotalByIndex(l) &&
                          _.seriesHaveSameValues(l) &&
                          !_.isSeriesNull(l) &&
                          -1 === e.globals.collapsedSeriesIndices.indexOf(l) &&
                          -1 ===
                            e.globals.ancillaryCollapsedSeriesIndices.indexOf(
                              l
                            ) &&
                          E.classList.add("apexcharts-hidden-zero-series")),
                        e.config.legend.showForNullSeries ||
                          (_.isSeriesNull(l) &&
                            -1 ===
                              e.globals.collapsedSeriesIndices.indexOf(l) &&
                            -1 ===
                              e.globals.ancillaryCollapsedSeriesIndices.indexOf(
                                l
                              ) &&
                            E.classList.add("apexcharts-hidden-null-series")),
                        e.globals.dom.elLegendWrap.appendChild(E),
                        e.globals.dom.elLegendWrap.classList.add(
                          "apexcharts-align-".concat(
                            e.config.legend.horizontalAlign
                          )
                        ),
                        e.globals.dom.elLegendWrap.classList.add(
                          "apx-legend-position-" + e.config.legend.position
                        ),
                        E.classList.add("apexcharts-legend-series"),
                        (E.style.margin = ""
                          .concat(e.config.legend.itemMargin.vertical, "px ")
                          .concat(e.config.legend.itemMargin.horizontal, "px")),
                        (e.globals.dom.elLegendWrap.style.width = e.config
                          .legend.width
                          ? e.config.legend.width + "px"
                          : ""),
                        (e.globals.dom.elLegendWrap.style.height = e.config
                          .legend.height
                          ? e.config.legend.height + "px"
                          : ""),
                        w.setAttrs(E, {
                          rel: l + 1,
                          seriesName: v.escapeString(n[l]),
                          "data:collapsed": h || d,
                        }),
                        (h || d) &&
                          E.classList.add("apexcharts-inactive-legend"),
                        e.config.legend.onItemClick.toggleDataSeries ||
                          E.classList.add("apexcharts-no-click");
                    }
                    e.globals.dom.elWrap.addEventListener(
                      "click",
                      t.onLegendClick,
                      !0
                    ),
                      e.config.legend.onItemHover.highlightDataSeries &&
                        0 === e.config.legend.customLegendItems.length &&
                        (e.globals.dom.elWrap.addEventListener(
                          "mousemove",
                          t.onLegendHovered,
                          !0
                        ),
                        e.globals.dom.elWrap.addEventListener(
                          "mouseout",
                          t.onLegendHovered,
                          !0
                        ));
                  },
                },
                {
                  key: "setLegendWrapXY",
                  value: function (t, e) {
                    var i = this.w,
                      n =
                        i.globals.dom.baseEl.querySelector(
                          ".apexcharts-legend"
                        ),
                      a = n.getBoundingClientRect(),
                      s = 0,
                      r = 0;
                    if ("bottom" === i.config.legend.position)
                      r += i.globals.svgHeight - a.height / 2;
                    else if ("top" === i.config.legend.position) {
                      var o = new ht(this.ctx),
                        l = o.dimHelpers.getTitleSubtitleCoords("title").height,
                        c =
                          o.dimHelpers.getTitleSubtitleCoords(
                            "subtitle"
                          ).height;
                      r = r + (l > 0 ? l - 10 : 0) + (c > 0 ? c - 10 : 0);
                    }
                    (n.style.position = "absolute"),
                      (s = s + t + i.config.legend.offsetX),
                      (r = r + e + i.config.legend.offsetY),
                      (n.style.left = s + "px"),
                      (n.style.top = r + "px"),
                      "bottom" === i.config.legend.position
                        ? ((n.style.top = "auto"),
                          (n.style.bottom = 5 - i.config.legend.offsetY + "px"))
                        : "right" === i.config.legend.position &&
                          ((n.style.left = "auto"),
                          (n.style.right =
                            25 + i.config.legend.offsetX + "px")),
                      ["width", "height"].forEach(function (t) {
                        n.style[t] &&
                          (n.style[t] =
                            parseInt(i.config.legend[t], 10) + "px");
                      });
                  },
                },
                {
                  key: "legendAlignHorizontal",
                  value: function () {
                    var t = this.w;
                    t.globals.dom.baseEl.querySelector(
                      ".apexcharts-legend"
                    ).style.right = 0;
                    var e = this.legendHelpers.getLegendBBox(),
                      i = new ht(this.ctx),
                      n = i.dimHelpers.getTitleSubtitleCoords("title"),
                      a = i.dimHelpers.getTitleSubtitleCoords("subtitle"),
                      s = 0;
                    "bottom" === t.config.legend.position
                      ? (s = -e.clwh / 1.8)
                      : "top" === t.config.legend.position &&
                        (s =
                          n.height +
                          a.height +
                          t.config.title.margin +
                          t.config.subtitle.margin -
                          10),
                      this.setLegendWrapXY(20, s);
                  },
                },
                {
                  key: "legendAlignVertical",
                  value: function () {
                    var t = this.w,
                      e = this.legendHelpers.getLegendBBox(),
                      i = 0;
                    "left" === t.config.legend.position && (i = 20),
                      "right" === t.config.legend.position &&
                        (i = t.globals.svgWidth - e.clww - 10),
                      this.setLegendWrapXY(i, 20);
                  },
                },
                {
                  key: "onLegendHovered",
                  value: function (t) {
                    var e = this.w,
                      i =
                        t.target.classList.contains("apexcharts-legend-text") ||
                        t.target.classList.contains("apexcharts-legend-marker");
                    if (
                      "heatmap" === e.config.chart.type ||
                      this.isBarsDistributed
                    ) {
                      if (i) {
                        var n = parseInt(t.target.getAttribute("rel"), 10) - 1;
                        this.ctx.events.fireEvent("legendHover", [
                          this.ctx,
                          n,
                          this.w,
                        ]),
                          new z(this.ctx).highlightRangeInSeries(t, t.target);
                      }
                    } else
                      !t.target.classList.contains(
                        "apexcharts-inactive-legend"
                      ) &&
                        i &&
                        new z(this.ctx).toggleSeriesOnHover(t, t.target);
                  },
                },
                {
                  key: "onLegendClick",
                  value: function (t) {
                    var e = this.w;
                    if (
                      !e.config.legend.customLegendItems.length &&
                      (t.target.classList.contains("apexcharts-legend-text") ||
                        t.target.classList.contains("apexcharts-legend-marker"))
                    ) {
                      var i = parseInt(t.target.getAttribute("rel"), 10) - 1,
                        n = "true" === t.target.getAttribute("data:collapsed"),
                        a = this.w.config.chart.events.legendClick;
                      "function" == typeof a && a(this.ctx, i, this.w),
                        this.ctx.events.fireEvent("legendClick", [
                          this.ctx,
                          i,
                          this.w,
                        ]);
                      var s = this.w.config.legend.markers.onClick;
                      "function" == typeof s &&
                        t.target.classList.contains(
                          "apexcharts-legend-marker"
                        ) &&
                        (s(this.ctx, i, this.w),
                        this.ctx.events.fireEvent("legendMarkerClick", [
                          this.ctx,
                          i,
                          this.w,
                        ])),
                        "treemap" !== e.config.chart.type &&
                          "heatmap" !== e.config.chart.type &&
                          !this.isBarsDistributed &&
                          e.config.legend.onItemClick.toggleDataSeries &&
                          this.legendHelpers.toggleDataSeries(i, n);
                    }
                  },
                },
              ]),
              t
            );
          })(),
          ft = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.w = e.w);
              var i = this.w;
              (this.ev = this.w.config.chart.events),
                (this.selectedClass = "apexcharts-selected"),
                (this.localeValues = this.w.globals.locale.toolbar),
                (this.minX = i.globals.minX),
                (this.maxX = i.globals.maxX);
            }
            return (
              o(t, [
                {
                  key: "createToolbar",
                  value: function () {
                    var t = this,
                      e = this.w,
                      i = function () {
                        return document.createElement("div");
                      },
                      n = i();
                    if (
                      (n.setAttribute("class", "apexcharts-toolbar"),
                      (n.style.top = e.config.chart.toolbar.offsetY + "px"),
                      (n.style.right =
                        3 - e.config.chart.toolbar.offsetX + "px"),
                      e.globals.dom.elWrap.appendChild(n),
                      (this.elZoom = i()),
                      (this.elZoomIn = i()),
                      (this.elZoomOut = i()),
                      (this.elPan = i()),
                      (this.elSelection = i()),
                      (this.elZoomReset = i()),
                      (this.elMenuIcon = i()),
                      (this.elMenu = i()),
                      (this.elCustomIcons = []),
                      (this.t = e.config.chart.toolbar.tools),
                      Array.isArray(this.t.customIcons))
                    )
                      for (var a = 0; a < this.t.customIcons.length; a++)
                        this.elCustomIcons.push(i());
                    var s = [],
                      r = function (i, n, a) {
                        var r = i.toLowerCase();
                        t.t[r] &&
                          e.config.chart.zoom.enabled &&
                          s.push({
                            el: n,
                            icon: "string" == typeof t.t[r] ? t.t[r] : a,
                            title: t.localeValues[i],
                            class: "apexcharts-".concat(r, "-icon"),
                          });
                      };
                    r(
                      "zoomIn",
                      this.elZoomIn,
                      '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n'
                    ),
                      r(
                        "zoomOut",
                        this.elZoomOut,
                        '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n'
                      );
                    var o = function (i) {
                      t.t[i] &&
                        e.config.chart[i].enabled &&
                        s.push({
                          el: "zoom" === i ? t.elZoom : t.elSelection,
                          icon:
                            "string" == typeof t.t[i]
                              ? t.t[i]
                              : "zoom" === i
                              ? '<svg xmlns="http://www.w3.org/2000/svg" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>\n    <path d="M0 0h24v24H0V0z" fill="none"/>\n    <path d="M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"/>\n</svg>'
                              : '<svg fill="#6E8192" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z"/>\n</svg>',
                          title:
                            t.localeValues[
                              "zoom" === i ? "selectionZoom" : "selection"
                            ],
                          class: e.globals.isTouchDevice
                            ? "apexcharts-element-hidden"
                            : "apexcharts-".concat(i, "-icon"),
                        });
                    };
                    o("zoom"),
                      o("selection"),
                      this.t.pan &&
                        e.config.chart.zoom.enabled &&
                        s.push({
                          el: this.elPan,
                          icon:
                            "string" == typeof this.t.pan
                              ? this.t.pan
                              : '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <defs>\n        <path d="M0 0h24v24H0z" id="a"/>\n    </defs>\n    <clipPath id="b">\n        <use overflow="visible" xlink:href="#a"/>\n    </clipPath>\n    <path clip-path="url(#b)" d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"/>\n</svg>',
                          title: this.localeValues.pan,
                          class: e.globals.isTouchDevice
                            ? "apexcharts-element-hidden"
                            : "apexcharts-pan-icon",
                        }),
                      r(
                        "reset",
                        this.elZoomReset,
                        '<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>\n    <path d="M0 0h24v24H0z" fill="none"/>\n</svg>'
                      ),
                      this.t.download &&
                        s.push({
                          el: this.elMenuIcon,
                          icon:
                            "string" == typeof this.t.download
                              ? this.t.download
                              : '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>',
                          title: this.localeValues.menu,
                          class: "apexcharts-menu-icon",
                        });
                    for (var l = 0; l < this.elCustomIcons.length; l++)
                      s.push({
                        el: this.elCustomIcons[l],
                        icon: this.t.customIcons[l].icon,
                        title: this.t.customIcons[l].title,
                        index: this.t.customIcons[l].index,
                        class:
                          "apexcharts-toolbar-custom-icon " +
                          this.t.customIcons[l].class,
                      });
                    s.forEach(function (t, e) {
                      t.index && v.moveIndexInArray(s, e, t.index);
                    });
                    for (var c = 0; c < s.length; c++)
                      w.setAttrs(s[c].el, {
                        class: s[c].class,
                        title: s[c].title,
                      }),
                        (s[c].el.innerHTML = s[c].icon),
                        n.appendChild(s[c].el);
                    this._createHamburgerMenu(n),
                      e.globals.zoomEnabled
                        ? this.elZoom.classList.add(this.selectedClass)
                        : e.globals.panEnabled
                        ? this.elPan.classList.add(this.selectedClass)
                        : e.globals.selectionEnabled &&
                          this.elSelection.classList.add(this.selectedClass),
                      this.addToolbarEventListeners();
                  },
                },
                {
                  key: "_createHamburgerMenu",
                  value: function (t) {
                    (this.elMenuItems = []),
                      t.appendChild(this.elMenu),
                      w.setAttrs(this.elMenu, { class: "apexcharts-menu" });
                    var e = [
                      {
                        name: "exportSVG",
                        title: this.localeValues.exportToSVG,
                      },
                      {
                        name: "exportPNG",
                        title: this.localeValues.exportToPNG,
                      },
                      {
                        name: "exportCSV",
                        title: this.localeValues.exportToCSV,
                      },
                    ];
                    this.w.globals.allSeriesHasEqualX || e.splice(2, 1);
                    for (var i = 0; i < e.length; i++)
                      this.elMenuItems.push(document.createElement("div")),
                        (this.elMenuItems[i].innerHTML = e[i].title),
                        w.setAttrs(this.elMenuItems[i], {
                          class: "apexcharts-menu-item ".concat(e[i].name),
                          title: e[i].title,
                        }),
                        this.elMenu.appendChild(this.elMenuItems[i]);
                  },
                },
                {
                  key: "addToolbarEventListeners",
                  value: function () {
                    var t = this;
                    this.elZoomReset.addEventListener(
                      "click",
                      this.handleZoomReset.bind(this)
                    ),
                      this.elSelection.addEventListener(
                        "click",
                        this.toggleZoomSelection.bind(this, "selection")
                      ),
                      this.elZoom.addEventListener(
                        "click",
                        this.toggleZoomSelection.bind(this, "zoom")
                      ),
                      this.elZoomIn.addEventListener(
                        "click",
                        this.handleZoomIn.bind(this)
                      ),
                      this.elZoomOut.addEventListener(
                        "click",
                        this.handleZoomOut.bind(this)
                      ),
                      this.elPan.addEventListener(
                        "click",
                        this.togglePanning.bind(this)
                      ),
                      this.elMenuIcon.addEventListener(
                        "click",
                        this.toggleMenu.bind(this)
                      ),
                      this.elMenuItems.forEach(function (e) {
                        e.classList.contains("exportSVG")
                          ? e.addEventListener(
                              "click",
                              t.handleDownload.bind(t, "svg")
                            )
                          : e.classList.contains("exportPNG")
                          ? e.addEventListener(
                              "click",
                              t.handleDownload.bind(t, "png")
                            )
                          : e.classList.contains("exportCSV") &&
                            e.addEventListener(
                              "click",
                              t.handleDownload.bind(t, "csv")
                            );
                      });
                    for (var e = 0; e < this.t.customIcons.length; e++)
                      this.elCustomIcons[e].addEventListener(
                        "click",
                        this.t.customIcons[e].click.bind(
                          this,
                          this.ctx,
                          this.ctx.w
                        )
                      );
                  },
                },
                {
                  key: "toggleZoomSelection",
                  value: function (t) {
                    this.ctx.getSyncedCharts().forEach(function (e) {
                      e.ctx.toolbar.toggleOtherControls();
                      var i =
                          "selection" === t
                            ? e.ctx.toolbar.elSelection
                            : e.ctx.toolbar.elZoom,
                        n =
                          "selection" === t
                            ? "selectionEnabled"
                            : "zoomEnabled";
                      (e.w.globals[n] = !e.w.globals[n]),
                        i.classList.contains(e.ctx.toolbar.selectedClass)
                          ? i.classList.remove(e.ctx.toolbar.selectedClass)
                          : i.classList.add(e.ctx.toolbar.selectedClass);
                    });
                  },
                },
                {
                  key: "getToolbarIconsReference",
                  value: function () {
                    var t = this.w;
                    this.elZoom ||
                      (this.elZoom = t.globals.dom.baseEl.querySelector(
                        ".apexcharts-zoom-icon"
                      )),
                      this.elPan ||
                        (this.elPan = t.globals.dom.baseEl.querySelector(
                          ".apexcharts-pan-icon"
                        )),
                      this.elSelection ||
                        (this.elSelection = t.globals.dom.baseEl.querySelector(
                          ".apexcharts-selection-icon"
                        ));
                  },
                },
                {
                  key: "enableZoomPanFromToolbar",
                  value: function (t) {
                    this.toggleOtherControls(),
                      "pan" === t
                        ? (this.w.globals.panEnabled = !0)
                        : (this.w.globals.zoomEnabled = !0);
                    var e = "pan" === t ? this.elPan : this.elZoom,
                      i = "pan" === t ? this.elZoom : this.elPan;
                    e && e.classList.add(this.selectedClass),
                      i && i.classList.remove(this.selectedClass);
                  },
                },
                {
                  key: "togglePanning",
                  value: function () {
                    this.ctx.getSyncedCharts().forEach(function (t) {
                      t.ctx.toolbar.toggleOtherControls(),
                        (t.w.globals.panEnabled = !t.w.globals.panEnabled),
                        t.ctx.toolbar.elPan.classList.contains(
                          t.ctx.toolbar.selectedClass
                        )
                          ? t.ctx.toolbar.elPan.classList.remove(
                              t.ctx.toolbar.selectedClass
                            )
                          : t.ctx.toolbar.elPan.classList.add(
                              t.ctx.toolbar.selectedClass
                            );
                    });
                  },
                },
                {
                  key: "toggleOtherControls",
                  value: function () {
                    var t = this,
                      e = this.w;
                    (e.globals.panEnabled = !1),
                      (e.globals.zoomEnabled = !1),
                      (e.globals.selectionEnabled = !1),
                      this.getToolbarIconsReference(),
                      [this.elPan, this.elSelection, this.elZoom].forEach(
                        function (e) {
                          e && e.classList.remove(t.selectedClass);
                        }
                      );
                  },
                },
                {
                  key: "handleZoomIn",
                  value: function () {
                    var t = this.w;
                    t.globals.isRangeBar &&
                      ((this.minX = t.globals.minY),
                      (this.maxX = t.globals.maxY));
                    var e = (this.minX + this.maxX) / 2,
                      i = (this.minX + e) / 2,
                      n = (this.maxX + e) / 2,
                      a = this._getNewMinXMaxX(i, n);
                    t.globals.disableZoomIn ||
                      this.zoomUpdateOptions(a.minX, a.maxX);
                  },
                },
                {
                  key: "handleZoomOut",
                  value: function () {
                    var t = this.w;
                    if (
                      (t.globals.isRangeBar &&
                        ((this.minX = t.globals.minY),
                        (this.maxX = t.globals.maxY)),
                      !(
                        "datetime" === t.config.xaxis.type &&
                        new Date(this.minX).getUTCFullYear() < 1e3
                      ))
                    ) {
                      var e = (this.minX + this.maxX) / 2,
                        i = this.minX - (e - this.minX),
                        n = this.maxX - (e - this.maxX),
                        a = this._getNewMinXMaxX(i, n);
                      t.globals.disableZoomOut ||
                        this.zoomUpdateOptions(a.minX, a.maxX);
                    }
                  },
                },
                {
                  key: "_getNewMinXMaxX",
                  value: function (t, e) {
                    var i = this.w.config.xaxis.convertedCatToNumeric;
                    return {
                      minX: i ? Math.floor(t) : t,
                      maxX: i ? Math.floor(e) : e,
                    };
                  },
                },
                {
                  key: "zoomUpdateOptions",
                  value: function (t, e) {
                    var i = this.w;
                    if (void 0 !== t || void 0 !== e) {
                      if (
                        !(
                          i.config.xaxis.convertedCatToNumeric &&
                          (t < 1 && ((t = 1), (e = i.globals.dataPoints)),
                          e - t < 2)
                        )
                      ) {
                        var n = { min: t, max: e },
                          a = this.getBeforeZoomRange(n);
                        a && (n = a.xaxis);
                        var s = { xaxis: n },
                          r = v.clone(i.globals.initialConfig.yaxis);
                        i.config.chart.zoom.autoScaleYaxis &&
                          (r = new Z(this.ctx).autoScaleY(this.ctx, r, {
                            xaxis: n,
                          })),
                          i.config.chart.group || (s.yaxis = r),
                          (this.w.globals.zoomed = !0),
                          this.ctx.updateHelpers._updateOptions(
                            s,
                            !1,
                            this.w.config.chart.animations.dynamicAnimation
                              .enabled
                          ),
                          this.zoomCallback(n, r);
                      }
                    } else this.handleZoomReset();
                  },
                },
                {
                  key: "zoomCallback",
                  value: function (t, e) {
                    "function" == typeof this.ev.zoomed &&
                      this.ev.zoomed(this.ctx, { xaxis: t, yaxis: e });
                  },
                },
                {
                  key: "getBeforeZoomRange",
                  value: function (t, e) {
                    var i = null;
                    return (
                      "function" == typeof this.ev.beforeZoom &&
                        (i = this.ev.beforeZoom(this, { xaxis: t, yaxis: e })),
                      i
                    );
                  },
                },
                {
                  key: "toggleMenu",
                  value: function () {
                    var t = this;
                    window.setTimeout(function () {
                      t.elMenu.classList.contains("apexcharts-menu-open")
                        ? t.elMenu.classList.remove("apexcharts-menu-open")
                        : t.elMenu.classList.add("apexcharts-menu-open");
                    }, 0);
                  },
                },
                {
                  key: "handleDownload",
                  value: function (t) {
                    var e = this.w,
                      i = new q(this.ctx);
                    switch (t) {
                      case "svg":
                        i.exportToSVG(this.ctx);
                        break;
                      case "png":
                        i.exportToPng(this.ctx);
                        break;
                      case "csv":
                        i.exportToCSV({
                          series: e.config.series,
                          columnDelimiter:
                            e.config.chart.toolbar.export.csv.columnDelimiter,
                        });
                    }
                  },
                },
                {
                  key: "handleZoomReset",
                  value: function (t) {
                    this.ctx.getSyncedCharts().forEach(function (t) {
                      var e = t.w;
                      if (
                        ((e.globals.lastXAxis.min = void 0),
                        (e.globals.lastXAxis.max = void 0),
                        t.updateHelpers.revertDefaultAxisMinMax(),
                        "function" ==
                          typeof e.config.chart.events.beforeResetZoom)
                      ) {
                        var i = e.config.chart.events.beforeResetZoom(t, e);
                        i && t.updateHelpers.revertDefaultAxisMinMax(i);
                      }
                      "function" == typeof e.config.chart.events.zoomed &&
                        t.ctx.toolbar.zoomCallback({
                          min: e.config.xaxis.min,
                          max: e.config.xaxis.max,
                        }),
                        (e.globals.zoomed = !1);
                      var n = t.ctx.series.emptyCollapsedSeries(
                        v.clone(e.globals.initialSeries)
                      );
                      t.updateHelpers._updateSeries(
                        n,
                        e.config.chart.animations.dynamicAnimation.enabled
                      );
                    });
                  },
                },
                {
                  key: "destroy",
                  value: function () {
                    (this.elZoom = null),
                      (this.elZoomIn = null),
                      (this.elZoomOut = null),
                      (this.elPan = null),
                      (this.elSelection = null),
                      (this.elZoomReset = null),
                      (this.elMenuIcon = null);
                  },
                },
              ]),
              t
            );
          })(),
          pt = (function (t) {
            d(i, ft);
            var e = g(i);
            function i(t) {
              var n;
              return (
                s(this, i),
                ((n = e.call(this, t)).ctx = t),
                (n.w = t.w),
                (n.dragged = !1),
                (n.graphics = new w(n.ctx)),
                (n.eventList = [
                  "mousedown",
                  "mouseleave",
                  "mousemove",
                  "touchstart",
                  "touchmove",
                  "mouseup",
                  "touchend",
                ]),
                (n.clientX = 0),
                (n.clientY = 0),
                (n.startX = 0),
                (n.endX = 0),
                (n.dragX = 0),
                (n.startY = 0),
                (n.endY = 0),
                (n.dragY = 0),
                (n.moveDirection = "none"),
                n
              );
            }
            return (
              o(i, [
                {
                  key: "init",
                  value: function (t) {
                    var e = this,
                      i = t.xyRatios,
                      n = this.w,
                      a = this;
                    (this.xyRatios = i),
                      (this.zoomRect = this.graphics.drawRect(0, 0, 0, 0)),
                      (this.selectionRect = this.graphics.drawRect(0, 0, 0, 0)),
                      (this.gridRect =
                        n.globals.dom.baseEl.querySelector(".apexcharts-grid")),
                      this.zoomRect.node.classList.add("apexcharts-zoom-rect"),
                      this.selectionRect.node.classList.add(
                        "apexcharts-selection-rect"
                      ),
                      n.globals.dom.elGraphical.add(this.zoomRect),
                      n.globals.dom.elGraphical.add(this.selectionRect),
                      "x" === n.config.chart.selection.type
                        ? (this.slDraggableRect = this.selectionRect
                            .draggable({
                              minX: 0,
                              minY: 0,
                              maxX: n.globals.gridWidth,
                              maxY: n.globals.gridHeight,
                            })
                            .on(
                              "dragmove",
                              this.selectionDragging.bind(this, "dragging")
                            ))
                        : "y" === n.config.chart.selection.type
                        ? (this.slDraggableRect = this.selectionRect
                            .draggable({ minX: 0, maxX: n.globals.gridWidth })
                            .on(
                              "dragmove",
                              this.selectionDragging.bind(this, "dragging")
                            ))
                        : (this.slDraggableRect = this.selectionRect
                            .draggable()
                            .on(
                              "dragmove",
                              this.selectionDragging.bind(this, "dragging")
                            )),
                      this.preselectedSelection(),
                      (this.hoverArea = n.globals.dom.baseEl.querySelector(
                        "".concat(n.globals.chartClass, " .apexcharts-svg")
                      )),
                      this.hoverArea.classList.add("apexcharts-zoomable"),
                      this.eventList.forEach(function (t) {
                        e.hoverArea.addEventListener(
                          t,
                          a.svgMouseEvents.bind(a, i),
                          { capture: !1, passive: !0 }
                        );
                      });
                  },
                },
                {
                  key: "destroy",
                  value: function () {
                    this.slDraggableRect &&
                      (this.slDraggableRect.draggable(!1),
                      this.slDraggableRect.off(),
                      this.selectionRect.off()),
                      (this.selectionRect = null),
                      (this.zoomRect = null),
                      (this.gridRect = null);
                  },
                },
                {
                  key: "svgMouseEvents",
                  value: function (t, e) {
                    var i = this.w,
                      n = this,
                      a = this.ctx.toolbar,
                      s = i.globals.zoomEnabled
                        ? i.config.chart.zoom.type
                        : i.config.chart.selection.type,
                      r = i.config.chart.toolbar.autoSelected;
                    e.shiftKey
                      ? ((this.shiftWasPressed = !0),
                        a.enableZoomPanFromToolbar(
                          "pan" === r ? "zoom" : "pan"
                        ))
                      : this.shiftWasPressed &&
                        (a.enableZoomPanFromToolbar(r),
                        (this.shiftWasPressed = !1));
                    var o = e.target.classList;
                    if (
                      !(
                        o.contains("apexcharts-selection-rect") ||
                        o.contains("apexcharts-legend-marker") ||
                        o.contains("apexcharts-legend-text") ||
                        e.target.parentNode.classList.contains(
                          "apexcharts-toolbar"
                        )
                      )
                    ) {
                      if (
                        ((n.clientX =
                          "touchmove" === e.type || "touchstart" === e.type
                            ? e.touches[0].clientX
                            : "touchend" === e.type
                            ? e.changedTouches[0].clientX
                            : e.clientX),
                        (n.clientY =
                          "touchmove" === e.type || "touchstart" === e.type
                            ? e.touches[0].clientY
                            : "touchend" === e.type
                            ? e.changedTouches[0].clientY
                            : e.clientY),
                        "mousedown" === e.type && 1 === e.which)
                      ) {
                        var l = n.gridRect.getBoundingClientRect();
                        (n.startX = n.clientX - l.left),
                          (n.startY = n.clientY - l.top),
                          (n.dragged = !1),
                          (n.w.globals.mousedown = !0);
                      }
                      if (
                        ((("mousemove" === e.type && 1 === e.which) ||
                          "touchmove" === e.type) &&
                          ((n.dragged = !0),
                          i.globals.panEnabled
                            ? ((i.globals.selection = null),
                              n.w.globals.mousedown &&
                                n.panDragging({
                                  context: n,
                                  zoomtype: s,
                                  xyRatios: t,
                                }))
                            : ((n.w.globals.mousedown &&
                                i.globals.zoomEnabled) ||
                                (n.w.globals.mousedown &&
                                  i.globals.selectionEnabled)) &&
                              (n.selection = n.selectionDrawing({
                                context: n,
                                zoomtype: s,
                              }))),
                        "mouseup" === e.type ||
                          "touchend" === e.type ||
                          "mouseleave" === e.type)
                      ) {
                        var c = n.gridRect.getBoundingClientRect();
                        n.w.globals.mousedown &&
                          ((n.endX = n.clientX - c.left),
                          (n.endY = n.clientY - c.top),
                          (n.dragX = Math.abs(n.endX - n.startX)),
                          (n.dragY = Math.abs(n.endY - n.startY)),
                          (i.globals.zoomEnabled ||
                            i.globals.selectionEnabled) &&
                            n.selectionDrawn({ context: n, zoomtype: s }),
                          i.globals.panEnabled &&
                            i.config.xaxis.convertedCatToNumeric &&
                            n.delayedPanScrolled()),
                          i.globals.zoomEnabled &&
                            n.hideSelectionRect(this.selectionRect),
                          (n.dragged = !1),
                          (n.w.globals.mousedown = !1);
                      }
                      this.makeSelectionRectDraggable();
                    }
                  },
                },
                {
                  key: "makeSelectionRectDraggable",
                  value: function () {
                    var t = this.w;
                    if (this.selectionRect) {
                      var e = this.selectionRect.node.getBoundingClientRect();
                      e.width > 0 &&
                        e.height > 0 &&
                        this.slDraggableRect
                          .selectize({
                            points: "l, r",
                            pointSize: 8,
                            pointType: "rect",
                          })
                          .resize({
                            constraint: {
                              minX: 0,
                              minY: 0,
                              maxX: t.globals.gridWidth,
                              maxY: t.globals.gridHeight,
                            },
                          })
                          .on(
                            "resizing",
                            this.selectionDragging.bind(this, "resizing")
                          );
                    }
                  },
                },
                {
                  key: "preselectedSelection",
                  value: function () {
                    var t = this.w,
                      e = this.xyRatios;
                    if (!t.globals.zoomEnabled)
                      if (
                        void 0 !== t.globals.selection &&
                        null !== t.globals.selection
                      )
                        this.drawSelectionRect(t.globals.selection);
                      else if (
                        void 0 !== t.config.chart.selection.xaxis.min &&
                        void 0 !== t.config.chart.selection.xaxis.max
                      ) {
                        var i =
                            (t.config.chart.selection.xaxis.min -
                              t.globals.minX) /
                            e.xRatio,
                          n = {
                            x: i,
                            y: 0,
                            width:
                              t.globals.gridWidth -
                              (t.globals.maxX -
                                t.config.chart.selection.xaxis.max) /
                                e.xRatio -
                              i,
                            height: t.globals.gridHeight,
                            translateX: 0,
                            translateY: 0,
                            selectionEnabled: !0,
                          };
                        this.drawSelectionRect(n),
                          this.makeSelectionRectDraggable(),
                          "function" ==
                            typeof t.config.chart.events.selection &&
                            t.config.chart.events.selection(this.ctx, {
                              xaxis: {
                                min: t.config.chart.selection.xaxis.min,
                                max: t.config.chart.selection.xaxis.max,
                              },
                              yaxis: {},
                            });
                      }
                  },
                },
                {
                  key: "drawSelectionRect",
                  value: function (t) {
                    var e = t.x,
                      i = t.y,
                      n = t.width,
                      a = t.height,
                      s = t.translateX,
                      r = void 0 === s ? 0 : s,
                      o = t.translateY,
                      l = void 0 === o ? 0 : o,
                      c = this.w,
                      h = this.zoomRect,
                      d = this.selectionRect;
                    if (this.dragged || null !== c.globals.selection) {
                      var u = { transform: "translate(" + r + ", " + l + ")" };
                      c.globals.zoomEnabled &&
                        this.dragged &&
                        (n < 0 && (n = 1),
                        h.attr({
                          x: e,
                          y: i,
                          width: n,
                          height: a,
                          fill: c.config.chart.zoom.zoomedArea.fill.color,
                          "fill-opacity":
                            c.config.chart.zoom.zoomedArea.fill.opacity,
                          stroke: c.config.chart.zoom.zoomedArea.stroke.color,
                          "stroke-width":
                            c.config.chart.zoom.zoomedArea.stroke.width,
                          "stroke-opacity":
                            c.config.chart.zoom.zoomedArea.stroke.opacity,
                        }),
                        w.setAttrs(h.node, u)),
                        c.globals.selectionEnabled &&
                          (d.attr({
                            x: e,
                            y: i,
                            width: n > 0 ? n : 0,
                            height: a > 0 ? a : 0,
                            fill: c.config.chart.selection.fill.color,
                            "fill-opacity":
                              c.config.chart.selection.fill.opacity,
                            stroke: c.config.chart.selection.stroke.color,
                            "stroke-width":
                              c.config.chart.selection.stroke.width,
                            "stroke-dasharray":
                              c.config.chart.selection.stroke.dashArray,
                            "stroke-opacity":
                              c.config.chart.selection.stroke.opacity,
                          }),
                          w.setAttrs(d.node, u));
                    }
                  },
                },
                {
                  key: "hideSelectionRect",
                  value: function (t) {
                    t && t.attr({ x: 0, y: 0, width: 0, height: 0 });
                  },
                },
                {
                  key: "selectionDrawing",
                  value: function (t) {
                    var e,
                      i = t.context,
                      n = t.zoomtype,
                      a = this.w,
                      s = i,
                      r = this.gridRect.getBoundingClientRect(),
                      o = s.startX - 1,
                      l = s.startY,
                      c = !1,
                      h = !1,
                      d = s.clientX - r.left - o,
                      u = s.clientY - r.top - l;
                    return (
                      Math.abs(d + o) > a.globals.gridWidth
                        ? (d = a.globals.gridWidth - o)
                        : s.clientX - r.left < 0 && (d = o),
                      o > s.clientX - r.left && ((c = !0), (d = Math.abs(d))),
                      l > s.clientY - r.top && ((h = !0), (u = Math.abs(u))),
                      (e =
                        "x" === n
                          ? {
                              x: c ? o - d : o,
                              y: 0,
                              width: d,
                              height: a.globals.gridHeight,
                            }
                          : "y" === n
                          ? {
                              x: 0,
                              y: h ? l - u : l,
                              width: a.globals.gridWidth,
                              height: u,
                            }
                          : {
                              x: c ? o - d : o,
                              y: h ? l - u : l,
                              width: d,
                              height: u,
                            }),
                      s.drawSelectionRect(e),
                      s.selectionDragging("resizing"),
                      e
                    );
                  },
                },
                {
                  key: "selectionDragging",
                  value: function (t, e) {
                    var i = this,
                      n = this.w,
                      a = this.xyRatios,
                      s = this.selectionRect,
                      r = 0;
                    "resizing" === t && (r = 30);
                    var o = function (t) {
                        return parseFloat(s.node.getAttribute(t));
                      },
                      l = {
                        x: o("x"),
                        y: o("y"),
                        width: o("width"),
                        height: o("height"),
                      };
                    (n.globals.selection = l),
                      "function" == typeof n.config.chart.events.selection &&
                        n.globals.selectionEnabled &&
                        (clearTimeout(this.w.globals.selectionResizeTimer),
                        (this.w.globals.selectionResizeTimer =
                          window.setTimeout(function () {
                            var t = i.gridRect.getBoundingClientRect(),
                              e = s.node.getBoundingClientRect(),
                              r = {
                                xaxis: {
                                  min:
                                    n.globals.xAxisScale.niceMin +
                                    (e.left - t.left) * a.xRatio,
                                  max:
                                    n.globals.xAxisScale.niceMin +
                                    (e.right - t.left) * a.xRatio,
                                },
                                yaxis: {
                                  min:
                                    n.globals.yAxisScale[0].niceMin +
                                    (t.bottom - e.bottom) * a.yRatio[0],
                                  max:
                                    n.globals.yAxisScale[0].niceMax -
                                    (e.top - t.top) * a.yRatio[0],
                                },
                              };
                            n.config.chart.events.selection(i.ctx, r),
                              n.config.chart.brush.enabled &&
                                void 0 !==
                                  n.config.chart.events.brushScrolled &&
                                n.config.chart.events.brushScrolled(i.ctx, r);
                          }, r)));
                  },
                },
                {
                  key: "selectionDrawn",
                  value: function (t) {
                    var e = t.context,
                      i = t.zoomtype,
                      n = this.w,
                      a = e,
                      s = this.xyRatios,
                      r = this.ctx.toolbar;
                    if (a.startX > a.endX) {
                      var o = a.startX;
                      (a.startX = a.endX), (a.endX = o);
                    }
                    if (a.startY > a.endY) {
                      var l = a.startY;
                      (a.startY = a.endY), (a.endY = l);
                    }
                    var c = void 0,
                      h = void 0;
                    n.globals.isRangeBar
                      ? ((c =
                          n.globals.yAxisScale[0].niceMin +
                          a.startX * s.invertedYRatio),
                        (h =
                          n.globals.yAxisScale[0].niceMin +
                          a.endX * s.invertedYRatio))
                      : ((c =
                          n.globals.xAxisScale.niceMin + a.startX * s.xRatio),
                        (h = n.globals.xAxisScale.niceMin + a.endX * s.xRatio));
                    var d = [],
                      u = [];
                    if (
                      (n.config.yaxis.forEach(function (t, e) {
                        d.push(
                          n.globals.yAxisScale[e].niceMax -
                            s.yRatio[e] * a.startY
                        ),
                          u.push(
                            n.globals.yAxisScale[e].niceMax -
                              s.yRatio[e] * a.endY
                          );
                      }),
                      a.dragged && (a.dragX > 10 || a.dragY > 10) && c !== h)
                    )
                      if (n.globals.zoomEnabled) {
                        var f = v.clone(n.globals.initialConfig.yaxis),
                          p = v.clone(n.globals.initialConfig.xaxis);
                        if (
                          ((n.globals.zoomed = !0),
                          n.config.xaxis.convertedCatToNumeric &&
                            ((c = Math.floor(c)),
                            (h = Math.floor(h)),
                            c < 1 && ((c = 1), (h = n.globals.dataPoints)),
                            h - c < 2 && (h = c + 1)),
                          ("xy" !== i && "x" !== i) || (p = { min: c, max: h }),
                          ("xy" !== i && "y" !== i) ||
                            f.forEach(function (t, e) {
                              (f[e].min = u[e]), (f[e].max = d[e]);
                            }),
                          n.config.chart.zoom.autoScaleYaxis)
                        ) {
                          var g = new Z(a.ctx);
                          f = g.autoScaleY(a.ctx, f, { xaxis: p });
                        }
                        if (r) {
                          var m = r.getBeforeZoomRange(p, f);
                          m &&
                            ((p = m.xaxis ? m.xaxis : p),
                            (f = m.yaxis ? m.yaxis : f));
                        }
                        var x = { xaxis: p };
                        n.config.chart.group || (x.yaxis = f),
                          a.ctx.updateHelpers._updateOptions(
                            x,
                            !1,
                            a.w.config.chart.animations.dynamicAnimation.enabled
                          ),
                          "function" == typeof n.config.chart.events.zoomed &&
                            r.zoomCallback(p, f);
                      } else if (n.globals.selectionEnabled) {
                        var b,
                          y = null;
                        (b = { min: c, max: h }),
                          ("xy" !== i && "y" !== i) ||
                            (y = v.clone(n.config.yaxis)).forEach(function (
                              t,
                              e
                            ) {
                              (y[e].min = u[e]), (y[e].max = d[e]);
                            }),
                          (n.globals.selection = a.selection),
                          "function" ==
                            typeof n.config.chart.events.selection &&
                            n.config.chart.events.selection(a.ctx, {
                              xaxis: b,
                              yaxis: y,
                            });
                      }
                  },
                },
                {
                  key: "panDragging",
                  value: function (t) {
                    var e = t.context,
                      i = this.w,
                      n = e;
                    if (void 0 !== i.globals.lastClientPosition.x) {
                      var a = i.globals.lastClientPosition.x - n.clientX,
                        s = i.globals.lastClientPosition.y - n.clientY;
                      Math.abs(a) > Math.abs(s) && a > 0
                        ? (this.moveDirection = "left")
                        : Math.abs(a) > Math.abs(s) && a < 0
                        ? (this.moveDirection = "right")
                        : Math.abs(s) > Math.abs(a) && s > 0
                        ? (this.moveDirection = "up")
                        : Math.abs(s) > Math.abs(a) &&
                          s < 0 &&
                          (this.moveDirection = "down");
                    }
                    i.globals.lastClientPosition = {
                      x: n.clientX,
                      y: n.clientY,
                    };
                    var r = i.globals.isRangeBar
                        ? i.globals.minY
                        : i.globals.minX,
                      o = i.globals.isRangeBar
                        ? i.globals.maxY
                        : i.globals.maxX;
                    i.config.xaxis.convertedCatToNumeric || n.panScrolled(r, o);
                  },
                },
                {
                  key: "delayedPanScrolled",
                  value: function () {
                    var t = this.w,
                      e = t.globals.minX,
                      i = t.globals.maxX,
                      n = (t.globals.maxX - t.globals.minX) / 2;
                    "left" === this.moveDirection
                      ? ((e = t.globals.minX + n), (i = t.globals.maxX + n))
                      : "right" === this.moveDirection &&
                        ((e = t.globals.minX - n), (i = t.globals.maxX - n)),
                      (e = Math.floor(e)),
                      (i = Math.floor(i)),
                      this.updateScrolledChart(
                        { xaxis: { min: e, max: i } },
                        e,
                        i
                      );
                  },
                },
                {
                  key: "panScrolled",
                  value: function (t, e) {
                    var i = this.w,
                      n = this.xyRatios,
                      a = v.clone(i.globals.initialConfig.yaxis),
                      s = n.xRatio,
                      r = i.globals.minX,
                      o = i.globals.maxX;
                    i.globals.isRangeBar &&
                      ((s = n.invertedYRatio),
                      (r = i.globals.minY),
                      (o = i.globals.maxY)),
                      "left" === this.moveDirection
                        ? ((t = r + (i.globals.gridWidth / 15) * s),
                          (e = o + (i.globals.gridWidth / 15) * s))
                        : "right" === this.moveDirection &&
                          ((t = r - (i.globals.gridWidth / 15) * s),
                          (e = o - (i.globals.gridWidth / 15) * s)),
                      i.globals.isRangeBar ||
                        ((t < i.globals.initialMinX ||
                          e > i.globals.initialMaxX) &&
                          ((t = r), (e = o)));
                    var l = { min: t, max: e };
                    i.config.chart.zoom.autoScaleYaxis &&
                      (a = new Z(this.ctx).autoScaleY(this.ctx, a, {
                        xaxis: l,
                      }));
                    var c = { xaxis: { min: t, max: e } };
                    i.config.chart.group || (c.yaxis = a),
                      this.updateScrolledChart(c, t, e);
                  },
                },
                {
                  key: "updateScrolledChart",
                  value: function (t, e, i) {
                    var n = this.w;
                    this.ctx.updateHelpers._updateOptions(t, !1, !1),
                      "function" == typeof n.config.chart.events.scrolled &&
                        n.config.chart.events.scrolled(this.ctx, {
                          xaxis: { min: e, max: i },
                        });
                  },
                },
              ]),
              i
            );
          })(),
          gt = (function () {
            function t(e) {
              s(this, t), (this.w = e.w), (this.ttCtx = e), (this.ctx = e.ctx);
            }
            return (
              o(t, [
                {
                  key: "getNearestValues",
                  value: function (t) {
                    var e = t.hoverArea,
                      i = t.elGrid,
                      n = t.clientX,
                      a = t.clientY,
                      s = this.w,
                      r = i.getBoundingClientRect(),
                      o = r.width,
                      l = r.height,
                      c = o / (s.globals.dataPoints - 1),
                      h = l / s.globals.dataPoints,
                      d = this.hasBars();
                    (!s.globals.comboCharts && !d) ||
                      s.config.xaxis.convertedCatToNumeric ||
                      (c = o / s.globals.dataPoints);
                    var u = n - r.left - s.globals.barPadForNumericAxis,
                      f = a - r.top;
                    u < 0 || f < 0 || u > o || f > l
                      ? (e.classList.remove("hovering-zoom"),
                        e.classList.remove("hovering-pan"))
                      : s.globals.zoomEnabled
                      ? (e.classList.remove("hovering-pan"),
                        e.classList.add("hovering-zoom"))
                      : s.globals.panEnabled &&
                        (e.classList.remove("hovering-zoom"),
                        e.classList.add("hovering-pan"));
                    var p = Math.round(u / c),
                      g = Math.floor(f / h);
                    d &&
                      !s.config.xaxis.convertedCatToNumeric &&
                      ((p = Math.ceil(u / c)), (p -= 1));
                    for (
                      var m, x = null, b = null, y = [], w = 0;
                      w < s.globals.seriesXvalues.length;
                      w++
                    )
                      y.push(
                        [s.globals.seriesXvalues[w][0] - 1e-6].concat(
                          s.globals.seriesXvalues[w]
                        )
                      );
                    if (
                      ((y = y.map(function (t) {
                        return t.filter(function (t) {
                          return t;
                        });
                      })),
                      (m = s.globals.seriesYvalues.map(function (t) {
                        return t.filter(function (t) {
                          return v.isNumber(t);
                        });
                      })),
                      s.globals.isXNumeric)
                    ) {
                      var k = this.ttCtx.getElGrid().getBoundingClientRect(),
                        S = u * (k.width / o),
                        A = f * (k.height / l);
                      (x = (b = this.closestInMultiArray(S, A, y, m)).index),
                        (p = b.j),
                        null !== x &&
                          ((y = s.globals.seriesXvalues[x]),
                          (p = (b = this.closestInArray(S, y)).index));
                    }
                    return (
                      (s.globals.capturedSeriesIndex = null === x ? -1 : x),
                      (!p || p < 1) && (p = 0),
                      s.globals.isBarHorizontal
                        ? (s.globals.capturedDataPointIndex = g)
                        : (s.globals.capturedDataPointIndex = p),
                      {
                        capturedSeries: x,
                        j: s.globals.isBarHorizontal ? g : p,
                        hoverX: u,
                        hoverY: f,
                      }
                    );
                  },
                },
                {
                  key: "closestInMultiArray",
                  value: function (t, e, i, n) {
                    var a = this.w,
                      s = 0,
                      r = null,
                      o = -1;
                    a.globals.series.length > 1
                      ? (s = this.getFirstActiveXArray(i))
                      : (r = 0);
                    var l = n[s][0],
                      c = i[s][0],
                      h = Math.abs(t - c),
                      d = Math.abs(e - l),
                      u = d + h;
                    return (
                      n.map(function (a, s) {
                        a.map(function (a, l) {
                          var c = Math.abs(e - n[s][l]),
                            f = Math.abs(t - i[s][l]),
                            p = f + c;
                          p < u &&
                            ((u = p), (h = f), (d = c), (r = s), (o = l));
                        });
                      }),
                      { index: r, j: o }
                    );
                  },
                },
                {
                  key: "getFirstActiveXArray",
                  value: function (t) {
                    for (
                      var e = 0,
                        i = t.map(function (t, e) {
                          return t.length > 0 ? e : -1;
                        }),
                        n = 0;
                      n < i.length;
                      n++
                    )
                      if (-1 !== i[n]) {
                        e = i[n];
                        break;
                      }
                    return e;
                  },
                },
                {
                  key: "closestInArray",
                  value: function (t, e) {
                    for (
                      var i = e[0], n = null, a = Math.abs(t - i), s = 0;
                      s < e.length;
                      s++
                    ) {
                      var r = Math.abs(t - e[s]);
                      r < a && ((a = r), (n = s));
                    }
                    return { index: n };
                  },
                },
                {
                  key: "isXoverlap",
                  value: function (t) {
                    var e = [],
                      i = this.w.globals.seriesX.filter(function (t) {
                        return void 0 !== t[0];
                      });
                    if (i.length > 0)
                      for (var n = 0; n < i.length - 1; n++)
                        void 0 !== i[n][t] &&
                          void 0 !== i[n + 1][t] &&
                          i[n][t] !== i[n + 1][t] &&
                          e.push("unEqual");
                    return 0 === e.length;
                  },
                },
                {
                  key: "isInitialSeriesSameLen",
                  value: function () {
                    for (
                      var t = !0, e = this.w.globals.initialSeries, i = 0;
                      i < e.length - 1;
                      i++
                    )
                      if (e[i].data.length !== e[i + 1].data.length) {
                        t = !1;
                        break;
                      }
                    return t;
                  },
                },
                {
                  key: "getBarsHeight",
                  value: function (t) {
                    return m(t).reduce(function (t, e) {
                      return t + e.getBBox().height;
                    }, 0);
                  },
                },
                {
                  key: "getElMarkers",
                  value: function () {
                    return this.w.globals.dom.baseEl.querySelectorAll(
                      " .apexcharts-series-markers"
                    );
                  },
                },
                {
                  key: "getAllMarkers",
                  value: function () {
                    var t = this.w.globals.dom.baseEl.querySelectorAll(
                      ".apexcharts-series-markers-wrap"
                    );
                    (t = m(t)).sort(function (t, e) {
                      return Number(e.getAttribute("data:realIndex")) <
                        Number(t.getAttribute("data:realIndex"))
                        ? 0
                        : -1;
                    });
                    var e = [];
                    return (
                      t.forEach(function (t) {
                        e.push(t.querySelector(".apexcharts-marker"));
                      }),
                      e
                    );
                  },
                },
                {
                  key: "hasMarkers",
                  value: function () {
                    return this.getElMarkers().length > 0;
                  },
                },
                {
                  key: "getElBars",
                  value: function () {
                    return this.w.globals.dom.baseEl.querySelectorAll(
                      ".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-boxPlot-series, .apexcharts-rangebar-series"
                    );
                  },
                },
                {
                  key: "hasBars",
                  value: function () {
                    return this.getElBars().length > 0;
                  },
                },
                {
                  key: "getHoverMarkerSize",
                  value: function (t) {
                    var e = this.w,
                      i = e.config.markers.hover.size;
                    return (
                      void 0 === i &&
                        (i =
                          e.globals.markers.size[t] +
                          e.config.markers.hover.sizeOffset),
                      i
                    );
                  },
                },
                {
                  key: "toggleAllTooltipSeriesGroups",
                  value: function (t) {
                    var e = this.w,
                      i = this.ttCtx;
                    0 === i.allTooltipSeriesGroups.length &&
                      (i.allTooltipSeriesGroups =
                        e.globals.dom.baseEl.querySelectorAll(
                          ".apexcharts-tooltip-series-group"
                        ));
                    for (
                      var n = i.allTooltipSeriesGroups, a = 0;
                      a < n.length;
                      a++
                    )
                      "enable" === t
                        ? (n[a].classList.add("apexcharts-active"),
                          (n[a].style.display = e.config.tooltip.items.display))
                        : (n[a].classList.remove("apexcharts-active"),
                          (n[a].style.display = "none"));
                  },
                },
              ]),
              t
            );
          })(),
          mt = (function () {
            function t(e) {
              s(this, t),
                (this.w = e.w),
                (this.ctx = e.ctx),
                (this.ttCtx = e),
                (this.tooltipUtil = new gt(e));
            }
            return (
              o(t, [
                {
                  key: "drawSeriesTexts",
                  value: function (t) {
                    var e = t.shared,
                      i = void 0 === e || e,
                      n = t.ttItems,
                      a = t.i,
                      s = void 0 === a ? 0 : a,
                      r = t.j,
                      o = void 0 === r ? null : r,
                      l = t.y1,
                      c = t.y2,
                      h = t.e,
                      d = this.w;
                    void 0 !== d.config.tooltip.custom
                      ? this.handleCustomTooltip({
                          i: s,
                          j: o,
                          y1: l,
                          y2: c,
                          w: d,
                        })
                      : this.toggleActiveInactiveSeries(i);
                    var u = this.getValuesToPrint({ i: s, j: o });
                    this.printLabels({
                      i: s,
                      j: o,
                      values: u,
                      ttItems: n,
                      shared: i,
                      e: h,
                    });
                    var f = this.ttCtx.getElTooltip();
                    (this.ttCtx.tooltipRect.ttWidth =
                      f.getBoundingClientRect().width),
                      (this.ttCtx.tooltipRect.ttHeight =
                        f.getBoundingClientRect().height);
                  },
                },
                {
                  key: "printLabels",
                  value: function (t) {
                    var e,
                      i = this,
                      n = t.i,
                      a = t.j,
                      s = t.values,
                      r = t.ttItems,
                      o = t.shared,
                      l = t.e,
                      c = this.w,
                      d = [],
                      u = function (t) {
                        return (
                          c.globals.seriesGoals[t] &&
                          c.globals.seriesGoals[t][a] &&
                          Array.isArray(c.globals.seriesGoals[t][a])
                        );
                      },
                      f = s.xVal,
                      p = s.zVal,
                      g = s.xAxisTTVal,
                      m = "",
                      x = c.globals.colors[n];
                    null !== a &&
                      c.config.plotOptions.bar.distributed &&
                      (x = c.globals.colors[a]);
                    for (
                      var v = function (t, s) {
                          var v = i.getFormatters(n);
                          (m = i.getSeriesName({
                            fn: v.yLbTitleFormatter,
                            index: n,
                            seriesIndex: n,
                            j: a,
                          })),
                            "treemap" === c.config.chart.type &&
                              (m = v.yLbTitleFormatter(
                                String(c.config.series[n].data[a].x),
                                {
                                  series: c.globals.series,
                                  seriesIndex: n,
                                  dataPointIndex: a,
                                  w: c,
                                }
                              ));
                          var b = c.config.tooltip.inverseOrder ? s : t;
                          if (c.globals.axisCharts) {
                            var y = function (t) {
                              return v.yLbFormatter(c.globals.series[t][a], {
                                series: c.globals.series,
                                seriesIndex: t,
                                dataPointIndex: a,
                                w: c,
                              });
                            };
                            o
                              ? ((v = i.getFormatters(b)),
                                (m = i.getSeriesName({
                                  fn: v.yLbTitleFormatter,
                                  index: b,
                                  seriesIndex: n,
                                  j: a,
                                })),
                                (x = c.globals.colors[b]),
                                (e = y(b)),
                                u(b) &&
                                  (d = c.globals.seriesGoals[b][a].map(
                                    function (t) {
                                      return {
                                        attrs: t,
                                        val: v.yLbFormatter(t.value, {
                                          seriesIndex: b,
                                          dataPointIndex: a,
                                          w: c,
                                        }),
                                      };
                                    }
                                  )))
                              : (l &&
                                  l.target &&
                                  l.target.getAttribute("fill") &&
                                  (x = l.target.getAttribute("fill")),
                                (e = y(n)),
                                u(n) &&
                                  Array.isArray(c.globals.seriesGoals[n][a]) &&
                                  (d = c.globals.seriesGoals[n][a].map(
                                    function (t) {
                                      return {
                                        attrs: t,
                                        val: v.yLbFormatter(t.value, {
                                          seriesIndex: n,
                                          dataPointIndex: a,
                                          w: c,
                                        }),
                                      };
                                    }
                                  )));
                          }
                          null === a &&
                            (e = v.yLbFormatter(
                              c.globals.series[n],
                              h(
                                h({}, c),
                                {},
                                { seriesIndex: n, dataPointIndex: n }
                              )
                            )),
                            i.DOMHandling({
                              i: n,
                              t: b,
                              j: a,
                              ttItems: r,
                              values: {
                                val: e,
                                goalVals: d,
                                xVal: f,
                                xAxisTTVal: g,
                                zVal: p,
                              },
                              seriesName: m,
                              shared: o,
                              pColor: x,
                            });
                        },
                        b = 0,
                        y = c.globals.series.length - 1;
                      b < c.globals.series.length;
                      b++, y--
                    )
                      v(b, y);
                  },
                },
                {
                  key: "getFormatters",
                  value: function (t) {
                    var e,
                      i = this.w,
                      n = i.globals.yLabelFormatters[t];
                    return (
                      void 0 !== i.globals.ttVal
                        ? Array.isArray(i.globals.ttVal)
                          ? ((n =
                              i.globals.ttVal[t] &&
                              i.globals.ttVal[t].formatter),
                            (e =
                              i.globals.ttVal[t] &&
                              i.globals.ttVal[t].title &&
                              i.globals.ttVal[t].title.formatter))
                          : ((n = i.globals.ttVal.formatter),
                            "function" ==
                              typeof i.globals.ttVal.title.formatter &&
                              (e = i.globals.ttVal.title.formatter))
                        : (e = i.config.tooltip.y.title.formatter),
                      "function" != typeof n &&
                        (n = i.globals.yLabelFormatters[0]
                          ? i.globals.yLabelFormatters[0]
                          : function (t) {
                              return t;
                            }),
                      "function" != typeof e &&
                        (e = function (t) {
                          return t;
                        }),
                      { yLbFormatter: n, yLbTitleFormatter: e }
                    );
                  },
                },
                {
                  key: "getSeriesName",
                  value: function (t) {
                    var e = t.fn,
                      i = t.index,
                      n = t.seriesIndex,
                      a = t.j,
                      s = this.w;
                    return e(String(s.globals.seriesNames[i]), {
                      series: s.globals.series,
                      seriesIndex: n,
                      dataPointIndex: a,
                      w: s,
                    });
                  },
                },
                {
                  key: "DOMHandling",
                  value: function (t) {
                    t.i;
                    var e = t.t,
                      i = t.j,
                      n = t.ttItems,
                      a = t.values,
                      s = t.seriesName,
                      r = t.shared,
                      o = t.pColor,
                      l = this.w,
                      c = this.ttCtx,
                      h = a.val,
                      d = a.goalVals,
                      u = a.xVal,
                      f = a.xAxisTTVal,
                      p = a.zVal,
                      g = null;
                    (g = n[e].children),
                      l.config.tooltip.fillSeriesColor &&
                        ((n[e].style.backgroundColor = o),
                        (g[0].style.display = "none")),
                      c.showTooltipTitle &&
                        (null === c.tooltipTitle &&
                          (c.tooltipTitle = l.globals.dom.baseEl.querySelector(
                            ".apexcharts-tooltip-title"
                          )),
                        (c.tooltipTitle.innerHTML = u)),
                      c.blxaxisTooltip &&
                        (c.xaxisTooltipText.innerHTML = "" !== f ? f : u);
                    var m = n[e].querySelector(
                      ".apexcharts-tooltip-text-y-label"
                    );
                    m && (m.innerHTML = s || "");
                    var x = n[e].querySelector(
                      ".apexcharts-tooltip-text-y-value"
                    );
                    x && (x.innerHTML = void 0 !== h ? h : ""),
                      g[0] &&
                        g[0].classList.contains("apexcharts-tooltip-marker") &&
                        (l.config.tooltip.marker.fillColors &&
                          Array.isArray(l.config.tooltip.marker.fillColors) &&
                          (o = l.config.tooltip.marker.fillColors[e]),
                        (g[0].style.backgroundColor = o)),
                      l.config.tooltip.marker.show ||
                        (g[0].style.display = "none");
                    var v = n[e].querySelector(
                        ".apexcharts-tooltip-text-goals-label"
                      ),
                      b = n[e].querySelector(
                        ".apexcharts-tooltip-text-goals-value"
                      );
                    if (d.length && l.globals.seriesGoals[e]) {
                      var y = function () {
                        var t = "<div >",
                          e = "<div>";
                        d.forEach(function (i, n) {
                          (t +=
                            ' <div style="display: flex"><span class="apexcharts-tooltip-marker" style="background-color: '
                              .concat(
                                i.attrs.strokeColor,
                                '; height: 3px; border-radius: 0; top: 5px;"></span> '
                              )
                              .concat(i.attrs.name, "</div>")),
                            (e += "<div>".concat(i.val, "</div>"));
                        }),
                          (v.innerHTML = t + "</div>"),
                          (b.innerHTML = e + "</div>");
                      };
                      r
                        ? l.globals.seriesGoals[e][i] &&
                          Array.isArray(l.globals.seriesGoals[e][i])
                          ? y()
                          : ((v.innerHTML = ""), (b.innerHTML = ""))
                        : y();
                    } else (v.innerHTML = ""), (b.innerHTML = "");
                    null !== p &&
                      ((n[e].querySelector(
                        ".apexcharts-tooltip-text-z-label"
                      ).innerHTML = l.config.tooltip.z.title),
                      (n[e].querySelector(
                        ".apexcharts-tooltip-text-z-value"
                      ).innerHTML = void 0 !== p ? p : "")),
                      r &&
                        g[0] &&
                        (null == h ||
                        l.globals.collapsedSeriesIndices.indexOf(e) > -1
                          ? (g[0].parentNode.style.display = "none")
                          : (g[0].parentNode.style.display =
                              l.config.tooltip.items.display));
                  },
                },
                {
                  key: "toggleActiveInactiveSeries",
                  value: function (t) {
                    var e = this.w;
                    if (t)
                      this.tooltipUtil.toggleAllTooltipSeriesGroups("enable");
                    else {
                      this.tooltipUtil.toggleAllTooltipSeriesGroups("disable");
                      var i = e.globals.dom.baseEl.querySelector(
                        ".apexcharts-tooltip-series-group"
                      );
                      i &&
                        (i.classList.add("apexcharts-active"),
                        (i.style.display = e.config.tooltip.items.display));
                    }
                  },
                },
                {
                  key: "getValuesToPrint",
                  value: function (t) {
                    var e = t.i,
                      i = t.j,
                      n = this.w,
                      a = this.ctx.series.filteredSeriesX(),
                      s = "",
                      r = "",
                      o = null,
                      l = null,
                      c = {
                        series: n.globals.series,
                        seriesIndex: e,
                        dataPointIndex: i,
                        w: n,
                      },
                      h = n.globals.ttZFormatter;
                    null === i
                      ? (l = n.globals.series[e])
                      : n.globals.isXNumeric &&
                        "treemap" !== n.config.chart.type
                      ? ((s = a[e][i]),
                        0 === a[e].length &&
                          (s = a[this.tooltipUtil.getFirstActiveXArray(a)][i]))
                      : (s =
                          void 0 !== n.globals.labels[i]
                            ? n.globals.labels[i]
                            : "");
                    var d = s;
                    return (
                      (s =
                        n.globals.isXNumeric &&
                        "datetime" === n.config.xaxis.type
                          ? new V(this.ctx).xLabelFormat(
                              n.globals.ttKeyFormatter,
                              d,
                              d,
                              {
                                i: void 0,
                                dateFormatter: new X(this.ctx).formatDate,
                                w: this.w,
                              }
                            )
                          : n.globals.isBarHorizontal
                          ? n.globals.yLabelFormatters[0](d, c)
                          : n.globals.xLabelFormatter(d, c)),
                      void 0 !== n.config.tooltip.x.formatter &&
                        (s = n.globals.ttKeyFormatter(d, c)),
                      n.globals.seriesZ.length > 0 &&
                        n.globals.seriesZ[e].length > 0 &&
                        (o = h(n.globals.seriesZ[e][i], n)),
                      (r =
                        "function" == typeof n.config.xaxis.tooltip.formatter
                          ? n.globals.xaxisTooltipFormatter(d, c)
                          : s),
                      {
                        val: Array.isArray(l) ? l.join(" ") : l,
                        xVal: Array.isArray(s) ? s.join(" ") : s,
                        xAxisTTVal: Array.isArray(r) ? r.join(" ") : r,
                        zVal: o,
                      }
                    );
                  },
                },
                {
                  key: "handleCustomTooltip",
                  value: function (t) {
                    var e = t.i,
                      i = t.j,
                      n = t.y1,
                      a = t.y2,
                      s = t.w,
                      r = this.ttCtx.getElTooltip(),
                      o = s.config.tooltip.custom;
                    Array.isArray(o) && o[e] && (o = o[e]),
                      (r.innerHTML = o({
                        ctx: this.ctx,
                        series: s.globals.series,
                        seriesIndex: e,
                        dataPointIndex: i,
                        y1: n,
                        y2: a,
                        w: s,
                      }));
                  },
                },
              ]),
              t
            );
          })(),
          xt = (function () {
            function t(e) {
              s(this, t), (this.ttCtx = e), (this.ctx = e.ctx), (this.w = e.w);
            }
            return (
              o(t, [
                {
                  key: "moveXCrosshairs",
                  value: function (t) {
                    var e =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : null,
                      i = this.ttCtx,
                      n = this.w,
                      a = i.getElXCrosshairs(),
                      s = t - i.xcrosshairsWidth / 2,
                      r = n.globals.labels.slice().length;
                    if (
                      (null !== e && (s = (n.globals.gridWidth / r) * e),
                      null !== a &&
                        (a.setAttribute("x", s),
                        a.setAttribute("x1", s),
                        a.setAttribute("x2", s),
                        a.setAttribute("y2", n.globals.gridHeight),
                        a.classList.add("apexcharts-active")),
                      s < 0 && (s = 0),
                      s > n.globals.gridWidth && (s = n.globals.gridWidth),
                      i.blxaxisTooltip)
                    ) {
                      var o = s;
                      ("tickWidth" !== n.config.xaxis.crosshairs.width &&
                        "barWidth" !== n.config.xaxis.crosshairs.width) ||
                        (o = s + i.xcrosshairsWidth / 2),
                        this.moveXAxisTooltip(o);
                    }
                  },
                },
                {
                  key: "moveYCrosshairs",
                  value: function (t) {
                    var e = this.ttCtx;
                    null !== e.ycrosshairs &&
                      w.setAttrs(e.ycrosshairs, { y1: t, y2: t }),
                      null !== e.ycrosshairsHidden &&
                        w.setAttrs(e.ycrosshairsHidden, { y1: t, y2: t });
                  },
                },
                {
                  key: "moveXAxisTooltip",
                  value: function (t) {
                    var e = this.w,
                      i = this.ttCtx;
                    if (null !== i.xaxisTooltip) {
                      i.xaxisTooltip.classList.add("apexcharts-active");
                      var n,
                        a =
                          i.xaxisOffY +
                          e.config.xaxis.tooltip.offsetY +
                          e.globals.translateY +
                          1 +
                          e.config.xaxis.offsetY;
                      if (
                        ((t -=
                          i.xaxisTooltip.getBoundingClientRect().width / 2),
                        !isNaN(t))
                      )
                        (t += e.globals.translateX),
                          (n = new w(this.ctx).getTextRects(
                            i.xaxisTooltipText.innerHTML
                          )),
                          (i.xaxisTooltipText.style.minWidth = n.width + "px"),
                          (i.xaxisTooltip.style.left = t + "px"),
                          (i.xaxisTooltip.style.top = a + "px");
                    }
                  },
                },
                {
                  key: "moveYAxisTooltip",
                  value: function (t) {
                    var e = this.w,
                      i = this.ttCtx;
                    null === i.yaxisTTEls &&
                      (i.yaxisTTEls = e.globals.dom.baseEl.querySelectorAll(
                        ".apexcharts-yaxistooltip"
                      ));
                    var n = parseInt(
                        i.ycrosshairsHidden.getAttribute("y1"),
                        10
                      ),
                      a = e.globals.translateY + n,
                      s = i.yaxisTTEls[t].getBoundingClientRect().height,
                      r = e.globals.translateYAxisX[t] - 2;
                    e.config.yaxis[t].opposite && (r -= 26),
                      (a -= s / 2),
                      -1 === e.globals.ignoreYAxisIndexes.indexOf(t)
                        ? (i.yaxisTTEls[t].classList.add("apexcharts-active"),
                          (i.yaxisTTEls[t].style.top = a + "px"),
                          (i.yaxisTTEls[t].style.left =
                            r + e.config.yaxis[t].tooltip.offsetX + "px"))
                        : i.yaxisTTEls[t].classList.remove("apexcharts-active");
                  },
                },
                {
                  key: "moveTooltip",
                  value: function (t, e) {
                    var i =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : null,
                      n = this.w,
                      a = this.ttCtx,
                      s = a.getElTooltip(),
                      r = a.tooltipRect,
                      o = null !== i ? parseFloat(i) : 1,
                      l = parseFloat(t) + o + 5,
                      c = parseFloat(e) + o / 2;
                    if (
                      (l > n.globals.gridWidth / 2 &&
                        (l = l - r.ttWidth - o - 15),
                      l > n.globals.gridWidth - r.ttWidth - 10 &&
                        (l = n.globals.gridWidth - r.ttWidth),
                      l < -20 && (l = -20),
                      n.config.tooltip.followCursor)
                    ) {
                      var h = a.getElGrid(),
                        d = h.getBoundingClientRect();
                      c =
                        a.e.clientY +
                        n.globals.translateY -
                        d.top -
                        r.ttHeight / 2;
                    } else
                      n.globals.isBarHorizontal
                        ? (c -= r.ttHeight)
                        : (r.ttHeight / 2 + c > n.globals.gridHeight &&
                            (c =
                              n.globals.gridHeight -
                              r.ttHeight +
                              n.globals.translateY),
                          c < 0 && (c = 0));
                    isNaN(l) ||
                      ((l += n.globals.translateX),
                      (s.style.left = l + "px"),
                      (s.style.top = c + "px"));
                  },
                },
                {
                  key: "moveMarkers",
                  value: function (t, e) {
                    var i = this.w,
                      n = this.ttCtx;
                    if (i.globals.markers.size[t] > 0)
                      for (
                        var a = i.globals.dom.baseEl.querySelectorAll(
                            " .apexcharts-series[data\\:realIndex='".concat(
                              t,
                              "'] .apexcharts-marker"
                            )
                          ),
                          s = 0;
                        s < a.length;
                        s++
                      )
                        parseInt(a[s].getAttribute("rel"), 10) === e &&
                          (n.marker.resetPointsSize(),
                          n.marker.enlargeCurrentPoint(e, a[s]));
                    else
                      n.marker.resetPointsSize(),
                        this.moveDynamicPointOnHover(e, t);
                  },
                },
                {
                  key: "moveDynamicPointOnHover",
                  value: function (t, e) {
                    var i,
                      n,
                      a = this.w,
                      s = this.ttCtx,
                      r = a.globals.pointsArray,
                      o = s.tooltipUtil.getHoverMarkerSize(e),
                      l = a.config.series[e].type;
                    if (
                      !l ||
                      ("column" !== l && "candlestick" !== l && "boxPlot" !== l)
                    ) {
                      (i = r[e][t][0]), (n = r[e][t][1] ? r[e][t][1] : 0);
                      var c = a.globals.dom.baseEl.querySelector(
                        ".apexcharts-series[data\\:realIndex='".concat(
                          e,
                          "'] .apexcharts-series-markers circle"
                        )
                      );
                      c &&
                        n < a.globals.gridHeight &&
                        n > 0 &&
                        (c.setAttribute("r", o),
                        c.setAttribute("cx", i),
                        c.setAttribute("cy", n)),
                        this.moveXCrosshairs(i),
                        s.fixedTooltip || this.moveTooltip(i, n, o);
                    }
                  },
                },
                {
                  key: "moveDynamicPointsOnHover",
                  value: function (t) {
                    var e,
                      i = this.ttCtx,
                      n = i.w,
                      a = 0,
                      s = 0,
                      r = n.globals.pointsArray;
                    e = new z(this.ctx).getActiveConfigSeriesIndex(!0);
                    var o = i.tooltipUtil.getHoverMarkerSize(e);
                    r[e] && ((a = r[e][t][0]), (s = r[e][t][1]));
                    var l = i.tooltipUtil.getAllMarkers();
                    if (null !== l)
                      for (var c = 0; c < n.globals.series.length; c++) {
                        var h = r[c];
                        if (
                          (n.globals.comboCharts &&
                            void 0 === h &&
                            l.splice(c, 0, null),
                          h && h.length)
                        ) {
                          var d = r[c][t][1];
                          l[c].setAttribute("cx", a),
                            null !== d &&
                            !isNaN(d) &&
                            d < n.globals.gridHeight &&
                            d > 0
                              ? (l[c] && l[c].setAttribute("r", o),
                                l[c] && l[c].setAttribute("cy", d))
                              : l[c] && l[c].setAttribute("r", 0);
                        }
                      }
                    if ((this.moveXCrosshairs(a), !i.fixedTooltip)) {
                      var u = s || n.globals.gridHeight;
                      this.moveTooltip(a, u, o);
                    }
                  },
                },
                {
                  key: "moveStickyTooltipOverBars",
                  value: function (t) {
                    var e = this.w,
                      i = this.ttCtx,
                      n = e.globals.columnSeries
                        ? e.globals.columnSeries.length
                        : e.globals.series.length,
                      a =
                        n >= 2 && n % 2 == 0
                          ? Math.floor(n / 2)
                          : Math.floor(n / 2) + 1;
                    e.globals.isBarHorizontal &&
                      (a =
                        new z(this.ctx).getActiveConfigSeriesIndex(!1, "desc") +
                        1);
                    var s = e.globals.dom.baseEl.querySelector(
                        ".apexcharts-bar-series .apexcharts-series[rel='"
                          .concat(a, "'] path[j='")
                          .concat(
                            t,
                            "'], .apexcharts-candlestick-series .apexcharts-series[rel='"
                          )
                          .concat(a, "'] path[j='")
                          .concat(
                            t,
                            "'], .apexcharts-boxPlot-series .apexcharts-series[rel='"
                          )
                          .concat(a, "'] path[j='")
                          .concat(
                            t,
                            "'], .apexcharts-rangebar-series .apexcharts-series[rel='"
                          )
                          .concat(a, "'] path[j='")
                          .concat(t, "']")
                      ),
                      r = s ? parseFloat(s.getAttribute("cx")) : 0,
                      o = s ? parseFloat(s.getAttribute("cy")) : 0,
                      l = s ? parseFloat(s.getAttribute("barWidth")) : 0,
                      c = s ? parseFloat(s.getAttribute("barHeight")) : 0,
                      h = i.getElGrid().getBoundingClientRect();
                    if (
                      (e.globals.isXNumeric
                        ? ((r -= n % 2 != 0 ? l / 2 : 0),
                          s &&
                            (s.classList.contains(
                              "apexcharts-candlestick-area"
                            ) ||
                              s.classList.contains(
                                "apexcharts-boxPlot-area"
                              )) &&
                            e.globals.comboCharts &&
                            (r -= l / 2))
                        : e.globals.isBarHorizontal ||
                          ((r =
                            i.xAxisTicksPositions[t - 1] +
                            i.dataPointsDividedWidth / 2),
                          isNaN(r) &&
                            (r =
                              i.xAxisTicksPositions[t] -
                              i.dataPointsDividedWidth / 2)),
                      e.globals.isBarHorizontal
                        ? (o += c / 3)
                        : (o =
                            i.e.clientY - h.top - i.tooltipRect.ttHeight / 2),
                      e.globals.isBarHorizontal || this.moveXCrosshairs(r),
                      !i.fixedTooltip)
                    ) {
                      var d = o || e.globals.gridHeight;
                      this.moveTooltip(r, d);
                    }
                  },
                },
              ]),
              t
            );
          })(),
          vt = (function () {
            function t(e) {
              s(this, t),
                (this.w = e.w),
                (this.ttCtx = e),
                (this.ctx = e.ctx),
                (this.tooltipPosition = new xt(e));
            }
            return (
              o(t, [
                {
                  key: "drawDynamicPoints",
                  value: function () {
                    var t = this.w,
                      e = new w(this.ctx),
                      i = new I(this.ctx),
                      n =
                        t.globals.dom.baseEl.querySelectorAll(
                          ".apexcharts-series"
                        );
                    (n = m(n)),
                      t.config.chart.stacked &&
                        n.sort(function (t, e) {
                          return (
                            parseFloat(t.getAttribute("data:realIndex")) -
                            parseFloat(e.getAttribute("data:realIndex"))
                          );
                        });
                    for (var a = 0; a < n.length; a++) {
                      var s = n[a].querySelector(
                        ".apexcharts-series-markers-wrap"
                      );
                      if (null !== s) {
                        var r = void 0,
                          o = "apexcharts-marker w".concat(
                            (Math.random() + 1).toString(36).substring(4)
                          );
                        ("line" !== t.config.chart.type &&
                          "area" !== t.config.chart.type) ||
                          t.globals.comboCharts ||
                          t.config.tooltip.intersect ||
                          (o += " no-pointer-events");
                        var l = i.getMarkerConfig({
                          cssClass: o,
                          seriesIndex: a,
                        });
                        (r = e.drawMarker(0, 0, l)).node.setAttribute(
                          "default-marker-size",
                          0
                        );
                        var c = document.createElementNS(t.globals.SVGNS, "g");
                        c.classList.add("apexcharts-series-markers"),
                          c.appendChild(r.node),
                          s.appendChild(c);
                      }
                    }
                  },
                },
                {
                  key: "enlargeCurrentPoint",
                  value: function (t, e) {
                    var i =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : null,
                      n =
                        arguments.length > 3 && void 0 !== arguments[3]
                          ? arguments[3]
                          : null,
                      a = this.w;
                    "bubble" !== a.config.chart.type && this.newPointSize(t, e);
                    var s = e.getAttribute("cx"),
                      r = e.getAttribute("cy");
                    if (
                      (null !== i && null !== n && ((s = i), (r = n)),
                      this.tooltipPosition.moveXCrosshairs(s),
                      !this.fixedTooltip)
                    ) {
                      if ("radar" === a.config.chart.type) {
                        var o = this.ttCtx.getElGrid(),
                          l = o.getBoundingClientRect();
                        s = this.ttCtx.e.clientX - l.left;
                      }
                      this.tooltipPosition.moveTooltip(
                        s,
                        r,
                        a.config.markers.hover.size
                      );
                    }
                  },
                },
                {
                  key: "enlargePoints",
                  value: function (t) {
                    for (
                      var e = this.w,
                        i = this,
                        n = this.ttCtx,
                        a = t,
                        s = e.globals.dom.baseEl.querySelectorAll(
                          ".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"
                        ),
                        r = e.config.markers.hover.size,
                        o = 0;
                      o < s.length;
                      o++
                    ) {
                      var l = s[o].getAttribute("rel"),
                        c = s[o].getAttribute("index");
                      if (
                        (void 0 === r &&
                          (r =
                            e.globals.markers.size[c] +
                            e.config.markers.hover.sizeOffset),
                        a === parseInt(l, 10))
                      ) {
                        i.newPointSize(a, s[o]);
                        var h = s[o].getAttribute("cx"),
                          d = s[o].getAttribute("cy");
                        i.tooltipPosition.moveXCrosshairs(h),
                          n.fixedTooltip ||
                            i.tooltipPosition.moveTooltip(h, d, r);
                      } else i.oldPointSize(s[o]);
                    }
                  },
                },
                {
                  key: "newPointSize",
                  value: function (t, e) {
                    var i = this.w,
                      n = i.config.markers.hover.size,
                      a =
                        0 === t
                          ? e.parentNode.firstChild
                          : e.parentNode.lastChild;
                    if ("0" !== a.getAttribute("default-marker-size")) {
                      var s = parseInt(a.getAttribute("index"), 10);
                      void 0 === n &&
                        (n =
                          i.globals.markers.size[s] +
                          i.config.markers.hover.sizeOffset),
                        n < 0 && (n = 0),
                        a.setAttribute("r", n);
                    }
                  },
                },
                {
                  key: "oldPointSize",
                  value: function (t) {
                    var e = parseFloat(t.getAttribute("default-marker-size"));
                    t.setAttribute("r", e);
                  },
                },
                {
                  key: "resetPointsSize",
                  value: function () {
                    for (
                      var t = this.w.globals.dom.baseEl.querySelectorAll(
                          ".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"
                        ),
                        e = 0;
                      e < t.length;
                      e++
                    ) {
                      var i = parseFloat(
                        t[e].getAttribute("default-marker-size")
                      );
                      v.isNumber(i) && i >= 0
                        ? t[e].setAttribute("r", i)
                        : t[e].setAttribute("r", 0);
                    }
                  },
                },
              ]),
              t
            );
          })(),
          bt = (function () {
            function t(e) {
              s(this, t), (this.w = e.w), (this.ttCtx = e);
            }
            return (
              o(t, [
                {
                  key: "getAttr",
                  value: function (t, e) {
                    return parseFloat(t.target.getAttribute(e));
                  },
                },
                {
                  key: "handleHeatTreeTooltip",
                  value: function (t) {
                    var e = t.e,
                      i = t.opt,
                      n = t.x,
                      a = t.y,
                      s = t.type,
                      r = this.ttCtx,
                      o = this.w;
                    if (
                      e.target.classList.contains(
                        "apexcharts-".concat(s, "-rect")
                      )
                    ) {
                      var l = this.getAttr(e, "i"),
                        c = this.getAttr(e, "j"),
                        h = this.getAttr(e, "cx"),
                        d = this.getAttr(e, "cy"),
                        u = this.getAttr(e, "width"),
                        f = this.getAttr(e, "height");
                      if (
                        (r.tooltipLabels.drawSeriesTexts({
                          ttItems: i.ttItems,
                          i: l,
                          j: c,
                          shared: !1,
                          e,
                        }),
                        (o.globals.capturedSeriesIndex = l),
                        (o.globals.capturedDataPointIndex = c),
                        (n = h + r.tooltipRect.ttWidth / 2 + u),
                        (a = d + r.tooltipRect.ttHeight / 2 - f / 2),
                        r.tooltipPosition.moveXCrosshairs(h + u / 2),
                        n > o.globals.gridWidth / 2 &&
                          (n = h - r.tooltipRect.ttWidth / 2 + u),
                        r.w.config.tooltip.followCursor)
                      ) {
                        var p = o.globals.dom.elWrap.getBoundingClientRect();
                        (n =
                          o.globals.clientX -
                          p.left -
                          r.tooltipRect.ttWidth / 2),
                          (a =
                            o.globals.clientY -
                            p.top -
                            r.tooltipRect.ttHeight -
                            5);
                      }
                    }
                    return { x: n, y: a };
                  },
                },
                {
                  key: "handleMarkerTooltip",
                  value: function (t) {
                    var e,
                      i,
                      n = t.e,
                      a = t.opt,
                      s = t.x,
                      r = t.y,
                      o = this.w,
                      l = this.ttCtx;
                    if (n.target.classList.contains("apexcharts-marker")) {
                      var c = parseInt(a.paths.getAttribute("cx"), 10),
                        h = parseInt(a.paths.getAttribute("cy"), 10),
                        d = parseFloat(a.paths.getAttribute("val"));
                      if (
                        ((i = parseInt(a.paths.getAttribute("rel"), 10)),
                        (e =
                          parseInt(
                            a.paths.parentNode.parentNode.parentNode.getAttribute(
                              "rel"
                            ),
                            10
                          ) - 1),
                        l.intersect)
                      ) {
                        var u = v.findAncestor(a.paths, "apexcharts-series");
                        u &&
                          (e = parseInt(u.getAttribute("data:realIndex"), 10));
                      }
                      if (
                        (l.tooltipLabels.drawSeriesTexts({
                          ttItems: a.ttItems,
                          i: e,
                          j: i,
                          shared: !l.showOnIntersect && o.config.tooltip.shared,
                          e: n,
                        }),
                        "mouseup" === n.type && l.markerClick(n, e, i),
                        (o.globals.capturedSeriesIndex = e),
                        (o.globals.capturedDataPointIndex = i),
                        (s = c),
                        (r =
                          h +
                          o.globals.translateY -
                          1.4 * l.tooltipRect.ttHeight),
                        l.w.config.tooltip.followCursor)
                      ) {
                        var f = l.getElGrid().getBoundingClientRect();
                        r = l.e.clientY + o.globals.translateY - f.top;
                      }
                      d < 0 && (r = h),
                        l.marker.enlargeCurrentPoint(i, a.paths, s, r);
                    }
                    return { x: s, y: r };
                  },
                },
                {
                  key: "handleBarTooltip",
                  value: function (t) {
                    var e,
                      i,
                      n = t.e,
                      a = t.opt,
                      s = this.w,
                      r = this.ttCtx,
                      o = r.getElTooltip(),
                      l = 0,
                      c = 0,
                      h = 0,
                      d = this.getBarTooltipXY({ e: n, opt: a });
                    e = d.i;
                    var u = d.barHeight,
                      f = d.j;
                    (s.globals.capturedSeriesIndex = e),
                      (s.globals.capturedDataPointIndex = f),
                      (s.globals.isBarHorizontal && r.tooltipUtil.hasBars()) ||
                      !s.config.tooltip.shared
                        ? ((c = d.x),
                          (h = d.y),
                          (i = Array.isArray(s.config.stroke.width)
                            ? s.config.stroke.width[e]
                            : s.config.stroke.width),
                          (l = c))
                        : s.globals.comboCharts ||
                          s.config.tooltip.shared ||
                          (l /= 2),
                      isNaN(h)
                        ? (h = s.globals.svgHeight - r.tooltipRect.ttHeight)
                        : h < 0 && (h = 0);
                    var p = parseInt(
                        a.paths.parentNode.getAttribute("data:realIndex"),
                        10
                      ),
                      g = s.globals.isMultipleYAxis
                        ? s.config.yaxis[p] && s.config.yaxis[p].reversed
                        : s.config.yaxis[0].reversed;
                    if (
                      (c + r.tooltipRect.ttWidth > s.globals.gridWidth && !g
                        ? (c -= r.tooltipRect.ttWidth)
                        : c < 0 && (c = 0),
                      r.w.config.tooltip.followCursor)
                    ) {
                      var m = r.getElGrid().getBoundingClientRect();
                      h = r.e.clientY - m.top;
                    }
                    null === r.tooltip &&
                      (r.tooltip = s.globals.dom.baseEl.querySelector(
                        ".apexcharts-tooltip"
                      )),
                      s.config.tooltip.shared ||
                        (s.globals.comboBarCount > 0
                          ? r.tooltipPosition.moveXCrosshairs(l + i / 2)
                          : r.tooltipPosition.moveXCrosshairs(l)),
                      !r.fixedTooltip &&
                        (!s.config.tooltip.shared ||
                          (s.globals.isBarHorizontal &&
                            r.tooltipUtil.hasBars())) &&
                        (g && (c -= r.tooltipRect.ttWidth) < 0 && (c = 0),
                        (o.style.left = c + s.globals.translateX + "px"),
                        !g ||
                          (s.globals.isBarHorizontal &&
                            r.tooltipUtil.hasBars()) ||
                          (h =
                            h + u - 2 * (s.globals.series[e][f] < 0 ? u : 0)),
                        r.tooltipRect.ttHeight + h > s.globals.gridHeight
                          ? ((h =
                              s.globals.gridHeight -
                              r.tooltipRect.ttHeight +
                              s.globals.translateY),
                            (o.style.top = h + "px"))
                          : (o.style.top =
                              h +
                              s.globals.translateY -
                              r.tooltipRect.ttHeight / 2 +
                              "px"));
                  },
                },
                {
                  key: "getBarTooltipXY",
                  value: function (t) {
                    var e = t.e,
                      i = t.opt,
                      n = this.w,
                      a = null,
                      s = this.ttCtx,
                      r = 0,
                      o = 0,
                      l = 0,
                      c = 0,
                      h = 0,
                      d = e.target.classList;
                    if (
                      d.contains("apexcharts-bar-area") ||
                      d.contains("apexcharts-candlestick-area") ||
                      d.contains("apexcharts-boxPlot-area") ||
                      d.contains("apexcharts-rangebar-area")
                    ) {
                      var u = e.target,
                        f = u.getBoundingClientRect(),
                        p = i.elGrid.getBoundingClientRect(),
                        g = f.height;
                      h = f.height;
                      var m = f.width,
                        x = parseInt(u.getAttribute("cx"), 10),
                        v = parseInt(u.getAttribute("cy"), 10);
                      c = parseFloat(u.getAttribute("barWidth"));
                      var b =
                        "touchmove" === e.type
                          ? e.touches[0].clientX
                          : e.clientX;
                      (a = parseInt(u.getAttribute("j"), 10)),
                        (r =
                          parseInt(u.parentNode.getAttribute("rel"), 10) - 1);
                      var y = u.getAttribute("data-range-y1"),
                        w = u.getAttribute("data-range-y2");
                      n.globals.comboCharts &&
                        (r = parseInt(
                          u.parentNode.getAttribute("data:realIndex"),
                          10
                        )),
                        s.tooltipLabels.drawSeriesTexts({
                          ttItems: i.ttItems,
                          i: r,
                          j: a,
                          y1: y ? parseInt(y, 10) : null,
                          y2: w ? parseInt(w, 10) : null,
                          shared: !s.showOnIntersect && n.config.tooltip.shared,
                          e,
                        }),
                        n.config.tooltip.followCursor
                          ? n.globals.isBarHorizontal
                            ? ((o = b - p.left + 15),
                              (l =
                                v -
                                s.dataPointsDividedHeight +
                                g / 2 -
                                s.tooltipRect.ttHeight / 2))
                            : ((o = n.globals.isXNumeric
                                ? x - m / 2
                                : x - s.dataPointsDividedWidth + m / 2),
                              (l =
                                e.clientY -
                                p.top -
                                s.tooltipRect.ttHeight / 2 -
                                15))
                          : n.globals.isBarHorizontal
                          ? ((o = x) < s.xyRatios.baseLineInvertedY &&
                              (o = x - s.tooltipRect.ttWidth),
                            (l =
                              v -
                              s.dataPointsDividedHeight +
                              g / 2 -
                              s.tooltipRect.ttHeight / 2))
                          : ((o = n.globals.isXNumeric
                              ? x - m / 2
                              : x - s.dataPointsDividedWidth + m / 2),
                            (l = v));
                    }
                    return {
                      x: o,
                      y: l,
                      barHeight: h,
                      barWidth: c,
                      i: r,
                      j: a,
                    };
                  },
                },
              ]),
              t
            );
          })(),
          yt = (function () {
            function t(e) {
              s(this, t), (this.w = e.w), (this.ttCtx = e);
            }
            return (
              o(t, [
                {
                  key: "drawXaxisTooltip",
                  value: function () {
                    var t = this.w,
                      e = this.ttCtx,
                      i = "bottom" === t.config.xaxis.position;
                    e.xaxisOffY = i
                      ? t.globals.gridHeight + 1
                      : -t.globals.xAxisHeight -
                        t.config.xaxis.axisTicks.height +
                        3;
                    var n = i
                        ? "apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom"
                        : "apexcharts-xaxistooltip apexcharts-xaxistooltip-top",
                      a = t.globals.dom.elWrap;
                    e.blxaxisTooltip &&
                      null ===
                        t.globals.dom.baseEl.querySelector(
                          ".apexcharts-xaxistooltip"
                        ) &&
                      ((e.xaxisTooltip = document.createElement("div")),
                      e.xaxisTooltip.setAttribute(
                        "class",
                        n + " apexcharts-theme-" + t.config.tooltip.theme
                      ),
                      a.appendChild(e.xaxisTooltip),
                      (e.xaxisTooltipText = document.createElement("div")),
                      e.xaxisTooltipText.classList.add(
                        "apexcharts-xaxistooltip-text"
                      ),
                      (e.xaxisTooltipText.style.fontFamily =
                        t.config.xaxis.tooltip.style.fontFamily ||
                        t.config.chart.fontFamily),
                      (e.xaxisTooltipText.style.fontSize =
                        t.config.xaxis.tooltip.style.fontSize),
                      e.xaxisTooltip.appendChild(e.xaxisTooltipText));
                  },
                },
                {
                  key: "drawYaxisTooltip",
                  value: function () {
                    for (
                      var t = this.w,
                        e = this.ttCtx,
                        i = function (i) {
                          var n =
                            t.config.yaxis[i].opposite ||
                            t.config.yaxis[i].crosshairs.opposite;
                          e.yaxisOffX = n ? t.globals.gridWidth + 1 : 1;
                          var a =
                            "apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(
                              i,
                              n
                                ? " apexcharts-yaxistooltip-right"
                                : " apexcharts-yaxistooltip-left"
                            );
                          t.globals.yAxisSameScaleIndices.map(function (e, n) {
                            e.map(function (e, n) {
                              n === i &&
                                (a += t.config.yaxis[n].show
                                  ? " "
                                  : " apexcharts-yaxistooltip-hidden");
                            });
                          });
                          var s = t.globals.dom.elWrap;
                          null ===
                            t.globals.dom.baseEl.querySelector(
                              ".apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(
                                i
                              )
                            ) &&
                            ((e.yaxisTooltip = document.createElement("div")),
                            e.yaxisTooltip.setAttribute(
                              "class",
                              a + " apexcharts-theme-" + t.config.tooltip.theme
                            ),
                            s.appendChild(e.yaxisTooltip),
                            0 === i && (e.yaxisTooltipText = []),
                            (e.yaxisTooltipText[i] =
                              document.createElement("div")),
                            e.yaxisTooltipText[i].classList.add(
                              "apexcharts-yaxistooltip-text"
                            ),
                            e.yaxisTooltip.appendChild(e.yaxisTooltipText[i]));
                        },
                        n = 0;
                      n < t.config.yaxis.length;
                      n++
                    )
                      i(n);
                  },
                },
                {
                  key: "setXCrosshairWidth",
                  value: function () {
                    var t = this.w,
                      e = this.ttCtx,
                      i = e.getElXCrosshairs();
                    if (
                      ((e.xcrosshairsWidth = parseInt(
                        t.config.xaxis.crosshairs.width,
                        10
                      )),
                      t.globals.comboCharts)
                    ) {
                      var n = t.globals.dom.baseEl.querySelector(
                        ".apexcharts-bar-area"
                      );
                      if (
                        null !== n &&
                        "barWidth" === t.config.xaxis.crosshairs.width
                      ) {
                        var a = parseFloat(n.getAttribute("barWidth"));
                        e.xcrosshairsWidth = a;
                      } else if (
                        "tickWidth" === t.config.xaxis.crosshairs.width
                      ) {
                        var s = t.globals.labels.length;
                        e.xcrosshairsWidth = t.globals.gridWidth / s;
                      }
                    } else if (
                      "tickWidth" === t.config.xaxis.crosshairs.width
                    ) {
                      var r = t.globals.labels.length;
                      e.xcrosshairsWidth = t.globals.gridWidth / r;
                    } else if ("barWidth" === t.config.xaxis.crosshairs.width) {
                      var o = t.globals.dom.baseEl.querySelector(
                        ".apexcharts-bar-area"
                      );
                      if (null !== o) {
                        var l = parseFloat(o.getAttribute("barWidth"));
                        e.xcrosshairsWidth = l;
                      } else e.xcrosshairsWidth = 1;
                    }
                    t.globals.isBarHorizontal && (e.xcrosshairsWidth = 0),
                      null !== i &&
                        e.xcrosshairsWidth > 0 &&
                        i.setAttribute("width", e.xcrosshairsWidth);
                  },
                },
                {
                  key: "handleYCrosshair",
                  value: function () {
                    var t = this.w,
                      e = this.ttCtx;
                    (e.ycrosshairs = t.globals.dom.baseEl.querySelector(
                      ".apexcharts-ycrosshairs"
                    )),
                      (e.ycrosshairsHidden = t.globals.dom.baseEl.querySelector(
                        ".apexcharts-ycrosshairs-hidden"
                      ));
                  },
                },
                {
                  key: "drawYaxisTooltipText",
                  value: function (t, e, i) {
                    var n = this.ttCtx,
                      a = this.w,
                      s = a.globals.yLabelFormatters[t];
                    if (n.yaxisTooltips[t]) {
                      var r = n.getElGrid().getBoundingClientRect(),
                        o = (e - r.top) * i.yRatio[t],
                        l = a.globals.maxYArr[t] - a.globals.minYArr[t],
                        c = a.globals.minYArr[t] + (l - o);
                      n.tooltipPosition.moveYCrosshairs(e - r.top),
                        (n.yaxisTooltipText[t].innerHTML = s(c)),
                        n.tooltipPosition.moveYAxisTooltip(t);
                    }
                  },
                },
              ]),
              t
            );
          })(),
          wt = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.w = e.w);
              var i = this.w;
              (this.tConfig = i.config.tooltip),
                (this.tooltipUtil = new gt(this)),
                (this.tooltipLabels = new mt(this)),
                (this.tooltipPosition = new xt(this)),
                (this.marker = new vt(this)),
                (this.intersect = new bt(this)),
                (this.axesTooltip = new yt(this)),
                (this.showOnIntersect = this.tConfig.intersect),
                (this.showTooltipTitle = this.tConfig.x.show),
                (this.fixedTooltip = this.tConfig.fixed.enabled),
                (this.xaxisTooltip = null),
                (this.yaxisTTEls = null),
                (this.isBarShared =
                  !i.globals.isBarHorizontal && this.tConfig.shared);
            }
            return (
              o(t, [
                {
                  key: "getElTooltip",
                  value: function (t) {
                    return (
                      t || (t = this),
                      t.w.globals.dom.baseEl.querySelector(
                        ".apexcharts-tooltip"
                      )
                    );
                  },
                },
                {
                  key: "getElXCrosshairs",
                  value: function () {
                    return this.w.globals.dom.baseEl.querySelector(
                      ".apexcharts-xcrosshairs"
                    );
                  },
                },
                {
                  key: "getElGrid",
                  value: function () {
                    return this.w.globals.dom.baseEl.querySelector(
                      ".apexcharts-grid"
                    );
                  },
                },
                {
                  key: "drawTooltip",
                  value: function (t) {
                    var e = this.w;
                    (this.xyRatios = t),
                      (this.blxaxisTooltip =
                        e.config.xaxis.tooltip.enabled && e.globals.axisCharts),
                      (this.yaxisTooltips = e.config.yaxis.map(function (t, i) {
                        return !!(
                          t.show &&
                          t.tooltip.enabled &&
                          e.globals.axisCharts
                        );
                      })),
                      (this.allTooltipSeriesGroups = []),
                      e.globals.axisCharts || (this.showTooltipTitle = !1);
                    var i = document.createElement("div");
                    if (
                      (i.classList.add("apexcharts-tooltip"),
                      i.classList.add(
                        "apexcharts-theme-".concat(this.tConfig.theme)
                      ),
                      e.globals.dom.elWrap.appendChild(i),
                      e.globals.axisCharts)
                    ) {
                      this.axesTooltip.drawXaxisTooltip(),
                        this.axesTooltip.drawYaxisTooltip(),
                        this.axesTooltip.setXCrosshairWidth(),
                        this.axesTooltip.handleYCrosshair();
                      var n = new U(this.ctx);
                      this.xAxisTicksPositions = n.getXAxisTicksPositions();
                    }
                    if (
                      ((!e.globals.comboCharts &&
                        !this.tConfig.intersect &&
                        "rangeBar" !== e.config.chart.type) ||
                        this.tConfig.shared ||
                        (this.showOnIntersect = !0),
                      (0 !== e.config.markers.size &&
                        0 !== e.globals.markers.largestSize) ||
                        this.marker.drawDynamicPoints(this),
                      e.globals.collapsedSeries.length !==
                        e.globals.series.length)
                    ) {
                      (this.dataPointsDividedHeight =
                        e.globals.gridHeight / e.globals.dataPoints),
                        (this.dataPointsDividedWidth =
                          e.globals.gridWidth / e.globals.dataPoints),
                        this.showTooltipTitle &&
                          ((this.tooltipTitle = document.createElement("div")),
                          this.tooltipTitle.classList.add(
                            "apexcharts-tooltip-title"
                          ),
                          (this.tooltipTitle.style.fontFamily =
                            this.tConfig.style.fontFamily ||
                            e.config.chart.fontFamily),
                          (this.tooltipTitle.style.fontSize =
                            this.tConfig.style.fontSize),
                          i.appendChild(this.tooltipTitle));
                      var a = e.globals.series.length;
                      (e.globals.xyCharts || e.globals.comboCharts) &&
                        this.tConfig.shared &&
                        (a = this.showOnIntersect
                          ? 1
                          : e.globals.series.length),
                        (this.legendLabels =
                          e.globals.dom.baseEl.querySelectorAll(
                            ".apexcharts-legend-text"
                          )),
                        (this.ttItems = this.createTTElements(a)),
                        this.addSVGEvents();
                    }
                  },
                },
                {
                  key: "createTTElements",
                  value: function (t) {
                    for (
                      var e = this,
                        i = this.w,
                        n = [],
                        a = this.getElTooltip(),
                        s = function (s) {
                          var r = document.createElement("div");
                          r.classList.add("apexcharts-tooltip-series-group"),
                            (r.style.order = i.config.tooltip.inverseOrder
                              ? t - s
                              : s + 1),
                            e.tConfig.shared &&
                              e.tConfig.enabledOnSeries &&
                              Array.isArray(e.tConfig.enabledOnSeries) &&
                              e.tConfig.enabledOnSeries.indexOf(s) < 0 &&
                              r.classList.add(
                                "apexcharts-tooltip-series-group-hidden"
                              );
                          var o = document.createElement("span");
                          o.classList.add("apexcharts-tooltip-marker"),
                            (o.style.backgroundColor = i.globals.colors[s]),
                            r.appendChild(o);
                          var l = document.createElement("div");
                          l.classList.add("apexcharts-tooltip-text"),
                            (l.style.fontFamily =
                              e.tConfig.style.fontFamily ||
                              i.config.chart.fontFamily),
                            (l.style.fontSize = e.tConfig.style.fontSize),
                            ["y", "goals", "z"].forEach(function (t) {
                              var e = document.createElement("div");
                              e.classList.add(
                                "apexcharts-tooltip-".concat(t, "-group")
                              );
                              var i = document.createElement("span");
                              i.classList.add(
                                "apexcharts-tooltip-text-".concat(t, "-label")
                              ),
                                e.appendChild(i);
                              var n = document.createElement("span");
                              n.classList.add(
                                "apexcharts-tooltip-text-".concat(t, "-value")
                              ),
                                e.appendChild(n),
                                l.appendChild(e);
                            }),
                            r.appendChild(l),
                            a.appendChild(r),
                            n.push(r);
                        },
                        r = 0;
                      r < t;
                      r++
                    )
                      s(r);
                    return n;
                  },
                },
                {
                  key: "addSVGEvents",
                  value: function () {
                    var t = this.w,
                      e = t.config.chart.type,
                      i = this.getElTooltip(),
                      n = !(
                        "bar" !== e &&
                        "candlestick" !== e &&
                        "boxPlot" !== e &&
                        "rangeBar" !== e
                      ),
                      a =
                        "area" === e ||
                        "line" === e ||
                        "scatter" === e ||
                        "bubble" === e ||
                        "radar" === e,
                      s = t.globals.dom.Paper.node,
                      r = this.getElGrid();
                    r && (this.seriesBound = r.getBoundingClientRect());
                    var o,
                      l = [],
                      c = [],
                      h = {
                        hoverArea: s,
                        elGrid: r,
                        tooltipEl: i,
                        tooltipY: l,
                        tooltipX: c,
                        ttItems: this.ttItems,
                      };
                    if (
                      t.globals.axisCharts &&
                      (a
                        ? (o = t.globals.dom.baseEl.querySelectorAll(
                            ".apexcharts-series[data\\:longestSeries='true'] .apexcharts-marker"
                          ))
                        : n
                        ? (o = t.globals.dom.baseEl.querySelectorAll(
                            ".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-boxPlot-area, .apexcharts-series .apexcharts-rangebar-area"
                          ))
                        : ("heatmap" !== e && "treemap" !== e) ||
                          (o = t.globals.dom.baseEl.querySelectorAll(
                            ".apexcharts-series .apexcharts-heatmap, .apexcharts-series .apexcharts-treemap"
                          )),
                      o && o.length)
                    )
                      for (var d = 0; d < o.length; d++)
                        l.push(o[d].getAttribute("cy")),
                          c.push(o[d].getAttribute("cx"));
                    if (
                      (t.globals.xyCharts && !this.showOnIntersect) ||
                      (t.globals.comboCharts && !this.showOnIntersect) ||
                      (n && this.tooltipUtil.hasBars() && this.tConfig.shared)
                    )
                      this.addPathsEventListeners([s], h);
                    else if (
                      (n && !t.globals.comboCharts) ||
                      (a && this.showOnIntersect)
                    )
                      this.addDatapointEventsListeners(h);
                    else if (
                      !t.globals.axisCharts ||
                      "heatmap" === e ||
                      "treemap" === e
                    ) {
                      var u =
                        t.globals.dom.baseEl.querySelectorAll(
                          ".apexcharts-series"
                        );
                      this.addPathsEventListeners(u, h);
                    }
                    if (this.showOnIntersect) {
                      var f = t.globals.dom.baseEl.querySelectorAll(
                        ".apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker"
                      );
                      f.length > 0 && this.addPathsEventListeners(f, h),
                        this.tooltipUtil.hasBars() &&
                          !this.tConfig.shared &&
                          this.addDatapointEventsListeners(h);
                    }
                  },
                },
                {
                  key: "drawFixedTooltipRect",
                  value: function () {
                    var t = this.w,
                      e = this.getElTooltip(),
                      i = e.getBoundingClientRect(),
                      n = i.width + 10,
                      a = i.height + 10,
                      s = this.tConfig.fixed.offsetX,
                      r = this.tConfig.fixed.offsetY,
                      o = this.tConfig.fixed.position.toLowerCase();
                    return (
                      o.indexOf("right") > -1 &&
                        (s = s + t.globals.svgWidth - n + 10),
                      o.indexOf("bottom") > -1 &&
                        (r = r + t.globals.svgHeight - a - 10),
                      (e.style.left = s + "px"),
                      (e.style.top = r + "px"),
                      { x: s, y: r, ttWidth: n, ttHeight: a }
                    );
                  },
                },
                {
                  key: "addDatapointEventsListeners",
                  value: function (t) {
                    var e = this.w.globals.dom.baseEl.querySelectorAll(
                      ".apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area"
                    );
                    this.addPathsEventListeners(e, t);
                  },
                },
                {
                  key: "addPathsEventListeners",
                  value: function (t, e) {
                    for (
                      var i = this,
                        n = function (n) {
                          var a = {
                            paths: t[n],
                            tooltipEl: e.tooltipEl,
                            tooltipY: e.tooltipY,
                            tooltipX: e.tooltipX,
                            elGrid: e.elGrid,
                            hoverArea: e.hoverArea,
                            ttItems: e.ttItems,
                          };
                          [
                            "mousemove",
                            "mouseup",
                            "touchmove",
                            "mouseout",
                            "touchend",
                          ].map(function (e) {
                            return t[n].addEventListener(
                              e,
                              i.seriesHover.bind(i, a),
                              { capture: !1, passive: !0 }
                            );
                          });
                        },
                        a = 0;
                      a < t.length;
                      a++
                    )
                      n(a);
                  },
                },
                {
                  key: "seriesHover",
                  value: function (t, e) {
                    var i = this,
                      n = [],
                      a = this.w;
                    a.config.chart.group && (n = this.ctx.getGroupedCharts()),
                      (a.globals.axisCharts &&
                        ((a.globals.minX === -1 / 0 &&
                          a.globals.maxX === 1 / 0) ||
                          0 === a.globals.dataPoints)) ||
                        (n.length
                          ? n.forEach(function (n) {
                              var a = i.getElTooltip(n),
                                s = {
                                  paths: t.paths,
                                  tooltipEl: a,
                                  tooltipY: t.tooltipY,
                                  tooltipX: t.tooltipX,
                                  elGrid: t.elGrid,
                                  hoverArea: t.hoverArea,
                                  ttItems: n.w.globals.tooltip.ttItems,
                                };
                              n.w.globals.minX === i.w.globals.minX &&
                                n.w.globals.maxX === i.w.globals.maxX &&
                                n.w.globals.tooltip.seriesHoverByContext({
                                  chartCtx: n,
                                  ttCtx: n.w.globals.tooltip,
                                  opt: s,
                                  e,
                                });
                            })
                          : this.seriesHoverByContext({
                              chartCtx: this.ctx,
                              ttCtx: this.w.globals.tooltip,
                              opt: t,
                              e,
                            }));
                  },
                },
                {
                  key: "seriesHoverByContext",
                  value: function (t) {
                    var e = t.chartCtx,
                      i = t.ttCtx,
                      n = t.opt,
                      a = t.e,
                      s = e.w,
                      r = this.getElTooltip();
                    (i.tooltipRect = {
                      x: 0,
                      y: 0,
                      ttWidth: r.getBoundingClientRect().width,
                      ttHeight: r.getBoundingClientRect().height,
                    }),
                      (i.e = a),
                      !i.tooltipUtil.hasBars() ||
                        s.globals.comboCharts ||
                        i.isBarShared ||
                        (this.tConfig.onDatasetHover.highlightDataSeries &&
                          new z(e).toggleSeriesOnHover(a, a.target.parentNode)),
                      i.fixedTooltip && i.drawFixedTooltipRect(),
                      s.globals.axisCharts
                        ? i.axisChartsTooltips({
                            e: a,
                            opt: n,
                            tooltipRect: i.tooltipRect,
                          })
                        : i.nonAxisChartsTooltips({
                            e: a,
                            opt: n,
                            tooltipRect: i.tooltipRect,
                          });
                  },
                },
                {
                  key: "axisChartsTooltips",
                  value: function (t) {
                    var e,
                      i,
                      n = t.e,
                      a = t.opt,
                      s = this.w,
                      r = a.elGrid.getBoundingClientRect(),
                      o =
                        "touchmove" === n.type
                          ? n.touches[0].clientX
                          : n.clientX,
                      l =
                        "touchmove" === n.type
                          ? n.touches[0].clientY
                          : n.clientY;
                    if (
                      ((this.clientY = l),
                      (this.clientX = o),
                      (s.globals.capturedSeriesIndex = -1),
                      (s.globals.capturedDataPointIndex = -1),
                      l < r.top || l > r.top + r.height)
                    )
                      this.handleMouseOut(a);
                    else {
                      if (
                        Array.isArray(this.tConfig.enabledOnSeries) &&
                        !s.config.tooltip.shared
                      ) {
                        var c = parseInt(a.paths.getAttribute("index"), 10);
                        if (this.tConfig.enabledOnSeries.indexOf(c) < 0)
                          return void this.handleMouseOut(a);
                      }
                      var h = this.getElTooltip(),
                        d = this.getElXCrosshairs(),
                        u =
                          s.globals.xyCharts ||
                          ("bar" === s.config.chart.type &&
                            !s.globals.isBarHorizontal &&
                            this.tooltipUtil.hasBars() &&
                            this.tConfig.shared) ||
                          (s.globals.comboCharts && this.tooltipUtil.hasBars());
                      if (
                        "mousemove" === n.type ||
                        "touchmove" === n.type ||
                        "mouseup" === n.type
                      ) {
                        null !== d && d.classList.add("apexcharts-active");
                        var f = this.yaxisTooltips.filter(function (t) {
                          return !0 === t;
                        });
                        if (
                          (null !== this.ycrosshairs &&
                            f.length &&
                            this.ycrosshairs.classList.add("apexcharts-active"),
                          u && !this.showOnIntersect)
                        )
                          this.handleStickyTooltip(n, o, l, a);
                        else if (
                          "heatmap" === s.config.chart.type ||
                          "treemap" === s.config.chart.type
                        ) {
                          var p = this.intersect.handleHeatTreeTooltip({
                            e: n,
                            opt: a,
                            x: e,
                            y: i,
                            type: s.config.chart.type,
                          });
                          (e = p.x),
                            (i = p.y),
                            (h.style.left = e + "px"),
                            (h.style.top = i + "px");
                        } else
                          this.tooltipUtil.hasBars() &&
                            this.intersect.handleBarTooltip({ e: n, opt: a }),
                            this.tooltipUtil.hasMarkers() &&
                              this.intersect.handleMarkerTooltip({
                                e: n,
                                opt: a,
                                x: e,
                                y: i,
                              });
                        if (this.yaxisTooltips.length)
                          for (var g = 0; g < s.config.yaxis.length; g++)
                            this.axesTooltip.drawYaxisTooltipText(
                              g,
                              l,
                              this.xyRatios
                            );
                        a.tooltipEl.classList.add("apexcharts-active");
                      } else
                        ("mouseout" !== n.type && "touchend" !== n.type) ||
                          this.handleMouseOut(a);
                    }
                  },
                },
                {
                  key: "nonAxisChartsTooltips",
                  value: function (t) {
                    var e = t.e,
                      i = t.opt,
                      n = t.tooltipRect,
                      a = this.w,
                      s = i.paths.getAttribute("rel"),
                      r = this.getElTooltip(),
                      o = a.globals.dom.elWrap.getBoundingClientRect();
                    if ("mousemove" === e.type || "touchmove" === e.type) {
                      r.classList.add("apexcharts-active"),
                        this.tooltipLabels.drawSeriesTexts({
                          ttItems: i.ttItems,
                          i: parseInt(s, 10) - 1,
                          shared: !1,
                        });
                      var l = a.globals.clientX - o.left - n.ttWidth / 2,
                        c = a.globals.clientY - o.top - n.ttHeight - 10;
                      if (
                        ((r.style.left = l + "px"),
                        (r.style.top = c + "px"),
                        a.config.legend.tooltipHoverFormatter)
                      ) {
                        var h = s - 1,
                          d = (0, a.config.legend.tooltipHoverFormatter)(
                            this.legendLabels[h].getAttribute(
                              "data:default-text"
                            ),
                            { seriesIndex: h, dataPointIndex: h, w: a }
                          );
                        this.legendLabels[h].innerHTML = d;
                      }
                    } else
                      ("mouseout" !== e.type && "touchend" !== e.type) ||
                        (r.classList.remove("apexcharts-active"),
                        a.config.legend.tooltipHoverFormatter &&
                          this.legendLabels.forEach(function (t) {
                            var e = t.getAttribute("data:default-text");
                            t.innerHTML = decodeURIComponent(e);
                          }));
                  },
                },
                {
                  key: "handleStickyTooltip",
                  value: function (t, e, i, n) {
                    var a = this.w,
                      s = this.tooltipUtil.getNearestValues({
                        context: this,
                        hoverArea: n.hoverArea,
                        elGrid: n.elGrid,
                        clientX: e,
                        clientY: i,
                      }),
                      r = s.j,
                      o = s.capturedSeries,
                      l = n.elGrid.getBoundingClientRect();
                    s.hoverX < 0 || s.hoverX > l.width
                      ? this.handleMouseOut(n)
                      : null !== o
                      ? this.handleStickyCapturedSeries(t, o, n, r)
                      : (this.tooltipUtil.isXoverlap(r) ||
                          a.globals.isBarHorizontal) &&
                        this.create(t, this, 0, r, n.ttItems);
                  },
                },
                {
                  key: "handleStickyCapturedSeries",
                  value: function (t, e, i, n) {
                    var a = this.w;
                    this.tConfig.shared || null !== a.globals.series[e][n]
                      ? void 0 !== a.globals.series[e][n]
                        ? this.tConfig.shared &&
                          this.tooltipUtil.isXoverlap(n) &&
                          this.tooltipUtil.isInitialSeriesSameLen()
                          ? this.create(t, this, e, n, i.ttItems)
                          : this.create(t, this, e, n, i.ttItems, !1)
                        : this.tooltipUtil.isXoverlap(n) &&
                          this.create(t, this, 0, n, i.ttItems)
                      : this.handleMouseOut(i);
                  },
                },
                {
                  key: "deactivateHoverFilter",
                  value: function () {
                    for (
                      var t = this.w,
                        e = new w(this.ctx),
                        i = t.globals.dom.Paper.select(".apexcharts-bar-area"),
                        n = 0;
                      n < i.length;
                      n++
                    )
                      e.pathMouseLeave(i[n]);
                  },
                },
                {
                  key: "handleMouseOut",
                  value: function (t) {
                    var e = this.w,
                      i = this.getElXCrosshairs();
                    if (
                      (t.tooltipEl.classList.remove("apexcharts-active"),
                      this.deactivateHoverFilter(),
                      "bubble" !== e.config.chart.type &&
                        this.marker.resetPointsSize(),
                      null !== i && i.classList.remove("apexcharts-active"),
                      null !== this.ycrosshairs &&
                        this.ycrosshairs.classList.remove("apexcharts-active"),
                      this.blxaxisTooltip &&
                        this.xaxisTooltip.classList.remove("apexcharts-active"),
                      this.yaxisTooltips.length)
                    ) {
                      null === this.yaxisTTEls &&
                        (this.yaxisTTEls =
                          e.globals.dom.baseEl.querySelectorAll(
                            ".apexcharts-yaxistooltip"
                          ));
                      for (var n = 0; n < this.yaxisTTEls.length; n++)
                        this.yaxisTTEls[n].classList.remove(
                          "apexcharts-active"
                        );
                    }
                    e.config.legend.tooltipHoverFormatter &&
                      this.legendLabels.forEach(function (t) {
                        var e = t.getAttribute("data:default-text");
                        t.innerHTML = decodeURIComponent(e);
                      });
                  },
                },
                {
                  key: "markerClick",
                  value: function (t, e, i) {
                    var n = this.w;
                    "function" == typeof n.config.chart.events.markerClick &&
                      n.config.chart.events.markerClick(t, this.ctx, {
                        seriesIndex: e,
                        dataPointIndex: i,
                        w: n,
                      }),
                      this.ctx.events.fireEvent("markerClick", [
                        t,
                        this.ctx,
                        { seriesIndex: e, dataPointIndex: i, w: n },
                      ]);
                  },
                },
                {
                  key: "create",
                  value: function (t, e, i, n, a) {
                    var s =
                        arguments.length > 5 && void 0 !== arguments[5]
                          ? arguments[5]
                          : null,
                      r = this.w,
                      o = e;
                    "mouseup" === t.type && this.markerClick(t, i, n),
                      null === s && (s = this.tConfig.shared);
                    var l = this.tooltipUtil.hasMarkers(),
                      c = this.tooltipUtil.getElBars();
                    if (r.config.legend.tooltipHoverFormatter) {
                      var h = r.config.legend.tooltipHoverFormatter,
                        d = Array.from(this.legendLabels);
                      d.forEach(function (t) {
                        var e = t.getAttribute("data:default-text");
                        t.innerHTML = decodeURIComponent(e);
                      });
                      for (var u = 0; u < d.length; u++) {
                        var f = d[u],
                          p = parseInt(f.getAttribute("i"), 10),
                          g = decodeURIComponent(
                            f.getAttribute("data:default-text")
                          ),
                          m = h(g, {
                            seriesIndex: s ? p : i,
                            dataPointIndex: n,
                            w: r,
                          });
                        if (s)
                          f.innerHTML =
                            r.globals.collapsedSeriesIndices.indexOf(p) < 0
                              ? m
                              : g;
                        else if (((f.innerHTML = p === i ? m : g), i === p))
                          break;
                      }
                    }
                    if (s) {
                      if (
                        (o.tooltipLabels.drawSeriesTexts({
                          ttItems: a,
                          i,
                          j: n,
                          shared: !this.showOnIntersect && this.tConfig.shared,
                        }),
                        l &&
                          (r.globals.markers.largestSize > 0
                            ? o.marker.enlargePoints(n)
                            : o.tooltipPosition.moveDynamicPointsOnHover(n)),
                        this.tooltipUtil.hasBars() &&
                          ((this.barSeriesHeight =
                            this.tooltipUtil.getBarsHeight(c)),
                          this.barSeriesHeight > 0))
                      ) {
                        var x = new w(this.ctx),
                          v = r.globals.dom.Paper.select(
                            ".apexcharts-bar-area[j='".concat(n, "']")
                          );
                        this.deactivateHoverFilter(),
                          this.tooltipPosition.moveStickyTooltipOverBars(n);
                        for (var b = 0; b < v.length; b++)
                          x.pathMouseEnter(v[b]);
                      }
                    } else
                      o.tooltipLabels.drawSeriesTexts({
                        shared: !1,
                        ttItems: a,
                        i,
                        j: n,
                      }),
                        this.tooltipUtil.hasBars() &&
                          o.tooltipPosition.moveStickyTooltipOverBars(n),
                        l && o.tooltipPosition.moveMarkers(i, n);
                  },
                },
              ]),
              t
            );
          })(),
          kt = (function (t) {
            d(i, F);
            var e = g(i);
            function i() {
              return s(this, i), e.apply(this, arguments);
            }
            return (
              o(i, [
                {
                  key: "draw",
                  value: function (t, e) {
                    var i = this,
                      n = this.w;
                    (this.graphics = new w(this.ctx)),
                      (this.bar = new F(this.ctx, this.xyRatios));
                    var a = new A(this.ctx, n);
                    (t = a.getLogSeries(t)),
                      (this.yRatio = a.getLogYRatios(this.yRatio)),
                      this.barHelpers.initVariables(t),
                      "100%" === n.config.chart.stackType &&
                        (t = n.globals.seriesPercent.slice()),
                      (this.series = t),
                      (this.totalItems = 0),
                      (this.prevY = []),
                      (this.prevX = []),
                      (this.prevYF = []),
                      (this.prevXF = []),
                      (this.prevYVal = []),
                      (this.prevXVal = []),
                      (this.xArrj = []),
                      (this.xArrjF = []),
                      (this.xArrjVal = []),
                      (this.yArrj = []),
                      (this.yArrjF = []),
                      (this.yArrjVal = []);
                    for (var s = 0; s < t.length; s++)
                      t[s].length > 0 && (this.totalItems += t[s].length);
                    for (
                      var r = this.graphics.group({
                          class: "apexcharts-bar-series apexcharts-plot-series",
                        }),
                        o = 0,
                        l = 0,
                        c = function (a, s) {
                          var c = void 0,
                            d = void 0,
                            u = void 0,
                            f = void 0,
                            p = [],
                            g = [],
                            m = n.globals.comboCharts ? e[a] : a;
                          i.yRatio.length > 1 && (i.yaxisIndex = m),
                            (i.isReversed =
                              n.config.yaxis[i.yaxisIndex] &&
                              n.config.yaxis[i.yaxisIndex].reversed);
                          var x = i.graphics.group({
                            class: "apexcharts-series",
                            seriesName: v.escapeString(
                              n.globals.seriesNames[m]
                            ),
                            rel: a + 1,
                            "data:realIndex": m,
                          });
                          i.ctx.series.addCollapsedClassToSeries(x, m);
                          var b = i.graphics.group({
                              class: "apexcharts-datalabels",
                              "data:realIndex": m,
                            }),
                            y = 0,
                            w = 0,
                            k = i.initialPositions(o, l, c, d, u, f);
                          (l = k.y),
                            (y = k.barHeight),
                            (d = k.yDivision),
                            (f = k.zeroW),
                            (o = k.x),
                            (w = k.barWidth),
                            (c = k.xDivision),
                            (u = k.zeroH),
                            (i.yArrj = []),
                            (i.yArrjF = []),
                            (i.yArrjVal = []),
                            (i.xArrj = []),
                            (i.xArrjF = []),
                            (i.xArrjVal = []),
                            1 === i.prevY.length &&
                              i.prevY[0].every(function (t) {
                                return isNaN(t);
                              }) &&
                              ((i.prevY[0] = i.prevY[0].map(function (t) {
                                return u;
                              })),
                              (i.prevYF[0] = i.prevYF[0].map(function (t) {
                                return 0;
                              })));
                          for (var S = 0; S < n.globals.dataPoints; S++) {
                            var A = i.barHelpers.getStrokeWidth(a, S, m),
                              C = {
                                indexes: { i: a, j: S, realIndex: m, bc: s },
                                strokeWidth: A,
                                x: o,
                                y: l,
                                elSeries: x,
                              },
                              E = null;
                            i.isHorizontal
                              ? ((E = i.drawStackedBarPaths(
                                  h(
                                    h({}, C),
                                    {},
                                    { zeroW: f, barHeight: y, yDivision: d }
                                  )
                                )),
                                (w = i.series[a][S] / i.invertedYRatio))
                              : ((E = i.drawStackedColumnPaths(
                                  h(
                                    h({}, C),
                                    {},
                                    { xDivision: c, barWidth: w, zeroH: u }
                                  )
                                )),
                                (y = i.series[a][S] / i.yRatio[i.yaxisIndex])),
                              (l = E.y),
                              (o = E.x),
                              p.push(o),
                              g.push(l);
                            var T = i.barHelpers.getPathFillColor(t, a, S, m);
                            x = i.renderSeries({
                              realIndex: m,
                              pathFill: T,
                              j: S,
                              i: a,
                              pathFrom: E.pathFrom,
                              pathTo: E.pathTo,
                              strokeWidth: A,
                              elSeries: x,
                              x: o,
                              y: l,
                              series: t,
                              barHeight: y,
                              barWidth: w,
                              elDataLabelsWrap: b,
                              type: "bar",
                              visibleSeries: 0,
                            });
                          }
                          (n.globals.seriesXvalues[m] = p),
                            (n.globals.seriesYvalues[m] = g),
                            i.prevY.push(i.yArrj),
                            i.prevYF.push(i.yArrjF),
                            i.prevYVal.push(i.yArrjVal),
                            i.prevX.push(i.xArrj),
                            i.prevXF.push(i.xArrjF),
                            i.prevXVal.push(i.xArrjVal),
                            r.add(x);
                        },
                        d = 0,
                        u = 0;
                      d < t.length;
                      d++, u++
                    )
                      c(d, u);
                    return r;
                  },
                },
                {
                  key: "initialPositions",
                  value: function (t, e, i, n, a, s) {
                    var r,
                      o,
                      l = this.w;
                    return (
                      this.isHorizontal
                        ? ((r =
                            ((r = n =
                              l.globals.gridHeight / l.globals.dataPoints) *
                              parseInt(
                                l.config.plotOptions.bar.barHeight,
                                10
                              )) /
                            100),
                          (s =
                            this.baseLineInvertedY +
                            l.globals.padHorizontal +
                            (this.isReversed ? l.globals.gridWidth : 0) -
                            (this.isReversed ? 2 * this.baseLineInvertedY : 0)),
                          (e = (n - r) / 2))
                        : ((o = i = l.globals.gridWidth / l.globals.dataPoints),
                          (o =
                            l.globals.isXNumeric && l.globals.dataPoints > 1
                              ? ((i = l.globals.minXDiff / this.xRatio) *
                                  parseInt(this.barOptions.columnWidth, 10)) /
                                100
                              : (o *
                                  parseInt(
                                    l.config.plotOptions.bar.columnWidth,
                                    10
                                  )) /
                                100),
                          (a =
                            this.baseLineY[this.yaxisIndex] +
                            (this.isReversed ? l.globals.gridHeight : 0) -
                            (this.isReversed
                              ? 2 * this.baseLineY[this.yaxisIndex]
                              : 0)),
                          (t = l.globals.padHorizontal + (i - o) / 2)),
                      {
                        x: t,
                        y: e,
                        yDivision: n,
                        xDivision: i,
                        barHeight: r,
                        barWidth: o,
                        zeroH: a,
                        zeroW: s,
                      }
                    );
                  },
                },
                {
                  key: "drawStackedBarPaths",
                  value: function (t) {
                    for (
                      var e,
                        i = t.indexes,
                        n = t.barHeight,
                        a = t.strokeWidth,
                        s = t.zeroW,
                        r = t.x,
                        o = t.y,
                        l = t.yDivision,
                        c = t.elSeries,
                        h = this.w,
                        d = o,
                        u = i.i,
                        f = i.j,
                        p = 0,
                        g = 0;
                      g < this.prevXF.length;
                      g++
                    )
                      p += this.prevXF[g][f];
                    if (u > 0) {
                      var m = s;
                      this.prevXVal[u - 1][f] < 0
                        ? (m =
                            this.series[u][f] >= 0
                              ? this.prevX[u - 1][f] +
                                p -
                                2 * (this.isReversed ? p : 0)
                              : this.prevX[u - 1][f])
                        : this.prevXVal[u - 1][f] >= 0 &&
                          (m =
                            this.series[u][f] >= 0
                              ? this.prevX[u - 1][f]
                              : this.prevX[u - 1][f] -
                                p +
                                2 * (this.isReversed ? p : 0)),
                        (e = m);
                    } else e = s;
                    r =
                      null === this.series[u][f]
                        ? e
                        : e +
                          this.series[u][f] / this.invertedYRatio -
                          2 *
                            (this.isReversed
                              ? this.series[u][f] / this.invertedYRatio
                              : 0);
                    var x = this.barHelpers.getBarpaths({
                      barYPosition: d,
                      barHeight: n,
                      x1: e,
                      x2: r,
                      strokeWidth: a,
                      series: this.series,
                      realIndex: i.realIndex,
                      i: u,
                      j: f,
                      w: h,
                    });
                    return (
                      this.barHelpers.barBackground({
                        j: f,
                        i: u,
                        y1: d,
                        y2: n,
                        elSeries: c,
                      }),
                      (o += l),
                      { pathTo: x.pathTo, pathFrom: x.pathFrom, x: r, y: o }
                    );
                  },
                },
                {
                  key: "drawStackedColumnPaths",
                  value: function (t) {
                    var e = t.indexes,
                      i = t.x,
                      n = t.y,
                      a = t.xDivision,
                      s = t.barWidth,
                      r = t.zeroH;
                    t.strokeWidth;
                    var o = t.elSeries,
                      l = this.w,
                      c = e.i,
                      h = e.j,
                      d = e.bc;
                    if (l.globals.isXNumeric) {
                      var u = l.globals.seriesX[c][h];
                      u || (u = 0),
                        (i = (u - l.globals.minX) / this.xRatio - s / 2);
                    }
                    for (
                      var f, p = i, g = 0, m = 0;
                      m < this.prevYF.length;
                      m++
                    )
                      g += isNaN(this.prevYF[m][h]) ? 0 : this.prevYF[m][h];
                    if (
                      (c > 0 && !l.globals.isXNumeric) ||
                      (c > 0 &&
                        l.globals.isXNumeric &&
                        l.globals.seriesX[c - 1][h] === l.globals.seriesX[c][h])
                    ) {
                      var x,
                        v,
                        b = Math.min(this.yRatio.length + 1, c + 1);
                      if (void 0 !== this.prevY[c - 1])
                        for (var y = 1; y < b; y++)
                          if (!isNaN(this.prevY[c - y][h])) {
                            v = this.prevY[c - y][h];
                            break;
                          }
                      for (var w = 1; w < b; w++) {
                        if (this.prevYVal[c - w][h] < 0) {
                          x =
                            this.series[c][h] >= 0
                              ? v - g + 2 * (this.isReversed ? g : 0)
                              : v;
                          break;
                        }
                        if (this.prevYVal[c - w][h] >= 0) {
                          x =
                            this.series[c][h] >= 0
                              ? v
                              : v + g - 2 * (this.isReversed ? g : 0);
                          break;
                        }
                      }
                      void 0 === x && (x = l.globals.gridHeight),
                        (f =
                          this.prevYF[0].every(function (t) {
                            return 0 === t;
                          }) &&
                          this.prevYF.slice(1, c).every(function (t) {
                            return t.every(function (t) {
                              return isNaN(t);
                            });
                          })
                            ? l.globals.gridHeight - r
                            : x);
                    } else f = l.globals.gridHeight - r;
                    n =
                      f -
                      this.series[c][h] / this.yRatio[this.yaxisIndex] +
                      2 *
                        (this.isReversed
                          ? this.series[c][h] / this.yRatio[this.yaxisIndex]
                          : 0);
                    var k = this.barHelpers.getColumnPaths({
                      barXPosition: p,
                      barWidth: s,
                      y1: f,
                      y2: n,
                      yRatio: this.yRatio[this.yaxisIndex],
                      strokeWidth: this.strokeWidth,
                      series: this.series,
                      realIndex: e.realIndex,
                      i: c,
                      j: h,
                      w: l,
                    });
                    return (
                      this.barHelpers.barBackground({
                        bc: d,
                        j: h,
                        i: c,
                        x1: p,
                        x2: s,
                        elSeries: o,
                      }),
                      (i += a),
                      {
                        pathTo: k.pathTo,
                        pathFrom: k.pathFrom,
                        x: l.globals.isXNumeric ? i - a : i,
                        y: n,
                      }
                    );
                  },
                },
              ]),
              i
            );
          })(),
          St = (function (t) {
            d(i, F);
            var e = g(i);
            function i() {
              return s(this, i), e.apply(this, arguments);
            }
            return (
              o(i, [
                {
                  key: "draw",
                  value: function (t, e) {
                    var i = this,
                      n = this.w,
                      a = new w(this.ctx),
                      s = new P(this.ctx);
                    (this.candlestickOptions =
                      this.w.config.plotOptions.candlestick),
                      (this.boxOptions = this.w.config.plotOptions.boxPlot);
                    var r = new A(this.ctx, n);
                    (t = r.getLogSeries(t)),
                      (this.series = t),
                      (this.yRatio = r.getLogYRatios(this.yRatio)),
                      this.barHelpers.initVariables(t);
                    for (
                      var o = a.group({
                          class: "apexcharts-".concat(
                            n.config.chart.type,
                            "-series apexcharts-plot-series"
                          ),
                        }),
                        l = function (r) {
                          i.isBoxPlot =
                            "boxPlot" === n.config.chart.type ||
                            "boxPlot" === n.config.series[r].type;
                          var l,
                            c,
                            h,
                            d,
                            u = void 0,
                            f = void 0,
                            p = [],
                            g = [],
                            m = n.globals.comboCharts ? e[r] : r,
                            x = a.group({
                              class: "apexcharts-series",
                              seriesName: v.escapeString(
                                n.globals.seriesNames[m]
                              ),
                              rel: r + 1,
                              "data:realIndex": m,
                            });
                          t[r].length > 0 && (i.visibleI = i.visibleI + 1),
                            i.yRatio.length > 1 && (i.yaxisIndex = m);
                          var b = i.barHelpers.initialPositions();
                          (f = b.y),
                            (h = b.barHeight),
                            (u = b.x),
                            (d = b.barWidth),
                            (l = b.xDivision),
                            (c = b.zeroH),
                            g.push(u + d / 2);
                          for (
                            var y = a.group({
                                class: "apexcharts-datalabels",
                                "data:realIndex": m,
                              }),
                              w = function (e) {
                                var a = i.barHelpers.getStrokeWidth(r, e, m),
                                  o = i.drawBoxPaths({
                                    indexes: { i: r, j: e, realIndex: m },
                                    x: u,
                                    y: f,
                                    xDivision: l,
                                    barWidth: d,
                                    zeroH: c,
                                    strokeWidth: a,
                                    elSeries: x,
                                  });
                                (f = o.y),
                                  (u = o.x),
                                  e > 0 && g.push(u + d / 2),
                                  p.push(f),
                                  o.pathTo.forEach(function (l, c) {
                                    var p =
                                        !i.isBoxPlot &&
                                        i.candlestickOptions.wick.useFillColor
                                          ? o.color[c]
                                          : n.globals.stroke.colors[r],
                                      g = s.fillPath({
                                        seriesNumber: m,
                                        dataPointIndex: e,
                                        color: o.color[c],
                                        value: t[r][e],
                                      });
                                    i.renderSeries({
                                      realIndex: m,
                                      pathFill: g,
                                      lineFill: p,
                                      j: e,
                                      i: r,
                                      pathFrom: o.pathFrom,
                                      pathTo: l,
                                      strokeWidth: a,
                                      elSeries: x,
                                      x: u,
                                      y: f,
                                      series: t,
                                      barHeight: h,
                                      barWidth: d,
                                      elDataLabelsWrap: y,
                                      visibleSeries: i.visibleI,
                                      type: n.config.chart.type,
                                    });
                                  });
                              },
                              k = 0;
                            k < n.globals.dataPoints;
                            k++
                          )
                            w(k);
                          (n.globals.seriesXvalues[m] = g),
                            (n.globals.seriesYvalues[m] = p),
                            o.add(x);
                        },
                        c = 0;
                      c < t.length;
                      c++
                    )
                      l(c);
                    return o;
                  },
                },
                {
                  key: "drawBoxPaths",
                  value: function (t) {
                    var e = t.indexes,
                      i = t.x;
                    t.y;
                    var n = t.xDivision,
                      a = t.barWidth,
                      s = t.zeroH,
                      r = t.strokeWidth,
                      o = this.w,
                      l = new w(this.ctx),
                      c = e.i,
                      h = e.j,
                      d = !0,
                      u = o.config.plotOptions.candlestick.colors.upward,
                      f = o.config.plotOptions.candlestick.colors.downward,
                      p = "";
                    this.isBoxPlot &&
                      (p = [
                        this.boxOptions.colors.lower,
                        this.boxOptions.colors.upper,
                      ]);
                    var g = this.yRatio[this.yaxisIndex],
                      m = e.realIndex,
                      x = this.getOHLCValue(m, h),
                      v = s,
                      b = s;
                    x.o > x.c && (d = !1);
                    var y = Math.min(x.o, x.c),
                      k = Math.max(x.o, x.c),
                      S = x.m;
                    o.globals.isXNumeric &&
                      (i =
                        (o.globals.seriesX[m][h] - o.globals.minX) /
                          this.xRatio -
                        a / 2);
                    var A = i + a * this.visibleI;
                    void 0 === this.series[c][h] || null === this.series[c][h]
                      ? ((y = s), (k = s))
                      : ((y = s - y / g),
                        (k = s - k / g),
                        (v = s - x.h / g),
                        (b = s - x.l / g),
                        (S = s - x.m / g));
                    var C = l.move(A, s),
                      E = l.move(A + a / 2, y);
                    return (
                      o.globals.previousPaths.length > 0 &&
                        (E = this.getPreviousPath(m, h, !0)),
                      (C = this.isBoxPlot
                        ? [
                            l.move(A, y) +
                              l.line(A + a / 2, y) +
                              l.line(A + a / 2, v) +
                              l.line(A + a / 4, v) +
                              l.line(A + a - a / 4, v) +
                              l.line(A + a / 2, v) +
                              l.line(A + a / 2, y) +
                              l.line(A + a, y) +
                              l.line(A + a, S) +
                              l.line(A, S) +
                              l.line(A, y + r / 2),
                            l.move(A, S) +
                              l.line(A + a, S) +
                              l.line(A + a, k) +
                              l.line(A + a / 2, k) +
                              l.line(A + a / 2, b) +
                              l.line(A + a - a / 4, b) +
                              l.line(A + a / 4, b) +
                              l.line(A + a / 2, b) +
                              l.line(A + a / 2, k) +
                              l.line(A, k) +
                              l.line(A, S) +
                              "z",
                          ]
                        : [
                            l.move(A, k) +
                              l.line(A + a / 2, k) +
                              l.line(A + a / 2, v) +
                              l.line(A + a / 2, k) +
                              l.line(A + a, k) +
                              l.line(A + a, y) +
                              l.line(A + a / 2, y) +
                              l.line(A + a / 2, b) +
                              l.line(A + a / 2, y) +
                              l.line(A, y) +
                              l.line(A, k - r / 2),
                          ]),
                      (E += l.move(A, y)),
                      o.globals.isXNumeric || (i += n),
                      {
                        pathTo: C,
                        pathFrom: E,
                        x: i,
                        y: k,
                        barXPosition: A,
                        color: this.isBoxPlot ? p : d ? [u] : [f],
                      }
                    );
                  },
                },
                {
                  key: "getOHLCValue",
                  value: function (t, e) {
                    var i = this.w;
                    return {
                      o: this.isBoxPlot
                        ? i.globals.seriesCandleH[t][e]
                        : i.globals.seriesCandleO[t][e],
                      h: this.isBoxPlot
                        ? i.globals.seriesCandleO[t][e]
                        : i.globals.seriesCandleH[t][e],
                      m: i.globals.seriesCandleM[t][e],
                      l: this.isBoxPlot
                        ? i.globals.seriesCandleC[t][e]
                        : i.globals.seriesCandleL[t][e],
                      c: this.isBoxPlot
                        ? i.globals.seriesCandleL[t][e]
                        : i.globals.seriesCandleC[t][e],
                    };
                  },
                },
              ]),
              i
            );
          })(),
          At = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.w = e.w);
            }
            return (
              o(t, [
                {
                  key: "checkColorRange",
                  value: function () {
                    var t = this.w,
                      e = !1,
                      i = t.config.plotOptions[t.config.chart.type];
                    return (
                      i.colorScale.ranges.length > 0 &&
                        i.colorScale.ranges.map(function (t, i) {
                          t.from <= 0 && (e = !0);
                        }),
                      e
                    );
                  },
                },
                {
                  key: "getShadeColor",
                  value: function (t, e, i, n) {
                    var a = this.w,
                      s = 1,
                      r = a.config.plotOptions[t].shadeIntensity,
                      o = this.determineColor(t, e, i);
                    a.globals.hasNegs || n
                      ? (s = a.config.plotOptions[t].reverseNegativeShade
                          ? o.percent < 0
                            ? (o.percent / 100) * (1.25 * r)
                            : (1 - o.percent / 100) * (1.25 * r)
                          : o.percent <= 0
                          ? 1 - (1 + o.percent / 100) * r
                          : (1 - o.percent / 100) * r)
                      : ((s = 1 - o.percent / 100),
                        "treemap" === t &&
                          (s = (1 - o.percent / 100) * (1.25 * r)));
                    var l = o.color,
                      c = new v();
                    return (
                      a.config.plotOptions[t].enableShades &&
                        (l =
                          "dark" === this.w.config.theme.mode
                            ? v.hexToRgba(
                                c.shadeColor(-1 * s, o.color),
                                a.config.fill.opacity
                              )
                            : v.hexToRgba(
                                c.shadeColor(s, o.color),
                                a.config.fill.opacity
                              )),
                      { color: l, colorProps: o }
                    );
                  },
                },
                {
                  key: "determineColor",
                  value: function (t, e, i) {
                    var n = this.w,
                      a = n.globals.series[e][i],
                      s = n.config.plotOptions[t],
                      r = s.colorScale.inverse ? i : e;
                    n.config.plotOptions[t].distributed && (r = i);
                    var o = n.globals.colors[r],
                      l = null,
                      c = Math.min.apply(Math, m(n.globals.series[e])),
                      h = Math.max.apply(Math, m(n.globals.series[e]));
                    s.distributed ||
                      "heatmap" !== t ||
                      ((c = n.globals.minY), (h = n.globals.maxY)),
                      void 0 !== s.colorScale.min &&
                        ((c =
                          s.colorScale.min < n.globals.minY
                            ? s.colorScale.min
                            : n.globals.minY),
                        (h =
                          s.colorScale.max > n.globals.maxY
                            ? s.colorScale.max
                            : n.globals.maxY));
                    var d = Math.abs(h) + Math.abs(c),
                      u = (100 * a) / (0 === d ? d - 1e-6 : d);
                    return (
                      s.colorScale.ranges.length > 0 &&
                        s.colorScale.ranges.map(function (t, e) {
                          if (a >= t.from && a <= t.to) {
                            (o = t.color),
                              (l = t.foreColor ? t.foreColor : null),
                              (c = t.from),
                              (h = t.to);
                            var i = Math.abs(h) + Math.abs(c);
                            u = (100 * a) / (0 === i ? i - 1e-6 : i);
                          }
                        }),
                      { color: o, foreColor: l, percent: u }
                    );
                  },
                },
                {
                  key: "calculateDataLabels",
                  value: function (t) {
                    var e = t.text,
                      i = t.x,
                      n = t.y,
                      a = t.i,
                      s = t.j,
                      r = t.colorProps,
                      o = t.fontSize,
                      l = this.w.config.dataLabels,
                      c = new w(this.ctx),
                      h = new N(this.ctx),
                      d = null;
                    if (l.enabled) {
                      d = c.group({ class: "apexcharts-data-labels" });
                      var u = l.offsetX,
                        f = l.offsetY,
                        p = i + u,
                        g = n + parseFloat(l.style.fontSize) / 3 + f;
                      h.plotDataLabelsText({
                        x: p,
                        y: g,
                        text: e,
                        i: a,
                        j: s,
                        color: r.foreColor,
                        parent: d,
                        fontSize: o,
                        dataLabelsConfig: l,
                      });
                    }
                    return d;
                  },
                },
                {
                  key: "addListeners",
                  value: function (t) {
                    var e = new w(this.ctx);
                    t.node.addEventListener(
                      "mouseenter",
                      e.pathMouseEnter.bind(this, t)
                    ),
                      t.node.addEventListener(
                        "mouseleave",
                        e.pathMouseLeave.bind(this, t)
                      ),
                      t.node.addEventListener(
                        "mousedown",
                        e.pathMouseDown.bind(this, t)
                      );
                  },
                },
              ]),
              t
            );
          })(),
          Ct = (function () {
            function t(e, i) {
              s(this, t),
                (this.ctx = e),
                (this.w = e.w),
                (this.xRatio = i.xRatio),
                (this.yRatio = i.yRatio),
                (this.dynamicAnim =
                  this.w.config.chart.animations.dynamicAnimation),
                (this.helpers = new At(e)),
                (this.rectRadius = this.w.config.plotOptions.heatmap.radius),
                (this.strokeWidth = this.w.config.stroke.show
                  ? this.w.config.stroke.width
                  : 0);
            }
            return (
              o(t, [
                {
                  key: "draw",
                  value: function (t) {
                    var e = this.w,
                      i = new w(this.ctx),
                      n = i.group({ class: "apexcharts-heatmap" });
                    n.attr(
                      "clip-path",
                      "url(#gridRectMask".concat(e.globals.cuid, ")")
                    );
                    var a = e.globals.gridWidth / e.globals.dataPoints,
                      s = e.globals.gridHeight / e.globals.series.length,
                      r = 0,
                      o = !1;
                    this.negRange = this.helpers.checkColorRange();
                    var l = t.slice();
                    e.config.yaxis[0].reversed && ((o = !0), l.reverse());
                    for (
                      var c = o ? 0 : l.length - 1;
                      o ? c < l.length : c >= 0;
                      o ? c++ : c--
                    ) {
                      var h = i.group({
                        class: "apexcharts-series apexcharts-heatmap-series",
                        seriesName: v.escapeString(e.globals.seriesNames[c]),
                        rel: c + 1,
                        "data:realIndex": c,
                      });
                      if (
                        (this.ctx.series.addCollapsedClassToSeries(h, c),
                        e.config.chart.dropShadow.enabled)
                      ) {
                        var d = e.config.chart.dropShadow;
                        new y(this.ctx).dropShadow(h, d, c);
                      }
                      for (
                        var u = 0,
                          f = e.config.plotOptions.heatmap.shadeIntensity,
                          p = 0;
                        p < l[c].length;
                        p++
                      ) {
                        var g = this.helpers.getShadeColor(
                            e.config.chart.type,
                            c,
                            p,
                            this.negRange
                          ),
                          m = g.color,
                          x = g.colorProps;
                        "image" === e.config.fill.type &&
                          (m = new P(this.ctx).fillPath({
                            seriesNumber: c,
                            dataPointIndex: p,
                            opacity: e.globals.hasNegs
                              ? x.percent < 0
                                ? 1 - (1 + x.percent / 100)
                                : f + x.percent / 100
                              : x.percent / 100,
                            patternID: v.randomId(),
                            width: e.config.fill.image.width
                              ? e.config.fill.image.width
                              : a,
                            height: e.config.fill.image.height
                              ? e.config.fill.image.height
                              : s,
                          }));
                        var b = this.rectRadius,
                          k = i.drawRect(u, r, a, s, b);
                        if (
                          (k.attr({ cx: u, cy: r }),
                          k.node.classList.add("apexcharts-heatmap-rect"),
                          h.add(k),
                          k.attr({
                            fill: m,
                            i: c,
                            index: c,
                            j: p,
                            val: l[c][p],
                            "stroke-width": this.strokeWidth,
                            stroke: e.config.plotOptions.heatmap
                              .useFillColorAsStroke
                              ? m
                              : e.globals.stroke.colors[0],
                            color: m,
                          }),
                          this.helpers.addListeners(k),
                          e.config.chart.animations.enabled &&
                            !e.globals.dataChanged)
                        ) {
                          var S = 1;
                          e.globals.resized ||
                            (S = e.config.chart.animations.speed),
                            this.animateHeatMap(k, u, r, a, s, S);
                        }
                        if (e.globals.dataChanged) {
                          var A = 1;
                          if (
                            this.dynamicAnim.enabled &&
                            e.globals.shouldAnimate
                          ) {
                            A = this.dynamicAnim.speed;
                            var C =
                              e.globals.previousPaths[c] &&
                              e.globals.previousPaths[c][p] &&
                              e.globals.previousPaths[c][p].color;
                            C || (C = "rgba(255, 255, 255, 0)"),
                              this.animateHeatColor(
                                k,
                                v.isColorHex(C) ? C : v.rgb2hex(C),
                                v.isColorHex(m) ? m : v.rgb2hex(m),
                                A
                              );
                          }
                        }
                        var E = (0, e.config.dataLabels.formatter)(
                            e.globals.series[c][p],
                            {
                              value: e.globals.series[c][p],
                              seriesIndex: c,
                              dataPointIndex: p,
                              w: e,
                            }
                          ),
                          T = this.helpers.calculateDataLabels({
                            text: E,
                            x: u + a / 2,
                            y: r + s / 2,
                            i: c,
                            j: p,
                            colorProps: x,
                            series: l,
                          });
                        null !== T && h.add(T), (u += a);
                      }
                      (r += s), n.add(h);
                    }
                    var L = e.globals.yAxisScale[0].result.slice();
                    e.config.yaxis[0].reversed ? L.unshift("") : L.push(""),
                      (e.globals.yAxisScale[0].result = L);
                    var _ = e.globals.gridHeight / e.globals.series.length;
                    return (e.config.yaxis[0].labels.offsetY = -_ / 2), n;
                  },
                },
                {
                  key: "animateHeatMap",
                  value: function (t, e, i, n, a, s) {
                    var r = new b(this.ctx);
                    r.animateRect(
                      t,
                      { x: e + n / 2, y: i + a / 2, width: 0, height: 0 },
                      { x: e, y: i, width: n, height: a },
                      s,
                      function () {
                        r.animationCompleted(t);
                      }
                    );
                  },
                },
                {
                  key: "animateHeatColor",
                  value: function (t, e, i, n) {
                    t.attr({ fill: e }).animate(n).attr({ fill: i });
                  },
                },
              ]),
              t
            );
          })(),
          Et = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.w = e.w);
            }
            return (
              o(t, [
                {
                  key: "drawYAxisTexts",
                  value: function (t, e, i, n) {
                    var a = this.w,
                      s = a.config.yaxis[0],
                      r = a.globals.yLabelFormatters[0];
                    return new w(this.ctx).drawText({
                      x: t + s.labels.offsetX,
                      y: e + s.labels.offsetY,
                      text: r(n, i),
                      textAnchor: "middle",
                      fontSize: s.labels.style.fontSize,
                      fontFamily: s.labels.style.fontFamily,
                      foreColor: Array.isArray(s.labels.style.colors)
                        ? s.labels.style.colors[i]
                        : s.labels.style.colors,
                    });
                  },
                },
              ]),
              t
            );
          })(),
          Tt = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.w = e.w);
              var i = this.w;
              (this.chartType = this.w.config.chart.type),
                (this.initialAnim = this.w.config.chart.animations.enabled),
                (this.dynamicAnim =
                  this.initialAnim &&
                  this.w.config.chart.animations.dynamicAnimation.enabled),
                (this.animBeginArr = [0]),
                (this.animDur = 0),
                (this.donutDataLabels =
                  this.w.config.plotOptions.pie.donut.labels),
                (this.lineColorArr =
                  void 0 !== i.globals.stroke.colors
                    ? i.globals.stroke.colors
                    : i.globals.colors),
                (this.defaultSize = Math.min(
                  i.globals.gridWidth,
                  i.globals.gridHeight
                )),
                (this.centerY = this.defaultSize / 2),
                (this.centerX = i.globals.gridWidth / 2),
                "radialBar" === i.config.chart.type
                  ? (this.fullAngle = 360)
                  : (this.fullAngle = Math.abs(
                      i.config.plotOptions.pie.endAngle -
                        i.config.plotOptions.pie.startAngle
                    )),
                (this.initialAngle =
                  i.config.plotOptions.pie.startAngle % this.fullAngle),
                (i.globals.radialSize =
                  this.defaultSize / 2.05 -
                  i.config.stroke.width -
                  (i.config.chart.sparkline.enabled
                    ? 0
                    : i.config.chart.dropShadow.blur)),
                (this.donutSize =
                  (i.globals.radialSize *
                    parseInt(i.config.plotOptions.pie.donut.size, 10)) /
                  100),
                (this.maxY = 0),
                (this.sliceLabels = []),
                (this.sliceSizes = []),
                (this.prevSectorAngleArr = []);
            }
            return (
              o(t, [
                {
                  key: "draw",
                  value: function (t) {
                    var e = this,
                      i = this.w,
                      n = new w(this.ctx);
                    if (
                      ((this.ret = n.group({ class: "apexcharts-pie" })),
                      i.globals.noData)
                    )
                      return this.ret;
                    for (var a = 0, s = 0; s < t.length; s++)
                      a += v.negToZero(t[s]);
                    var r = [],
                      o = n.group();
                    0 === a && (a = 1e-5),
                      t.forEach(function (t) {
                        e.maxY = Math.max(e.maxY, t);
                      }),
                      i.config.yaxis[0].max &&
                        (this.maxY = i.config.yaxis[0].max),
                      "back" === i.config.grid.position &&
                        "polarArea" === this.chartType &&
                        this.drawPolarElements(this.ret);
                    for (var l = 0; l < t.length; l++) {
                      var c = (this.fullAngle * v.negToZero(t[l])) / a;
                      r.push(c),
                        "polarArea" === this.chartType
                          ? ((r[l] = this.fullAngle / t.length),
                            this.sliceSizes.push(
                              (i.globals.radialSize * t[l]) / this.maxY
                            ))
                          : this.sliceSizes.push(i.globals.radialSize);
                    }
                    if (i.globals.dataChanged) {
                      for (
                        var h, d = 0, u = 0;
                        u < i.globals.previousPaths.length;
                        u++
                      )
                        d += v.negToZero(i.globals.previousPaths[u]);
                      for (var f = 0; f < i.globals.previousPaths.length; f++)
                        (h =
                          (this.fullAngle *
                            v.negToZero(i.globals.previousPaths[f])) /
                          d),
                          this.prevSectorAngleArr.push(h);
                    }
                    this.donutSize < 0 && (this.donutSize = 0);
                    var p = i.config.plotOptions.pie.customScale,
                      g = i.globals.gridWidth / 2,
                      m = i.globals.gridHeight / 2,
                      x = g - (i.globals.gridWidth / 2) * p,
                      b = m - (i.globals.gridHeight / 2) * p;
                    if ("donut" === this.chartType) {
                      var y = n.drawCircle(this.donutSize);
                      y.attr({
                        cx: this.centerX,
                        cy: this.centerY,
                        fill: i.config.plotOptions.pie.donut.background
                          ? i.config.plotOptions.pie.donut.background
                          : "transparent",
                      }),
                        o.add(y);
                    }
                    var k = this.drawArcs(r, t);
                    if (
                      (this.sliceLabels.forEach(function (t) {
                        k.add(t);
                      }),
                      o.attr({
                        transform: "translate("
                          .concat(x, ", ")
                          .concat(b, ") scale(")
                          .concat(p, ")"),
                      }),
                      o.add(k),
                      this.ret.add(o),
                      this.donutDataLabels.show)
                    ) {
                      var S = this.renderInnerDataLabels(this.donutDataLabels, {
                        hollowSize: this.donutSize,
                        centerX: this.centerX,
                        centerY: this.centerY,
                        opacity: this.donutDataLabels.show,
                        translateX: x,
                        translateY: b,
                      });
                      this.ret.add(S);
                    }
                    return (
                      "front" === i.config.grid.position &&
                        "polarArea" === this.chartType &&
                        this.drawPolarElements(this.ret),
                      this.ret
                    );
                  },
                },
                {
                  key: "drawArcs",
                  value: function (t, e) {
                    var i = this.w,
                      n = new y(this.ctx),
                      a = new w(this.ctx),
                      s = new P(this.ctx),
                      r = a.group({ class: "apexcharts-slices" }),
                      o = this.initialAngle,
                      l = this.initialAngle,
                      c = this.initialAngle,
                      h = this.initialAngle;
                    this.strokeWidth = i.config.stroke.show
                      ? i.config.stroke.width
                      : 0;
                    for (var d = 0; d < t.length; d++) {
                      var u = a.group({
                        class: "apexcharts-series apexcharts-pie-series",
                        seriesName: v.escapeString(i.globals.seriesNames[d]),
                        rel: d + 1,
                        "data:realIndex": d,
                      });
                      r.add(u),
                        (l = h),
                        (c = (o = c) + t[d]),
                        (h = l + this.prevSectorAngleArr[d]);
                      var f = c < o ? this.fullAngle + c - o : c - o,
                        p = s.fillPath({
                          seriesNumber: d,
                          size: this.sliceSizes[d],
                          value: e[d],
                        }),
                        g = this.getChangedPath(l, h),
                        m = a.drawPath({
                          d: g,
                          stroke: Array.isArray(this.lineColorArr)
                            ? this.lineColorArr[d]
                            : this.lineColorArr,
                          strokeWidth: 0,
                          fill: p,
                          fillOpacity: i.config.fill.opacity,
                          classes: "apexcharts-pie-area apexcharts-"
                            .concat(this.chartType.toLowerCase(), "-slice-")
                            .concat(d),
                        });
                      if (
                        (m.attr({ index: 0, j: d }),
                        n.setSelectionFilter(m, 0, d),
                        i.config.chart.dropShadow.enabled)
                      ) {
                        var x = i.config.chart.dropShadow;
                        n.dropShadow(m, x, d);
                      }
                      this.addListeners(m, this.donutDataLabels),
                        w.setAttrs(m.node, {
                          "data:angle": f,
                          "data:startAngle": o,
                          "data:strokeWidth": this.strokeWidth,
                          "data:value": e[d],
                        });
                      var b = { x: 0, y: 0 };
                      "pie" === this.chartType || "polarArea" === this.chartType
                        ? (b = v.polarToCartesian(
                            this.centerX,
                            this.centerY,
                            i.globals.radialSize / 1.25 +
                              i.config.plotOptions.pie.dataLabels.offset,
                            (o + f / 2) % this.fullAngle
                          ))
                        : "donut" === this.chartType &&
                          (b = v.polarToCartesian(
                            this.centerX,
                            this.centerY,
                            (i.globals.radialSize + this.donutSize) / 2 +
                              i.config.plotOptions.pie.dataLabels.offset,
                            (o + f / 2) % this.fullAngle
                          )),
                        u.add(m);
                      var k = 0;
                      if (
                        (!this.initialAnim ||
                        i.globals.resized ||
                        i.globals.dataChanged
                          ? this.animBeginArr.push(0)
                          : (0 ==
                              (k =
                                (f / this.fullAngle) *
                                i.config.chart.animations.speed) && (k = 1),
                            (this.animDur = k + this.animDur),
                            this.animBeginArr.push(this.animDur)),
                        this.dynamicAnim && i.globals.dataChanged
                          ? this.animatePaths(m, {
                              size: this.sliceSizes[d],
                              endAngle: c,
                              startAngle: o,
                              prevStartAngle: l,
                              prevEndAngle: h,
                              animateStartingPos: !0,
                              i: d,
                              animBeginArr: this.animBeginArr,
                              shouldSetPrevPaths: !0,
                              dur: i.config.chart.animations.dynamicAnimation
                                .speed,
                            })
                          : this.animatePaths(m, {
                              size: this.sliceSizes[d],
                              endAngle: c,
                              startAngle: o,
                              i: d,
                              totalItems: t.length - 1,
                              animBeginArr: this.animBeginArr,
                              dur: k,
                            }),
                        i.config.plotOptions.pie.expandOnClick &&
                          "polarArea" !== this.chartType &&
                          m.click(this.pieClicked.bind(this, d)),
                        void 0 !== i.globals.selectedDataPoints[0] &&
                          i.globals.selectedDataPoints[0].indexOf(d) > -1 &&
                          this.pieClicked(d),
                        i.config.dataLabels.enabled)
                      ) {
                        var S = b.x,
                          A = b.y,
                          C = (100 * f) / this.fullAngle + "%";
                        if (
                          0 !== f &&
                          i.config.plotOptions.pie.dataLabels
                            .minAngleToShowLabel < t[d]
                        ) {
                          var E = i.config.dataLabels.formatter;
                          void 0 !== E &&
                            (C = E(i.globals.seriesPercent[d][0], {
                              seriesIndex: d,
                              w: i,
                            }));
                          var T = i.globals.dataLabels.style.colors[d],
                            L = a.group({ class: "apexcharts-datalabels" }),
                            _ = a.drawText({
                              x: S,
                              y: A,
                              text: C,
                              textAnchor: "middle",
                              fontSize: i.config.dataLabels.style.fontSize,
                              fontFamily: i.config.dataLabels.style.fontFamily,
                              fontWeight: i.config.dataLabels.style.fontWeight,
                              foreColor: T,
                            });
                          if (
                            (L.add(_), i.config.dataLabels.dropShadow.enabled)
                          ) {
                            var I = i.config.dataLabels.dropShadow;
                            n.dropShadow(_, I);
                          }
                          _.node.classList.add("apexcharts-pie-label"),
                            i.config.chart.animations.animate &&
                              !1 === i.globals.resized &&
                              (_.node.classList.add(
                                "apexcharts-pie-label-delay"
                              ),
                              (_.node.style.animationDelay =
                                i.config.chart.animations.speed / 940 + "s")),
                            this.sliceLabels.push(L);
                        }
                      }
                    }
                    return r;
                  },
                },
                {
                  key: "addListeners",
                  value: function (t, e) {
                    var i = new w(this.ctx);
                    t.node.addEventListener(
                      "mouseenter",
                      i.pathMouseEnter.bind(this, t)
                    ),
                      t.node.addEventListener(
                        "mouseleave",
                        i.pathMouseLeave.bind(this, t)
                      ),
                      t.node.addEventListener(
                        "mouseleave",
                        this.revertDataLabelsInner.bind(this, t.node, e)
                      ),
                      t.node.addEventListener(
                        "mousedown",
                        i.pathMouseDown.bind(this, t)
                      ),
                      this.donutDataLabels.total.showAlways ||
                        (t.node.addEventListener(
                          "mouseenter",
                          this.printDataLabelsInner.bind(this, t.node, e)
                        ),
                        t.node.addEventListener(
                          "mousedown",
                          this.printDataLabelsInner.bind(this, t.node, e)
                        ));
                  },
                },
                {
                  key: "animatePaths",
                  value: function (t, e) {
                    var i = this.w,
                      n =
                        e.endAngle < e.startAngle
                          ? this.fullAngle + e.endAngle - e.startAngle
                          : e.endAngle - e.startAngle,
                      a = n,
                      s = e.startAngle,
                      r = e.startAngle;
                    void 0 !== e.prevStartAngle &&
                      void 0 !== e.prevEndAngle &&
                      ((s = e.prevEndAngle),
                      (a =
                        e.prevEndAngle < e.prevStartAngle
                          ? this.fullAngle + e.prevEndAngle - e.prevStartAngle
                          : e.prevEndAngle - e.prevStartAngle)),
                      e.i === i.config.series.length - 1 &&
                        (n + r > this.fullAngle
                          ? (e.endAngle = e.endAngle - (n + r))
                          : n + r < this.fullAngle &&
                            (e.endAngle =
                              e.endAngle + (this.fullAngle - (n + r)))),
                      n === this.fullAngle && (n = this.fullAngle - 0.01),
                      this.animateArc(t, s, r, n, a, e);
                  },
                },
                {
                  key: "animateArc",
                  value: function (t, e, i, n, a, s) {
                    var r,
                      o = this,
                      l = this.w,
                      c = new b(this.ctx),
                      h = s.size;
                    (isNaN(e) || isNaN(a)) && ((e = i), (a = n), (s.dur = 0));
                    var d = n,
                      u = i,
                      f = e < i ? this.fullAngle + e - i : e - i;
                    l.globals.dataChanged &&
                      s.shouldSetPrevPaths &&
                      s.prevEndAngle &&
                      ((r = o.getPiePath({
                        me: o,
                        startAngle: s.prevStartAngle,
                        angle:
                          s.prevEndAngle < s.prevStartAngle
                            ? this.fullAngle + s.prevEndAngle - s.prevStartAngle
                            : s.prevEndAngle - s.prevStartAngle,
                        size: h,
                      })),
                      t.attr({ d: r })),
                      0 !== s.dur
                        ? t
                            .animate(
                              s.dur,
                              l.globals.easing,
                              s.animBeginArr[s.i]
                            )
                            .afterAll(function () {
                              ("pie" !== o.chartType &&
                                "donut" !== o.chartType &&
                                "polarArea" !== o.chartType) ||
                                this.animate(
                                  l.config.chart.animations.dynamicAnimation
                                    .speed
                                ).attr({ "stroke-width": o.strokeWidth }),
                                s.i === l.config.series.length - 1 &&
                                  c.animationCompleted(t);
                            })
                            .during(function (l) {
                              (d = f + (n - f) * l),
                                s.animateStartingPos &&
                                  ((d = a + (n - a) * l),
                                  (u = e - a + (i - (e - a)) * l)),
                                (r = o.getPiePath({
                                  me: o,
                                  startAngle: u,
                                  angle: d,
                                  size: h,
                                })),
                                t.node.setAttribute("data:pathOrig", r),
                                t.attr({ d: r });
                            })
                        : ((r = o.getPiePath({
                            me: o,
                            startAngle: u,
                            angle: n,
                            size: h,
                          })),
                          s.isTrack || (l.globals.animationEnded = !0),
                          t.node.setAttribute("data:pathOrig", r),
                          t.attr({ d: r, "stroke-width": o.strokeWidth }));
                  },
                },
                {
                  key: "pieClicked",
                  value: function (t) {
                    var e,
                      i = this.w,
                      n = this,
                      a =
                        n.sliceSizes[t] +
                        (i.config.plotOptions.pie.expandOnClick ? 4 : 0),
                      s = i.globals.dom.Paper.select(
                        ".apexcharts-"
                          .concat(n.chartType.toLowerCase(), "-slice-")
                          .concat(t)
                      ).members[0];
                    if ("true" !== s.attr("data:pieClicked")) {
                      var r = i.globals.dom.baseEl.getElementsByClassName(
                        "apexcharts-pie-area"
                      );
                      Array.prototype.forEach.call(r, function (t) {
                        t.setAttribute("data:pieClicked", "false");
                        var e = t.getAttribute("data:pathOrig");
                        t.setAttribute("d", e);
                      }),
                        s.attr("data:pieClicked", "true");
                      var o = parseInt(s.attr("data:startAngle"), 10),
                        l = parseInt(s.attr("data:angle"), 10);
                      (e = n.getPiePath({
                        me: n,
                        startAngle: o,
                        angle: l,
                        size: a,
                      })),
                        360 !== l && s.plot(e);
                    } else {
                      s.attr({ "data:pieClicked": "false" }),
                        this.revertDataLabelsInner(
                          s.node,
                          this.donutDataLabels
                        );
                      var c = s.attr("data:pathOrig");
                      s.attr({ d: c });
                    }
                  },
                },
                {
                  key: "getChangedPath",
                  value: function (t, e) {
                    var i = "";
                    return (
                      this.dynamicAnim &&
                        this.w.globals.dataChanged &&
                        (i = this.getPiePath({
                          me: this,
                          startAngle: t,
                          angle: e - t,
                          size: this.size,
                        })),
                      i
                    );
                  },
                },
                {
                  key: "getPiePath",
                  value: function (t) {
                    var e = t.me,
                      i = t.startAngle,
                      n = t.angle,
                      a = t.size,
                      s = i,
                      r = (Math.PI * (s - 90)) / 180,
                      o = n + i;
                    Math.ceil(o) >=
                      this.fullAngle +
                        (this.w.config.plotOptions.pie.startAngle %
                          this.fullAngle) &&
                      (o =
                        this.fullAngle +
                        (this.w.config.plotOptions.pie.startAngle %
                          this.fullAngle) -
                        0.01),
                      Math.ceil(o) > this.fullAngle && (o -= this.fullAngle);
                    var l = (Math.PI * (o - 90)) / 180,
                      c = e.centerX + a * Math.cos(r),
                      h = e.centerY + a * Math.sin(r),
                      d = e.centerX + a * Math.cos(l),
                      u = e.centerY + a * Math.sin(l),
                      f = v.polarToCartesian(
                        e.centerX,
                        e.centerY,
                        e.donutSize,
                        o
                      ),
                      p = v.polarToCartesian(
                        e.centerX,
                        e.centerY,
                        e.donutSize,
                        s
                      ),
                      g = n > 180 ? 1 : 0,
                      m = ["M", c, h, "A", a, a, 0, g, 1, d, u];
                    return "donut" === e.chartType
                      ? []
                          .concat(m, [
                            "L",
                            f.x,
                            f.y,
                            "A",
                            e.donutSize,
                            e.donutSize,
                            0,
                            g,
                            0,
                            p.x,
                            p.y,
                            "L",
                            c,
                            h,
                            "z",
                          ])
                          .join(" ")
                      : "pie" === e.chartType || "polarArea" === e.chartType
                      ? []
                          .concat(m, ["L", e.centerX, e.centerY, "L", c, h])
                          .join(" ")
                      : [].concat(m).join(" ");
                  },
                },
                {
                  key: "drawPolarElements",
                  value: function (t) {
                    var e = this.w,
                      i = new Z(this.ctx),
                      n = new w(this.ctx),
                      a = new Et(this.ctx),
                      s = n.group(),
                      r = n.group(),
                      o = i.niceScale(
                        0,
                        Math.ceil(this.maxY),
                        e.config.yaxis[0].tickAmount,
                        0,
                        !0
                      ),
                      l = o.result.reverse(),
                      c = o.result.length;
                    this.maxY = o.niceMax;
                    for (
                      var h = e.globals.radialSize, d = h / (c - 1), u = 0;
                      u < c - 1;
                      u++
                    ) {
                      var f = n.drawCircle(h);
                      if (
                        (f.attr({
                          cx: this.centerX,
                          cy: this.centerY,
                          fill: "none",
                          "stroke-width":
                            e.config.plotOptions.polarArea.rings.strokeWidth,
                          stroke:
                            e.config.plotOptions.polarArea.rings.strokeColor,
                        }),
                        e.config.yaxis[0].show)
                      ) {
                        var p = a.drawYAxisTexts(
                          this.centerX,
                          this.centerY -
                            h +
                            parseInt(
                              e.config.yaxis[0].labels.style.fontSize,
                              10
                            ) /
                              2,
                          u,
                          l[u]
                        );
                        r.add(p);
                      }
                      s.add(f), (h -= d);
                    }
                    this.drawSpokes(t), t.add(s), t.add(r);
                  },
                },
                {
                  key: "renderInnerDataLabels",
                  value: function (t, e) {
                    var i = this.w,
                      n = new w(this.ctx),
                      a = n.group({
                        class: "apexcharts-datalabels-group",
                        transform: "translate("
                          .concat(e.translateX ? e.translateX : 0, ", ")
                          .concat(e.translateY ? e.translateY : 0, ") scale(")
                          .concat(i.config.plotOptions.pie.customScale, ")"),
                      }),
                      s = t.total.show;
                    a.node.style.opacity = e.opacity;
                    var r,
                      o,
                      l = e.centerX,
                      c = e.centerY;
                    r =
                      void 0 === t.name.color
                        ? i.globals.colors[0]
                        : t.name.color;
                    var h = t.name.fontSize,
                      d = t.name.fontFamily,
                      u = t.value.fontWeight;
                    o =
                      void 0 === t.value.color
                        ? i.config.chart.foreColor
                        : t.value.color;
                    var f = t.value.formatter,
                      p = "",
                      g = "";
                    if (
                      (s
                        ? ((r = t.total.color),
                          (h = t.total.fontSize),
                          (d = t.total.fontFamily),
                          (u = t.total.fontWeight),
                          (g = t.total.label),
                          (p = t.total.formatter(i)))
                        : 1 === i.globals.series.length &&
                          ((p = f(i.globals.series[0], i)),
                          (g = i.globals.seriesNames[0])),
                      g && (g = t.name.formatter(g, t.total.show, i)),
                      t.name.show)
                    ) {
                      var m = n.drawText({
                        x: l,
                        y: c + parseFloat(t.name.offsetY),
                        text: g,
                        textAnchor: "middle",
                        foreColor: r,
                        fontSize: h,
                        fontWeight: u,
                        fontFamily: d,
                      });
                      m.node.classList.add("apexcharts-datalabel-label"),
                        a.add(m);
                    }
                    if (t.value.show) {
                      var x = t.name.show
                          ? parseFloat(t.value.offsetY) + 16
                          : t.value.offsetY,
                        v = n.drawText({
                          x: l,
                          y: c + x,
                          text: p,
                          textAnchor: "middle",
                          foreColor: o,
                          fontWeight: t.value.fontWeight,
                          fontSize: t.value.fontSize,
                          fontFamily: t.value.fontFamily,
                        });
                      v.node.classList.add("apexcharts-datalabel-value"),
                        a.add(v);
                    }
                    return a;
                  },
                },
                {
                  key: "printInnerLabels",
                  value: function (t, e, i, n) {
                    var a,
                      s = this.w;
                    n
                      ? (a =
                          void 0 === t.name.color
                            ? s.globals.colors[
                                parseInt(n.parentNode.getAttribute("rel"), 10) -
                                  1
                              ]
                            : t.name.color)
                      : s.globals.series.length > 1 &&
                        t.total.show &&
                        (a = t.total.color);
                    var r = s.globals.dom.baseEl.querySelector(
                        ".apexcharts-datalabel-label"
                      ),
                      o = s.globals.dom.baseEl.querySelector(
                        ".apexcharts-datalabel-value"
                      );
                    (i = (0, t.value.formatter)(i, s)),
                      n ||
                        "function" != typeof t.total.formatter ||
                        (i = t.total.formatter(s));
                    var l = e === t.total.label;
                    (e = t.name.formatter(e, l, s)),
                      null !== r && (r.textContent = e),
                      null !== o && (o.textContent = i),
                      null !== r && (r.style.fill = a);
                  },
                },
                {
                  key: "printDataLabelsInner",
                  value: function (t, e) {
                    var i = this.w,
                      n = t.getAttribute("data:value"),
                      a =
                        i.globals.seriesNames[
                          parseInt(t.parentNode.getAttribute("rel"), 10) - 1
                        ];
                    i.globals.series.length > 1 &&
                      this.printInnerLabels(e, a, n, t);
                    var s = i.globals.dom.baseEl.querySelector(
                      ".apexcharts-datalabels-group"
                    );
                    null !== s && (s.style.opacity = 1);
                  },
                },
                {
                  key: "drawSpokes",
                  value: function (t) {
                    var e = this,
                      i = this.w,
                      n = new w(this.ctx),
                      a = i.config.plotOptions.polarArea.spokes;
                    if (0 !== a.strokeWidth) {
                      for (
                        var s = [], r = 360 / i.globals.series.length, o = 0;
                        o < i.globals.series.length;
                        o++
                      )
                        s.push(
                          v.polarToCartesian(
                            this.centerX,
                            this.centerY,
                            i.globals.radialSize,
                            i.config.plotOptions.pie.startAngle + r * o
                          )
                        );
                      s.forEach(function (i, s) {
                        var r = n.drawLine(
                          i.x,
                          i.y,
                          e.centerX,
                          e.centerY,
                          Array.isArray(a.connectorColors)
                            ? a.connectorColors[s]
                            : a.connectorColors
                        );
                        t.add(r);
                      });
                    }
                  },
                },
                {
                  key: "revertDataLabelsInner",
                  value: function (t, e, i) {
                    var n = this,
                      a = this.w,
                      s = a.globals.dom.baseEl.querySelector(
                        ".apexcharts-datalabels-group"
                      ),
                      r = !1,
                      o = a.globals.dom.baseEl.getElementsByClassName(
                        "apexcharts-pie-area"
                      ),
                      l = function (t) {
                        var i = t.makeSliceOut,
                          a = t.printLabel;
                        Array.prototype.forEach.call(o, function (t) {
                          "true" === t.getAttribute("data:pieClicked") &&
                            (i && (r = !0), a && n.printDataLabelsInner(t, e));
                        });
                      };
                    if (
                      (l({ makeSliceOut: !0, printLabel: !1 }),
                      e.total.show && a.globals.series.length > 1)
                    )
                      r && !e.total.showAlways
                        ? l({ makeSliceOut: !1, printLabel: !0 })
                        : this.printInnerLabels(
                            e,
                            e.total.label,
                            e.total.formatter(a)
                          );
                    else if ((l({ makeSliceOut: !1, printLabel: !0 }), !r))
                      if (
                        a.globals.selectedDataPoints.length &&
                        a.globals.series.length > 1
                      )
                        if (a.globals.selectedDataPoints[0].length > 0) {
                          var c = a.globals.selectedDataPoints[0],
                            h = a.globals.dom.baseEl.querySelector(
                              ".apexcharts-"
                                .concat(this.chartType.toLowerCase(), "-slice-")
                                .concat(c)
                            );
                          this.printDataLabelsInner(h, e);
                        } else
                          s &&
                            a.globals.selectedDataPoints.length &&
                            0 === a.globals.selectedDataPoints[0].length &&
                            (s.style.opacity = 0);
                      else
                        s &&
                          a.globals.series.length > 1 &&
                          (s.style.opacity = 0);
                  },
                },
              ]),
              t
            );
          })(),
          Lt = (function () {
            function t(e) {
              s(this, t),
                (this.ctx = e),
                (this.w = e.w),
                (this.chartType = this.w.config.chart.type),
                (this.initialAnim = this.w.config.chart.animations.enabled),
                (this.dynamicAnim =
                  this.initialAnim &&
                  this.w.config.chart.animations.dynamicAnimation.enabled),
                (this.animDur = 0);
              var i = this.w;
              (this.graphics = new w(this.ctx)),
                (this.lineColorArr =
                  void 0 !== i.globals.stroke.colors
                    ? i.globals.stroke.colors
                    : i.globals.colors),
                (this.defaultSize =
                  i.globals.svgHeight < i.globals.svgWidth
                    ? i.globals.gridHeight + 1.5 * i.globals.goldenPadding
                    : i.globals.gridWidth),
                (this.isLog = i.config.yaxis[0].logarithmic),
                (this.coreUtils = new A(this.ctx)),
                (this.maxValue = this.isLog
                  ? this.coreUtils.getLogVal(i.globals.maxY, 0)
                  : i.globals.maxY),
                (this.minValue = this.isLog
                  ? this.coreUtils.getLogVal(this.w.globals.minY, 0)
                  : i.globals.minY),
                (this.polygons = i.config.plotOptions.radar.polygons),
                (this.strokeWidth = i.config.stroke.show
                  ? i.config.stroke.width
                  : 0),
                (this.size =
                  this.defaultSize / 2.1 -
                  this.strokeWidth -
                  i.config.chart.dropShadow.blur),
                i.config.xaxis.labels.show &&
                  (this.size = this.size - i.globals.xAxisLabelsWidth / 1.75),
                void 0 !== i.config.plotOptions.radar.size &&
                  (this.size = i.config.plotOptions.radar.size),
                (this.dataRadiusOfPercent = []),
                (this.dataRadius = []),
                (this.angleArr = []),
                (this.yaxisLabelsTextsPos = []);
            }
            return (
              o(t, [
                {
                  key: "draw",
                  value: function (t) {
                    var e = this,
                      i = this.w,
                      n = new P(this.ctx),
                      a = [],
                      s = new N(this.ctx);
                    t.length &&
                      (this.dataPointsLen =
                        t[i.globals.maxValsInArrayIndex].length),
                      (this.disAngle = (2 * Math.PI) / this.dataPointsLen);
                    var r = i.globals.gridWidth / 2,
                      o = i.globals.gridHeight / 2,
                      l = r + i.config.plotOptions.radar.offsetX,
                      c = o + i.config.plotOptions.radar.offsetY,
                      d = this.graphics.group({
                        class: "apexcharts-radar-series apexcharts-plot-series",
                        transform: "translate("
                          .concat(l || 0, ", ")
                          .concat(c || 0, ")"),
                      }),
                      u = [],
                      f = null,
                      p = null;
                    if (
                      ((this.yaxisLabels = this.graphics.group({
                        class: "apexcharts-yaxis",
                      })),
                      t.forEach(function (t, r) {
                        var o = t.length === i.globals.dataPoints,
                          l = e.graphics.group().attr({
                            class: "apexcharts-series",
                            "data:longestSeries": o,
                            seriesName: v.escapeString(
                              i.globals.seriesNames[r]
                            ),
                            rel: r + 1,
                            "data:realIndex": r,
                          });
                        (e.dataRadiusOfPercent[r] = []),
                          (e.dataRadius[r] = []),
                          (e.angleArr[r] = []),
                          t.forEach(function (t, i) {
                            var n = Math.abs(e.maxValue - e.minValue);
                            (t += Math.abs(e.minValue)),
                              e.isLog && (t = e.coreUtils.getLogVal(t, 0)),
                              (e.dataRadiusOfPercent[r][i] = t / n),
                              (e.dataRadius[r][i] =
                                e.dataRadiusOfPercent[r][i] * e.size),
                              (e.angleArr[r][i] = i * e.disAngle);
                          }),
                          (u = e.getDataPointsPos(
                            e.dataRadius[r],
                            e.angleArr[r]
                          ));
                        var c = e.createPaths(u, { x: 0, y: 0 });
                        (f = e.graphics.group({
                          class:
                            "apexcharts-series-markers-wrap apexcharts-element-hidden",
                        })),
                          (p = e.graphics.group({
                            class: "apexcharts-datalabels",
                            "data:realIndex": r,
                          })),
                          i.globals.delayedElements.push({
                            el: f.node,
                            index: r,
                          });
                        var d = {
                            i: r,
                            realIndex: r,
                            animationDelay: r,
                            initialSpeed: i.config.chart.animations.speed,
                            dataChangeSpeed:
                              i.config.chart.animations.dynamicAnimation.speed,
                            className: "apexcharts-radar",
                            shouldClipToGrid: !1,
                            bindEventsOnPaths: !1,
                            stroke: i.globals.stroke.colors[r],
                            strokeLineCap: i.config.stroke.lineCap,
                          },
                          g = null;
                        i.globals.previousPaths.length > 0 &&
                          (g = e.getPreviousPath(r));
                        for (var m = 0; m < c.linePathsTo.length; m++) {
                          var x = e.graphics.renderPaths(
                            h(
                              h({}, d),
                              {},
                              {
                                pathFrom: null === g ? c.linePathsFrom[m] : g,
                                pathTo: c.linePathsTo[m],
                                strokeWidth: Array.isArray(e.strokeWidth)
                                  ? e.strokeWidth[r]
                                  : e.strokeWidth,
                                fill: "none",
                                drawShadow: !1,
                              }
                            )
                          );
                          l.add(x);
                          var b = n.fillPath({ seriesNumber: r }),
                            w = e.graphics.renderPaths(
                              h(
                                h({}, d),
                                {},
                                {
                                  pathFrom: null === g ? c.areaPathsFrom[m] : g,
                                  pathTo: c.areaPathsTo[m],
                                  strokeWidth: 0,
                                  fill: b,
                                  drawShadow: !1,
                                }
                              )
                            );
                          if (i.config.chart.dropShadow.enabled) {
                            var k = new y(e.ctx),
                              S = i.config.chart.dropShadow;
                            k.dropShadow(
                              w,
                              Object.assign({}, S, { noUserSpaceOnUse: !0 }),
                              r
                            );
                          }
                          l.add(w);
                        }
                        t.forEach(function (t, n) {
                          var a = new I(e.ctx).getMarkerConfig({
                              cssClass: "apexcharts-marker",
                              seriesIndex: r,
                              dataPointIndex: n,
                            }),
                            o = e.graphics.drawMarker(u[n].x, u[n].y, a);
                          o.attr("rel", n),
                            o.attr("j", n),
                            o.attr("index", r),
                            o.node.setAttribute("default-marker-size", a.pSize);
                          var c = e.graphics.group({
                            class: "apexcharts-series-markers",
                          });
                          c && c.add(o), f.add(c), l.add(f);
                          var d = i.config.dataLabels;
                          if (d.enabled) {
                            var g = d.formatter(i.globals.series[r][n], {
                              seriesIndex: r,
                              dataPointIndex: n,
                              w: i,
                            });
                            s.plotDataLabelsText({
                              x: u[n].x,
                              y: u[n].y,
                              text: g,
                              textAnchor: "middle",
                              i: r,
                              j: r,
                              parent: p,
                              offsetCorrection: !1,
                              dataLabelsConfig: h({}, d),
                            });
                          }
                          l.add(p);
                        }),
                          a.push(l);
                      }),
                      this.drawPolygons({ parent: d }),
                      i.config.xaxis.labels.show)
                    ) {
                      var g = this.drawXAxisTexts();
                      d.add(g);
                    }
                    return (
                      a.forEach(function (t) {
                        d.add(t);
                      }),
                      d.add(this.yaxisLabels),
                      d
                    );
                  },
                },
                {
                  key: "drawPolygons",
                  value: function (t) {
                    for (
                      var e = this,
                        i = this.w,
                        n = t.parent,
                        a = new Et(this.ctx),
                        s = i.globals.yAxisScale[0].result.reverse(),
                        r = s.length,
                        o = [],
                        l = this.size / (r - 1),
                        c = 0;
                      c < r;
                      c++
                    )
                      o[c] = l * c;
                    o.reverse();
                    var h = [],
                      d = [];
                    o.forEach(function (t, i) {
                      var n = v.getPolygonPos(t, e.dataPointsLen),
                        a = "";
                      n.forEach(function (t, n) {
                        if (0 === i) {
                          var s = e.graphics.drawLine(
                            t.x,
                            t.y,
                            0,
                            0,
                            Array.isArray(e.polygons.connectorColors)
                              ? e.polygons.connectorColors[n]
                              : e.polygons.connectorColors
                          );
                          d.push(s);
                        }
                        0 === n &&
                          e.yaxisLabelsTextsPos.push({ x: t.x, y: t.y }),
                          (a += t.x + "," + t.y + " ");
                      }),
                        h.push(a);
                    }),
                      h.forEach(function (t, a) {
                        var s = e.polygons.strokeColors,
                          r = e.polygons.strokeWidth,
                          o = e.graphics.drawPolygon(
                            t,
                            Array.isArray(s) ? s[a] : s,
                            Array.isArray(r) ? r[a] : r,
                            i.globals.radarPolygons.fill.colors[a]
                          );
                        n.add(o);
                      }),
                      d.forEach(function (t) {
                        n.add(t);
                      }),
                      i.config.yaxis[0].show &&
                        this.yaxisLabelsTextsPos.forEach(function (t, i) {
                          var n = a.drawYAxisTexts(t.x, t.y, i, s[i]);
                          e.yaxisLabels.add(n);
                        });
                  },
                },
                {
                  key: "drawXAxisTexts",
                  value: function () {
                    var t = this,
                      e = this.w,
                      i = e.config.xaxis.labels,
                      n = this.graphics.group({ class: "apexcharts-xaxis" }),
                      a = v.getPolygonPos(this.size, this.dataPointsLen);
                    return (
                      e.globals.labels.forEach(function (s, r) {
                        var o = e.config.xaxis.labels.formatter,
                          l = new N(t.ctx);
                        if (a[r]) {
                          var c = t.getTextPos(a[r], t.size),
                            d = o(s, {
                              seriesIndex: -1,
                              dataPointIndex: r,
                              w: e,
                            });
                          l.plotDataLabelsText({
                            x: c.newX,
                            y: c.newY,
                            text: d,
                            textAnchor: c.textAnchor,
                            i: r,
                            j: r,
                            parent: n,
                            color:
                              Array.isArray(i.style.colors) && i.style.colors[r]
                                ? i.style.colors[r]
                                : "#a8a8a8",
                            dataLabelsConfig: h(
                              {
                                textAnchor: c.textAnchor,
                                dropShadow: { enabled: !1 },
                              },
                              i
                            ),
                            offsetCorrection: !1,
                          });
                        }
                      }),
                      n
                    );
                  },
                },
                {
                  key: "createPaths",
                  value: function (t, e) {
                    var i = this,
                      n = [],
                      a = [],
                      s = [],
                      r = [];
                    if (t.length) {
                      (a = [this.graphics.move(e.x, e.y)]),
                        (r = [this.graphics.move(e.x, e.y)]);
                      var o = this.graphics.move(t[0].x, t[0].y),
                        l = this.graphics.move(t[0].x, t[0].y);
                      t.forEach(function (e, n) {
                        (o += i.graphics.line(e.x, e.y)),
                          (l += i.graphics.line(e.x, e.y)),
                          n === t.length - 1 && ((o += "Z"), (l += "Z"));
                      }),
                        n.push(o),
                        s.push(l);
                    }
                    return {
                      linePathsFrom: a,
                      linePathsTo: n,
                      areaPathsFrom: r,
                      areaPathsTo: s,
                    };
                  },
                },
                {
                  key: "getTextPos",
                  value: function (t, e) {
                    var i = "middle",
                      n = t.x,
                      a = t.y;
                    return (
                      Math.abs(t.x) >= 10
                        ? t.x > 0
                          ? ((i = "start"), (n += 10))
                          : t.x < 0 && ((i = "end"), (n -= 10))
                        : (i = "middle"),
                      Math.abs(t.y) >= e - 10 &&
                        (t.y < 0 ? (a -= 10) : t.y > 0 && (a += 10)),
                      { textAnchor: i, newX: n, newY: a }
                    );
                  },
                },
                {
                  key: "getPreviousPath",
                  value: function (t) {
                    for (
                      var e = this.w, i = null, n = 0;
                      n < e.globals.previousPaths.length;
                      n++
                    ) {
                      var a = e.globals.previousPaths[n];
                      a.paths.length > 0 &&
                        parseInt(a.realIndex, 10) === parseInt(t, 10) &&
                        void 0 !== e.globals.previousPaths[n].paths[0] &&
                        (i = e.globals.previousPaths[n].paths[0].d);
                    }
                    return i;
                  },
                },
                {
                  key: "getDataPointsPos",
                  value: function (t, e) {
                    var i =
                      arguments.length > 2 && void 0 !== arguments[2]
                        ? arguments[2]
                        : this.dataPointsLen;
                    (t = t || []), (e = e || []);
                    for (var n = [], a = 0; a < i; a++) {
                      var s = {};
                      (s.x = t[a] * Math.sin(e[a])),
                        (s.y = -t[a] * Math.cos(e[a])),
                        n.push(s);
                    }
                    return n;
                  },
                },
              ]),
              t
            );
          })(),
          _t = (function (t) {
            d(i, Tt);
            var e = g(i);
            function i(t) {
              var n;
              s(this, i),
                ((n = e.call(this, t)).ctx = t),
                (n.w = t.w),
                (n.animBeginArr = [0]),
                (n.animDur = 0);
              var a = n.w;
              return (
                (n.startAngle = a.config.plotOptions.radialBar.startAngle),
                (n.endAngle = a.config.plotOptions.radialBar.endAngle),
                (n.totalAngle = Math.abs(
                  a.config.plotOptions.radialBar.endAngle -
                    a.config.plotOptions.radialBar.startAngle
                )),
                (n.trackStartAngle =
                  a.config.plotOptions.radialBar.track.startAngle),
                (n.trackEndAngle =
                  a.config.plotOptions.radialBar.track.endAngle),
                (n.radialDataLabels =
                  a.config.plotOptions.radialBar.dataLabels),
                n.trackStartAngle || (n.trackStartAngle = n.startAngle),
                n.trackEndAngle || (n.trackEndAngle = n.endAngle),
                360 === n.endAngle && (n.endAngle = 359.99),
                (n.margin = parseInt(
                  a.config.plotOptions.radialBar.track.margin,
                  10
                )),
                n
              );
            }
            return (
              o(i, [
                {
                  key: "draw",
                  value: function (t) {
                    var e = this.w,
                      i = new w(this.ctx),
                      n = i.group({ class: "apexcharts-radialbar" });
                    if (e.globals.noData) return n;
                    var a = i.group(),
                      s = this.defaultSize / 2,
                      r = e.globals.gridWidth / 2,
                      o = this.defaultSize / 2.05;
                    e.config.chart.sparkline.enabled ||
                      (o =
                        o -
                        e.config.stroke.width -
                        e.config.chart.dropShadow.blur);
                    var l = e.globals.fill.colors;
                    if (e.config.plotOptions.radialBar.track.show) {
                      var c = this.drawTracks({
                        size: o,
                        centerX: r,
                        centerY: s,
                        colorArr: l,
                        series: t,
                      });
                      a.add(c);
                    }
                    var h = this.drawArcs({
                        size: o,
                        centerX: r,
                        centerY: s,
                        colorArr: l,
                        series: t,
                      }),
                      d = 360;
                    e.config.plotOptions.radialBar.startAngle < 0 &&
                      (d = this.totalAngle);
                    var u = (360 - d) / 360;
                    if (
                      ((e.globals.radialSize = o - o * u),
                      this.radialDataLabels.value.show)
                    ) {
                      var f = Math.max(
                        this.radialDataLabels.value.offsetY,
                        this.radialDataLabels.name.offsetY
                      );
                      e.globals.radialSize += f * u;
                    }
                    return (
                      a.add(h.g),
                      "front" ===
                        e.config.plotOptions.radialBar.hollow.position &&
                        (h.g.add(h.elHollow),
                        h.dataLabels && h.g.add(h.dataLabels)),
                      n.add(a),
                      n
                    );
                  },
                },
                {
                  key: "drawTracks",
                  value: function (t) {
                    var e = this.w,
                      i = new w(this.ctx),
                      n = i.group({ class: "apexcharts-tracks" }),
                      a = new y(this.ctx),
                      s = new P(this.ctx),
                      r = this.getStrokeWidth(t);
                    t.size = t.size - r / 2;
                    for (var o = 0; o < t.series.length; o++) {
                      var l = i.group({
                        class: "apexcharts-radialbar-track apexcharts-track",
                      });
                      n.add(l),
                        l.attr({ rel: o + 1 }),
                        (t.size = t.size - r - this.margin);
                      var c = e.config.plotOptions.radialBar.track,
                        h = s.fillPath({
                          seriesNumber: 0,
                          size: t.size,
                          fillColors: Array.isArray(c.background)
                            ? c.background[o]
                            : c.background,
                          solid: !0,
                        }),
                        d = this.trackStartAngle,
                        u = this.trackEndAngle;
                      Math.abs(u) + Math.abs(d) >= 360 &&
                        (u = 360 - Math.abs(this.startAngle) - 0.1);
                      var f = i.drawPath({
                        d: "",
                        stroke: h,
                        strokeWidth: (r * parseInt(c.strokeWidth, 10)) / 100,
                        fill: "none",
                        strokeOpacity: c.opacity,
                        classes: "apexcharts-radialbar-area",
                      });
                      if (c.dropShadow.enabled) {
                        var p = c.dropShadow;
                        a.dropShadow(f, p);
                      }
                      l.add(f),
                        f.attr("id", "apexcharts-radialbarTrack-" + o),
                        this.animatePaths(f, {
                          centerX: t.centerX,
                          centerY: t.centerY,
                          endAngle: u,
                          startAngle: d,
                          size: t.size,
                          i: o,
                          totalItems: 2,
                          animBeginArr: 0,
                          dur: 0,
                          isTrack: !0,
                          easing: e.globals.easing,
                        });
                    }
                    return n;
                  },
                },
                {
                  key: "drawArcs",
                  value: function (t) {
                    var e = this.w,
                      i = new w(this.ctx),
                      n = new P(this.ctx),
                      a = new y(this.ctx),
                      s = i.group(),
                      r = this.getStrokeWidth(t);
                    t.size = t.size - r / 2;
                    var o = e.config.plotOptions.radialBar.hollow.background,
                      l =
                        t.size -
                        r * t.series.length -
                        this.margin * t.series.length -
                        (r *
                          parseInt(
                            e.config.plotOptions.radialBar.track.strokeWidth,
                            10
                          )) /
                          100 /
                          2,
                      c = l - e.config.plotOptions.radialBar.hollow.margin;
                    void 0 !== e.config.plotOptions.radialBar.hollow.image &&
                      (o = this.drawHollowImage(t, s, l, o));
                    var h = this.drawHollow({
                      size: c,
                      centerX: t.centerX,
                      centerY: t.centerY,
                      fill: o || "transparent",
                    });
                    if (
                      e.config.plotOptions.radialBar.hollow.dropShadow.enabled
                    ) {
                      var d = e.config.plotOptions.radialBar.hollow.dropShadow;
                      a.dropShadow(h, d);
                    }
                    var u = 1;
                    !this.radialDataLabels.total.show &&
                      e.globals.series.length > 1 &&
                      (u = 0);
                    var f = null;
                    this.radialDataLabels.show &&
                      (f = this.renderInnerDataLabels(this.radialDataLabels, {
                        hollowSize: l,
                        centerX: t.centerX,
                        centerY: t.centerY,
                        opacity: u,
                      })),
                      "back" ===
                        e.config.plotOptions.radialBar.hollow.position &&
                        (s.add(h), f && s.add(f));
                    var p = !1;
                    e.config.plotOptions.radialBar.inverseOrder && (p = !0);
                    for (
                      var g = p ? t.series.length - 1 : 0;
                      p ? g >= 0 : g < t.series.length;
                      p ? g-- : g++
                    ) {
                      var m = i.group({
                        class: "apexcharts-series apexcharts-radial-series",
                        seriesName: v.escapeString(e.globals.seriesNames[g]),
                      });
                      s.add(m),
                        m.attr({ rel: g + 1, "data:realIndex": g }),
                        this.ctx.series.addCollapsedClassToSeries(m, g),
                        (t.size = t.size - r - this.margin);
                      var x = n.fillPath({
                          seriesNumber: g,
                          size: t.size,
                          value: t.series[g],
                        }),
                        b = this.startAngle,
                        k = void 0,
                        S =
                          v.negToZero(t.series[g] > 100 ? 100 : t.series[g]) /
                          100,
                        A = Math.round(this.totalAngle * S) + this.startAngle,
                        C = void 0;
                      e.globals.dataChanged &&
                        ((k = this.startAngle),
                        (C =
                          Math.round(
                            (this.totalAngle *
                              v.negToZero(e.globals.previousPaths[g])) /
                              100
                          ) + k)),
                        Math.abs(A) + Math.abs(b) >= 360 && (A -= 0.01),
                        Math.abs(C) + Math.abs(k) >= 360 && (C -= 0.01);
                      var E = A - b,
                        T = Array.isArray(e.config.stroke.dashArray)
                          ? e.config.stroke.dashArray[g]
                          : e.config.stroke.dashArray,
                        L = i.drawPath({
                          d: "",
                          stroke: x,
                          strokeWidth: r,
                          fill: "none",
                          fillOpacity: e.config.fill.opacity,
                          classes:
                            "apexcharts-radialbar-area apexcharts-radialbar-slice-" +
                            g,
                          strokeDashArray: T,
                        });
                      if (
                        (w.setAttrs(L.node, {
                          "data:angle": E,
                          "data:value": t.series[g],
                        }),
                        e.config.chart.dropShadow.enabled)
                      ) {
                        var _ = e.config.chart.dropShadow;
                        a.dropShadow(L, _, g);
                      }
                      a.setSelectionFilter(L, 0, g),
                        this.addListeners(L, this.radialDataLabels),
                        m.add(L),
                        L.attr({ index: 0, j: g });
                      var I = 0;
                      !this.initialAnim ||
                        e.globals.resized ||
                        e.globals.dataChanged ||
                        ((I =
                          ((A - b) / 360) * e.config.chart.animations.speed),
                        (this.animDur =
                          I / (1.2 * t.series.length) + this.animDur),
                        this.animBeginArr.push(this.animDur)),
                        e.globals.dataChanged &&
                          ((I =
                            ((A - b) / 360) *
                            e.config.chart.animations.dynamicAnimation.speed),
                          (this.animDur =
                            I / (1.2 * t.series.length) + this.animDur),
                          this.animBeginArr.push(this.animDur)),
                        this.animatePaths(L, {
                          centerX: t.centerX,
                          centerY: t.centerY,
                          endAngle: A,
                          startAngle: b,
                          prevEndAngle: C,
                          prevStartAngle: k,
                          size: t.size,
                          i: g,
                          totalItems: 2,
                          animBeginArr: this.animBeginArr,
                          dur: I,
                          shouldSetPrevPaths: !0,
                          easing: e.globals.easing,
                        });
                    }
                    return { g: s, elHollow: h, dataLabels: f };
                  },
                },
                {
                  key: "drawHollow",
                  value: function (t) {
                    var e = new w(this.ctx).drawCircle(2 * t.size);
                    return (
                      e.attr({
                        class: "apexcharts-radialbar-hollow",
                        cx: t.centerX,
                        cy: t.centerY,
                        r: t.size,
                        fill: t.fill,
                      }),
                      e
                    );
                  },
                },
                {
                  key: "drawHollowImage",
                  value: function (t, e, i, n) {
                    var a = this.w,
                      s = new P(this.ctx),
                      r = v.randomId(),
                      o = a.config.plotOptions.radialBar.hollow.image;
                    if (a.config.plotOptions.radialBar.hollow.imageClipped)
                      s.clippedImgArea({
                        width: i,
                        height: i,
                        image: o,
                        patternID: "pattern".concat(a.globals.cuid).concat(r),
                      }),
                        (n = "url(#pattern"
                          .concat(a.globals.cuid)
                          .concat(r, ")"));
                    else {
                      var l = a.config.plotOptions.radialBar.hollow.imageWidth,
                        c = a.config.plotOptions.radialBar.hollow.imageHeight;
                      if (void 0 === l && void 0 === c) {
                        var h = a.globals.dom.Paper.image(o).loaded(function (
                          e
                        ) {
                          this.move(
                            t.centerX -
                              e.width / 2 +
                              a.config.plotOptions.radialBar.hollow
                                .imageOffsetX,
                            t.centerY -
                              e.height / 2 +
                              a.config.plotOptions.radialBar.hollow.imageOffsetY
                          );
                        });
                        e.add(h);
                      } else {
                        var d = a.globals.dom.Paper.image(o).loaded(function (
                          e
                        ) {
                          this.move(
                            t.centerX -
                              l / 2 +
                              a.config.plotOptions.radialBar.hollow
                                .imageOffsetX,
                            t.centerY -
                              c / 2 +
                              a.config.plotOptions.radialBar.hollow.imageOffsetY
                          ),
                            this.size(l, c);
                        });
                        e.add(d);
                      }
                    }
                    return n;
                  },
                },
                {
                  key: "getStrokeWidth",
                  value: function (t) {
                    var e = this.w;
                    return (
                      (t.size *
                        (100 -
                          parseInt(
                            e.config.plotOptions.radialBar.hollow.size,
                            10
                          ))) /
                        100 /
                        (t.series.length + 1) -
                      this.margin
                    );
                  },
                },
              ]),
              i
            );
          })(),
          Pt = (function () {
            function t(e) {
              s(this, t), (this.w = e.w), (this.lineCtx = e);
            }
            return (
              o(t, [
                {
                  key: "sameValueSeriesFix",
                  value: function (t, e) {
                    var i = this.w;
                    if (
                      "line" === i.config.chart.type &&
                      ("gradient" === i.config.fill.type ||
                        "gradient" === i.config.fill.type[t]) &&
                      new A(this.lineCtx.ctx, i).seriesHaveSameValues(t)
                    ) {
                      var n = e[t].slice();
                      (n[n.length - 1] = n[n.length - 1] + 1e-6), (e[t] = n);
                    }
                    return e;
                  },
                },
                {
                  key: "calculatePoints",
                  value: function (t) {
                    var e = t.series,
                      i = t.realIndex,
                      n = t.x,
                      a = t.y,
                      s = t.i,
                      r = t.j,
                      o = t.prevY,
                      l = this.w,
                      c = [],
                      h = [];
                    if (0 === r) {
                      var d =
                        this.lineCtx.categoryAxisCorrection +
                        l.config.markers.offsetX;
                      l.globals.isXNumeric &&
                        (d =
                          (l.globals.seriesX[i][0] - l.globals.minX) /
                            this.lineCtx.xRatio +
                          l.config.markers.offsetX),
                        c.push(d),
                        h.push(
                          v.isNumber(e[s][0])
                            ? o + l.config.markers.offsetY
                            : null
                        ),
                        c.push(n + l.config.markers.offsetX),
                        h.push(
                          v.isNumber(e[s][r + 1])
                            ? a + l.config.markers.offsetY
                            : null
                        );
                    } else
                      c.push(n + l.config.markers.offsetX),
                        h.push(
                          v.isNumber(e[s][r + 1])
                            ? a + l.config.markers.offsetY
                            : null
                        );
                    return { x: c, y: h };
                  },
                },
                {
                  key: "checkPreviousPaths",
                  value: function (t) {
                    for (
                      var e = t.pathFromLine,
                        i = t.pathFromArea,
                        n = t.realIndex,
                        a = this.w,
                        s = 0;
                      s < a.globals.previousPaths.length;
                      s++
                    ) {
                      var r = a.globals.previousPaths[s];
                      ("line" === r.type || "area" === r.type) &&
                        r.paths.length > 0 &&
                        parseInt(r.realIndex, 10) === parseInt(n, 10) &&
                        ("line" === r.type
                          ? ((this.lineCtx.appendPathFrom = !1),
                            (e = a.globals.previousPaths[s].paths[0].d))
                          : "area" === r.type &&
                            ((this.lineCtx.appendPathFrom = !1),
                            (i = a.globals.previousPaths[s].paths[0].d),
                            a.config.stroke.show &&
                              a.globals.previousPaths[s].paths[1] &&
                              (e = a.globals.previousPaths[s].paths[1].d)));
                    }
                    return { pathFromLine: e, pathFromArea: i };
                  },
                },
                {
                  key: "determineFirstPrevY",
                  value: function (t) {
                    var e = t.i,
                      i = t.series,
                      n = t.prevY,
                      a = t.lineYPosition,
                      s = this.w;
                    if (void 0 !== i[e][0])
                      n =
                        (a =
                          s.config.chart.stacked && e > 0
                            ? this.lineCtx.prevSeriesY[e - 1][0]
                            : this.lineCtx.zeroY) -
                        i[e][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] +
                        2 *
                          (this.lineCtx.isReversed
                            ? i[e][0] /
                              this.lineCtx.yRatio[this.lineCtx.yaxisIndex]
                            : 0);
                    else if (
                      s.config.chart.stacked &&
                      e > 0 &&
                      void 0 === i[e][0]
                    )
                      for (var r = e - 1; r >= 0; r--)
                        if (null !== i[r][0] && void 0 !== i[r][0]) {
                          n = a = this.lineCtx.prevSeriesY[r][0];
                          break;
                        }
                    return { prevY: n, lineYPosition: a };
                  },
                },
              ]),
              t
            );
          })(),
          It = (function () {
            function t(e, i, n) {
              s(this, t),
                (this.ctx = e),
                (this.w = e.w),
                (this.xyRatios = i),
                (this.pointsChart =
                  !(
                    "bubble" !== this.w.config.chart.type &&
                    "scatter" !== this.w.config.chart.type
                  ) || n),
                (this.scatter = new M(this.ctx)),
                (this.noNegatives = this.w.globals.minX === Number.MAX_VALUE),
                (this.lineHelpers = new Pt(this)),
                (this.markers = new I(this.ctx)),
                (this.prevSeriesY = []),
                (this.categoryAxisCorrection = 0),
                (this.yaxisIndex = 0);
            }
            return (
              o(t, [
                {
                  key: "draw",
                  value: function (t, e, i) {
                    var n = this.w,
                      a = new w(this.ctx),
                      s = n.globals.comboCharts ? e : n.config.chart.type,
                      r = a.group({
                        class: "apexcharts-".concat(
                          s,
                          "-series apexcharts-plot-series"
                        ),
                      }),
                      o = new A(this.ctx, n);
                    (this.yRatio = this.xyRatios.yRatio),
                      (this.zRatio = this.xyRatios.zRatio),
                      (this.xRatio = this.xyRatios.xRatio),
                      (this.baseLineY = this.xyRatios.baseLineY),
                      (t = o.getLogSeries(t)),
                      (this.yRatio = o.getLogYRatios(this.yRatio));
                    for (var l = [], c = 0; c < t.length; c++) {
                      t = this.lineHelpers.sameValueSeriesFix(c, t);
                      var h = n.globals.comboCharts ? i[c] : c;
                      this._initSerieVariables(t, c, h);
                      var d = [],
                        u = [],
                        f =
                          n.globals.padHorizontal + this.categoryAxisCorrection;
                      this.ctx.series.addCollapsedClassToSeries(
                        this.elSeries,
                        h
                      ),
                        n.globals.isXNumeric &&
                          n.globals.seriesX.length > 0 &&
                          (f =
                            (n.globals.seriesX[h][0] - n.globals.minX) /
                            this.xRatio),
                        u.push(f);
                      var p,
                        g = f,
                        m = g,
                        x = this.zeroY;
                      (x = this.lineHelpers.determineFirstPrevY({
                        i: c,
                        series: t,
                        prevY: x,
                        lineYPosition: 0,
                      }).prevY),
                        d.push(x),
                        (p = x);
                      var v = this._calculatePathsFrom({
                          series: t,
                          i: c,
                          realIndex: h,
                          prevX: m,
                          prevY: x,
                        }),
                        b = this._iterateOverDataPoints({
                          series: t,
                          realIndex: h,
                          i: c,
                          x: f,
                          y: 1,
                          pX: g,
                          pY: p,
                          pathsFrom: v,
                          linePaths: [],
                          areaPaths: [],
                          seriesIndex: i,
                          lineYPosition: 0,
                          xArrj: u,
                          yArrj: d,
                        });
                      this._handlePaths({
                        type: s,
                        realIndex: h,
                        i: c,
                        paths: b,
                      }),
                        this.elSeries.add(this.elPointsMain),
                        this.elSeries.add(this.elDataLabelsWrap),
                        l.push(this.elSeries);
                    }
                    if (n.config.chart.stacked)
                      for (var y = l.length; y > 0; y--) r.add(l[y - 1]);
                    else for (var k = 0; k < l.length; k++) r.add(l[k]);
                    return r;
                  },
                },
                {
                  key: "_initSerieVariables",
                  value: function (t, e, i) {
                    var n = this.w,
                      a = new w(this.ctx);
                    (this.xDivision =
                      n.globals.gridWidth /
                      (n.globals.dataPoints -
                        ("on" === n.config.xaxis.tickPlacement ? 1 : 0))),
                      (this.strokeWidth = Array.isArray(n.config.stroke.width)
                        ? n.config.stroke.width[i]
                        : n.config.stroke.width),
                      this.yRatio.length > 1 && (this.yaxisIndex = i),
                      (this.isReversed =
                        n.config.yaxis[this.yaxisIndex] &&
                        n.config.yaxis[this.yaxisIndex].reversed),
                      (this.zeroY =
                        n.globals.gridHeight -
                        this.baseLineY[this.yaxisIndex] -
                        (this.isReversed ? n.globals.gridHeight : 0) +
                        (this.isReversed
                          ? 2 * this.baseLineY[this.yaxisIndex]
                          : 0)),
                      (this.areaBottomY = this.zeroY),
                      (this.zeroY > n.globals.gridHeight ||
                        "end" === n.config.plotOptions.area.fillTo) &&
                        (this.areaBottomY = n.globals.gridHeight),
                      (this.categoryAxisCorrection = this.xDivision / 2),
                      (this.elSeries = a.group({
                        class: "apexcharts-series",
                        seriesName: v.escapeString(n.globals.seriesNames[i]),
                      })),
                      (this.elPointsMain = a.group({
                        class: "apexcharts-series-markers-wrap",
                        "data:realIndex": i,
                      })),
                      (this.elDataLabelsWrap = a.group({
                        class: "apexcharts-datalabels",
                        "data:realIndex": i,
                      }));
                    var s = t[e].length === n.globals.dataPoints;
                    this.elSeries.attr({
                      "data:longestSeries": s,
                      rel: e + 1,
                      "data:realIndex": i,
                    }),
                      (this.appendPathFrom = !0);
                  },
                },
                {
                  key: "_calculatePathsFrom",
                  value: function (t) {
                    var e,
                      i,
                      n,
                      a,
                      s = t.series,
                      r = t.i,
                      o = t.realIndex,
                      l = t.prevX,
                      c = t.prevY,
                      h = this.w,
                      d = new w(this.ctx);
                    if (null === s[r][0]) {
                      for (var u = 0; u < s[r].length; u++)
                        if (null !== s[r][u]) {
                          (l = this.xDivision * u),
                            (c =
                              this.zeroY -
                              s[r][u] / this.yRatio[this.yaxisIndex]),
                            (e = d.move(l, c)),
                            (i = d.move(l, this.areaBottomY));
                          break;
                        }
                    } else
                      (e = d.move(l, c)),
                        (i = d.move(l, this.areaBottomY) + d.line(l, c));
                    if (
                      ((n = d.move(-1, this.zeroY) + d.line(-1, this.zeroY)),
                      (a = d.move(-1, this.zeroY) + d.line(-1, this.zeroY)),
                      h.globals.previousPaths.length > 0)
                    ) {
                      var f = this.lineHelpers.checkPreviousPaths({
                        pathFromLine: n,
                        pathFromArea: a,
                        realIndex: o,
                      });
                      (n = f.pathFromLine), (a = f.pathFromArea);
                    }
                    return {
                      prevX: l,
                      prevY: c,
                      linePath: e,
                      areaPath: i,
                      pathFromLine: n,
                      pathFromArea: a,
                    };
                  },
                },
                {
                  key: "_handlePaths",
                  value: function (t) {
                    var e = t.type,
                      i = t.realIndex,
                      n = t.i,
                      a = t.paths,
                      s = this.w,
                      r = new w(this.ctx),
                      o = new P(this.ctx);
                    this.prevSeriesY.push(a.yArrj),
                      (s.globals.seriesXvalues[i] = a.xArrj),
                      (s.globals.seriesYvalues[i] = a.yArrj);
                    var l = s.config.forecastDataPoints;
                    if (l.count > 0) {
                      var c =
                          s.globals.seriesXvalues[i][
                            s.globals.seriesXvalues[i].length - l.count - 1
                          ],
                        d = r.drawRect(
                          c,
                          0,
                          s.globals.gridWidth,
                          s.globals.gridHeight,
                          0
                        );
                      s.globals.dom.elForecastMask.appendChild(d.node);
                      var u = r.drawRect(0, 0, c, s.globals.gridHeight, 0);
                      s.globals.dom.elNonForecastMask.appendChild(u.node);
                    }
                    this.pointsChart ||
                      s.globals.delayedElements.push({
                        el: this.elPointsMain.node,
                        index: i,
                      });
                    var f = {
                      i: n,
                      realIndex: i,
                      animationDelay: n,
                      initialSpeed: s.config.chart.animations.speed,
                      dataChangeSpeed:
                        s.config.chart.animations.dynamicAnimation.speed,
                      className: "apexcharts-".concat(e),
                    };
                    if ("area" === e)
                      for (
                        var p = o.fillPath({ seriesNumber: i }), g = 0;
                        g < a.areaPaths.length;
                        g++
                      ) {
                        var m = r.renderPaths(
                          h(
                            h({}, f),
                            {},
                            {
                              pathFrom: a.pathFromArea,
                              pathTo: a.areaPaths[g],
                              stroke: "none",
                              strokeWidth: 0,
                              strokeLineCap: null,
                              fill: p,
                            }
                          )
                        );
                        this.elSeries.add(m);
                      }
                    if (s.config.stroke.show && !this.pointsChart) {
                      var x;
                      x =
                        "line" === e
                          ? o.fillPath({ seriesNumber: i, i: n })
                          : s.globals.stroke.colors[i];
                      for (var v = 0; v < a.linePaths.length; v++) {
                        var b = h(
                            h({}, f),
                            {},
                            {
                              pathFrom: a.pathFromLine,
                              pathTo: a.linePaths[v],
                              stroke: x,
                              strokeWidth: this.strokeWidth,
                              strokeLineCap: s.config.stroke.lineCap,
                              fill: "none",
                            }
                          ),
                          y = r.renderPaths(b);
                        if ((this.elSeries.add(y), l.count > 0)) {
                          var k = r.renderPaths(b);
                          k.node.setAttribute("stroke-dasharray", l.dashArray),
                            l.strokeWidth &&
                              k.node.setAttribute(
                                "stroke-width",
                                l.strokeWidth
                              ),
                            this.elSeries.add(k),
                            k.attr(
                              "clip-path",
                              "url(#forecastMask".concat(s.globals.cuid, ")")
                            ),
                            y.attr(
                              "clip-path",
                              "url(#nonForecastMask".concat(s.globals.cuid, ")")
                            );
                        }
                      }
                    }
                  },
                },
                {
                  key: "_iterateOverDataPoints",
                  value: function (t) {
                    for (
                      var e = t.series,
                        i = t.realIndex,
                        n = t.i,
                        a = t.x,
                        s = t.y,
                        r = t.pX,
                        o = t.pY,
                        l = t.pathsFrom,
                        c = t.linePaths,
                        h = t.areaPaths,
                        d = t.seriesIndex,
                        u = t.lineYPosition,
                        f = t.xArrj,
                        p = t.yArrj,
                        g = this.w,
                        m = new w(this.ctx),
                        x = this.yRatio,
                        b = l.prevY,
                        y = l.linePath,
                        k = l.areaPath,
                        S = l.pathFromLine,
                        A = l.pathFromArea,
                        C = v.isNumber(g.globals.minYArr[i])
                          ? g.globals.minYArr[i]
                          : g.globals.minY,
                        E =
                          g.globals.dataPoints > 1
                            ? g.globals.dataPoints - 1
                            : g.globals.dataPoints,
                        T = 0;
                      T < E;
                      T++
                    ) {
                      var L = void 0 === e[n][T + 1] || null === e[n][T + 1];
                      if (g.globals.isXNumeric) {
                        var _ = g.globals.seriesX[i][T + 1];
                        void 0 === g.globals.seriesX[i][T + 1] &&
                          (_ = g.globals.seriesX[i][E - 1]),
                          (a = (_ - g.globals.minX) / this.xRatio);
                      } else a += this.xDivision;
                      (u =
                        g.config.chart.stacked &&
                        n > 0 &&
                        g.globals.collapsedSeries.length <
                          g.config.series.length - 1
                          ? this.prevSeriesY[
                              (function (t) {
                                for (
                                  var e = t, i = 0;
                                  i < g.globals.series.length;
                                  i++
                                )
                                  if (
                                    g.globals.collapsedSeriesIndices.indexOf(
                                      t
                                    ) > -1
                                  ) {
                                    e--;
                                    break;
                                  }
                                return e >= 0 ? e : 0;
                              })(n - 1)
                            ][T + 1]
                          : this.zeroY),
                        (s = L
                          ? u -
                            C / x[this.yaxisIndex] +
                            2 * (this.isReversed ? C / x[this.yaxisIndex] : 0)
                          : u -
                            e[n][T + 1] / x[this.yaxisIndex] +
                            2 *
                              (this.isReversed
                                ? e[n][T + 1] / x[this.yaxisIndex]
                                : 0)),
                        f.push(a),
                        p.push(s);
                      var P = this.lineHelpers.calculatePoints({
                          series: e,
                          x: a,
                          y: s,
                          realIndex: i,
                          i: n,
                          j: T,
                          prevY: b,
                        }),
                        I = this._createPaths({
                          series: e,
                          i: n,
                          realIndex: i,
                          j: T,
                          x: a,
                          y: s,
                          pX: r,
                          pY: o,
                          linePath: y,
                          areaPath: k,
                          linePaths: c,
                          areaPaths: h,
                          seriesIndex: d,
                        });
                      (h = I.areaPaths),
                        (c = I.linePaths),
                        (r = I.pX),
                        (o = I.pY),
                        (k = I.areaPath),
                        (y = I.linePath),
                        this.appendPathFrom &&
                          ((S += m.line(a, this.zeroY)),
                          (A += m.line(a, this.zeroY))),
                        this.handleNullDataPoints(e, P, n, T, i),
                        this._handleMarkersAndLabels({
                          pointsPos: P,
                          series: e,
                          x: a,
                          y: s,
                          prevY: b,
                          i: n,
                          j: T,
                          realIndex: i,
                        });
                    }
                    return {
                      yArrj: p,
                      xArrj: f,
                      pathFromArea: A,
                      areaPaths: h,
                      pathFromLine: S,
                      linePaths: c,
                    };
                  },
                },
                {
                  key: "_handleMarkersAndLabels",
                  value: function (t) {
                    var e = t.pointsPos;
                    t.series, t.x, t.y, t.prevY;
                    var i = t.i,
                      n = t.j,
                      a = t.realIndex,
                      s = this.w,
                      r = new N(this.ctx);
                    if (this.pointsChart)
                      this.scatter.draw(this.elSeries, n, {
                        realIndex: a,
                        pointsPos: e,
                        zRatio: this.zRatio,
                        elParent: this.elPointsMain,
                      });
                    else {
                      s.globals.series[i].length > 1 &&
                        this.elPointsMain.node.classList.add(
                          "apexcharts-element-hidden"
                        );
                      var o = this.markers.plotChartMarkers(e, a, n + 1);
                      null !== o && this.elPointsMain.add(o);
                    }
                    var l = r.drawDataLabel(e, a, n + 1, null);
                    null !== l && this.elDataLabelsWrap.add(l);
                  },
                },
                {
                  key: "_createPaths",
                  value: function (t) {
                    var e = t.series,
                      i = t.i,
                      n = t.realIndex,
                      a = t.j,
                      s = t.x,
                      r = t.y,
                      o = t.pX,
                      l = t.pY,
                      c = t.linePath,
                      h = t.areaPath,
                      d = t.linePaths,
                      u = t.areaPaths,
                      f = t.seriesIndex,
                      p = this.w,
                      g = new w(this.ctx),
                      m = p.config.stroke.curve,
                      x = this.areaBottomY;
                    if (
                      (Array.isArray(p.config.stroke.curve) &&
                        (m = Array.isArray(f)
                          ? p.config.stroke.curve[f[i]]
                          : p.config.stroke.curve[i]),
                      "smooth" === m)
                    ) {
                      var v = 0.35 * (s - o);
                      p.globals.hasNullValues
                        ? (null !== e[i][a] &&
                            (null !== e[i][a + 1]
                              ? ((c =
                                  g.move(o, l) +
                                  g.curve(o + v, l, s - v, r, s + 1, r)),
                                (h =
                                  g.move(o + 1, l) +
                                  g.curve(o + v, l, s - v, r, s + 1, r) +
                                  g.line(s, x) +
                                  g.line(o, x) +
                                  "z"))
                              : ((c = g.move(o, l)), (h = g.move(o, l) + "z"))),
                          d.push(c),
                          u.push(h))
                        : ((c += g.curve(o + v, l, s - v, r, s, r)),
                          (h += g.curve(o + v, l, s - v, r, s, r))),
                        (o = s),
                        (l = r),
                        a === e[i].length - 2 &&
                          ((h =
                            h + g.curve(o, l, s, r, s, x) + g.move(s, r) + "z"),
                          p.globals.hasNullValues || (d.push(c), u.push(h)));
                    } else {
                      if (null === e[i][a + 1]) {
                        c += g.move(s, r);
                        var b = p.globals.isXNumeric
                          ? (p.globals.seriesX[n][a] - p.globals.minX) /
                            this.xRatio
                          : s - this.xDivision;
                        h = h + g.line(b, x) + g.move(s, r) + "z";
                      }
                      null === e[i][a] &&
                        ((c += g.move(s, r)), (h += g.move(s, x))),
                        "stepline" === m
                          ? ((c =
                              c + g.line(s, null, "H") + g.line(null, r, "V")),
                            (h =
                              h + g.line(s, null, "H") + g.line(null, r, "V")))
                          : "straight" === m &&
                            ((c += g.line(s, r)), (h += g.line(s, r))),
                        a === e[i].length - 2 &&
                          ((h = h + g.line(s, x) + g.move(s, r) + "z"),
                          d.push(c),
                          u.push(h));
                    }
                    return {
                      linePaths: d,
                      areaPaths: u,
                      pX: o,
                      pY: l,
                      linePath: c,
                      areaPath: h,
                    };
                  },
                },
                {
                  key: "handleNullDataPoints",
                  value: function (t, e, i, n, a) {
                    var s = this.w;
                    if (
                      (null === t[i][n] &&
                        s.config.markers.showNullDataPoints) ||
                      1 === t[i].length
                    ) {
                      var r = this.markers.plotChartMarkers(
                        e,
                        a,
                        n + 1,
                        this.strokeWidth - s.config.markers.strokeWidth / 2,
                        !0
                      );
                      null !== r && this.elPointsMain.add(r);
                    }
                  },
                },
              ]),
              t
            );
          })();
        (window.TreemapSquared = {}),
          (window.TreemapSquared.generate = (function () {
            function t(e, i, n, a) {
              (this.xoffset = e),
                (this.yoffset = i),
                (this.height = a),
                (this.width = n),
                (this.shortestEdge = function () {
                  return Math.min(this.height, this.width);
                }),
                (this.getCoordinates = function (t) {
                  var e,
                    i = [],
                    n = this.xoffset,
                    a = this.yoffset,
                    r = s(t) / this.height,
                    o = s(t) / this.width;
                  if (this.width >= this.height)
                    for (e = 0; e < t.length; e++)
                      i.push([n, a, n + r, a + t[e] / r]), (a += t[e] / r);
                  else
                    for (e = 0; e < t.length; e++)
                      i.push([n, a, n + t[e] / o, a + o]), (n += t[e] / o);
                  return i;
                }),
                (this.cutArea = function (e) {
                  var i;
                  if (this.width >= this.height) {
                    var n = e / this.height,
                      a = this.width - n;
                    i = new t(this.xoffset + n, this.yoffset, a, this.height);
                  } else {
                    var s = e / this.width,
                      r = this.height - s;
                    i = new t(this.xoffset, this.yoffset + s, this.width, r);
                  }
                  return i;
                });
            }
            function e(e, n, a, r, o) {
              return (
                (r = void 0 === r ? 0 : r),
                (o = void 0 === o ? 0 : o),
                (function (t) {
                  var e,
                    i,
                    n = [];
                  for (e = 0; e < t.length; e++)
                    for (i = 0; i < t[e].length; i++) n.push(t[e][i]);
                  return n;
                })(
                  i(
                    (function (t, e) {
                      var i,
                        n = [],
                        a = e / s(t);
                      for (i = 0; i < t.length; i++) n[i] = t[i] * a;
                      return n;
                    })(e, n * a),
                    [],
                    new t(r, o, n, a),
                    []
                  )
                )
              );
            }
            function i(t, e, a, r) {
              var o, l, c;
              if (0 !== t.length)
                return (
                  (o = a.shortestEdge()),
                  (function (t, e, i) {
                    var a;
                    return (
                      0 === t.length ||
                      ((a = t.slice()).push(e), n(t, i) >= n(a, i))
                    );
                  })(e, (l = t[0]), o)
                    ? (e.push(l), i(t.slice(1), e, a, r))
                    : ((c = a.cutArea(s(e), r)),
                      r.push(a.getCoordinates(e)),
                      i(t, [], c, r)),
                  r
                );
              r.push(a.getCoordinates(e));
            }
            function n(t, e) {
              var i = Math.min.apply(Math, t),
                n = Math.max.apply(Math, t),
                a = s(t);
              return Math.max(
                (Math.pow(e, 2) * n) / Math.pow(a, 2),
                Math.pow(a, 2) / (Math.pow(e, 2) * i)
              );
            }
            function a(t) {
              return t && t.constructor === Array;
            }
            function s(t) {
              var e,
                i = 0;
              for (e = 0; e < t.length; e++) i += t[e];
              return i;
            }
            function r(t) {
              var e,
                i = 0;
              if (a(t[0])) for (e = 0; e < t.length; e++) i += r(t[e]);
              else i = s(t);
              return i;
            }
            return function t(i, n, s, o, l) {
              (o = void 0 === o ? 0 : o), (l = void 0 === l ? 0 : l);
              var c,
                h,
                d = [],
                u = [];
              if (a(i[0])) {
                for (h = 0; h < i.length; h++) d[h] = r(i[h]);
                for (c = e(d, n, s, o, l), h = 0; h < i.length; h++)
                  u.push(
                    t(
                      i[h],
                      c[h][2] - c[h][0],
                      c[h][3] - c[h][1],
                      c[h][0],
                      c[h][1]
                    )
                  );
              } else u = e(i, n, s, o, l);
              return u;
            };
          })());
        var Mt,
          Nt,
          Dt = (function () {
            function t(e, i) {
              s(this, t),
                (this.ctx = e),
                (this.w = e.w),
                (this.strokeWidth = this.w.config.stroke.width),
                (this.helpers = new At(e)),
                (this.dynamicAnim =
                  this.w.config.chart.animations.dynamicAnimation),
                (this.labels = []);
            }
            return (
              o(t, [
                {
                  key: "draw",
                  value: function (t) {
                    var e = this,
                      i = this.w,
                      n = new w(this.ctx),
                      a = new P(this.ctx),
                      s = n.group({ class: "apexcharts-treemap" });
                    if (i.globals.noData) return s;
                    var r = [];
                    return (
                      t.forEach(function (t) {
                        var e = t.map(function (t) {
                          return Math.abs(t);
                        });
                        r.push(e);
                      }),
                      (this.negRange = this.helpers.checkColorRange()),
                      i.config.series.forEach(function (t, i) {
                        t.data.forEach(function (t) {
                          Array.isArray(e.labels[i]) || (e.labels[i] = []),
                            e.labels[i].push(t.x);
                        });
                      }),
                      window.TreemapSquared.generate(
                        r,
                        i.globals.gridWidth,
                        i.globals.gridHeight
                      ).forEach(function (r, o) {
                        var l = n.group({
                          class: "apexcharts-series apexcharts-treemap-series",
                          seriesName: v.escapeString(i.globals.seriesNames[o]),
                          rel: o + 1,
                          "data:realIndex": o,
                        });
                        if (i.config.chart.dropShadow.enabled) {
                          var c = i.config.chart.dropShadow;
                          new y(e.ctx).dropShadow(s, c, o);
                        }
                        var h = n.group({ class: "apexcharts-data-labels" });
                        r.forEach(function (s, r) {
                          var c = s[0],
                            h = s[1],
                            d = s[2],
                            u = s[3],
                            f = n.drawRect(
                              c,
                              h,
                              d - c,
                              u - h,
                              0,
                              "#fff",
                              1,
                              e.strokeWidth,
                              i.config.plotOptions.treemap.useFillColorAsStroke
                                ? g
                                : i.globals.stroke.colors[o]
                            );
                          f.attr({
                            cx: c,
                            cy: h,
                            index: o,
                            i: o,
                            j: r,
                            width: d - c,
                            height: u - h,
                          });
                          var p = e.helpers.getShadeColor(
                              i.config.chart.type,
                              o,
                              r,
                              e.negRange
                            ),
                            g = p.color;
                          void 0 !== i.config.series[o].data[r] &&
                            i.config.series[o].data[r].fillColor &&
                            (g = i.config.series[o].data[r].fillColor);
                          var m = a.fillPath({
                            color: g,
                            seriesNumber: o,
                            dataPointIndex: r,
                          });
                          f.node.classList.add("apexcharts-treemap-rect"),
                            f.attr({ fill: m }),
                            e.helpers.addListeners(f);
                          var x = {
                              x: c + (d - c) / 2,
                              y: h + (u - h) / 2,
                              width: 0,
                              height: 0,
                            },
                            v = { x: c, y: h, width: d - c, height: u - h };
                          if (
                            i.config.chart.animations.enabled &&
                            !i.globals.dataChanged
                          ) {
                            var b = 1;
                            i.globals.resized ||
                              (b = i.config.chart.animations.speed),
                              e.animateTreemap(f, x, v, b);
                          }
                          if (i.globals.dataChanged) {
                            var y = 1;
                            e.dynamicAnim.enabled &&
                              i.globals.shouldAnimate &&
                              ((y = e.dynamicAnim.speed),
                              i.globals.previousPaths[o] &&
                                i.globals.previousPaths[o][r] &&
                                i.globals.previousPaths[o][r].rect &&
                                (x = i.globals.previousPaths[o][r].rect),
                              e.animateTreemap(f, x, v, y));
                          }
                          var w = e.getFontSize(s),
                            k = i.config.dataLabels.formatter(e.labels[o][r], {
                              value: i.globals.series[o][r],
                              seriesIndex: o,
                              dataPointIndex: r,
                              w: i,
                            }),
                            S = e.helpers.calculateDataLabels({
                              text: k,
                              x: (c + d) / 2,
                              y: (h + u) / 2 + e.strokeWidth / 2 + w / 3,
                              i: o,
                              j: r,
                              colorProps: p,
                              fontSize: w,
                              series: t,
                            });
                          i.config.dataLabels.enabled &&
                            S &&
                            e.rotateToFitLabel(S, k, c, h, d, u),
                            l.add(f),
                            null !== S && l.add(S);
                        }),
                          l.add(h),
                          s.add(l);
                      }),
                      s
                    );
                  },
                },
                {
                  key: "getFontSize",
                  value: function (t) {
                    var e,
                      i,
                      n = this.w,
                      a =
                        (function t(e) {
                          var i,
                            n = 0;
                          if (Array.isArray(e[0]))
                            for (i = 0; i < e.length; i++) n += t(e[i]);
                          else for (i = 0; i < e.length; i++) n += e[i].length;
                          return n;
                        })(this.labels) /
                        (function t(e) {
                          var i,
                            n = 0;
                          if (Array.isArray(e[0]))
                            for (i = 0; i < e.length; i++) n += t(e[i]);
                          else for (i = 0; i < e.length; i++) n += 1;
                          return n;
                        })(this.labels);
                    return (
                      (e = (t[2] - t[0]) * (t[3] - t[1])),
                      (i = Math.pow(e, 0.5)),
                      Math.min(
                        i / a,
                        parseInt(n.config.dataLabels.style.fontSize, 10)
                      )
                    );
                  },
                },
                {
                  key: "rotateToFitLabel",
                  value: function (t, e, i, n, a, s) {
                    var r = new w(this.ctx),
                      o = r.getTextRects(e);
                    if (o.width + 5 > a - i && o.width <= s - n) {
                      var l = r.rotateAroundCenter(t.node);
                      t.node.setAttribute(
                        "transform",
                        "rotate(-90 ".concat(l.x, " ").concat(l.y, ")")
                      );
                    }
                  },
                },
                {
                  key: "animateTreemap",
                  value: function (t, e, i, n) {
                    var a = new b(this.ctx);
                    a.animateRect(
                      t,
                      { x: e.x, y: e.y, width: e.width, height: e.height },
                      { x: i.x, y: i.y, width: i.width, height: i.height },
                      n,
                      function () {
                        a.animationCompleted(t);
                      }
                    );
                  },
                },
              ]),
              t
            );
          })(),
          zt = (function () {
            function t(e) {
              s(this, t),
                (this.ctx = e),
                (this.w = e.w),
                (this.timeScaleArray = []),
                (this.utc = this.w.config.xaxis.labels.datetimeUTC);
            }
            return (
              o(t, [
                {
                  key: "calculateTimeScaleTicks",
                  value: function (t, e) {
                    var i = this,
                      n = this.w;
                    if (n.globals.allSeriesCollapsed)
                      return (
                        (n.globals.labels = []),
                        (n.globals.timescaleLabels = []),
                        []
                      );
                    var a = new X(this.ctx),
                      s = (e - t) / 864e5;
                    this.determineInterval(s),
                      (n.globals.disableZoomIn = !1),
                      (n.globals.disableZoomOut = !1),
                      s < 0.00011574074074074075
                        ? (n.globals.disableZoomIn = !0)
                        : s > 5e4 && (n.globals.disableZoomOut = !0);
                    var r = a.getTimeUnitsfromTimestamp(t, e, this.utc),
                      o = n.globals.gridWidth / s,
                      l = o / 24,
                      c = l / 60,
                      d = c / 60,
                      u = Math.floor(24 * s),
                      f = Math.floor(1440 * s),
                      p = Math.floor(86400 * s),
                      g = Math.floor(s),
                      m = Math.floor(s / 30),
                      x = Math.floor(s / 365),
                      v = {
                        minMillisecond: r.minMillisecond,
                        minSecond: r.minSecond,
                        minMinute: r.minMinute,
                        minHour: r.minHour,
                        minDate: r.minDate,
                        minMonth: r.minMonth,
                        minYear: r.minYear,
                      },
                      b = {
                        firstVal: v,
                        currentMillisecond: v.minMillisecond,
                        currentSecond: v.minSecond,
                        currentMinute: v.minMinute,
                        currentHour: v.minHour,
                        currentMonthDate: v.minDate,
                        currentDate: v.minDate,
                        currentMonth: v.minMonth,
                        currentYear: v.minYear,
                        daysWidthOnXAxis: o,
                        hoursWidthOnXAxis: l,
                        minutesWidthOnXAxis: c,
                        secondsWidthOnXAxis: d,
                        numberOfSeconds: p,
                        numberOfMinutes: f,
                        numberOfHours: u,
                        numberOfDays: g,
                        numberOfMonths: m,
                        numberOfYears: x,
                      };
                    switch (this.tickInterval) {
                      case "years":
                        this.generateYearScale(b);
                        break;
                      case "months":
                      case "half_year":
                        this.generateMonthScale(b);
                        break;
                      case "months_days":
                      case "months_fortnight":
                      case "days":
                      case "week_days":
                        this.generateDayScale(b);
                        break;
                      case "hours":
                        this.generateHourScale(b);
                        break;
                      case "minutes_fives":
                      case "minutes":
                        this.generateMinuteScale(b);
                        break;
                      case "seconds_tens":
                      case "seconds_fives":
                      case "seconds":
                        this.generateSecondScale(b);
                    }
                    var y = this.timeScaleArray.map(function (t) {
                      var e = {
                        position: t.position,
                        unit: t.unit,
                        year: t.year,
                        day: t.day ? t.day : 1,
                        hour: t.hour ? t.hour : 0,
                        month: t.month + 1,
                      };
                      return "month" === t.unit
                        ? h(h({}, e), {}, { day: 1, value: t.value + 1 })
                        : "day" === t.unit || "hour" === t.unit
                        ? h(h({}, e), {}, { value: t.value })
                        : "minute" === t.unit
                        ? h(h({}, e), {}, { value: t.value, minute: t.value })
                        : "second" === t.unit
                        ? h(
                            h({}, e),
                            {},
                            {
                              value: t.value,
                              minute: t.minute,
                              second: t.second,
                            }
                          )
                        : t;
                    });
                    return y.filter(function (t) {
                      var e = 1,
                        a = Math.ceil(n.globals.gridWidth / 120),
                        s = t.value;
                      void 0 !== n.config.xaxis.tickAmount &&
                        (a = n.config.xaxis.tickAmount),
                        y.length > a && (e = Math.floor(y.length / a));
                      var r = !1,
                        o = !1;
                      switch (i.tickInterval) {
                        case "years":
                          "year" === t.unit && (r = !0);
                          break;
                        case "half_year":
                          (e = 7), "year" === t.unit && (r = !0);
                          break;
                        case "months":
                          (e = 1), "year" === t.unit && (r = !0);
                          break;
                        case "months_fortnight":
                          (e = 15),
                            ("year" !== t.unit && "month" !== t.unit) ||
                              (r = !0),
                            30 === s && (o = !0);
                          break;
                        case "months_days":
                          (e = 10),
                            "month" === t.unit && (r = !0),
                            30 === s && (o = !0);
                          break;
                        case "week_days":
                          (e = 8), "month" === t.unit && (r = !0);
                          break;
                        case "days":
                          (e = 1), "month" === t.unit && (r = !0);
                          break;
                        case "hours":
                          "day" === t.unit && (r = !0);
                          break;
                        case "minutes_fives":
                        case "seconds_fives":
                          s % 5 != 0 && (o = !0);
                          break;
                        case "seconds_tens":
                          s % 10 != 0 && (o = !0);
                      }
                      if (
                        "hours" === i.tickInterval ||
                        "minutes_fives" === i.tickInterval ||
                        "seconds_tens" === i.tickInterval ||
                        "seconds_fives" === i.tickInterval
                      ) {
                        if (!o) return !0;
                      } else if ((s % e == 0 || r) && !o) return !0;
                    });
                  },
                },
                {
                  key: "recalcDimensionsBasedOnFormat",
                  value: function (t, e) {
                    var i = this.w,
                      n = this.formatDates(t),
                      a = this.removeOverlappingTS(n);
                    (i.globals.timescaleLabels = a.slice()),
                      new ht(this.ctx).plotCoords();
                  },
                },
                {
                  key: "determineInterval",
                  value: function (t) {
                    var e = 24 * t,
                      i = 60 * e;
                    switch (!0) {
                      case t / 365 > 5:
                        this.tickInterval = "years";
                        break;
                      case t > 800:
                        this.tickInterval = "half_year";
                        break;
                      case t > 180:
                        this.tickInterval = "months";
                        break;
                      case t > 90:
                        this.tickInterval = "months_fortnight";
                        break;
                      case t > 60:
                        this.tickInterval = "months_days";
                        break;
                      case t > 30:
                        this.tickInterval = "week_days";
                        break;
                      case t > 2:
                        this.tickInterval = "days";
                        break;
                      case e > 2.4:
                        this.tickInterval = "hours";
                        break;
                      case i > 15:
                        this.tickInterval = "minutes_fives";
                        break;
                      case i > 5:
                        this.tickInterval = "minutes";
                        break;
                      case i > 1:
                        this.tickInterval = "seconds_tens";
                        break;
                      case 60 * i > 20:
                        this.tickInterval = "seconds_fives";
                        break;
                      default:
                        this.tickInterval = "seconds";
                    }
                  },
                },
                {
                  key: "generateYearScale",
                  value: function (t) {
                    var e = t.firstVal,
                      i = t.currentMonth,
                      n = t.currentYear,
                      a = t.daysWidthOnXAxis,
                      s = t.numberOfYears,
                      r = e.minYear,
                      o = 0,
                      l = new X(this.ctx),
                      c = "year";
                    if (e.minDate > 1 || e.minMonth > 0) {
                      var h = l.determineRemainingDaysOfYear(
                        e.minYear,
                        e.minMonth,
                        e.minDate
                      );
                      (o = (l.determineDaysOfYear(e.minYear) - h + 1) * a),
                        (r = e.minYear + 1),
                        this.timeScaleArray.push({
                          position: o,
                          value: r,
                          unit: c,
                          year: r,
                          month: v.monthMod(i + 1),
                        });
                    } else
                      1 === e.minDate &&
                        0 === e.minMonth &&
                        this.timeScaleArray.push({
                          position: o,
                          value: r,
                          unit: c,
                          year: n,
                          month: v.monthMod(i + 1),
                        });
                    for (var d = r, u = o, f = 0; f < s; f++)
                      d++,
                        (u = l.determineDaysOfYear(d - 1) * a + u),
                        this.timeScaleArray.push({
                          position: u,
                          value: d,
                          unit: c,
                          year: d,
                          month: 1,
                        });
                  },
                },
                {
                  key: "generateMonthScale",
                  value: function (t) {
                    var e = t.firstVal,
                      i = t.currentMonthDate,
                      n = t.currentMonth,
                      a = t.currentYear,
                      s = t.daysWidthOnXAxis,
                      r = t.numberOfMonths,
                      o = n,
                      l = 0,
                      c = new X(this.ctx),
                      h = "month",
                      d = 0;
                    if (e.minDate > 1) {
                      (l =
                        (c.determineDaysOfMonths(n + 1, e.minYear) - i + 1) *
                        s),
                        (o = v.monthMod(n + 1));
                      var u = a + d,
                        f = v.monthMod(o),
                        p = o;
                      0 === o &&
                        ((h = "year"), (p = u), (f = 1), (u += d += 1)),
                        this.timeScaleArray.push({
                          position: l,
                          value: p,
                          unit: h,
                          year: u,
                          month: f,
                        });
                    } else
                      this.timeScaleArray.push({
                        position: l,
                        value: o,
                        unit: h,
                        year: a,
                        month: v.monthMod(n),
                      });
                    for (var g = o + 1, m = l, x = 0, b = 1; x < r; x++, b++) {
                      0 === (g = v.monthMod(g))
                        ? ((h = "year"), (d += 1))
                        : (h = "month");
                      var y = this._getYear(a, g, d);
                      m = c.determineDaysOfMonths(g, y) * s + m;
                      var w = 0 === g ? y : g;
                      this.timeScaleArray.push({
                        position: m,
                        value: w,
                        unit: h,
                        year: y,
                        month: 0 === g ? 1 : g,
                      }),
                        g++;
                    }
                  },
                },
                {
                  key: "generateDayScale",
                  value: function (t) {
                    var e = t.firstVal,
                      i = t.currentMonth,
                      n = t.currentYear,
                      a = t.hoursWidthOnXAxis,
                      s = t.numberOfDays,
                      r = new X(this.ctx),
                      o = "day",
                      l = e.minDate + 1,
                      c = l,
                      h = function (t, e, i) {
                        return t > r.determineDaysOfMonths(e + 1, i)
                          ? ((c = 1), (o = "month"), (u = e += 1), e)
                          : e;
                      },
                      d = (24 - e.minHour) * a,
                      u = l,
                      f = h(c, i, n);
                    0 === e.minHour && 1 === e.minDate
                      ? ((d = 0),
                        (u = v.monthMod(e.minMonth)),
                        (o = "month"),
                        (c = e.minDate),
                        s++)
                      : 1 !== e.minDate &&
                        0 === e.minHour &&
                        0 === e.minMinute &&
                        ((d = 0),
                        (l = e.minDate),
                        (u = l),
                        (f = h((c = l), i, n))),
                      this.timeScaleArray.push({
                        position: d,
                        value: u,
                        unit: o,
                        year: this._getYear(n, f, 0),
                        month: v.monthMod(f),
                        day: c,
                      });
                    for (var p = d, g = 0; g < s; g++) {
                      (o = "day"), (f = h((c += 1), f, this._getYear(n, f, 0)));
                      var m = this._getYear(n, f, 0);
                      p = 24 * a + p;
                      var x = 1 === c ? v.monthMod(f) : c;
                      this.timeScaleArray.push({
                        position: p,
                        value: x,
                        unit: o,
                        year: m,
                        month: v.monthMod(f),
                        day: x,
                      });
                    }
                  },
                },
                {
                  key: "generateHourScale",
                  value: function (t) {
                    var e = t.firstVal,
                      i = t.currentDate,
                      n = t.currentMonth,
                      a = t.currentYear,
                      s = t.minutesWidthOnXAxis,
                      r = t.numberOfHours,
                      o = new X(this.ctx),
                      l = "hour",
                      c = function (t, e) {
                        return (
                          t > o.determineDaysOfMonths(e + 1, a) &&
                            ((g = 1), (e += 1)),
                          { month: e, date: g }
                        );
                      },
                      h = function (t, e) {
                        return t > o.determineDaysOfMonths(e + 1, a)
                          ? (e += 1)
                          : e;
                      },
                      d = 60 - (e.minMinute + e.minSecond / 60),
                      u = d * s,
                      f = e.minHour + 1,
                      p = f + 1;
                    60 === d && ((u = 0), (p = (f = e.minHour) + 1));
                    var g = i,
                      m = h(g, n);
                    this.timeScaleArray.push({
                      position: u,
                      value: f,
                      unit: l,
                      day: g,
                      hour: p,
                      year: a,
                      month: v.monthMod(m),
                    });
                    for (var x = u, b = 0; b < r; b++) {
                      (l = "hour"),
                        p >= 24 &&
                          ((p = 0),
                          (l = "day"),
                          (m = c((g += 1), m).month),
                          (m = h(g, m)));
                      var y = this._getYear(a, m, 0);
                      x = 0 === p && 0 === b ? d * s : 60 * s + x;
                      var w = 0 === p ? g : p;
                      this.timeScaleArray.push({
                        position: x,
                        value: w,
                        unit: l,
                        hour: p,
                        day: g,
                        year: y,
                        month: v.monthMod(m),
                      }),
                        p++;
                    }
                  },
                },
                {
                  key: "generateMinuteScale",
                  value: function (t) {
                    for (
                      var e = t.currentMillisecond,
                        i = t.currentSecond,
                        n = t.currentMinute,
                        a = t.currentHour,
                        s = t.currentDate,
                        r = t.currentMonth,
                        o = t.currentYear,
                        l = t.minutesWidthOnXAxis,
                        c = t.secondsWidthOnXAxis,
                        h = t.numberOfMinutes,
                        d = n + 1,
                        u = s,
                        f = r,
                        p = o,
                        g = a,
                        m = (60 - i - e / 1e3) * c,
                        x = 0;
                      x < h;
                      x++
                    )
                      d >= 60 && ((d = 0), 24 === (g += 1) && (g = 0)),
                        this.timeScaleArray.push({
                          position: m,
                          value: d,
                          unit: "minute",
                          hour: g,
                          minute: d,
                          day: u,
                          year: this._getYear(p, f, 0),
                          month: v.monthMod(f),
                        }),
                        (m += l),
                        d++;
                  },
                },
                {
                  key: "generateSecondScale",
                  value: function (t) {
                    for (
                      var e = t.currentMillisecond,
                        i = t.currentSecond,
                        n = t.currentMinute,
                        a = t.currentHour,
                        s = t.currentDate,
                        r = t.currentMonth,
                        o = t.currentYear,
                        l = t.secondsWidthOnXAxis,
                        c = t.numberOfSeconds,
                        h = i + 1,
                        d = n,
                        u = s,
                        f = r,
                        p = o,
                        g = a,
                        m = ((1e3 - e) / 1e3) * l,
                        x = 0;
                      x < c;
                      x++
                    )
                      h >= 60 &&
                        ((h = 0), ++d >= 60 && ((d = 0), 24 == ++g && (g = 0))),
                        this.timeScaleArray.push({
                          position: m,
                          value: h,
                          unit: "second",
                          hour: g,
                          minute: d,
                          second: h,
                          day: u,
                          year: this._getYear(p, f, 0),
                          month: v.monthMod(f),
                        }),
                        (m += l),
                        h++;
                  },
                },
                {
                  key: "createRawDateString",
                  value: function (t, e) {
                    var i = t.year;
                    return (
                      0 === t.month && (t.month = 1),
                      (i += "-" + ("0" + t.month.toString()).slice(-2)),
                      "day" === t.unit
                        ? (i +=
                            "day" === t.unit
                              ? "-" + ("0" + e).slice(-2)
                              : "-01")
                        : (i += "-" + ("0" + (t.day ? t.day : "1")).slice(-2)),
                      "hour" === t.unit
                        ? (i +=
                            "hour" === t.unit
                              ? "T" + ("0" + e).slice(-2)
                              : "T00")
                        : (i +=
                            "T" + ("0" + (t.hour ? t.hour : "0")).slice(-2)),
                      "minute" === t.unit
                        ? (i += ":" + ("0" + e).slice(-2))
                        : (i +=
                            ":" +
                            (t.minute ? ("0" + t.minute).slice(-2) : "00")),
                      "second" === t.unit
                        ? (i += ":" + ("0" + e).slice(-2))
                        : (i += ":00"),
                      this.utc && (i += ".000Z"),
                      i
                    );
                  },
                },
                {
                  key: "formatDates",
                  value: function (t) {
                    var e = this,
                      i = this.w;
                    return t.map(function (t) {
                      var n = t.value.toString(),
                        a = new X(e.ctx),
                        s = e.createRawDateString(t, n),
                        r = a.getDate(a.parseDate(s));
                      if (
                        (e.utc || (r = a.getDate(a.parseDateWithTimezone(s))),
                        void 0 === i.config.xaxis.labels.format)
                      ) {
                        var o = "dd MMM",
                          l = i.config.xaxis.labels.datetimeFormatter;
                        "year" === t.unit && (o = l.year),
                          "month" === t.unit && (o = l.month),
                          "day" === t.unit && (o = l.day),
                          "hour" === t.unit && (o = l.hour),
                          "minute" === t.unit && (o = l.minute),
                          "second" === t.unit && (o = l.second),
                          (n = a.formatDate(r, o));
                      } else n = a.formatDate(r, i.config.xaxis.labels.format);
                      return {
                        dateString: s,
                        position: t.position,
                        value: n,
                        unit: t.unit,
                        year: t.year,
                        month: t.month,
                      };
                    });
                  },
                },
                {
                  key: "removeOverlappingTS",
                  value: function (t) {
                    var e,
                      i = this,
                      n = new w(this.ctx),
                      a = !1;
                    t.length > 0 &&
                      t[0].value &&
                      t.every(function (e) {
                        return e.value.length === t[0].value.length;
                      }) &&
                      ((a = !0), (e = n.getTextRects(t[0].value).width));
                    var s = 0,
                      r = t.map(function (r, o) {
                        if (
                          o > 0 &&
                          i.w.config.xaxis.labels.hideOverlappingLabels
                        ) {
                          var l = a ? e : n.getTextRects(t[s].value).width,
                            c = t[s].position;
                          return r.position > c + l + 10 ? ((s = o), r) : null;
                        }
                        return r;
                      });
                    return r.filter(function (t) {
                      return null !== t;
                    });
                  },
                },
                {
                  key: "_getYear",
                  value: function (t, e, i) {
                    return t + Math.floor(e / 12) + i;
                  },
                },
              ]),
              t
            );
          })(),
          Ot = (function () {
            function t(e, i) {
              s(this, t), (this.ctx = i), (this.w = i.w), (this.el = e);
            }
            return (
              o(t, [
                {
                  key: "setupElements",
                  value: function () {
                    var t = this.w.globals,
                      e = this.w.config,
                      i = e.chart.type;
                    (t.axisCharts =
                      [
                        "line",
                        "area",
                        "bar",
                        "rangeBar",
                        "candlestick",
                        "boxPlot",
                        "scatter",
                        "bubble",
                        "radar",
                        "heatmap",
                        "treemap",
                      ].indexOf(i) > -1),
                      (t.xyCharts =
                        [
                          "line",
                          "area",
                          "bar",
                          "rangeBar",
                          "candlestick",
                          "boxPlot",
                          "scatter",
                          "bubble",
                        ].indexOf(i) > -1),
                      (t.isBarHorizontal =
                        ("bar" === e.chart.type ||
                          "rangeBar" === e.chart.type) &&
                        e.plotOptions.bar.horizontal),
                      (t.chartClass = ".apexcharts" + t.chartID),
                      (t.dom.baseEl = this.el),
                      (t.dom.elWrap = document.createElement("div")),
                      w.setAttrs(t.dom.elWrap, {
                        id: t.chartClass.substring(1),
                        class: "apexcharts-canvas " + t.chartClass.substring(1),
                      }),
                      this.el.appendChild(t.dom.elWrap),
                      (t.dom.Paper = new window.SVG.Doc(t.dom.elWrap)),
                      t.dom.Paper.attr({
                        class: "apexcharts-svg",
                        "xmlns:data": "ApexChartsNS",
                        transform: "translate("
                          .concat(e.chart.offsetX, ", ")
                          .concat(e.chart.offsetY, ")"),
                      }),
                      (t.dom.Paper.node.style.background = e.chart.background),
                      this.setSVGDimensions(),
                      (t.dom.elGraphical = t.dom.Paper.group().attr({
                        class: "apexcharts-inner apexcharts-graphical",
                      })),
                      (t.dom.elAnnotations = t.dom.Paper.group().attr({
                        class: "apexcharts-annotations",
                      })),
                      (t.dom.elDefs = t.dom.Paper.defs()),
                      (t.dom.elLegendWrap = document.createElement("div")),
                      t.dom.elLegendWrap.classList.add("apexcharts-legend"),
                      t.dom.elWrap.appendChild(t.dom.elLegendWrap),
                      t.dom.Paper.add(t.dom.elGraphical),
                      t.dom.elGraphical.add(t.dom.elDefs);
                  },
                },
                {
                  key: "plotChartType",
                  value: function (t, e) {
                    var i = this.w,
                      n = i.config,
                      a = i.globals,
                      s = { series: [], i: [] },
                      r = { series: [], i: [] },
                      o = { series: [], i: [] },
                      l = { series: [], i: [] },
                      c = { series: [], i: [] },
                      h = { series: [], i: [] },
                      d = { series: [], i: [] };
                    a.series.map(function (e, u) {
                      var f = 0;
                      void 0 !== t[u].type
                        ? ("column" === t[u].type || "bar" === t[u].type
                            ? (a.series.length > 1 &&
                                n.plotOptions.bar.horizontal &&
                                console.warn(
                                  "Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`"
                                ),
                              c.series.push(e),
                              c.i.push(u),
                              f++,
                              (i.globals.columnSeries = c.series))
                            : "area" === t[u].type
                            ? (r.series.push(e), r.i.push(u), f++)
                            : "line" === t[u].type
                            ? (s.series.push(e), s.i.push(u), f++)
                            : "scatter" === t[u].type
                            ? (o.series.push(e), o.i.push(u))
                            : "bubble" === t[u].type
                            ? (l.series.push(e), l.i.push(u), f++)
                            : "candlestick" === t[u].type
                            ? (h.series.push(e), h.i.push(u), f++)
                            : "boxPlot" === t[u].type
                            ? (d.series.push(e), d.i.push(u), f++)
                            : console.warn(
                                "You have specified an unrecognized chart type. Available types for this property are line/area/column/bar/scatter/bubble"
                              ),
                          f > 1 && (a.comboCharts = !0))
                        : (s.series.push(e), s.i.push(u));
                    });
                    var u = new It(this.ctx, e),
                      f = new St(this.ctx, e);
                    this.ctx.pie = new Tt(this.ctx);
                    var p = new _t(this.ctx);
                    this.ctx.rangeBar = new R(this.ctx, e);
                    var g = new Lt(this.ctx),
                      m = [];
                    if (a.comboCharts) {
                      if (
                        (r.series.length > 0 &&
                          m.push(u.draw(r.series, "area", r.i)),
                        c.series.length > 0)
                      )
                        if (i.config.chart.stacked) {
                          var x = new kt(this.ctx, e);
                          m.push(x.draw(c.series, c.i));
                        } else
                          (this.ctx.bar = new F(this.ctx, e)),
                            m.push(this.ctx.bar.draw(c.series, c.i));
                      if (
                        (s.series.length > 0 &&
                          m.push(u.draw(s.series, "line", s.i)),
                        h.series.length > 0 && m.push(f.draw(h.series, h.i)),
                        d.series.length > 0 && m.push(f.draw(d.series, d.i)),
                        o.series.length > 0)
                      ) {
                        var v = new It(this.ctx, e, !0);
                        m.push(v.draw(o.series, "scatter", o.i));
                      }
                      if (l.series.length > 0) {
                        var b = new It(this.ctx, e, !0);
                        m.push(b.draw(l.series, "bubble", l.i));
                      }
                    } else
                      switch (n.chart.type) {
                        case "line":
                          m = u.draw(a.series, "line");
                          break;
                        case "area":
                          m = u.draw(a.series, "area");
                          break;
                        case "bar":
                          n.chart.stacked
                            ? (m = new kt(this.ctx, e).draw(a.series))
                            : ((this.ctx.bar = new F(this.ctx, e)),
                              (m = this.ctx.bar.draw(a.series)));
                          break;
                        case "candlestick":
                        case "boxPlot":
                          m = new St(this.ctx, e).draw(a.series);
                          break;
                        case "rangeBar":
                          m = this.ctx.rangeBar.draw(a.series);
                          break;
                        case "heatmap":
                          m = new Ct(this.ctx, e).draw(a.series);
                          break;
                        case "treemap":
                          m = new Dt(this.ctx, e).draw(a.series);
                          break;
                        case "pie":
                        case "donut":
                        case "polarArea":
                          m = this.ctx.pie.draw(a.series);
                          break;
                        case "radialBar":
                          m = p.draw(a.series);
                          break;
                        case "radar":
                          m = g.draw(a.series);
                          break;
                        default:
                          m = u.draw(a.series);
                      }
                    return m;
                  },
                },
                {
                  key: "setSVGDimensions",
                  value: function () {
                    var t = this.w.globals,
                      e = this.w.config;
                    (t.svgWidth = e.chart.width),
                      (t.svgHeight = e.chart.height);
                    var i = v.getDimensions(this.el),
                      n = e.chart.width
                        .toString()
                        .split(/[0-9]+/g)
                        .pop();
                    "%" === n
                      ? v.isNumber(i[0]) &&
                        (0 === i[0].width &&
                          (i = v.getDimensions(this.el.parentNode)),
                        (t.svgWidth =
                          (i[0] * parseInt(e.chart.width, 10)) / 100))
                      : ("px" !== n && "" !== n) ||
                        (t.svgWidth = parseInt(e.chart.width, 10));
                    var a = e.chart.height
                      .toString()
                      .split(/[0-9]+/g)
                      .pop();
                    if ("auto" !== t.svgHeight && "" !== t.svgHeight)
                      if ("%" === a) {
                        var s = v.getDimensions(this.el.parentNode);
                        t.svgHeight =
                          (s[1] * parseInt(e.chart.height, 10)) / 100;
                      } else t.svgHeight = parseInt(e.chart.height, 10);
                    else
                      t.axisCharts
                        ? (t.svgHeight = t.svgWidth / 1.61)
                        : (t.svgHeight = t.svgWidth / 1.2);
                    if (
                      (t.svgWidth < 0 && (t.svgWidth = 0),
                      t.svgHeight < 0 && (t.svgHeight = 0),
                      w.setAttrs(t.dom.Paper.node, {
                        width: t.svgWidth,
                        height: t.svgHeight,
                      }),
                      "%" !== a)
                    ) {
                      var r = e.chart.sparkline.enabled
                        ? 0
                        : t.axisCharts
                        ? e.chart.parentHeightOffset
                        : 0;
                      t.dom.Paper.node.parentNode.parentNode.style.minHeight =
                        t.svgHeight + r + "px";
                    }
                    (t.dom.elWrap.style.width = t.svgWidth + "px"),
                      (t.dom.elWrap.style.height = t.svgHeight + "px");
                  },
                },
                {
                  key: "shiftGraphPosition",
                  value: function () {
                    var t = this.w.globals,
                      e = t.translateY,
                      i = {
                        transform: "translate(" + t.translateX + ", " + e + ")",
                      };
                    w.setAttrs(t.dom.elGraphical.node, i);
                  },
                },
                {
                  key: "resizeNonAxisCharts",
                  value: function () {
                    var t = this.w,
                      e = t.globals,
                      i = 0,
                      n = t.config.chart.sparkline.enabled ? 1 : 15;
                    (n += t.config.grid.padding.bottom),
                      ("top" !== t.config.legend.position &&
                        "bottom" !== t.config.legend.position) ||
                        !t.config.legend.show ||
                        t.config.legend.floating ||
                        (i =
                          new ut(this.ctx).legendHelpers.getLegendBBox().clwh +
                          10);
                    var a = t.globals.dom.baseEl.querySelector(
                        ".apexcharts-radialbar, .apexcharts-pie"
                      ),
                      s = 2.05 * t.globals.radialSize;
                    if (a && !t.config.chart.sparkline.enabled) {
                      var r = v.getBoundingClientRect(a);
                      s = r.bottom;
                      var o = r.bottom - r.top;
                      s = Math.max(2.05 * t.globals.radialSize, o);
                    }
                    var l = s + e.translateY + i + n;
                    e.dom.elLegendForeign &&
                      e.dom.elLegendForeign.setAttribute("height", l),
                      (e.dom.elWrap.style.height = l + "px"),
                      w.setAttrs(e.dom.Paper.node, { height: l }),
                      (e.dom.Paper.node.parentNode.parentNode.style.minHeight =
                        l + "px");
                  },
                },
                {
                  key: "coreCalculations",
                  value: function () {
                    new Q(this.ctx).init();
                  },
                },
                {
                  key: "resetGlobals",
                  value: function () {
                    var t = this,
                      e = function () {
                        return t.w.config.series.map(function (t) {
                          return [];
                        });
                      },
                      i = new W(),
                      n = this.w.globals;
                    i.initGlobalVars(n),
                      (n.seriesXvalues = e()),
                      (n.seriesYvalues = e());
                  },
                },
                {
                  key: "isMultipleY",
                  value: function () {
                    if (
                      this.w.config.yaxis.constructor === Array &&
                      this.w.config.yaxis.length > 1
                    )
                      return (this.w.globals.isMultipleYAxis = !0), !0;
                  },
                },
                {
                  key: "xySettings",
                  value: function () {
                    var t = null,
                      e = this.w;
                    if (e.globals.axisCharts) {
                      if (
                        ("back" === e.config.xaxis.crosshairs.position &&
                          new it(this.ctx).drawXCrosshairs(),
                        "back" === e.config.yaxis[0].crosshairs.position &&
                          new it(this.ctx).drawYCrosshairs(),
                        "datetime" === e.config.xaxis.type &&
                          void 0 === e.config.xaxis.labels.formatter)
                      ) {
                        this.ctx.timeScale = new zt(this.ctx);
                        var i = [];
                        isFinite(e.globals.minX) &&
                        isFinite(e.globals.maxX) &&
                        !e.globals.isBarHorizontal
                          ? (i = this.ctx.timeScale.calculateTimeScaleTicks(
                              e.globals.minX,
                              e.globals.maxX
                            ))
                          : e.globals.isBarHorizontal &&
                            (i = this.ctx.timeScale.calculateTimeScaleTicks(
                              e.globals.minY,
                              e.globals.maxY
                            )),
                          this.ctx.timeScale.recalcDimensionsBasedOnFormat(i);
                      }
                      t = new A(this.ctx).getCalculatedRatios();
                    }
                    return t;
                  },
                },
                {
                  key: "updateSourceChart",
                  value: function (t) {
                    (this.ctx.w.globals.selection = void 0),
                      this.ctx.updateHelpers._updateOptions(
                        {
                          chart: {
                            selection: {
                              xaxis: {
                                min: t.w.globals.minX,
                                max: t.w.globals.maxX,
                              },
                            },
                          },
                        },
                        !1,
                        !1
                      );
                  },
                },
                {
                  key: "setupBrushHandler",
                  value: function () {
                    var t = this,
                      e = this.w;
                    if (
                      e.config.chart.brush.enabled &&
                      "function" != typeof e.config.chart.events.selection
                    ) {
                      var i = e.config.chart.brush.targets || [
                        e.config.chart.brush.target,
                      ];
                      i.forEach(function (e) {
                        var i = ApexCharts.getChartByID(e);
                        (i.w.globals.brushSource = t.ctx),
                          "function" != typeof i.w.config.chart.events.zoomed &&
                            (i.w.config.chart.events.zoomed = function () {
                              t.updateSourceChart(i);
                            }),
                          "function" !=
                            typeof i.w.config.chart.events.scrolled &&
                            (i.w.config.chart.events.scrolled = function () {
                              t.updateSourceChart(i);
                            });
                      }),
                        (e.config.chart.events.selection = function (t, n) {
                          i.forEach(function (t) {
                            var i = ApexCharts.getChartByID(t),
                              a = v.clone(e.config.yaxis);
                            if (
                              e.config.chart.brush.autoScaleYaxis &&
                              1 === i.w.globals.series.length
                            ) {
                              var s = new Z(i);
                              a = s.autoScaleY(i, a, n);
                            }
                            var r = i.w.config.yaxis.reduce(function (t, e, n) {
                              return [].concat(m(t), [
                                h(
                                  h({}, i.w.config.yaxis[n]),
                                  {},
                                  { min: a[0].min, max: a[0].max }
                                ),
                              ]);
                            }, []);
                            i.ctx.updateHelpers._updateOptions(
                              {
                                xaxis: { min: n.xaxis.min, max: n.xaxis.max },
                                yaxis: r,
                              },
                              !1,
                              !1,
                              !1,
                              !1
                            );
                          });
                        });
                    }
                  },
                },
              ]),
              t
            );
          })(),
          Ft = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.w = e.w);
            }
            return (
              o(t, [
                {
                  key: "_updateOptions",
                  value: function (t) {
                    var e = this,
                      i =
                        arguments.length > 1 &&
                        void 0 !== arguments[1] &&
                        arguments[1],
                      n =
                        !(arguments.length > 2 && void 0 !== arguments[2]) ||
                        arguments[2],
                      s =
                        !(arguments.length > 3 && void 0 !== arguments[3]) ||
                        arguments[3],
                      r =
                        arguments.length > 4 &&
                        void 0 !== arguments[4] &&
                        arguments[4],
                      o = [this.ctx];
                    s && (o = this.ctx.getSyncedCharts()),
                      this.ctx.w.globals.isExecCalled &&
                        ((o = [this.ctx]),
                        (this.ctx.w.globals.isExecCalled = !1)),
                      o.forEach(function (s) {
                        var o = s.w;
                        return (
                          (o.globals.shouldAnimate = n),
                          i ||
                            ((o.globals.resized = !0),
                            (o.globals.dataChanged = !0),
                            n && s.series.getPreviousPaths()),
                          t &&
                            "object" === a(t) &&
                            ((s.config = new Y(t)),
                            (t = A.extendArrayProps(s.config, t, o)),
                            s.w.globals.chartID !== e.ctx.w.globals.chartID &&
                              delete t.series,
                            (o.config = v.extend(o.config, t)),
                            r &&
                              ((o.globals.lastXAxis = t.xaxis
                                ? v.clone(t.xaxis)
                                : []),
                              (o.globals.lastYAxis = t.yaxis
                                ? v.clone(t.yaxis)
                                : []),
                              (o.globals.initialConfig = v.extend(
                                {},
                                o.config
                              )),
                              (o.globals.initialSeries = v.clone(
                                o.config.series
                              )))),
                          s.update(t)
                        );
                      });
                  },
                },
                {
                  key: "_updateSeries",
                  value: function (t, e) {
                    var i,
                      n = this,
                      a =
                        arguments.length > 2 &&
                        void 0 !== arguments[2] &&
                        arguments[2],
                      s = this.w;
                    return (
                      (s.globals.shouldAnimate = e),
                      (s.globals.dataChanged = !0),
                      e && this.ctx.series.getPreviousPaths(),
                      s.globals.axisCharts
                        ? (0 ===
                            (i = t.map(function (t, e) {
                              return n._extendSeries(t, e);
                            })).length && (i = [{ data: [] }]),
                          (s.config.series = i))
                        : (s.config.series = t.slice()),
                      a && (s.globals.initialSeries = v.clone(s.config.series)),
                      this.ctx.update()
                    );
                  },
                },
                {
                  key: "_extendSeries",
                  value: function (t, e) {
                    var i = this.w,
                      n = i.config.series[e];
                    return h(
                      h({}, i.config.series[e]),
                      {},
                      {
                        name: t.name ? t.name : n && n.name,
                        color: t.color ? t.color : n && n.color,
                        type: t.type ? t.type : n && n.type,
                        data: t.data ? t.data : n && n.data,
                      }
                    );
                  },
                },
                {
                  key: "toggleDataPointSelection",
                  value: function (t, e) {
                    var i = this.w,
                      n = null,
                      a = ".apexcharts-series[data\\:realIndex='".concat(
                        t,
                        "']"
                      );
                    return (
                      i.globals.axisCharts
                        ? (n = i.globals.dom.Paper.select(
                            ""
                              .concat(a, " path[j='")
                              .concat(e, "'], ")
                              .concat(a, " circle[j='")
                              .concat(e, "'], ")
                              .concat(a, " rect[j='")
                              .concat(e, "']")
                          ).members[0])
                        : void 0 === e &&
                          ((n = i.globals.dom.Paper.select(
                            "".concat(a, " path[j='").concat(t, "']")
                          ).members[0]),
                          ("pie" !== i.config.chart.type &&
                            "polarArea" !== i.config.chart.type &&
                            "donut" !== i.config.chart.type) ||
                            this.ctx.pie.pieClicked(t)),
                      n
                        ? (new w(this.ctx).pathMouseDown(n, null),
                          n.node ? n.node : null)
                        : (console.warn(
                            "toggleDataPointSelection: Element not found"
                          ),
                          null)
                    );
                  },
                },
                {
                  key: "forceXAxisUpdate",
                  value: function (t) {
                    var e = this.w;
                    if (
                      (["min", "max"].forEach(function (i) {
                        void 0 !== t.xaxis[i] &&
                          ((e.config.xaxis[i] = t.xaxis[i]),
                          (e.globals.lastXAxis[i] = t.xaxis[i]));
                      }),
                      t.xaxis.categories &&
                        t.xaxis.categories.length &&
                        (e.config.xaxis.categories = t.xaxis.categories),
                      e.config.xaxis.convertedCatToNumeric)
                    ) {
                      var i = new H(t);
                      t = i.convertCatToNumericXaxis(t, this.ctx);
                    }
                    return t;
                  },
                },
                {
                  key: "forceYAxisUpdate",
                  value: function (t) {
                    var e = this.w;
                    return (
                      e.config.chart.stacked &&
                        "100%" === e.config.chart.stackType &&
                        (Array.isArray(t.yaxis)
                          ? t.yaxis.forEach(function (e, i) {
                              (t.yaxis[i].min = 0), (t.yaxis[i].max = 100);
                            })
                          : ((t.yaxis.min = 0), (t.yaxis.max = 100))),
                      t
                    );
                  },
                },
                {
                  key: "revertDefaultAxisMinMax",
                  value: function (t) {
                    var e = this,
                      i = this.w,
                      n = i.globals.lastXAxis,
                      a = i.globals.lastYAxis;
                    t && t.xaxis && (n = t.xaxis),
                      t && t.yaxis && (a = t.yaxis),
                      (i.config.xaxis.min = n.min),
                      (i.config.xaxis.max = n.max);
                    i.config.yaxis.map(function (t, n) {
                      i.globals.zoomed || void 0 !== a[n]
                        ? (function (t) {
                            void 0 !== a[t] &&
                              ((i.config.yaxis[t].min = a[t].min),
                              (i.config.yaxis[t].max = a[t].max));
                          })(n)
                        : void 0 !== e.ctx.opts.yaxis[n] &&
                          ((t.min = e.ctx.opts.yaxis[n].min),
                          (t.max = e.ctx.opts.yaxis[n].max));
                    });
                  },
                },
              ]),
              t
            );
          })();
        (Mt = "undefined" != typeof window ? window : void 0),
          (Nt = function (t, e) {
            var i = ((void 0 !== this ? this : t).SVG = function (t) {
              if (i.supported)
                return (t = new i.Doc(t)), i.parser.draw || i.prepare(), t;
            });
            if (
              ((i.ns = "http://www.w3.org/2000/svg"),
              (i.xmlns = "http://www.w3.org/2000/xmlns/"),
              (i.xlink = "http://www.w3.org/1999/xlink"),
              (i.svgjs = "http://svgjs.dev"),
              (i.supported = !0),
              !i.supported)
            )
              return !1;
            (i.did = 1e3),
              (i.eid = function (t) {
                return "Svgjs" + d(t) + i.did++;
              }),
              (i.create = function (t) {
                var i = e.createElementNS(this.ns, t);
                return i.setAttribute("id", this.eid(t)), i;
              }),
              (i.extend = function () {
                var t, e;
                e = (t = [].slice.call(arguments)).pop();
                for (var n = t.length - 1; n >= 0; n--)
                  if (t[n]) for (var a in e) t[n].prototype[a] = e[a];
                i.Set && i.Set.inherit && i.Set.inherit();
              }),
              (i.invent = function (t) {
                var e =
                  "function" == typeof t.create
                    ? t.create
                    : function () {
                        this.constructor.call(this, i.create(t.create));
                      };
                return (
                  t.inherit && (e.prototype = new t.inherit()),
                  t.extend && i.extend(e, t.extend),
                  t.construct && i.extend(t.parent || i.Container, t.construct),
                  e
                );
              }),
              (i.adopt = function (e) {
                return e
                  ? e.instance
                    ? e.instance
                    : (((n =
                        "svg" == e.nodeName
                          ? e.parentNode instanceof t.SVGElement
                            ? new i.Nested()
                            : new i.Doc()
                          : "linearGradient" == e.nodeName
                          ? new i.Gradient("linear")
                          : "radialGradient" == e.nodeName
                          ? new i.Gradient("radial")
                          : i[d(e.nodeName)]
                          ? new i[d(e.nodeName)]()
                          : new i.Element(e)).type = e.nodeName),
                      (n.node = e),
                      (e.instance = n),
                      n instanceof i.Doc && n.namespace().defs(),
                      n.setData(JSON.parse(e.getAttribute("svgjs:data")) || {}),
                      n)
                  : null;
                var n;
              }),
              (i.prepare = function () {
                var t = e.getElementsByTagName("body")[0],
                  n = (
                    t ? new i.Doc(t) : i.adopt(e.documentElement).nested()
                  ).size(2, 0);
                i.parser = {
                  body: t || e.documentElement,
                  draw: n.style(
                    "opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden"
                  ).node,
                  poly: n.polyline().node,
                  path: n.path().node,
                  native: i.create("svg"),
                };
              }),
              (i.parser = { native: i.create("svg") }),
              e.addEventListener(
                "DOMContentLoaded",
                function () {
                  i.parser.draw || i.prepare();
                },
                !1
              ),
              (i.regex = {
                numberAndUnit:
                  /^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i,
                hex: /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,
                rgb: /rgb\((\d+),(\d+),(\d+)\)/,
                reference: /#([a-z0-9\-_]+)/i,
                transforms: /\)\s*,?\s*/,
                whitespace: /\s/g,
                isHex: /^#[a-f0-9]{3,6}$/i,
                isRgb: /^rgb\(/,
                isCss: /[^:]+:[^;]+;?/,
                isBlank: /^(\s+)?$/,
                isNumber: /^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
                isPercent: /^-?[\d\.]+%$/,
                isImage: /\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i,
                delimiter: /[\s,]+/,
                hyphen: /([^e])\-/gi,
                pathLetters: /[MLHVCSQTAZ]/gi,
                isPathLetter: /[MLHVCSQTAZ]/i,
                numbersWithDots:
                  /((\d?\.\d+(?:e[+-]?\d+)?)((?:\.\d+(?:e[+-]?\d+)?)+))+/gi,
                dots: /\./g,
              }),
              (i.utils = {
                map: function (t, e) {
                  for (var i = t.length, n = [], a = 0; a < i; a++)
                    n.push(e(t[a]));
                  return n;
                },
                filter: function (t, e) {
                  for (var i = t.length, n = [], a = 0; a < i; a++)
                    e(t[a]) && n.push(t[a]);
                  return n;
                },
                filterSVGElements: function (e) {
                  return this.filter(e, function (e) {
                    return e instanceof t.SVGElement;
                  });
                },
              }),
              (i.defaults = {
                attrs: {
                  "fill-opacity": 1,
                  "stroke-opacity": 1,
                  "stroke-width": 0,
                  "stroke-linejoin": "miter",
                  "stroke-linecap": "butt",
                  fill: "#000000",
                  stroke: "#000000",
                  opacity: 1,
                  x: 0,
                  y: 0,
                  cx: 0,
                  cy: 0,
                  width: 0,
                  height: 0,
                  r: 0,
                  rx: 0,
                  ry: 0,
                  offset: 0,
                  "stop-opacity": 1,
                  "stop-color": "#000000",
                  "font-size": 16,
                  "font-family": "Helvetica, Arial, sans-serif",
                  "text-anchor": "start",
                },
              }),
              (i.Color = function (t) {
                var e, n;
                (this.r = 0),
                  (this.g = 0),
                  (this.b = 0),
                  t &&
                    ("string" == typeof t
                      ? i.regex.isRgb.test(t)
                        ? ((e = i.regex.rgb.exec(
                            t.replace(i.regex.whitespace, "")
                          )),
                          (this.r = parseInt(e[1])),
                          (this.g = parseInt(e[2])),
                          (this.b = parseInt(e[3])))
                        : i.regex.isHex.test(t) &&
                          ((e = i.regex.hex.exec(
                            4 == (n = t).length
                              ? [
                                  "#",
                                  n.substring(1, 2),
                                  n.substring(1, 2),
                                  n.substring(2, 3),
                                  n.substring(2, 3),
                                  n.substring(3, 4),
                                  n.substring(3, 4),
                                ].join("")
                              : n
                          )),
                          (this.r = parseInt(e[1], 16)),
                          (this.g = parseInt(e[2], 16)),
                          (this.b = parseInt(e[3], 16)))
                      : "object" === a(t) &&
                        ((this.r = t.r), (this.g = t.g), (this.b = t.b)));
              }),
              i.extend(i.Color, {
                toString: function () {
                  return this.toHex();
                },
                toHex: function () {
                  return "#" + u(this.r) + u(this.g) + u(this.b);
                },
                toRgb: function () {
                  return "rgb(" + [this.r, this.g, this.b].join() + ")";
                },
                brightness: function () {
                  return (
                    (this.r / 255) * 0.3 +
                    (this.g / 255) * 0.59 +
                    (this.b / 255) * 0.11
                  );
                },
                morph: function (t) {
                  return (this.destination = new i.Color(t)), this;
                },
                at: function (t) {
                  return this.destination
                    ? ((t = t < 0 ? 0 : t > 1 ? 1 : t),
                      new i.Color({
                        r: ~~(this.r + (this.destination.r - this.r) * t),
                        g: ~~(this.g + (this.destination.g - this.g) * t),
                        b: ~~(this.b + (this.destination.b - this.b) * t),
                      }))
                    : this;
                },
              }),
              (i.Color.test = function (t) {
                return (
                  (t += ""), i.regex.isHex.test(t) || i.regex.isRgb.test(t)
                );
              }),
              (i.Color.isRgb = function (t) {
                return (
                  t &&
                  "number" == typeof t.r &&
                  "number" == typeof t.g &&
                  "number" == typeof t.b
                );
              }),
              (i.Color.isColor = function (t) {
                return i.Color.isRgb(t) || i.Color.test(t);
              }),
              (i.Array = function (t, e) {
                0 == (t = (t || []).valueOf()).length && e && (t = e.valueOf()),
                  (this.value = this.parse(t));
              }),
              i.extend(i.Array, {
                toString: function () {
                  return this.value.join(" ");
                },
                valueOf: function () {
                  return this.value;
                },
                parse: function (t) {
                  return (
                    (t = t.valueOf()), Array.isArray(t) ? t : this.split(t)
                  );
                },
              }),
              (i.PointArray = function (t, e) {
                i.Array.call(this, t, e || [[0, 0]]);
              }),
              (i.PointArray.prototype = new i.Array()),
              (i.PointArray.prototype.constructor = i.PointArray);
            for (
              var n = {
                  M: function (t, e, i) {
                    return (
                      (e.x = i.x = t[0]), (e.y = i.y = t[1]), ["M", e.x, e.y]
                    );
                  },
                  L: function (t, e) {
                    return (e.x = t[0]), (e.y = t[1]), ["L", t[0], t[1]];
                  },
                  H: function (t, e) {
                    return (e.x = t[0]), ["H", t[0]];
                  },
                  V: function (t, e) {
                    return (e.y = t[0]), ["V", t[0]];
                  },
                  C: function (t, e) {
                    return (
                      (e.x = t[4]),
                      (e.y = t[5]),
                      ["C", t[0], t[1], t[2], t[3], t[4], t[5]]
                    );
                  },
                  Q: function (t, e) {
                    return (
                      (e.x = t[2]), (e.y = t[3]), ["Q", t[0], t[1], t[2], t[3]]
                    );
                  },
                  Z: function (t, e, i) {
                    return (e.x = i.x), (e.y = i.y), ["Z"];
                  },
                },
                s = "mlhvqtcsaz".split(""),
                r = 0,
                o = s.length;
              r < o;
              ++r
            )
              n[s[r]] = (function (t) {
                return function (e, i, a) {
                  if ("H" == t) e[0] = e[0] + i.x;
                  else if ("V" == t) e[0] = e[0] + i.y;
                  else if ("A" == t) (e[5] = e[5] + i.x), (e[6] = e[6] + i.y);
                  else
                    for (var s = 0, r = e.length; s < r; ++s)
                      e[s] = e[s] + (s % 2 ? i.y : i.x);
                  return n[t](e, i, a);
                };
              })(s[r].toUpperCase());
            (i.PathArray = function (t, e) {
              i.Array.call(this, t, e || [["M", 0, 0]]);
            }),
              (i.PathArray.prototype = new i.Array()),
              (i.PathArray.prototype.constructor = i.PathArray),
              i.extend(i.PathArray, {
                toString: function () {
                  return (function (t) {
                    for (var e = 0, i = t.length, n = ""; e < i; e++)
                      (n += t[e][0]),
                        null != t[e][1] &&
                          ((n += t[e][1]),
                          null != t[e][2] &&
                            ((n += " "),
                            (n += t[e][2]),
                            null != t[e][3] &&
                              ((n += " "),
                              (n += t[e][3]),
                              (n += " "),
                              (n += t[e][4]),
                              null != t[e][5] &&
                                ((n += " "),
                                (n += t[e][5]),
                                (n += " "),
                                (n += t[e][6]),
                                null != t[e][7] &&
                                  ((n += " "), (n += t[e][7]))))));
                    return n + " ";
                  })(this.value);
                },
                move: function (t, e) {
                  var i = this.bbox();
                  return i.x, i.y, this;
                },
                at: function (t) {
                  if (!this.destination) return this;
                  for (
                    var e = this.value,
                      n = this.destination.value,
                      a = [],
                      s = new i.PathArray(),
                      r = 0,
                      o = e.length;
                    r < o;
                    r++
                  ) {
                    a[r] = [e[r][0]];
                    for (var l = 1, c = e[r].length; l < c; l++)
                      a[r][l] = e[r][l] + (n[r][l] - e[r][l]) * t;
                    "A" === a[r][0] &&
                      ((a[r][4] = +(0 != a[r][4])),
                      (a[r][5] = +(0 != a[r][5])));
                  }
                  return (s.value = a), s;
                },
                parse: function (t) {
                  if (t instanceof i.PathArray) return t.valueOf();
                  var e,
                    a = {
                      M: 2,
                      L: 2,
                      H: 1,
                      V: 1,
                      C: 6,
                      S: 4,
                      Q: 4,
                      T: 2,
                      A: 7,
                      Z: 0,
                    };
                  t =
                    "string" == typeof t
                      ? t
                          .replace(i.regex.numbersWithDots, c)
                          .replace(i.regex.pathLetters, " $& ")
                          .replace(i.regex.hyphen, "$1 -")
                          .trim()
                          .split(i.regex.delimiter)
                      : t.reduce(function (t, e) {
                          return [].concat.call(t, e);
                        }, []);
                  var s = [],
                    r = new i.Point(),
                    o = new i.Point(),
                    l = 0,
                    h = t.length;
                  do {
                    i.regex.isPathLetter.test(t[l])
                      ? ((e = t[l]), ++l)
                      : "M" == e
                      ? (e = "L")
                      : "m" == e && (e = "l"),
                      s.push(
                        n[e].call(
                          null,
                          t.slice(l, (l += a[e.toUpperCase()])).map(parseFloat),
                          r,
                          o
                        )
                      );
                  } while (h > l);
                  return s;
                },
                bbox: function () {
                  return (
                    i.parser.draw || i.prepare(),
                    i.parser.path.setAttribute("d", this.toString()),
                    i.parser.path.getBBox()
                  );
                },
              }),
              (i.Number = i.invent({
                create: function (t, e) {
                  (this.value = 0),
                    (this.unit = e || ""),
                    "number" == typeof t
                      ? (this.value = isNaN(t)
                          ? 0
                          : isFinite(t)
                          ? t
                          : t < 0
                          ? -34e37
                          : 34e37)
                      : "string" == typeof t
                      ? (e = t.match(i.regex.numberAndUnit)) &&
                        ((this.value = parseFloat(e[1])),
                        "%" == e[5]
                          ? (this.value /= 100)
                          : "s" == e[5] && (this.value *= 1e3),
                        (this.unit = e[5]))
                      : t instanceof i.Number &&
                        ((this.value = t.valueOf()), (this.unit = t.unit));
                },
                extend: {
                  toString: function () {
                    return (
                      ("%" == this.unit
                        ? ~~(1e8 * this.value) / 1e6
                        : "s" == this.unit
                        ? this.value / 1e3
                        : this.value) + this.unit
                    );
                  },
                  toJSON: function () {
                    return this.toString();
                  },
                  valueOf: function () {
                    return this.value;
                  },
                  plus: function (t) {
                    return (
                      (t = new i.Number(t)),
                      new i.Number(this + t, this.unit || t.unit)
                    );
                  },
                  minus: function (t) {
                    return (
                      (t = new i.Number(t)),
                      new i.Number(this - t, this.unit || t.unit)
                    );
                  },
                  times: function (t) {
                    return (
                      (t = new i.Number(t)),
                      new i.Number(this * t, this.unit || t.unit)
                    );
                  },
                  divide: function (t) {
                    return (
                      (t = new i.Number(t)),
                      new i.Number(this / t, this.unit || t.unit)
                    );
                  },
                  to: function (t) {
                    var e = new i.Number(this);
                    return "string" == typeof t && (e.unit = t), e;
                  },
                  morph: function (t) {
                    return (
                      (this.destination = new i.Number(t)),
                      t.relative && (this.destination.value += this.value),
                      this
                    );
                  },
                  at: function (t) {
                    return this.destination
                      ? new i.Number(this.destination)
                          .minus(this)
                          .times(t)
                          .plus(this)
                      : this;
                  },
                },
              })),
              (i.Element = i.invent({
                create: function (t) {
                  (this._stroke = i.defaults.attrs.stroke),
                    (this._event = null),
                    (this.dom = {}),
                    (this.node = t) &&
                      ((this.type = t.nodeName),
                      (this.node.instance = this),
                      (this._stroke =
                        t.getAttribute("stroke") || this._stroke));
                },
                extend: {
                  x: function (t) {
                    return this.attr("x", t);
                  },
                  y: function (t) {
                    return this.attr("y", t);
                  },
                  cx: function (t) {
                    return null == t
                      ? this.x() + this.width() / 2
                      : this.x(t - this.width() / 2);
                  },
                  cy: function (t) {
                    return null == t
                      ? this.y() + this.height() / 2
                      : this.y(t - this.height() / 2);
                  },
                  move: function (t, e) {
                    return this.x(t).y(e);
                  },
                  center: function (t, e) {
                    return this.cx(t).cy(e);
                  },
                  width: function (t) {
                    return this.attr("width", t);
                  },
                  height: function (t) {
                    return this.attr("height", t);
                  },
                  size: function (t, e) {
                    var n = f(this, t, e);
                    return this.width(new i.Number(n.width)).height(
                      new i.Number(n.height)
                    );
                  },
                  clone: function (t) {
                    this.writeDataToDom();
                    var e = m(this.node.cloneNode(!0));
                    return t ? t.add(e) : this.after(e), e;
                  },
                  remove: function () {
                    return (
                      this.parent() && this.parent().removeElement(this), this
                    );
                  },
                  replace: function (t) {
                    return this.after(t).remove(), t;
                  },
                  addTo: function (t) {
                    return t.put(this);
                  },
                  putIn: function (t) {
                    return t.add(this);
                  },
                  id: function (t) {
                    return this.attr("id", t);
                  },
                  show: function () {
                    return this.style("display", "");
                  },
                  hide: function () {
                    return this.style("display", "none");
                  },
                  visible: function () {
                    return "none" != this.style("display");
                  },
                  toString: function () {
                    return this.attr("id");
                  },
                  classes: function () {
                    var t = this.attr("class");
                    return null == t ? [] : t.trim().split(i.regex.delimiter);
                  },
                  hasClass: function (t) {
                    return -1 != this.classes().indexOf(t);
                  },
                  addClass: function (t) {
                    if (!this.hasClass(t)) {
                      var e = this.classes();
                      e.push(t), this.attr("class", e.join(" "));
                    }
                    return this;
                  },
                  removeClass: function (t) {
                    return (
                      this.hasClass(t) &&
                        this.attr(
                          "class",
                          this.classes()
                            .filter(function (e) {
                              return e != t;
                            })
                            .join(" ")
                        ),
                      this
                    );
                  },
                  toggleClass: function (t) {
                    return this.hasClass(t)
                      ? this.removeClass(t)
                      : this.addClass(t);
                  },
                  reference: function (t) {
                    return i.get(this.attr(t));
                  },
                  parent: function (e) {
                    var n = this;
                    if (!n.node.parentNode) return null;
                    if (((n = i.adopt(n.node.parentNode)), !e)) return n;
                    for (; n && n.node instanceof t.SVGElement; ) {
                      if ("string" == typeof e ? n.matches(e) : n instanceof e)
                        return n;
                      if (
                        !n.node.parentNode ||
                        "#document" == n.node.parentNode.nodeName
                      )
                        return null;
                      n = i.adopt(n.node.parentNode);
                    }
                  },
                  doc: function () {
                    return this instanceof i.Doc ? this : this.parent(i.Doc);
                  },
                  parents: function (t) {
                    var e = [],
                      i = this;
                    do {
                      if (!(i = i.parent(t)) || !i.node) break;
                      e.push(i);
                    } while (i.parent);
                    return e;
                  },
                  matches: function (t) {
                    return (function (t, e) {
                      return (
                        t.matches ||
                        t.matchesSelector ||
                        t.msMatchesSelector ||
                        t.mozMatchesSelector ||
                        t.webkitMatchesSelector ||
                        t.oMatchesSelector
                      ).call(t, e);
                    })(this.node, t);
                  },
                  native: function () {
                    return this.node;
                  },
                  svg: function (t) {
                    var n = e.createElement("svg");
                    if (!(t && this instanceof i.Parent))
                      return (
                        n.appendChild((t = e.createElement("svg"))),
                        this.writeDataToDom(),
                        t.appendChild(this.node.cloneNode(!0)),
                        n.innerHTML
                          .replace(/^<svg>/, "")
                          .replace(/<\/svg>$/, "")
                      );
                    n.innerHTML =
                      "<svg>" +
                      t
                        .replace(/\n/, "")
                        .replace(/<([\w:-]+)([^<]+?)\/>/g, "<$1$2></$1>") +
                      "</svg>";
                    for (
                      var a = 0, s = n.firstChild.childNodes.length;
                      a < s;
                      a++
                    )
                      this.node.appendChild(n.firstChild.firstChild);
                    return this;
                  },
                  writeDataToDom: function () {
                    return (
                      (this.each || this.lines) &&
                        (this.each ? this : this.lines()).each(function () {
                          this.writeDataToDom();
                        }),
                      this.node.removeAttribute("svgjs:data"),
                      Object.keys(this.dom).length &&
                        this.node.setAttribute(
                          "svgjs:data",
                          JSON.stringify(this.dom)
                        ),
                      this
                    );
                  },
                  setData: function (t) {
                    return (this.dom = t), this;
                  },
                  is: function (t) {
                    return (function (t, e) {
                      return t instanceof e;
                    })(this, t);
                  },
                },
              })),
              (i.easing = {
                "-": function (t) {
                  return t;
                },
                "<>": function (t) {
                  return -Math.cos(t * Math.PI) / 2 + 0.5;
                },
                ">": function (t) {
                  return Math.sin((t * Math.PI) / 2);
                },
                "<": function (t) {
                  return 1 - Math.cos((t * Math.PI) / 2);
                },
              }),
              (i.morph = function (t) {
                return function (e, n) {
                  return new i.MorphObj(e, n).at(t);
                };
              }),
              (i.Situation = i.invent({
                create: function (t) {
                  (this.init = !1),
                    (this.reversed = !1),
                    (this.reversing = !1),
                    (this.duration = new i.Number(t.duration).valueOf()),
                    (this.delay = new i.Number(t.delay).valueOf()),
                    (this.start = +new Date() + this.delay),
                    (this.finish = this.start + this.duration),
                    (this.ease = t.ease),
                    (this.loop = 0),
                    (this.loops = !1),
                    (this.animations = {}),
                    (this.attrs = {}),
                    (this.styles = {}),
                    (this.transforms = []),
                    (this.once = {});
                },
              })),
              (i.FX = i.invent({
                create: function (t) {
                  (this._target = t),
                    (this.situations = []),
                    (this.active = !1),
                    (this.situation = null),
                    (this.paused = !1),
                    (this.lastPos = 0),
                    (this.pos = 0),
                    (this.absPos = 0),
                    (this._speed = 1);
                },
                extend: {
                  animate: function (t, e, n) {
                    "object" === a(t) &&
                      ((e = t.ease), (n = t.delay), (t = t.duration));
                    var s = new i.Situation({
                      duration: t || 1e3,
                      delay: n || 0,
                      ease: i.easing[e || "-"] || e,
                    });
                    return this.queue(s), this;
                  },
                  target: function (t) {
                    return t && t instanceof i.Element
                      ? ((this._target = t), this)
                      : this._target;
                  },
                  timeToAbsPos: function (t) {
                    return (
                      (t - this.situation.start) /
                      (this.situation.duration / this._speed)
                    );
                  },
                  absPosToTime: function (t) {
                    return (
                      (this.situation.duration / this._speed) * t +
                      this.situation.start
                    );
                  },
                  startAnimFrame: function () {
                    this.stopAnimFrame(),
                      (this.animationFrame = t.requestAnimationFrame(
                        function () {
                          this.step();
                        }.bind(this)
                      ));
                  },
                  stopAnimFrame: function () {
                    t.cancelAnimationFrame(this.animationFrame);
                  },
                  start: function () {
                    return (
                      !this.active &&
                        this.situation &&
                        ((this.active = !0), this.startCurrent()),
                      this
                    );
                  },
                  startCurrent: function () {
                    return (
                      (this.situation.start =
                        +new Date() + this.situation.delay / this._speed),
                      (this.situation.finish =
                        this.situation.start +
                        this.situation.duration / this._speed),
                      this.initAnimations().step()
                    );
                  },
                  queue: function (t) {
                    return (
                      ("function" == typeof t || t instanceof i.Situation) &&
                        this.situations.push(t),
                      this.situation ||
                        (this.situation = this.situations.shift()),
                      this
                    );
                  },
                  dequeue: function () {
                    return (
                      this.stop(),
                      (this.situation = this.situations.shift()),
                      this.situation &&
                        (this.situation instanceof i.Situation
                          ? this.start()
                          : this.situation.call(this)),
                      this
                    );
                  },
                  initAnimations: function () {
                    var t,
                      e = this.situation;
                    if (e.init) return this;
                    for (var n in e.animations) {
                      (t = this.target()[n]()),
                        Array.isArray(t) || (t = [t]),
                        Array.isArray(e.animations[n]) ||
                          (e.animations[n] = [e.animations[n]]);
                      for (var a = t.length; a--; )
                        e.animations[n][a] instanceof i.Number &&
                          (t[a] = new i.Number(t[a])),
                          (e.animations[n][a] = t[a].morph(e.animations[n][a]));
                    }
                    for (var n in e.attrs)
                      e.attrs[n] = new i.MorphObj(
                        this.target().attr(n),
                        e.attrs[n]
                      );
                    for (var n in e.styles)
                      e.styles[n] = new i.MorphObj(
                        this.target().style(n),
                        e.styles[n]
                      );
                    return (
                      (e.initialTransformation = this.target().matrixify()),
                      (e.init = !0),
                      this
                    );
                  },
                  clearQueue: function () {
                    return (this.situations = []), this;
                  },
                  clearCurrent: function () {
                    return (this.situation = null), this;
                  },
                  stop: function (t, e) {
                    var i = this.active;
                    return (
                      (this.active = !1),
                      e && this.clearQueue(),
                      t &&
                        this.situation &&
                        (!i && this.startCurrent(), this.atEnd()),
                      this.stopAnimFrame(),
                      this.clearCurrent()
                    );
                  },
                  after: function (t) {
                    var e = this.last();
                    return (
                      this.target().on("finished.fx", function i(n) {
                        n.detail.situation == e &&
                          (t.call(this, e), this.off("finished.fx", i));
                      }),
                      this._callStart()
                    );
                  },
                  during: function (t) {
                    var e = this.last(),
                      n = function (n) {
                        n.detail.situation == e &&
                          t.call(
                            this,
                            n.detail.pos,
                            i.morph(n.detail.pos),
                            n.detail.eased,
                            e
                          );
                      };
                    return (
                      this.target().off("during.fx", n).on("during.fx", n),
                      this.after(function () {
                        this.off("during.fx", n);
                      }),
                      this._callStart()
                    );
                  },
                  afterAll: function (t) {
                    var e = function e(i) {
                      t.call(this), this.off("allfinished.fx", e);
                    };
                    return (
                      this.target()
                        .off("allfinished.fx", e)
                        .on("allfinished.fx", e),
                      this._callStart()
                    );
                  },
                  last: function () {
                    return this.situations.length
                      ? this.situations[this.situations.length - 1]
                      : this.situation;
                  },
                  add: function (t, e, i) {
                    return (
                      (this.last()[i || "animations"][t] = e), this._callStart()
                    );
                  },
                  step: function (t) {
                    var e, i, n;
                    t || (this.absPos = this.timeToAbsPos(+new Date())),
                      !1 !== this.situation.loops
                        ? ((e = Math.max(this.absPos, 0)),
                          (i = Math.floor(e)),
                          !0 === this.situation.loops ||
                          i < this.situation.loops
                            ? ((this.pos = e - i),
                              (n = this.situation.loop),
                              (this.situation.loop = i))
                            : ((this.absPos = this.situation.loops),
                              (this.pos = 1),
                              (n = this.situation.loop - 1),
                              (this.situation.loop = this.situation.loops)),
                          this.situation.reversing &&
                            (this.situation.reversed =
                              this.situation.reversed !=
                              Boolean((this.situation.loop - n) % 2)))
                        : ((this.absPos = Math.min(this.absPos, 1)),
                          (this.pos = this.absPos)),
                      this.pos < 0 && (this.pos = 0),
                      this.situation.reversed && (this.pos = 1 - this.pos);
                    var a = this.situation.ease(this.pos);
                    for (var s in this.situation.once)
                      s > this.lastPos &&
                        s <= a &&
                        (this.situation.once[s].call(
                          this.target(),
                          this.pos,
                          a
                        ),
                        delete this.situation.once[s]);
                    return (
                      this.active &&
                        this.target().fire("during", {
                          pos: this.pos,
                          eased: a,
                          fx: this,
                          situation: this.situation,
                        }),
                      this.situation
                        ? (this.eachAt(),
                          (1 == this.pos && !this.situation.reversed) ||
                          (this.situation.reversed && 0 == this.pos)
                            ? (this.stopAnimFrame(),
                              this.target().fire("finished", {
                                fx: this,
                                situation: this.situation,
                              }),
                              this.situations.length ||
                                (this.target().fire("allfinished"),
                                this.situations.length ||
                                  (this.target().off(".fx"),
                                  (this.active = !1))),
                              this.active
                                ? this.dequeue()
                                : this.clearCurrent())
                            : !this.paused &&
                              this.active &&
                              this.startAnimFrame(),
                          (this.lastPos = a),
                          this)
                        : this
                    );
                  },
                  eachAt: function () {
                    var t,
                      e = this,
                      n = this.target(),
                      a = this.situation;
                    for (var s in a.animations)
                      (t = [].concat(a.animations[s]).map(function (t) {
                        return "string" != typeof t && t.at
                          ? t.at(a.ease(e.pos), e.pos)
                          : t;
                      })),
                        n[s].apply(n, t);
                    for (var s in a.attrs)
                      (t = [s].concat(a.attrs[s]).map(function (t) {
                        return "string" != typeof t && t.at
                          ? t.at(a.ease(e.pos), e.pos)
                          : t;
                      })),
                        n.attr.apply(n, t);
                    for (var s in a.styles)
                      (t = [s].concat(a.styles[s]).map(function (t) {
                        return "string" != typeof t && t.at
                          ? t.at(a.ease(e.pos), e.pos)
                          : t;
                      })),
                        n.style.apply(n, t);
                    if (a.transforms.length) {
                      (t = a.initialTransformation), (s = 0);
                      for (var r = a.transforms.length; s < r; s++) {
                        var o = a.transforms[s];
                        o instanceof i.Matrix
                          ? (t = o.relative
                              ? t.multiply(
                                  new i.Matrix().morph(o).at(a.ease(this.pos))
                                )
                              : t.morph(o).at(a.ease(this.pos)))
                          : (o.relative || o.undo(t.extract()),
                            (t = t.multiply(o.at(a.ease(this.pos)))));
                      }
                      n.matrix(t);
                    }
                    return this;
                  },
                  once: function (t, e, i) {
                    var n = this.last();
                    return i || (t = n.ease(t)), (n.once[t] = e), this;
                  },
                  _callStart: function () {
                    return (
                      setTimeout(
                        function () {
                          this.start();
                        }.bind(this),
                        0
                      ),
                      this
                    );
                  },
                },
                parent: i.Element,
                construct: {
                  animate: function (t, e, n) {
                    return (this.fx || (this.fx = new i.FX(this))).animate(
                      t,
                      e,
                      n
                    );
                  },
                  delay: function (t) {
                    return (this.fx || (this.fx = new i.FX(this))).delay(t);
                  },
                  stop: function (t, e) {
                    return this.fx && this.fx.stop(t, e), this;
                  },
                  finish: function () {
                    return this.fx && this.fx.finish(), this;
                  },
                },
              })),
              (i.MorphObj = i.invent({
                create: function (t, e) {
                  return i.Color.isColor(e)
                    ? new i.Color(t).morph(e)
                    : i.regex.delimiter.test(t)
                    ? i.regex.pathLetters.test(t)
                      ? new i.PathArray(t).morph(e)
                      : new i.Array(t).morph(e)
                    : i.regex.numberAndUnit.test(e)
                    ? new i.Number(t).morph(e)
                    : ((this.value = t), void (this.destination = e));
                },
                extend: {
                  at: function (t, e) {
                    return e < 1 ? this.value : this.destination;
                  },
                  valueOf: function () {
                    return this.value;
                  },
                },
              })),
              i.extend(i.FX, {
                attr: function (t, e, i) {
                  if ("object" === a(t)) for (var n in t) this.attr(n, t[n]);
                  else this.add(t, e, "attrs");
                  return this;
                },
                plot: function (t, e, i, n) {
                  return 4 == arguments.length
                    ? this.plot([t, e, i, n])
                    : this.add("plot", new (this.target().morphArray)(t));
                },
              }),
              (i.Box = i.invent({
                create: function (t, e, n, s) {
                  if (!("object" !== a(t) || t instanceof i.Element))
                    return i.Box.call(
                      this,
                      null != t.left ? t.left : t.x,
                      null != t.top ? t.top : t.y,
                      t.width,
                      t.height
                    );
                  4 == arguments.length &&
                    ((this.x = t),
                    (this.y = e),
                    (this.width = n),
                    (this.height = s)),
                    x(this);
                },
              })),
              (i.BBox = i.invent({
                create: function (t) {
                  if (
                    (i.Box.apply(this, [].slice.call(arguments)),
                    t instanceof i.Element)
                  ) {
                    var n;
                    try {
                      if (!e.documentElement.contains) {
                        for (var a = t.node; a.parentNode; ) a = a.parentNode;
                        if (a != e) throw new Error("Element not in the dom");
                      }
                      n = t.node.getBBox();
                    } catch (e) {
                      if (t instanceof i.Shape) {
                        i.parser.draw || i.prepare();
                        var s = t.clone(i.parser.draw.instance).show();
                        (n = s.node.getBBox()), s.remove();
                      } else
                        n = {
                          x: t.node.clientLeft,
                          y: t.node.clientTop,
                          width: t.node.clientWidth,
                          height: t.node.clientHeight,
                        };
                    }
                    i.Box.call(this, n);
                  }
                },
                inherit: i.Box,
                parent: i.Element,
                construct: {
                  bbox: function () {
                    return new i.BBox(this);
                  },
                },
              })),
              (i.BBox.prototype.constructor = i.BBox),
              (i.Matrix = i.invent({
                create: function (t) {
                  var e = g([1, 0, 0, 1, 0, 0]);
                  t =
                    null === t
                      ? e
                      : t instanceof i.Element
                      ? t.matrixify()
                      : "string" == typeof t
                      ? g(t.split(i.regex.delimiter).map(parseFloat))
                      : 6 == arguments.length
                      ? g([].slice.call(arguments))
                      : Array.isArray(t)
                      ? g(t)
                      : t && "object" === a(t)
                      ? t
                      : e;
                  for (var n = b.length - 1; n >= 0; --n)
                    this[b[n]] = null != t[b[n]] ? t[b[n]] : e[b[n]];
                },
                extend: {
                  extract: function () {
                    var t = p(this, 0, 1);
                    p(this, 1, 0);
                    var e = (180 / Math.PI) * Math.atan2(t.y, t.x) - 90;
                    return {
                      x: this.e,
                      y: this.f,
                      transformedX:
                        (this.e * Math.cos((e * Math.PI) / 180) +
                          this.f * Math.sin((e * Math.PI) / 180)) /
                        Math.sqrt(this.a * this.a + this.b * this.b),
                      transformedY:
                        (this.f * Math.cos((e * Math.PI) / 180) +
                          this.e * Math.sin((-e * Math.PI) / 180)) /
                        Math.sqrt(this.c * this.c + this.d * this.d),
                      rotation: e,
                      a: this.a,
                      b: this.b,
                      c: this.c,
                      d: this.d,
                      e: this.e,
                      f: this.f,
                      matrix: new i.Matrix(this),
                    };
                  },
                  clone: function () {
                    return new i.Matrix(this);
                  },
                  morph: function (t) {
                    return (this.destination = new i.Matrix(t)), this;
                  },
                  multiply: function (t) {
                    return new i.Matrix(
                      this.native().multiply(
                        (function (t) {
                          return (
                            t instanceof i.Matrix || (t = new i.Matrix(t)), t
                          );
                        })(t).native()
                      )
                    );
                  },
                  inverse: function () {
                    return new i.Matrix(this.native().inverse());
                  },
                  translate: function (t, e) {
                    return new i.Matrix(
                      this.native().translate(t || 0, e || 0)
                    );
                  },
                  native: function () {
                    for (
                      var t = i.parser.native.createSVGMatrix(),
                        e = b.length - 1;
                      e >= 0;
                      e--
                    )
                      t[b[e]] = this[b[e]];
                    return t;
                  },
                  toString: function () {
                    return (
                      "matrix(" +
                      v(this.a) +
                      "," +
                      v(this.b) +
                      "," +
                      v(this.c) +
                      "," +
                      v(this.d) +
                      "," +
                      v(this.e) +
                      "," +
                      v(this.f) +
                      ")"
                    );
                  },
                },
                parent: i.Element,
                construct: {
                  ctm: function () {
                    return new i.Matrix(this.node.getCTM());
                  },
                  screenCTM: function () {
                    if (this instanceof i.Nested) {
                      var t = this.rect(1, 1),
                        e = t.node.getScreenCTM();
                      return t.remove(), new i.Matrix(e);
                    }
                    return new i.Matrix(this.node.getScreenCTM());
                  },
                },
              })),
              (i.Point = i.invent({
                create: function (t, e) {
                  var i;
                  (i = Array.isArray(t)
                    ? { x: t[0], y: t[1] }
                    : "object" === a(t)
                    ? { x: t.x, y: t.y }
                    : null != t
                    ? { x: t, y: null != e ? e : t }
                    : { x: 0, y: 0 }),
                    (this.x = i.x),
                    (this.y = i.y);
                },
                extend: {
                  clone: function () {
                    return new i.Point(this);
                  },
                  morph: function (t, e) {
                    return (this.destination = new i.Point(t, e)), this;
                  },
                },
              })),
              i.extend(i.Element, {
                point: function (t, e) {
                  return new i.Point(t, e).transform(
                    this.screenCTM().inverse()
                  );
                },
              }),
              i.extend(i.Element, {
                attr: function (t, e, n) {
                  if (null == t) {
                    for (
                      t = {}, n = (e = this.node.attributes).length - 1;
                      n >= 0;
                      n--
                    )
                      t[e[n].nodeName] = i.regex.isNumber.test(e[n].nodeValue)
                        ? parseFloat(e[n].nodeValue)
                        : e[n].nodeValue;
                    return t;
                  }
                  if ("object" === a(t)) for (var s in t) this.attr(s, t[s]);
                  else if (null === e) this.node.removeAttribute(t);
                  else {
                    if (null == e)
                      return null == (e = this.node.getAttribute(t))
                        ? i.defaults.attrs[t]
                        : i.regex.isNumber.test(e)
                        ? parseFloat(e)
                        : e;
                    "stroke-width" == t
                      ? this.attr(
                          "stroke",
                          parseFloat(e) > 0 ? this._stroke : null
                        )
                      : "stroke" == t && (this._stroke = e),
                      ("fill" != t && "stroke" != t) ||
                        (i.regex.isImage.test(e) &&
                          (e = this.doc().defs().image(e, 0, 0)),
                        e instanceof i.Image &&
                          (e = this.doc()
                            .defs()
                            .pattern(0, 0, function () {
                              this.add(e);
                            }))),
                      "number" == typeof e
                        ? (e = new i.Number(e))
                        : i.Color.isColor(e)
                        ? (e = new i.Color(e))
                        : Array.isArray(e) && (e = new i.Array(e)),
                      "leading" == t
                        ? this.leading && this.leading(e)
                        : "string" == typeof n
                        ? this.node.setAttributeNS(n, t, e.toString())
                        : this.node.setAttribute(t, e.toString()),
                      !this.rebuild ||
                        ("font-size" != t && "x" != t) ||
                        this.rebuild(t, e);
                  }
                  return this;
                },
              }),
              i.extend(i.Element, {
                transform: function (t, e) {
                  var n;
                  return "object" !== a(t)
                    ? ((n = new i.Matrix(this).extract()),
                      "string" == typeof t ? n[t] : n)
                    : ((n = new i.Matrix(this)),
                      (e = !!e || !!t.relative),
                      null != t.a &&
                        (n = e ? n.multiply(new i.Matrix(t)) : new i.Matrix(t)),
                      this.attr("transform", n));
                },
              }),
              i.extend(i.Element, {
                untransform: function () {
                  return this.attr("transform", null);
                },
                matrixify: function () {
                  return (this.attr("transform") || "")
                    .split(i.regex.transforms)
                    .slice(0, -1)
                    .map(function (t) {
                      var e = t.trim().split("(");
                      return [
                        e[0],
                        e[1].split(i.regex.delimiter).map(function (t) {
                          return parseFloat(t);
                        }),
                      ];
                    })
                    .reduce(function (t, e) {
                      return "matrix" == e[0]
                        ? t.multiply(g(e[1]))
                        : t[e[0]].apply(t, e[1]);
                    }, new i.Matrix());
                },
                toParent: function (t) {
                  if (this == t) return this;
                  var e = this.screenCTM(),
                    i = t.screenCTM().inverse();
                  return (
                    this.addTo(t).untransform().transform(i.multiply(e)), this
                  );
                },
                toDoc: function () {
                  return this.toParent(this.doc());
                },
              }),
              (i.Transformation = i.invent({
                create: function (t, e) {
                  if (arguments.length > 1 && "boolean" != typeof e)
                    return this.constructor.call(
                      this,
                      [].slice.call(arguments)
                    );
                  if (Array.isArray(t))
                    for (var i = 0, n = this.arguments.length; i < n; ++i)
                      this[this.arguments[i]] = t[i];
                  else if (t && "object" === a(t))
                    for (i = 0, n = this.arguments.length; i < n; ++i)
                      this[this.arguments[i]] = t[this.arguments[i]];
                  (this.inversed = !1), !0 === e && (this.inversed = !0);
                },
              })),
              (i.Translate = i.invent({
                parent: i.Matrix,
                inherit: i.Transformation,
                create: function (t, e) {
                  this.constructor.apply(this, [].slice.call(arguments));
                },
                extend: {
                  arguments: ["transformedX", "transformedY"],
                  method: "translate",
                },
              })),
              i.extend(i.Element, {
                style: function (t, e) {
                  if (0 == arguments.length)
                    return this.node.style.cssText || "";
                  if (arguments.length < 2)
                    if ("object" === a(t)) for (var n in t) this.style(n, t[n]);
                    else {
                      if (!i.regex.isCss.test(t)) return this.node.style[h(t)];
                      for (
                        t = t
                          .split(/\s*;\s*/)
                          .filter(function (t) {
                            return !!t;
                          })
                          .map(function (t) {
                            return t.split(/\s*:\s*/);
                          });
                        (e = t.pop());

                      )
                        this.style(e[0], e[1]);
                    }
                  else
                    this.node.style[h(t)] =
                      null === e || i.regex.isBlank.test(e) ? "" : e;
                  return this;
                },
              }),
              (i.Parent = i.invent({
                create: function (t) {
                  this.constructor.call(this, t);
                },
                inherit: i.Element,
                extend: {
                  children: function () {
                    return i.utils.map(
                      i.utils.filterSVGElements(this.node.childNodes),
                      function (t) {
                        return i.adopt(t);
                      }
                    );
                  },
                  add: function (t, e) {
                    return (
                      null == e
                        ? this.node.appendChild(t.node)
                        : t.node != this.node.childNodes[e] &&
                          this.node.insertBefore(
                            t.node,
                            this.node.childNodes[e]
                          ),
                      this
                    );
                  },
                  put: function (t, e) {
                    return this.add(t, e), t;
                  },
                  has: function (t) {
                    return this.index(t) >= 0;
                  },
                  index: function (t) {
                    return [].slice.call(this.node.childNodes).indexOf(t.node);
                  },
                  get: function (t) {
                    return i.adopt(this.node.childNodes[t]);
                  },
                  first: function () {
                    return this.get(0);
                  },
                  last: function () {
                    return this.get(this.node.childNodes.length - 1);
                  },
                  each: function (t, e) {
                    for (
                      var n = this.children(), a = 0, s = n.length;
                      a < s;
                      a++
                    )
                      n[a] instanceof i.Element && t.apply(n[a], [a, n]),
                        e && n[a] instanceof i.Container && n[a].each(t, e);
                    return this;
                  },
                  removeElement: function (t) {
                    return this.node.removeChild(t.node), this;
                  },
                  clear: function () {
                    for (; this.node.hasChildNodes(); )
                      this.node.removeChild(this.node.lastChild);
                    return delete this._defs, this;
                  },
                  defs: function () {
                    return this.doc().defs();
                  },
                },
              })),
              i.extend(i.Parent, {
                ungroup: function (t, e) {
                  return (
                    0 === e ||
                      this instanceof i.Defs ||
                      this.node == i.parser.draw ||
                      ((t =
                        t ||
                        (this instanceof i.Doc ? this : this.parent(i.Parent))),
                      (e = e || 1 / 0),
                      this.each(function () {
                        return this instanceof i.Defs
                          ? this
                          : this instanceof i.Parent
                          ? this.ungroup(t, e - 1)
                          : this.toParent(t);
                      }),
                      this.node.firstChild || this.remove()),
                    this
                  );
                },
                flatten: function (t, e) {
                  return this.ungroup(t, e);
                },
              }),
              (i.Container = i.invent({
                create: function (t) {
                  this.constructor.call(this, t);
                },
                inherit: i.Parent,
              })),
              (i.ViewBox = i.invent({ parent: i.Container, construct: {} })),
              [
                "click",
                "dblclick",
                "mousedown",
                "mouseup",
                "mouseover",
                "mouseout",
                "mousemove",
                "touchstart",
                "touchmove",
                "touchleave",
                "touchend",
                "touchcancel",
              ].forEach(function (t) {
                i.Element.prototype[t] = function (e) {
                  return i.on(this.node, t, e), this;
                };
              }),
              (i.listeners = []),
              (i.handlerMap = []),
              (i.listenerId = 0),
              (i.on = function (t, e, n, a, s) {
                var r = n.bind(a || t.instance || t),
                  o = (i.handlerMap.indexOf(t) + 1 || i.handlerMap.push(t)) - 1,
                  l = e.split(".")[0],
                  c = e.split(".")[1] || "*";
                (i.listeners[o] = i.listeners[o] || {}),
                  (i.listeners[o][l] = i.listeners[o][l] || {}),
                  (i.listeners[o][l][c] = i.listeners[o][l][c] || {}),
                  n._svgjsListenerId || (n._svgjsListenerId = ++i.listenerId),
                  (i.listeners[o][l][c][n._svgjsListenerId] = r),
                  t.addEventListener(l, r, s || { passive: !0 });
              }),
              (i.off = function (t, e, n) {
                var a = i.handlerMap.indexOf(t),
                  s = e && e.split(".")[0],
                  r = e && e.split(".")[1],
                  o = "";
                if (-1 != a)
                  if (n) {
                    if (
                      ("function" == typeof n && (n = n._svgjsListenerId), !n)
                    )
                      return;
                    i.listeners[a][s] &&
                      i.listeners[a][s][r || "*"] &&
                      (t.removeEventListener(
                        s,
                        i.listeners[a][s][r || "*"][n],
                        !1
                      ),
                      delete i.listeners[a][s][r || "*"][n]);
                  } else if (r && s) {
                    if (i.listeners[a][s] && i.listeners[a][s][r]) {
                      for (var l in i.listeners[a][s][r])
                        i.off(t, [s, r].join("."), l);
                      delete i.listeners[a][s][r];
                    }
                  } else if (r)
                    for (var c in i.listeners[a])
                      for (var o in i.listeners[a][c])
                        r === o && i.off(t, [c, r].join("."));
                  else if (s) {
                    if (i.listeners[a][s]) {
                      for (var o in i.listeners[a][s])
                        i.off(t, [s, o].join("."));
                      delete i.listeners[a][s];
                    }
                  } else {
                    for (var c in i.listeners[a]) i.off(t, c);
                    delete i.listeners[a], delete i.handlerMap[a];
                  }
              }),
              i.extend(i.Element, {
                on: function (t, e, n, a) {
                  return i.on(this.node, t, e, n, a), this;
                },
                off: function (t, e) {
                  return i.off(this.node, t, e), this;
                },
                fire: function (e, n) {
                  return (
                    e instanceof t.Event
                      ? this.node.dispatchEvent(e)
                      : this.node.dispatchEvent(
                          (e = new i.CustomEvent(e, {
                            detail: n,
                            cancelable: !0,
                          }))
                        ),
                    (this._event = e),
                    this
                  );
                },
                event: function () {
                  return this._event;
                },
              }),
              (i.Defs = i.invent({ create: "defs", inherit: i.Container })),
              (i.G = i.invent({
                create: "g",
                inherit: i.Container,
                extend: {
                  x: function (t) {
                    return null == t
                      ? this.transform("x")
                      : this.transform({ x: t - this.x() }, !0);
                  },
                },
                construct: {
                  group: function () {
                    return this.put(new i.G());
                  },
                },
              })),
              (i.Doc = i.invent({
                create: function (t) {
                  t &&
                    ("svg" ==
                    (t = "string" == typeof t ? e.getElementById(t) : t)
                      .nodeName
                      ? this.constructor.call(this, t)
                      : (this.constructor.call(this, i.create("svg")),
                        t.appendChild(this.node),
                        this.size("100%", "100%")),
                    this.namespace().defs());
                },
                inherit: i.Container,
                extend: {
                  namespace: function () {
                    return this.attr({ xmlns: i.ns, version: "1.1" })
                      .attr("xmlns:xlink", i.xlink, i.xmlns)
                      .attr("xmlns:svgjs", i.svgjs, i.xmlns);
                  },
                  defs: function () {
                    var t;
                    return (
                      this._defs ||
                        ((t = this.node.getElementsByTagName("defs")[0])
                          ? (this._defs = i.adopt(t))
                          : (this._defs = new i.Defs()),
                        this.node.appendChild(this._defs.node)),
                      this._defs
                    );
                  },
                  parent: function () {
                    return this.node.parentNode &&
                      "#document" != this.node.parentNode.nodeName
                      ? this.node.parentNode
                      : null;
                  },
                  remove: function () {
                    return (
                      this.parent() && this.parent().removeChild(this.node),
                      this
                    );
                  },
                  clear: function () {
                    for (; this.node.hasChildNodes(); )
                      this.node.removeChild(this.node.lastChild);
                    return (
                      delete this._defs,
                      i.parser.draw &&
                        !i.parser.draw.parentNode &&
                        this.node.appendChild(i.parser.draw),
                      this
                    );
                  },
                  clone: function (t) {
                    this.writeDataToDom();
                    var e = this.node,
                      i = m(e.cloneNode(!0));
                    return (
                      t
                        ? (t.node || t).appendChild(i.node)
                        : e.parentNode.insertBefore(i.node, e.nextSibling),
                      i
                    );
                  },
                },
              })),
              i.extend(i.Element, {}),
              (i.Gradient = i.invent({
                create: function (t) {
                  this.constructor.call(this, i.create(t + "Gradient")),
                    (this.type = t);
                },
                inherit: i.Container,
                extend: {
                  at: function (t, e, n) {
                    return this.put(new i.Stop()).update(t, e, n);
                  },
                  update: function (t) {
                    return (
                      this.clear(),
                      "function" == typeof t && t.call(this, this),
                      this
                    );
                  },
                  fill: function () {
                    return "url(#" + this.id() + ")";
                  },
                  toString: function () {
                    return this.fill();
                  },
                  attr: function (t, e, n) {
                    return (
                      "transform" == t && (t = "gradientTransform"),
                      i.Container.prototype.attr.call(this, t, e, n)
                    );
                  },
                },
                construct: {
                  gradient: function (t, e) {
                    return this.defs().gradient(t, e);
                  },
                },
              })),
              i.extend(i.Gradient, i.FX, {
                from: function (t, e) {
                  return "radial" == (this._target || this).type
                    ? this.attr({ fx: new i.Number(t), fy: new i.Number(e) })
                    : this.attr({ x1: new i.Number(t), y1: new i.Number(e) });
                },
                to: function (t, e) {
                  return "radial" == (this._target || this).type
                    ? this.attr({ cx: new i.Number(t), cy: new i.Number(e) })
                    : this.attr({ x2: new i.Number(t), y2: new i.Number(e) });
                },
              }),
              i.extend(i.Defs, {
                gradient: function (t, e) {
                  return this.put(new i.Gradient(t)).update(e);
                },
              }),
              (i.Stop = i.invent({
                create: "stop",
                inherit: i.Element,
                extend: {
                  update: function (t) {
                    return (
                      ("number" == typeof t || t instanceof i.Number) &&
                        (t = {
                          offset: arguments[0],
                          color: arguments[1],
                          opacity: arguments[2],
                        }),
                      null != t.opacity && this.attr("stop-opacity", t.opacity),
                      null != t.color && this.attr("stop-color", t.color),
                      null != t.offset &&
                        this.attr("offset", new i.Number(t.offset)),
                      this
                    );
                  },
                },
              })),
              (i.Pattern = i.invent({
                create: "pattern",
                inherit: i.Container,
                extend: {
                  fill: function () {
                    return "url(#" + this.id() + ")";
                  },
                  update: function (t) {
                    return (
                      this.clear(),
                      "function" == typeof t && t.call(this, this),
                      this
                    );
                  },
                  toString: function () {
                    return this.fill();
                  },
                  attr: function (t, e, n) {
                    return (
                      "transform" == t && (t = "patternTransform"),
                      i.Container.prototype.attr.call(this, t, e, n)
                    );
                  },
                },
                construct: {
                  pattern: function (t, e, i) {
                    return this.defs().pattern(t, e, i);
                  },
                },
              })),
              i.extend(i.Defs, {
                pattern: function (t, e, n) {
                  return this.put(new i.Pattern()).update(n).attr({
                    x: 0,
                    y: 0,
                    width: t,
                    height: e,
                    patternUnits: "userSpaceOnUse",
                  });
                },
              }),
              (i.Shape = i.invent({
                create: function (t) {
                  this.constructor.call(this, t);
                },
                inherit: i.Element,
              })),
              (i.Symbol = i.invent({
                create: "symbol",
                inherit: i.Container,
                construct: {
                  symbol: function () {
                    return this.put(new i.Symbol());
                  },
                },
              })),
              (i.Use = i.invent({
                create: "use",
                inherit: i.Shape,
                extend: {
                  element: function (t, e) {
                    return this.attr("href", (e || "") + "#" + t, i.xlink);
                  },
                },
                construct: {
                  use: function (t, e) {
                    return this.put(new i.Use()).element(t, e);
                  },
                },
              })),
              (i.Rect = i.invent({
                create: "rect",
                inherit: i.Shape,
                construct: {
                  rect: function (t, e) {
                    return this.put(new i.Rect()).size(t, e);
                  },
                },
              })),
              (i.Circle = i.invent({
                create: "circle",
                inherit: i.Shape,
                construct: {
                  circle: function (t) {
                    return this.put(new i.Circle())
                      .rx(new i.Number(t).divide(2))
                      .move(0, 0);
                  },
                },
              })),
              i.extend(i.Circle, i.FX, {
                rx: function (t) {
                  return this.attr("r", t);
                },
                ry: function (t) {
                  return this.rx(t);
                },
              }),
              (i.Ellipse = i.invent({
                create: "ellipse",
                inherit: i.Shape,
                construct: {
                  ellipse: function (t, e) {
                    return this.put(new i.Ellipse()).size(t, e).move(0, 0);
                  },
                },
              })),
              i.extend(i.Ellipse, i.Rect, i.FX, {
                rx: function (t) {
                  return this.attr("rx", t);
                },
                ry: function (t) {
                  return this.attr("ry", t);
                },
              }),
              i.extend(i.Circle, i.Ellipse, {
                x: function (t) {
                  return null == t
                    ? this.cx() - this.rx()
                    : this.cx(t + this.rx());
                },
                y: function (t) {
                  return null == t
                    ? this.cy() - this.ry()
                    : this.cy(t + this.ry());
                },
                cx: function (t) {
                  return null == t ? this.attr("cx") : this.attr("cx", t);
                },
                cy: function (t) {
                  return null == t ? this.attr("cy") : this.attr("cy", t);
                },
                width: function (t) {
                  return null == t
                    ? 2 * this.rx()
                    : this.rx(new i.Number(t).divide(2));
                },
                height: function (t) {
                  return null == t
                    ? 2 * this.ry()
                    : this.ry(new i.Number(t).divide(2));
                },
                size: function (t, e) {
                  var n = f(this, t, e);
                  return this.rx(new i.Number(n.width).divide(2)).ry(
                    new i.Number(n.height).divide(2)
                  );
                },
              }),
              (i.Line = i.invent({
                create: "line",
                inherit: i.Shape,
                extend: {
                  array: function () {
                    return new i.PointArray([
                      [this.attr("x1"), this.attr("y1")],
                      [this.attr("x2"), this.attr("y2")],
                    ]);
                  },
                  plot: function (t, e, n, a) {
                    return null == t
                      ? this.array()
                      : ((t =
                          void 0 !== e
                            ? { x1: t, y1: e, x2: n, y2: a }
                            : new i.PointArray(t).toLine()),
                        this.attr(t));
                  },
                  move: function (t, e) {
                    return this.attr(this.array().move(t, e).toLine());
                  },
                  size: function (t, e) {
                    var i = f(this, t, e);
                    return this.attr(
                      this.array().size(i.width, i.height).toLine()
                    );
                  },
                },
                construct: {
                  line: function (t, e, n, a) {
                    return i.Line.prototype.plot.apply(
                      this.put(new i.Line()),
                      null != t ? [t, e, n, a] : [0, 0, 0, 0]
                    );
                  },
                },
              })),
              (i.Polyline = i.invent({
                create: "polyline",
                inherit: i.Shape,
                construct: {
                  polyline: function (t) {
                    return this.put(new i.Polyline()).plot(
                      t || new i.PointArray()
                    );
                  },
                },
              })),
              (i.Polygon = i.invent({
                create: "polygon",
                inherit: i.Shape,
                construct: {
                  polygon: function (t) {
                    return this.put(new i.Polygon()).plot(
                      t || new i.PointArray()
                    );
                  },
                },
              })),
              i.extend(i.Polyline, i.Polygon, {
                array: function () {
                  return (
                    this._array ||
                    (this._array = new i.PointArray(this.attr("points")))
                  );
                },
                plot: function (t) {
                  return null == t
                    ? this.array()
                    : this.clear().attr(
                        "points",
                        "string" == typeof t
                          ? t
                          : (this._array = new i.PointArray(t))
                      );
                },
                clear: function () {
                  return delete this._array, this;
                },
                move: function (t, e) {
                  return this.attr("points", this.array().move(t, e));
                },
                size: function (t, e) {
                  var i = f(this, t, e);
                  return this.attr(
                    "points",
                    this.array().size(i.width, i.height)
                  );
                },
              }),
              i.extend(i.Line, i.Polyline, i.Polygon, {
                morphArray: i.PointArray,
                x: function (t) {
                  return null == t
                    ? this.bbox().x
                    : this.move(t, this.bbox().y);
                },
                y: function (t) {
                  return null == t
                    ? this.bbox().y
                    : this.move(this.bbox().x, t);
                },
                width: function (t) {
                  var e = this.bbox();
                  return null == t ? e.width : this.size(t, e.height);
                },
                height: function (t) {
                  var e = this.bbox();
                  return null == t ? e.height : this.size(e.width, t);
                },
              }),
              (i.Path = i.invent({
                create: "path",
                inherit: i.Shape,
                extend: {
                  morphArray: i.PathArray,
                  array: function () {
                    return (
                      this._array ||
                      (this._array = new i.PathArray(this.attr("d")))
                    );
                  },
                  plot: function (t) {
                    return null == t
                      ? this.array()
                      : this.clear().attr(
                          "d",
                          "string" == typeof t
                            ? t
                            : (this._array = new i.PathArray(t))
                        );
                  },
                  clear: function () {
                    return delete this._array, this;
                  },
                },
                construct: {
                  path: function (t) {
                    return this.put(new i.Path()).plot(t || new i.PathArray());
                  },
                },
              })),
              (i.Image = i.invent({
                create: "image",
                inherit: i.Shape,
                extend: {
                  load: function (e) {
                    if (!e) return this;
                    var n = this,
                      a = new t.Image();
                    return (
                      i.on(a, "load", function () {
                        i.off(a);
                        var t = n.parent(i.Pattern);
                        null !== t &&
                          (0 == n.width() &&
                            0 == n.height() &&
                            n.size(a.width, a.height),
                          t &&
                            0 == t.width() &&
                            0 == t.height() &&
                            t.size(n.width(), n.height()),
                          "function" == typeof n._loaded &&
                            n._loaded.call(n, {
                              width: a.width,
                              height: a.height,
                              ratio: a.width / a.height,
                              url: e,
                            }));
                      }),
                      i.on(a, "error", function (t) {
                        i.off(a),
                          "function" == typeof n._error && n._error.call(n, t);
                      }),
                      this.attr("href", (a.src = this.src = e), i.xlink)
                    );
                  },
                  loaded: function (t) {
                    return (this._loaded = t), this;
                  },
                  error: function (t) {
                    return (this._error = t), this;
                  },
                },
                construct: {
                  image: function (t, e, n) {
                    return this.put(new i.Image())
                      .load(t)
                      .size(e || 0, n || e || 0);
                  },
                },
              })),
              (i.Text = i.invent({
                create: function () {
                  this.constructor.call(this, i.create("text")),
                    (this.dom.leading = new i.Number(1.3)),
                    (this._rebuild = !0),
                    (this._build = !1),
                    this.attr("font-family", i.defaults.attrs["font-family"]);
                },
                inherit: i.Shape,
                extend: {
                  x: function (t) {
                    return null == t ? this.attr("x") : this.attr("x", t);
                  },
                  text: function (t) {
                    if (void 0 === t) {
                      t = "";
                      for (
                        var e = this.node.childNodes, n = 0, a = e.length;
                        n < a;
                        ++n
                      )
                        0 != n &&
                          3 != e[n].nodeType &&
                          1 == i.adopt(e[n]).dom.newLined &&
                          (t += "\n"),
                          (t += e[n].textContent);
                      return t;
                    }
                    if ((this.clear().build(!0), "function" == typeof t))
                      t.call(this, this);
                    else {
                      n = 0;
                      for (var s = (t = t.split("\n")).length; n < s; n++)
                        this.tspan(t[n]).newLine();
                    }
                    return this.build(!1).rebuild();
                  },
                  size: function (t) {
                    return this.attr("font-size", t).rebuild();
                  },
                  leading: function (t) {
                    return null == t
                      ? this.dom.leading
                      : ((this.dom.leading = new i.Number(t)), this.rebuild());
                  },
                  lines: function () {
                    var t = ((this.textPath && this.textPath()) || this).node,
                      e = i.utils.map(
                        i.utils.filterSVGElements(t.childNodes),
                        function (t) {
                          return i.adopt(t);
                        }
                      );
                    return new i.Set(e);
                  },
                  rebuild: function (t) {
                    if (
                      ("boolean" == typeof t && (this._rebuild = t),
                      this._rebuild)
                    ) {
                      var e = this,
                        n = 0,
                        a =
                          this.dom.leading *
                          new i.Number(this.attr("font-size"));
                      this.lines().each(function () {
                        this.dom.newLined &&
                          (e.textPath() || this.attr("x", e.attr("x")),
                          "\n" == this.text()
                            ? (n += a)
                            : (this.attr("dy", a + n), (n = 0)));
                      }),
                        this.fire("rebuild");
                    }
                    return this;
                  },
                  build: function (t) {
                    return (this._build = !!t), this;
                  },
                  setData: function (t) {
                    return (
                      (this.dom = t),
                      (this.dom.leading = new i.Number(t.leading || 1.3)),
                      this
                    );
                  },
                },
                construct: {
                  text: function (t) {
                    return this.put(new i.Text()).text(t);
                  },
                  plain: function (t) {
                    return this.put(new i.Text()).plain(t);
                  },
                },
              })),
              (i.Tspan = i.invent({
                create: "tspan",
                inherit: i.Shape,
                extend: {
                  text: function (t) {
                    return null == t
                      ? this.node.textContent + (this.dom.newLined ? "\n" : "")
                      : ("function" == typeof t
                          ? t.call(this, this)
                          : this.plain(t),
                        this);
                  },
                  dx: function (t) {
                    return this.attr("dx", t);
                  },
                  dy: function (t) {
                    return this.attr("dy", t);
                  },
                  newLine: function () {
                    var t = this.parent(i.Text);
                    return (
                      (this.dom.newLined = !0),
                      this.dy(t.dom.leading * t.attr("font-size")).attr(
                        "x",
                        t.x()
                      )
                    );
                  },
                },
              })),
              i.extend(i.Text, i.Tspan, {
                plain: function (t) {
                  return (
                    !1 === this._build && this.clear(),
                    this.node.appendChild(e.createTextNode(t)),
                    this
                  );
                },
                tspan: function (t) {
                  var e = ((this.textPath && this.textPath()) || this).node,
                    n = new i.Tspan();
                  return (
                    !1 === this._build && this.clear(),
                    e.appendChild(n.node),
                    n.text(t)
                  );
                },
                clear: function () {
                  for (
                    var t = ((this.textPath && this.textPath()) || this).node;
                    t.hasChildNodes();

                  )
                    t.removeChild(t.lastChild);
                  return this;
                },
                length: function () {
                  return this.node.getComputedTextLength();
                },
              }),
              (i.TextPath = i.invent({
                create: "textPath",
                inherit: i.Parent,
                parent: i.Text,
                construct: {
                  morphArray: i.PathArray,
                  array: function () {
                    var t = this.track();
                    return t ? t.array() : null;
                  },
                  plot: function (t) {
                    var e = this.track(),
                      i = null;
                    return e && (i = e.plot(t)), null == t ? i : this;
                  },
                  track: function () {
                    var t = this.textPath();
                    if (t) return t.reference("href");
                  },
                  textPath: function () {
                    if (
                      this.node.firstChild &&
                      "textPath" == this.node.firstChild.nodeName
                    )
                      return i.adopt(this.node.firstChild);
                  },
                },
              })),
              (i.Nested = i.invent({
                create: function () {
                  this.constructor.call(this, i.create("svg")),
                    this.style("overflow", "visible");
                },
                inherit: i.Container,
                construct: {
                  nested: function () {
                    return this.put(new i.Nested());
                  },
                },
              }));
            var l = {
              stroke: [
                "color",
                "width",
                "opacity",
                "linecap",
                "linejoin",
                "miterlimit",
                "dasharray",
                "dashoffset",
              ],
              fill: ["color", "opacity", "rule"],
              prefix: function (t, e) {
                return "color" == e ? t : t + "-" + e;
              },
            };
            function c(t, e, n, a) {
              return n + a.replace(i.regex.dots, " .");
            }
            function h(t) {
              return t.toLowerCase().replace(/-(.)/g, function (t, e) {
                return e.toUpperCase();
              });
            }
            function d(t) {
              return t.charAt(0).toUpperCase() + t.slice(1);
            }
            function u(t) {
              var e = t.toString(16);
              return 1 == e.length ? "0" + e : e;
            }
            function f(t, e, i) {
              if (null == e || null == i) {
                var n = t.bbox();
                null == e
                  ? (e = (n.width / n.height) * i)
                  : null == i && (i = (n.height / n.width) * e);
              }
              return { width: e, height: i };
            }
            function p(t, e, i) {
              return { x: e * t.a + i * t.c + 0, y: e * t.b + i * t.d + 0 };
            }
            function g(t) {
              return { a: t[0], b: t[1], c: t[2], d: t[3], e: t[4], f: t[5] };
            }
            function m(e) {
              for (var n = e.childNodes.length - 1; n >= 0; n--)
                e.childNodes[n] instanceof t.SVGElement && m(e.childNodes[n]);
              return i.adopt(e).id(i.eid(e.nodeName));
            }
            function x(t) {
              return (
                null == t.x &&
                  ((t.x = 0), (t.y = 0), (t.width = 0), (t.height = 0)),
                (t.w = t.width),
                (t.h = t.height),
                (t.x2 = t.x + t.width),
                (t.y2 = t.y + t.height),
                (t.cx = t.x + t.width / 2),
                (t.cy = t.y + t.height / 2),
                t
              );
            }
            function v(t) {
              return Math.abs(t) > 1e-37 ? t : 0;
            }
            ["fill", "stroke"].forEach(function (t) {
              var e = {};
              (e[t] = function (e) {
                if (void 0 === e) return this;
                if (
                  "string" == typeof e ||
                  i.Color.isRgb(e) ||
                  (e && "function" == typeof e.fill)
                )
                  this.attr(t, e);
                else
                  for (var n = l[t].length - 1; n >= 0; n--)
                    null != e[l[t][n]] &&
                      this.attr(l.prefix(t, l[t][n]), e[l[t][n]]);
                return this;
              }),
                i.extend(i.Element, i.FX, e);
            }),
              i.extend(i.Element, i.FX, {
                translate: function (t, e) {
                  return this.transform({ x: t, y: e });
                },
                matrix: function (t) {
                  return this.attr(
                    "transform",
                    new i.Matrix(
                      6 == arguments.length ? [].slice.call(arguments) : t
                    )
                  );
                },
                opacity: function (t) {
                  return this.attr("opacity", t);
                },
                dx: function (t) {
                  return this.x(
                    new i.Number(t).plus(this instanceof i.FX ? 0 : this.x()),
                    !0
                  );
                },
                dy: function (t) {
                  return this.y(
                    new i.Number(t).plus(this instanceof i.FX ? 0 : this.y()),
                    !0
                  );
                },
              }),
              i.extend(i.Path, {
                length: function () {
                  return this.node.getTotalLength();
                },
                pointAt: function (t) {
                  return this.node.getPointAtLength(t);
                },
              }),
              (i.Set = i.invent({
                create: function (t) {
                  Array.isArray(t) ? (this.members = t) : this.clear();
                },
                extend: {
                  add: function () {
                    for (
                      var t = [].slice.call(arguments), e = 0, i = t.length;
                      e < i;
                      e++
                    )
                      this.members.push(t[e]);
                    return this;
                  },
                  remove: function (t) {
                    var e = this.index(t);
                    return e > -1 && this.members.splice(e, 1), this;
                  },
                  each: function (t) {
                    for (var e = 0, i = this.members.length; e < i; e++)
                      t.apply(this.members[e], [e, this.members]);
                    return this;
                  },
                  clear: function () {
                    return (this.members = []), this;
                  },
                  length: function () {
                    return this.members.length;
                  },
                  has: function (t) {
                    return this.index(t) >= 0;
                  },
                  index: function (t) {
                    return this.members.indexOf(t);
                  },
                  get: function (t) {
                    return this.members[t];
                  },
                  first: function () {
                    return this.get(0);
                  },
                  last: function () {
                    return this.get(this.members.length - 1);
                  },
                  valueOf: function () {
                    return this.members;
                  },
                },
                construct: {
                  set: function (t) {
                    return new i.Set(t);
                  },
                },
              })),
              (i.FX.Set = i.invent({
                create: function (t) {
                  this.set = t;
                },
              })),
              (i.Set.inherit = function () {
                var t = [];
                for (var e in i.Shape.prototype)
                  "function" == typeof i.Shape.prototype[e] &&
                    "function" != typeof i.Set.prototype[e] &&
                    t.push(e);
                for (var e in (t.forEach(function (t) {
                  i.Set.prototype[t] = function () {
                    for (var e = 0, n = this.members.length; e < n; e++)
                      this.members[e] &&
                        "function" == typeof this.members[e][t] &&
                        this.members[e][t].apply(this.members[e], arguments);
                    return "animate" == t
                      ? this.fx || (this.fx = new i.FX.Set(this))
                      : this;
                  };
                }),
                (t = []),
                i.FX.prototype))
                  "function" == typeof i.FX.prototype[e] &&
                    "function" != typeof i.FX.Set.prototype[e] &&
                    t.push(e);
                t.forEach(function (t) {
                  i.FX.Set.prototype[t] = function () {
                    for (var e = 0, i = this.set.members.length; e < i; e++)
                      this.set.members[e].fx[t].apply(
                        this.set.members[e].fx,
                        arguments
                      );
                    return this;
                  };
                });
              }),
              i.extend(i.Element, {}),
              i.extend(i.Element, {
                remember: function (t, e) {
                  if ("object" === a(arguments[0]))
                    for (var i in t) this.remember(i, t[i]);
                  else {
                    if (1 == arguments.length) return this.memory()[t];
                    this.memory()[t] = e;
                  }
                  return this;
                },
                forget: function () {
                  if (0 == arguments.length) this._memory = {};
                  else
                    for (var t = arguments.length - 1; t >= 0; t--)
                      delete this.memory()[arguments[t]];
                  return this;
                },
                memory: function () {
                  return this._memory || (this._memory = {});
                },
              }),
              (i.get = function (t) {
                var n = e.getElementById(
                  (function (t) {
                    var e = (t || "").toString().match(i.regex.reference);
                    if (e) return e[1];
                  })(t) || t
                );
                return i.adopt(n);
              }),
              (i.select = function (t, n) {
                return new i.Set(
                  i.utils.map((n || e).querySelectorAll(t), function (t) {
                    return i.adopt(t);
                  })
                );
              }),
              i.extend(i.Parent, {
                select: function (t) {
                  return i.select(t, this.node);
                },
              });
            var b = "abcdef".split("");
            if ("function" != typeof t.CustomEvent) {
              var y = function (t, i) {
                i = i || { bubbles: !1, cancelable: !1, detail: void 0 };
                var n = e.createEvent("CustomEvent");
                return (
                  n.initCustomEvent(t, i.bubbles, i.cancelable, i.detail), n
                );
              };
              (y.prototype = t.Event.prototype), (i.CustomEvent = y);
            } else i.CustomEvent = t.CustomEvent;
            return i;
          }),
          void 0 !==
            (n = function () {
              return Nt(Mt, Mt.document);
            }.call(e, i, e, t)) && (t.exports = n),
          /*! svg.filter.js - v2.0.2 - 2016-02-24
           * https://github.com/wout/svg.filter.js
           * Copyright (c) 2016 Wout Fierens; Licensed MIT */
          function () {
            (SVG.Filter = SVG.invent({
              create: "filter",
              inherit: SVG.Parent,
              extend: {
                source: "SourceGraphic",
                sourceAlpha: "SourceAlpha",
                background: "BackgroundImage",
                backgroundAlpha: "BackgroundAlpha",
                fill: "FillPaint",
                stroke: "StrokePaint",
                autoSetIn: !0,
                put: function (t, e) {
                  return (
                    this.add(t, e),
                    !t.attr("in") &&
                      this.autoSetIn &&
                      t.attr("in", this.source),
                    t.attr("result") || t.attr("result", t),
                    t
                  );
                },
                blend: function (t, e, i) {
                  return this.put(new SVG.BlendEffect(t, e, i));
                },
                colorMatrix: function (t, e) {
                  return this.put(new SVG.ColorMatrixEffect(t, e));
                },
                convolveMatrix: function (t) {
                  return this.put(new SVG.ConvolveMatrixEffect(t));
                },
                componentTransfer: function (t) {
                  return this.put(new SVG.ComponentTransferEffect(t));
                },
                composite: function (t, e, i) {
                  return this.put(new SVG.CompositeEffect(t, e, i));
                },
                flood: function (t, e) {
                  return this.put(new SVG.FloodEffect(t, e));
                },
                offset: function (t, e) {
                  return this.put(new SVG.OffsetEffect(t, e));
                },
                image: function (t) {
                  return this.put(new SVG.ImageEffect(t));
                },
                merge: function () {
                  var t = [void 0];
                  for (var e in arguments) t.push(arguments[e]);
                  return this.put(
                    new (SVG.MergeEffect.bind.apply(SVG.MergeEffect, t))()
                  );
                },
                gaussianBlur: function (t, e) {
                  return this.put(new SVG.GaussianBlurEffect(t, e));
                },
                morphology: function (t, e) {
                  return this.put(new SVG.MorphologyEffect(t, e));
                },
                diffuseLighting: function (t, e, i) {
                  return this.put(new SVG.DiffuseLightingEffect(t, e, i));
                },
                displacementMap: function (t, e, i, n, a) {
                  return this.put(new SVG.DisplacementMapEffect(t, e, i, n, a));
                },
                specularLighting: function (t, e, i, n) {
                  return this.put(new SVG.SpecularLightingEffect(t, e, i, n));
                },
                tile: function () {
                  return this.put(new SVG.TileEffect());
                },
                turbulence: function (t, e, i, n, a) {
                  return this.put(new SVG.TurbulenceEffect(t, e, i, n, a));
                },
                toString: function () {
                  return "url(#" + this.attr("id") + ")";
                },
              },
            })),
              SVG.extend(SVG.Defs, {
                filter: function (t) {
                  var e = this.put(new SVG.Filter());
                  return "function" == typeof t && t.call(e, e), e;
                },
              }),
              SVG.extend(SVG.Container, {
                filter: function (t) {
                  return this.defs().filter(t);
                },
              }),
              SVG.extend(SVG.Element, SVG.G, SVG.Nested, {
                filter: function (t) {
                  return (
                    (this.filterer =
                      t instanceof SVG.Element ? t : this.doc().filter(t)),
                    this.doc() &&
                      this.filterer.doc() !== this.doc() &&
                      this.doc().defs().add(this.filterer),
                    this.attr("filter", this.filterer),
                    this.filterer
                  );
                },
                unfilter: function (t) {
                  return (
                    this.filterer && !0 === t && this.filterer.remove(),
                    delete this.filterer,
                    this.attr("filter", null)
                  );
                },
              }),
              (SVG.Effect = SVG.invent({
                create: function () {
                  this.constructor.call(this);
                },
                inherit: SVG.Element,
                extend: {
                  in: function (t) {
                    return null == t
                      ? (this.parent() &&
                          this.parent()
                            .select('[result="' + this.attr("in") + '"]')
                            .get(0)) ||
                          this.attr("in")
                      : this.attr("in", t);
                  },
                  result: function (t) {
                    return null == t
                      ? this.attr("result")
                      : this.attr("result", t);
                  },
                  toString: function () {
                    return this.result();
                  },
                },
              })),
              (SVG.ParentEffect = SVG.invent({
                create: function () {
                  this.constructor.call(this);
                },
                inherit: SVG.Parent,
                extend: {
                  in: function (t) {
                    return null == t
                      ? (this.parent() &&
                          this.parent()
                            .select('[result="' + this.attr("in") + '"]')
                            .get(0)) ||
                          this.attr("in")
                      : this.attr("in", t);
                  },
                  result: function (t) {
                    return null == t
                      ? this.attr("result")
                      : this.attr("result", t);
                  },
                  toString: function () {
                    return this.result();
                  },
                },
              }));
            var t = {
              blend: function (t, e) {
                return this.parent() && this.parent().blend(this, t, e);
              },
              colorMatrix: function (t, e) {
                return (
                  this.parent() && this.parent().colorMatrix(t, e).in(this)
                );
              },
              convolveMatrix: function (t) {
                return (
                  this.parent() && this.parent().convolveMatrix(t).in(this)
                );
              },
              componentTransfer: function (t) {
                return (
                  this.parent() && this.parent().componentTransfer(t).in(this)
                );
              },
              composite: function (t, e) {
                return this.parent() && this.parent().composite(this, t, e);
              },
              flood: function (t, e) {
                return this.parent() && this.parent().flood(t, e);
              },
              offset: function (t, e) {
                return this.parent() && this.parent().offset(t, e).in(this);
              },
              image: function (t) {
                return this.parent() && this.parent().image(t);
              },
              merge: function () {
                return (
                  this.parent() &&
                  this.parent().merge.apply(
                    this.parent(),
                    [this].concat(arguments)
                  )
                );
              },
              gaussianBlur: function (t, e) {
                return (
                  this.parent() && this.parent().gaussianBlur(t, e).in(this)
                );
              },
              morphology: function (t, e) {
                return this.parent() && this.parent().morphology(t, e).in(this);
              },
              diffuseLighting: function (t, e, i) {
                return (
                  this.parent() &&
                  this.parent().diffuseLighting(t, e, i).in(this)
                );
              },
              displacementMap: function (t, e, i, n) {
                return (
                  this.parent() &&
                  this.parent().displacementMap(this, t, e, i, n)
                );
              },
              specularLighting: function (t, e, i, n) {
                return (
                  this.parent() &&
                  this.parent().specularLighting(t, e, i, n).in(this)
                );
              },
              tile: function () {
                return this.parent() && this.parent().tile().in(this);
              },
              turbulence: function (t, e, i, n, a) {
                return (
                  this.parent() &&
                  this.parent().turbulence(t, e, i, n, a).in(this)
                );
              },
            };
            SVG.extend(SVG.Effect, t),
              SVG.extend(SVG.ParentEffect, t),
              (SVG.ChildEffect = SVG.invent({
                create: function () {
                  this.constructor.call(this);
                },
                inherit: SVG.Element,
                extend: {
                  in: function (t) {
                    this.attr("in", t);
                  },
                },
              }));
            var e = {
                blend: function (t, e, i) {
                  this.attr({ in: t, in2: e, mode: i || "normal" });
                },
                colorMatrix: function (t, e) {
                  "matrix" == t && (e = a(e)),
                    this.attr({ type: t, values: void 0 === e ? null : e });
                },
                convolveMatrix: function (t) {
                  (t = a(t)),
                    this.attr({
                      order: Math.sqrt(t.split(" ").length),
                      kernelMatrix: t,
                    });
                },
                composite: function (t, e, i) {
                  this.attr({ in: t, in2: e, operator: i });
                },
                flood: function (t, e) {
                  this.attr("flood-color", t),
                    null != e && this.attr("flood-opacity", e);
                },
                offset: function (t, e) {
                  this.attr({ dx: t, dy: e });
                },
                image: function (t) {
                  this.attr("href", t, SVG.xlink);
                },
                displacementMap: function (t, e, i, n, a) {
                  this.attr({
                    in: t,
                    in2: e,
                    scale: i,
                    xChannelSelector: n,
                    yChannelSelector: a,
                  });
                },
                gaussianBlur: function (t, e) {
                  null != t || null != e
                    ? this.attr(
                        "stdDeviation",
                        s(Array.prototype.slice.call(arguments))
                      )
                    : this.attr("stdDeviation", "0 0");
                },
                morphology: function (t, e) {
                  this.attr({ operator: t, radius: e });
                },
                tile: function () {},
                turbulence: function (t, e, i, n, a) {
                  this.attr({
                    numOctaves: e,
                    seed: i,
                    stitchTiles: n,
                    baseFrequency: t,
                    type: a,
                  });
                },
              },
              i = {
                merge: function () {
                  var t;
                  if (arguments[0] instanceof SVG.Set) {
                    var e = this;
                    arguments[0].each(function (t) {
                      this instanceof SVG.MergeNode
                        ? e.put(this)
                        : (this instanceof SVG.Effect ||
                            this instanceof SVG.ParentEffect) &&
                          e.put(new SVG.MergeNode(this));
                    });
                  } else {
                    t = Array.isArray(arguments[0]) ? arguments[0] : arguments;
                    for (var i = 0; i < t.length; i++)
                      t[i] instanceof SVG.MergeNode
                        ? this.put(t[i])
                        : this.put(new SVG.MergeNode(t[i]));
                  }
                },
                componentTransfer: function (t) {
                  if (
                    ((this.rgb = new SVG.Set()),
                    ["r", "g", "b", "a"].forEach(
                      function (t) {
                        (this[t] = new SVG["Func" + t.toUpperCase()](
                          "identity"
                        )),
                          this.rgb.add(this[t]),
                          this.node.appendChild(this[t].node);
                      }.bind(this)
                    ),
                    t)
                  )
                    for (var e in (t.rgb &&
                      (["r", "g", "b"].forEach(
                        function (e) {
                          this[e].attr(t.rgb);
                        }.bind(this)
                      ),
                      delete t.rgb),
                    t))
                      this[e].attr(t[e]);
                },
                diffuseLighting: function (t, e, i) {
                  this.attr({
                    surfaceScale: t,
                    diffuseConstant: e,
                    kernelUnitLength: i,
                  });
                },
                specularLighting: function (t, e, i, n) {
                  this.attr({
                    surfaceScale: t,
                    diffuseConstant: e,
                    specularExponent: i,
                    kernelUnitLength: n,
                  });
                },
              },
              n = {
                distantLight: function (t, e) {
                  this.attr({ azimuth: t, elevation: e });
                },
                pointLight: function (t, e, i) {
                  this.attr({ x: t, y: e, z: i });
                },
                spotLight: function (t, e, i, n, a, s) {
                  this.attr({
                    x: t,
                    y: e,
                    z: i,
                    pointsAtX: n,
                    pointsAtY: a,
                    pointsAtZ: s,
                  });
                },
                mergeNode: function (t) {
                  this.attr("in", t);
                },
              };
            function a(t) {
              return (
                Array.isArray(t) && (t = new SVG.Array(t)),
                t
                  .toString()
                  .replace(/^\s+/, "")
                  .replace(/\s+$/, "")
                  .replace(/\s+/g, " ")
              );
            }
            function s(t) {
              if (!Array.isArray(t)) return t;
              for (var e = 0, i = t.length, n = []; e < i; e++) n.push(t[e]);
              return n.join(" ");
            }
            function r() {
              var t = function () {};
              for (var e in ("function" ==
                typeof arguments[arguments.length - 1] &&
                ((t = arguments[arguments.length - 1]),
                Array.prototype.splice.call(
                  arguments,
                  arguments.length - 1,
                  1
                )),
              arguments))
                for (var i in arguments[e]) t(arguments[e][i], i, arguments[e]);
            }
            ["r", "g", "b", "a"].forEach(function (t) {
              n["Func" + t.toUpperCase()] = function (t) {
                switch ((this.attr("type", t), t)) {
                  case "table":
                    this.attr("tableValues", arguments[1]);
                    break;
                  case "linear":
                    this.attr("slope", arguments[1]),
                      this.attr("intercept", arguments[2]);
                    break;
                  case "gamma":
                    this.attr("amplitude", arguments[1]),
                      this.attr("exponent", arguments[2]),
                      this.attr("offset", arguments[2]);
                }
              };
            }),
              r(e, function (t, e) {
                var i = e.charAt(0).toUpperCase() + e.slice(1);
                SVG[i + "Effect"] = SVG.invent({
                  create: function () {
                    this.constructor.call(this, SVG.create("fe" + i)),
                      t.apply(this, arguments),
                      this.result(this.attr("id") + "Out");
                  },
                  inherit: SVG.Effect,
                  extend: {},
                });
              }),
              r(i, function (t, e) {
                var i = e.charAt(0).toUpperCase() + e.slice(1);
                SVG[i + "Effect"] = SVG.invent({
                  create: function () {
                    this.constructor.call(this, SVG.create("fe" + i)),
                      t.apply(this, arguments),
                      this.result(this.attr("id") + "Out");
                  },
                  inherit: SVG.ParentEffect,
                  extend: {},
                });
              }),
              r(n, function (t, e) {
                var i = e.charAt(0).toUpperCase() + e.slice(1);
                SVG[i] = SVG.invent({
                  create: function () {
                    this.constructor.call(this, SVG.create("fe" + i)),
                      t.apply(this, arguments);
                  },
                  inherit: SVG.ChildEffect,
                  extend: {},
                });
              }),
              SVG.extend(SVG.MergeEffect, {
                in: function (t) {
                  return (
                    t instanceof SVG.MergeNode
                      ? this.add(t, 0)
                      : this.add(new SVG.MergeNode(t), 0),
                    this
                  );
                },
              }),
              SVG.extend(
                SVG.CompositeEffect,
                SVG.BlendEffect,
                SVG.DisplacementMapEffect,
                {
                  in2: function (t) {
                    return null == t
                      ? (this.parent() &&
                          this.parent()
                            .select('[result="' + this.attr("in2") + '"]')
                            .get(0)) ||
                          this.attr("in2")
                      : this.attr("in2", t);
                  },
                }
              ),
              (SVG.filter = {
                sepiatone: [
                  0.343, 0.669, 0.119, 0, 0, 0.249, 0.626, 0.13, 0, 0, 0.172,
                  0.334, 0.111, 0, 0, 0, 0, 0, 1, 0,
                ],
              });
          }.call(void 0),
          (function () {
            function t(t, a, s, r, o, l, c) {
              for (
                var h = t.slice(a, s || c),
                  d = r.slice(o, l || c),
                  u = 0,
                  f = { pos: [0, 0], start: [0, 0] },
                  p = { pos: [0, 0], start: [0, 0] };
                (h[u] = e.call(f, h[u])),
                  (d[u] = e.call(p, d[u])),
                  h[u][0] != d[u][0] ||
                  "M" == h[u][0] ||
                  ("A" == h[u][0] && (h[u][4] != d[u][4] || h[u][5] != d[u][5]))
                    ? (Array.prototype.splice.apply(
                        h,
                        [u, 1].concat(n.call(f, h[u]))
                      ),
                      Array.prototype.splice.apply(
                        d,
                        [u, 1].concat(n.call(p, d[u]))
                      ))
                    : ((h[u] = i.call(f, h[u])), (d[u] = i.call(p, d[u]))),
                  ++u != h.length || u != d.length;

              )
                u == h.length &&
                  h.push([
                    "C",
                    f.pos[0],
                    f.pos[1],
                    f.pos[0],
                    f.pos[1],
                    f.pos[0],
                    f.pos[1],
                  ]),
                  u == d.length &&
                    d.push([
                      "C",
                      p.pos[0],
                      p.pos[1],
                      p.pos[0],
                      p.pos[1],
                      p.pos[0],
                      p.pos[1],
                    ]);
              return { start: h, dest: d };
            }
            function e(t) {
              switch (t[0]) {
                case "z":
                case "Z":
                  (t[0] = "L"), (t[1] = this.start[0]), (t[2] = this.start[1]);
                  break;
                case "H":
                  (t[0] = "L"), (t[2] = this.pos[1]);
                  break;
                case "V":
                  (t[0] = "L"), (t[2] = t[1]), (t[1] = this.pos[0]);
                  break;
                case "T":
                  (t[0] = "Q"),
                    (t[3] = t[1]),
                    (t[4] = t[2]),
                    (t[1] = this.reflection[1]),
                    (t[2] = this.reflection[0]);
                  break;
                case "S":
                  (t[0] = "C"),
                    (t[6] = t[4]),
                    (t[5] = t[3]),
                    (t[4] = t[2]),
                    (t[3] = t[1]),
                    (t[2] = this.reflection[1]),
                    (t[1] = this.reflection[0]);
              }
              return t;
            }
            function i(t) {
              var e = t.length;
              return (
                (this.pos = [t[e - 2], t[e - 1]]),
                -1 != "SCQT".indexOf(t[0]) &&
                  (this.reflection = [
                    2 * this.pos[0] - t[e - 4],
                    2 * this.pos[1] - t[e - 3],
                  ]),
                t
              );
            }
            function n(t) {
              var e = [t];
              switch (t[0]) {
                case "M":
                  return (this.pos = this.start = [t[1], t[2]]), e;
                case "L":
                  (t[5] = t[3] = t[1]),
                    (t[6] = t[4] = t[2]),
                    (t[1] = this.pos[0]),
                    (t[2] = this.pos[1]);
                  break;
                case "Q":
                  (t[6] = t[4]),
                    (t[5] = t[3]),
                    (t[4] = (1 * t[4]) / 3 + (2 * t[2]) / 3),
                    (t[3] = (1 * t[3]) / 3 + (2 * t[1]) / 3),
                    (t[2] = (1 * this.pos[1]) / 3 + (2 * t[2]) / 3),
                    (t[1] = (1 * this.pos[0]) / 3 + (2 * t[1]) / 3);
                  break;
                case "A":
                  t = (e = (function (t, e) {
                    var i,
                      n,
                      a,
                      s,
                      r,
                      o,
                      l,
                      c,
                      h,
                      d,
                      u,
                      f,
                      p,
                      g,
                      m,
                      x,
                      v,
                      b,
                      y,
                      w,
                      k,
                      S,
                      A,
                      C,
                      E,
                      T,
                      L = Math.abs(e[1]),
                      _ = Math.abs(e[2]),
                      P = e[3] % 360,
                      I = e[4],
                      M = e[5],
                      N = e[6],
                      D = e[7],
                      z = new SVG.Point(t),
                      O = new SVG.Point(N, D),
                      F = [];
                    if (0 === L || 0 === _ || (z.x === O.x && z.y === O.y))
                      return [["C", z.x, z.y, O.x, O.y, O.x, O.y]];
                    for (
                      (n =
                        ((i = new SVG.Point(
                          (z.x - O.x) / 2,
                          (z.y - O.y) / 2
                        ).transform(new SVG.Matrix().rotate(P))).x *
                          i.x) /
                          (L * L) +
                        (i.y * i.y) / (_ * _)) > 1 &&
                        ((L *= n = Math.sqrt(n)), (_ *= n)),
                        a = new SVG.Matrix()
                          .rotate(P)
                          .scale(1 / L, 1 / _)
                          .rotate(-P),
                        z = z.transform(a),
                        o =
                          (s = [(O = O.transform(a)).x - z.x, O.y - z.y])[0] *
                            s[0] +
                          s[1] * s[1],
                        r = Math.sqrt(o),
                        s[0] /= r,
                        s[1] /= r,
                        l = o < 4 ? Math.sqrt(1 - o / 4) : 0,
                        I === M && (l *= -1),
                        c = new SVG.Point(
                          (O.x + z.x) / 2 + l * -s[1],
                          (O.y + z.y) / 2 + l * s[0]
                        ),
                        h = new SVG.Point(z.x - c.x, z.y - c.y),
                        d = new SVG.Point(O.x - c.x, O.y - c.y),
                        u = Math.acos(h.x / Math.sqrt(h.x * h.x + h.y * h.y)),
                        h.y < 0 && (u *= -1),
                        f = Math.acos(d.x / Math.sqrt(d.x * d.x + d.y * d.y)),
                        d.y < 0 && (f *= -1),
                        M && u > f && (f += 2 * Math.PI),
                        !M && u < f && (f -= 2 * Math.PI),
                        x = [],
                        v = u,
                        p =
                          (f - u) /
                          (g = Math.ceil((2 * Math.abs(u - f)) / Math.PI)),
                        m = (4 * Math.tan(p / 4)) / 3,
                        k = 0;
                      k <= g;
                      k++
                    )
                      (y = Math.cos(v)),
                        (b = Math.sin(v)),
                        (w = new SVG.Point(c.x + y, c.y + b)),
                        (x[k] = [
                          new SVG.Point(w.x + m * b, w.y - m * y),
                          w,
                          new SVG.Point(w.x - m * b, w.y + m * y),
                        ]),
                        (v += p);
                    for (
                      x[0][0] = x[0][1].clone(),
                        x[x.length - 1][2] = x[x.length - 1][1].clone(),
                        a = new SVG.Matrix().rotate(P).scale(L, _).rotate(-P),
                        k = 0,
                        S = x.length;
                      k < S;
                      k++
                    )
                      (x[k][0] = x[k][0].transform(a)),
                        (x[k][1] = x[k][1].transform(a)),
                        (x[k][2] = x[k][2].transform(a));
                    for (k = 1, S = x.length; k < S; k++)
                      (A = (w = x[k - 1][2]).x),
                        (C = w.y),
                        (E = (w = x[k][0]).x),
                        (T = w.y),
                        (N = (w = x[k][1]).x),
                        (D = w.y),
                        F.push(["C", A, C, E, T, N, D]);
                    return F;
                  })(this.pos, t))[0];
              }
              return (
                (t[0] = "C"),
                (this.pos = [t[5], t[6]]),
                (this.reflection = [2 * t[5] - t[3], 2 * t[6] - t[4]]),
                e
              );
            }
            function a(t, e) {
              if (!1 === e) return !1;
              for (var i = e, n = t.length; i < n; ++i)
                if ("M" == t[i][0]) return i;
              return !1;
            }
            SVG.extend(SVG.PathArray, {
              morph: function (e) {
                for (
                  var i = this.value,
                    n = this.parse(e),
                    s = 0,
                    r = 0,
                    o = !1,
                    l = !1;
                  !1 !== s || !1 !== r;

                ) {
                  var c;
                  (o = a(i, !1 !== s && s + 1)),
                    (l = a(n, !1 !== r && r + 1)),
                    !1 === s &&
                      (s =
                        0 == (c = new SVG.PathArray(h.start).bbox()).height ||
                        0 == c.width
                          ? i.push(i[0]) - 1
                          : i.push([
                              "M",
                              c.x + c.width / 2,
                              c.y + c.height / 2,
                            ]) - 1),
                    !1 === r &&
                      (r =
                        0 == (c = new SVG.PathArray(h.dest).bbox()).height ||
                        0 == c.width
                          ? n.push(n[0]) - 1
                          : n.push([
                              "M",
                              c.x + c.width / 2,
                              c.y + c.height / 2,
                            ]) - 1);
                  var h = t(i, s, o, n, r, l);
                  (i = i
                    .slice(0, s)
                    .concat(h.start, !1 === o ? [] : i.slice(o))),
                    (n = n
                      .slice(0, r)
                      .concat(h.dest, !1 === l ? [] : n.slice(l))),
                    (s = !1 !== o && s + h.start.length),
                    (r = !1 !== l && r + h.dest.length);
                }
                return (
                  (this.value = i),
                  (this.destination = new SVG.PathArray()),
                  (this.destination.value = n),
                  this
                );
              },
            });
          })(),
          /*! svg.draggable.js - v2.2.2 - 2019-01-08
           * https://github.com/svgdotjs/svg.draggable.js
           * Copyright (c) 2019 Wout Fierens; Licensed MIT */
          function () {
            function t(t) {
              t.remember("_draggable", this), (this.el = t);
            }
            (t.prototype.init = function (t, e) {
              var i = this;
              (this.constraint = t),
                (this.value = e),
                this.el.on("mousedown.drag", function (t) {
                  i.start(t);
                }),
                this.el.on("touchstart.drag", function (t) {
                  i.start(t);
                });
            }),
              (t.prototype.transformPoint = function (t, e) {
                var i =
                  ((t = t || window.event).changedTouches &&
                    t.changedTouches[0]) ||
                  t;
                return (
                  (this.p.x = i.clientX - (e || 0)),
                  (this.p.y = i.clientY),
                  this.p.matrixTransform(this.m)
                );
              }),
              (t.prototype.getBBox = function () {
                var t = this.el.bbox();
                return (
                  this.el instanceof SVG.Nested && (t = this.el.rbox()),
                  (this.el instanceof SVG.G ||
                    this.el instanceof SVG.Use ||
                    this.el instanceof SVG.Nested) &&
                    ((t.x = this.el.x()), (t.y = this.el.y())),
                  t
                );
              }),
              (t.prototype.start = function (t) {
                if (
                  ("click" != t.type &&
                    "mousedown" != t.type &&
                    "mousemove" != t.type) ||
                  1 == (t.which || t.buttons)
                ) {
                  var e = this;
                  if (
                    (this.el.fire("beforedrag", { event: t, handler: this }),
                    !this.el.event().defaultPrevented)
                  ) {
                    t.preventDefault(),
                      t.stopPropagation(),
                      (this.parent =
                        this.parent ||
                        this.el.parent(SVG.Nested) ||
                        this.el.parent(SVG.Doc)),
                      (this.p = this.parent.node.createSVGPoint()),
                      (this.m = this.el.node.getScreenCTM().inverse());
                    var i,
                      n = this.getBBox();
                    if (this.el instanceof SVG.Text)
                      switch (
                        ((i = this.el.node.getComputedTextLength()),
                        this.el.attr("text-anchor"))
                      ) {
                        case "middle":
                          i /= 2;
                          break;
                        case "start":
                          i = 0;
                      }
                    (this.startPoints = {
                      point: this.transformPoint(t, i),
                      box: n,
                      transform: this.el.transform(),
                    }),
                      SVG.on(window, "mousemove.drag", function (t) {
                        e.drag(t);
                      }),
                      SVG.on(window, "touchmove.drag", function (t) {
                        e.drag(t);
                      }),
                      SVG.on(window, "mouseup.drag", function (t) {
                        e.end(t);
                      }),
                      SVG.on(window, "touchend.drag", function (t) {
                        e.end(t);
                      }),
                      this.el.fire("dragstart", {
                        event: t,
                        p: this.startPoints.point,
                        m: this.m,
                        handler: this,
                      });
                  }
                }
              }),
              (t.prototype.drag = function (t) {
                var e = this.getBBox(),
                  i = this.transformPoint(t),
                  n = this.startPoints.box.x + i.x - this.startPoints.point.x,
                  a = this.startPoints.box.y + i.y - this.startPoints.point.y,
                  s = this.constraint,
                  r = i.x - this.startPoints.point.x,
                  o = i.y - this.startPoints.point.y;
                if (
                  (this.el.fire("dragmove", {
                    event: t,
                    p: i,
                    m: this.m,
                    handler: this,
                  }),
                  this.el.event().defaultPrevented)
                )
                  return i;
                if ("function" == typeof s) {
                  var l = s.call(this.el, n, a, this.m);
                  "boolean" == typeof l && (l = { x: l, y: l }),
                    !0 === l.x ? this.el.x(n) : !1 !== l.x && this.el.x(l.x),
                    !0 === l.y ? this.el.y(a) : !1 !== l.y && this.el.y(l.y);
                } else
                  "object" == typeof s &&
                    (null != s.minX && n < s.minX
                      ? (r = (n = s.minX) - this.startPoints.box.x)
                      : null != s.maxX &&
                        n > s.maxX - e.width &&
                        (r = (n = s.maxX - e.width) - this.startPoints.box.x),
                    null != s.minY && a < s.minY
                      ? (o = (a = s.minY) - this.startPoints.box.y)
                      : null != s.maxY &&
                        a > s.maxY - e.height &&
                        (o = (a = s.maxY - e.height) - this.startPoints.box.y),
                    null != s.snapToGrid &&
                      ((n -= n % s.snapToGrid),
                      (a -= a % s.snapToGrid),
                      (r -= r % s.snapToGrid),
                      (o -= o % s.snapToGrid)),
                    this.el instanceof SVG.G
                      ? this.el
                          .matrix(this.startPoints.transform)
                          .transform({ x: r, y: o }, !0)
                      : this.el.move(n, a));
                return i;
              }),
              (t.prototype.end = function (t) {
                var e = this.drag(t);
                this.el.fire("dragend", {
                  event: t,
                  p: e,
                  m: this.m,
                  handler: this,
                }),
                  SVG.off(window, "mousemove.drag"),
                  SVG.off(window, "touchmove.drag"),
                  SVG.off(window, "mouseup.drag"),
                  SVG.off(window, "touchend.drag");
              }),
              SVG.extend(SVG.Element, {
                draggable: function (e, i) {
                  ("function" != typeof e && "object" != typeof e) ||
                    ((i = e), (e = !0));
                  var n = this.remember("_draggable") || new t(this);
                  return (
                    (e = void 0 === e || e)
                      ? n.init(i || {}, e)
                      : (this.off("mousedown.drag"),
                        this.off("touchstart.drag")),
                    this
                  );
                },
              });
          }.call(void 0),
          (function () {
            function t(t) {
              (this.el = t),
                t.remember("_selectHandler", this),
                (this.pointSelection = { isSelected: !1 }),
                (this.rectSelection = { isSelected: !1 }),
                (this.pointsList = {
                  lt: [0, 0],
                  rt: ["width", 0],
                  rb: ["width", "height"],
                  lb: [0, "height"],
                  t: ["width", 0],
                  r: ["width", "height"],
                  b: ["width", "height"],
                  l: [0, "height"],
                }),
                (this.pointCoord = function (t, e, i) {
                  var n = "string" != typeof t ? t : e[t];
                  return i ? n / 2 : n;
                }),
                (this.pointCoords = function (t, e) {
                  var i = this.pointsList[t];
                  return {
                    x: this.pointCoord(i[0], e, "t" === t || "b" === t),
                    y: this.pointCoord(i[1], e, "r" === t || "l" === t),
                  };
                });
            }
            (t.prototype.init = function (t, e) {
              var i = this.el.bbox();
              this.options = {};
              var n = this.el.selectize.defaults.points;
              for (var a in this.el.selectize.defaults)
                (this.options[a] = this.el.selectize.defaults[a]),
                  void 0 !== e[a] && (this.options[a] = e[a]);
              var s = ["points", "pointsExclude"];
              for (var a in s) {
                var r = this.options[s[a]];
                "string" == typeof r
                  ? (r = r.length > 0 ? r.split(/\s*,\s*/i) : [])
                  : "boolean" == typeof r &&
                    "points" === s[a] &&
                    (r = r ? n : []),
                  (this.options[s[a]] = r);
              }
              (this.options.points = [n, this.options.points].reduce(function (
                t,
                e
              ) {
                return t.filter(function (t) {
                  return e.indexOf(t) > -1;
                });
              })),
                (this.options.points = [
                  this.options.points,
                  this.options.pointsExclude,
                ].reduce(function (t, e) {
                  return t.filter(function (t) {
                    return e.indexOf(t) < 0;
                  });
                })),
                (this.parent = this.el.parent()),
                (this.nested = this.nested || this.parent.group()),
                this.nested.matrix(new SVG.Matrix(this.el).translate(i.x, i.y)),
                this.options.deepSelect &&
                -1 !== ["line", "polyline", "polygon"].indexOf(this.el.type)
                  ? this.selectPoints(t)
                  : this.selectRect(t),
                this.observe(),
                this.cleanup();
            }),
              (t.prototype.selectPoints = function (t) {
                return (
                  (this.pointSelection.isSelected = t),
                  this.pointSelection.set ||
                    ((this.pointSelection.set = this.parent.set()),
                    this.drawPoints()),
                  this
                );
              }),
              (t.prototype.getPointArray = function () {
                var t = this.el.bbox();
                return this.el
                  .array()
                  .valueOf()
                  .map(function (e) {
                    return [e[0] - t.x, e[1] - t.y];
                  });
              }),
              (t.prototype.drawPoints = function () {
                for (
                  var t = this, e = this.getPointArray(), i = 0, n = e.length;
                  i < n;
                  ++i
                ) {
                  var a = (function (e) {
                      return function (i) {
                        (i = i || window.event).preventDefault
                          ? i.preventDefault()
                          : (i.returnValue = !1),
                          i.stopPropagation();
                        var n = i.pageX || i.touches[0].pageX,
                          a = i.pageY || i.touches[0].pageY;
                        t.el.fire("point", { x: n, y: a, i: e, event: i });
                      };
                    })(i),
                    s = this.drawPoint(e[i][0], e[i][1])
                      .addClass(this.options.classPoints)
                      .addClass(this.options.classPoints + "_point")
                      .on("touchstart", a)
                      .on("mousedown", a);
                  this.pointSelection.set.add(s);
                }
              }),
              (t.prototype.drawPoint = function (t, e) {
                var i = this.options.pointType;
                switch (i) {
                  case "circle":
                    return this.drawCircle(t, e);
                  case "rect":
                    return this.drawRect(t, e);
                  default:
                    if ("function" == typeof i) return i.call(this, t, e);
                    throw new Error("Unknown " + i + " point type!");
                }
              }),
              (t.prototype.drawCircle = function (t, e) {
                return this.nested.circle(this.options.pointSize).center(t, e);
              }),
              (t.prototype.drawRect = function (t, e) {
                return this.nested
                  .rect(this.options.pointSize, this.options.pointSize)
                  .center(t, e);
              }),
              (t.prototype.updatePointSelection = function () {
                var t = this.getPointArray();
                this.pointSelection.set.each(function (e) {
                  (this.cx() === t[e][0] && this.cy() === t[e][1]) ||
                    this.center(t[e][0], t[e][1]);
                });
              }),
              (t.prototype.updateRectSelection = function () {
                var t = this,
                  e = this.el.bbox();
                if (
                  (this.rectSelection.set
                    .get(0)
                    .attr({ width: e.width, height: e.height }),
                  this.options.points.length &&
                    this.options.points.map(function (i, n) {
                      var a = t.pointCoords(i, e);
                      t.rectSelection.set.get(n + 1).center(a.x, a.y);
                    }),
                  this.options.rotationPoint)
                ) {
                  var i = this.rectSelection.set.length();
                  this.rectSelection.set.get(i - 1).center(e.width / 2, 20);
                }
              }),
              (t.prototype.selectRect = function (t) {
                var e = this,
                  i = this.el.bbox();
                function n(t) {
                  return function (i) {
                    (i = i || window.event).preventDefault
                      ? i.preventDefault()
                      : (i.returnValue = !1),
                      i.stopPropagation();
                    var n = i.pageX || i.touches[0].pageX,
                      a = i.pageY || i.touches[0].pageY;
                    e.el.fire(t, { x: n, y: a, event: i });
                  };
                }
                if (
                  ((this.rectSelection.isSelected = t),
                  (this.rectSelection.set =
                    this.rectSelection.set || this.parent.set()),
                  this.rectSelection.set.get(0) ||
                    this.rectSelection.set.add(
                      this.nested
                        .rect(i.width, i.height)
                        .addClass(this.options.classRect)
                    ),
                  this.options.points.length &&
                    this.rectSelection.set.length() < 2 &&
                    (this.options.points.map(function (t, a) {
                      var s = e.pointCoords(t, i),
                        r = e
                          .drawPoint(s.x, s.y)
                          .attr("class", e.options.classPoints + "_" + t)
                          .on("mousedown", n(t))
                          .on("touchstart", n(t));
                      e.rectSelection.set.add(r);
                    }),
                    this.rectSelection.set.each(function () {
                      this.addClass(e.options.classPoints);
                    })),
                  this.options.rotationPoint &&
                    ((this.options.points && !this.rectSelection.set.get(9)) ||
                      (!this.options.points && !this.rectSelection.set.get(1))))
                ) {
                  var a = function (t) {
                      (t = t || window.event).preventDefault
                        ? t.preventDefault()
                        : (t.returnValue = !1),
                        t.stopPropagation();
                      var i = t.pageX || t.touches[0].pageX,
                        n = t.pageY || t.touches[0].pageY;
                      e.el.fire("rot", { x: i, y: n, event: t });
                    },
                    s = this.drawPoint(i.width / 2, 20)
                      .attr("class", this.options.classPoints + "_rot")
                      .on("touchstart", a)
                      .on("mousedown", a);
                  this.rectSelection.set.add(s);
                }
              }),
              (t.prototype.handler = function () {
                var t = this.el.bbox();
                this.nested.matrix(new SVG.Matrix(this.el).translate(t.x, t.y)),
                  this.rectSelection.isSelected && this.updateRectSelection(),
                  this.pointSelection.isSelected && this.updatePointSelection();
              }),
              (t.prototype.observe = function () {
                var t = this;
                if (MutationObserver)
                  if (
                    this.rectSelection.isSelected ||
                    this.pointSelection.isSelected
                  )
                    (this.observerInst =
                      this.observerInst ||
                      new MutationObserver(function () {
                        t.handler();
                      })),
                      this.observerInst.observe(this.el.node, {
                        attributes: !0,
                      });
                  else
                    try {
                      this.observerInst.disconnect(), delete this.observerInst;
                    } catch (t) {}
                else
                  this.el.off("DOMAttrModified.select"),
                    (this.rectSelection.isSelected ||
                      this.pointSelection.isSelected) &&
                      this.el.on("DOMAttrModified.select", function () {
                        t.handler();
                      });
              }),
              (t.prototype.cleanup = function () {
                !this.rectSelection.isSelected &&
                  this.rectSelection.set &&
                  (this.rectSelection.set.each(function () {
                    this.remove();
                  }),
                  this.rectSelection.set.clear(),
                  delete this.rectSelection.set),
                  !this.pointSelection.isSelected &&
                    this.pointSelection.set &&
                    (this.pointSelection.set.each(function () {
                      this.remove();
                    }),
                    this.pointSelection.set.clear(),
                    delete this.pointSelection.set),
                  this.pointSelection.isSelected ||
                    this.rectSelection.isSelected ||
                    (this.nested.remove(), delete this.nested);
              }),
              SVG.extend(SVG.Element, {
                selectize: function (e, i) {
                  return (
                    "object" == typeof e && ((i = e), (e = !0)),
                    (this.remember("_selectHandler") || new t(this)).init(
                      void 0 === e || e,
                      i || {}
                    ),
                    this
                  );
                },
              }),
              (SVG.Element.prototype.selectize.defaults = {
                points: ["lt", "rt", "rb", "lb", "t", "r", "b", "l"],
                pointsExclude: [],
                classRect: "svg_select_boundingRect",
                classPoints: "svg_select_points",
                pointSize: 7,
                rotationPoint: !0,
                deepSelect: !1,
                pointType: "circle",
              });
          })(),
          (function () {
            (function () {
              function t(t) {
                t.remember("_resizeHandler", this),
                  (this.el = t),
                  (this.parameters = {}),
                  (this.lastUpdateCall = null),
                  (this.p = t.doc().node.createSVGPoint());
              }
              (t.prototype.transformPoint = function (t, e, i) {
                return (
                  (this.p.x = t - (this.offset.x - window.pageXOffset)),
                  (this.p.y = e - (this.offset.y - window.pageYOffset)),
                  this.p.matrixTransform(i || this.m)
                );
              }),
                (t.prototype._extractPosition = function (t) {
                  return {
                    x: null != t.clientX ? t.clientX : t.touches[0].clientX,
                    y: null != t.clientY ? t.clientY : t.touches[0].clientY,
                  };
                }),
                (t.prototype.init = function (t) {
                  var e = this;
                  if ((this.stop(), "stop" !== t)) {
                    for (var i in ((this.options = {}),
                    this.el.resize.defaults))
                      (this.options[i] = this.el.resize.defaults[i]),
                        void 0 !== t[i] && (this.options[i] = t[i]);
                    this.el.on("lt.resize", function (t) {
                      e.resize(t || window.event);
                    }),
                      this.el.on("rt.resize", function (t) {
                        e.resize(t || window.event);
                      }),
                      this.el.on("rb.resize", function (t) {
                        e.resize(t || window.event);
                      }),
                      this.el.on("lb.resize", function (t) {
                        e.resize(t || window.event);
                      }),
                      this.el.on("t.resize", function (t) {
                        e.resize(t || window.event);
                      }),
                      this.el.on("r.resize", function (t) {
                        e.resize(t || window.event);
                      }),
                      this.el.on("b.resize", function (t) {
                        e.resize(t || window.event);
                      }),
                      this.el.on("l.resize", function (t) {
                        e.resize(t || window.event);
                      }),
                      this.el.on("rot.resize", function (t) {
                        e.resize(t || window.event);
                      }),
                      this.el.on("point.resize", function (t) {
                        e.resize(t || window.event);
                      }),
                      this.update();
                  }
                }),
                (t.prototype.stop = function () {
                  return (
                    this.el.off("lt.resize"),
                    this.el.off("rt.resize"),
                    this.el.off("rb.resize"),
                    this.el.off("lb.resize"),
                    this.el.off("t.resize"),
                    this.el.off("r.resize"),
                    this.el.off("b.resize"),
                    this.el.off("l.resize"),
                    this.el.off("rot.resize"),
                    this.el.off("point.resize"),
                    this
                  );
                }),
                (t.prototype.resize = function (t) {
                  var e = this;
                  (this.m = this.el.node.getScreenCTM().inverse()),
                    (this.offset = {
                      x: window.pageXOffset,
                      y: window.pageYOffset,
                    });
                  var i = this._extractPosition(t.detail.event);
                  if (
                    ((this.parameters = {
                      type: this.el.type,
                      p: this.transformPoint(i.x, i.y),
                      x: t.detail.x,
                      y: t.detail.y,
                      box: this.el.bbox(),
                      rotation: this.el.transform().rotation,
                    }),
                    "text" === this.el.type &&
                      (this.parameters.fontSize = this.el.attr()["font-size"]),
                    void 0 !== t.detail.i)
                  ) {
                    var n = this.el.array().valueOf();
                    (this.parameters.i = t.detail.i),
                      (this.parameters.pointCoords = [
                        n[t.detail.i][0],
                        n[t.detail.i][1],
                      ]);
                  }
                  switch (t.type) {
                    case "lt":
                      this.calc = function (t, e) {
                        var i = this.snapToGrid(t, e);
                        if (
                          this.parameters.box.width - i[0] > 0 &&
                          this.parameters.box.height - i[1] > 0
                        ) {
                          if ("text" === this.parameters.type)
                            return (
                              this.el.move(
                                this.parameters.box.x + i[0],
                                this.parameters.box.y
                              ),
                              void this.el.attr(
                                "font-size",
                                this.parameters.fontSize - i[0]
                              )
                            );
                          (i = this.checkAspectRatio(i)),
                            this.el
                              .move(
                                this.parameters.box.x + i[0],
                                this.parameters.box.y + i[1]
                              )
                              .size(
                                this.parameters.box.width - i[0],
                                this.parameters.box.height - i[1]
                              );
                        }
                      };
                      break;
                    case "rt":
                      this.calc = function (t, e) {
                        var i = this.snapToGrid(t, e, 2);
                        if (
                          this.parameters.box.width + i[0] > 0 &&
                          this.parameters.box.height - i[1] > 0
                        ) {
                          if ("text" === this.parameters.type)
                            return (
                              this.el.move(
                                this.parameters.box.x - i[0],
                                this.parameters.box.y
                              ),
                              void this.el.attr(
                                "font-size",
                                this.parameters.fontSize + i[0]
                              )
                            );
                          (i = this.checkAspectRatio(i, !0)),
                            this.el
                              .move(
                                this.parameters.box.x,
                                this.parameters.box.y + i[1]
                              )
                              .size(
                                this.parameters.box.width + i[0],
                                this.parameters.box.height - i[1]
                              );
                        }
                      };
                      break;
                    case "rb":
                      this.calc = function (t, e) {
                        var i = this.snapToGrid(t, e, 0);
                        if (
                          this.parameters.box.width + i[0] > 0 &&
                          this.parameters.box.height + i[1] > 0
                        ) {
                          if ("text" === this.parameters.type)
                            return (
                              this.el.move(
                                this.parameters.box.x - i[0],
                                this.parameters.box.y
                              ),
                              void this.el.attr(
                                "font-size",
                                this.parameters.fontSize + i[0]
                              )
                            );
                          (i = this.checkAspectRatio(i)),
                            this.el
                              .move(
                                this.parameters.box.x,
                                this.parameters.box.y
                              )
                              .size(
                                this.parameters.box.width + i[0],
                                this.parameters.box.height + i[1]
                              );
                        }
                      };
                      break;
                    case "lb":
                      this.calc = function (t, e) {
                        var i = this.snapToGrid(t, e, 1);
                        if (
                          this.parameters.box.width - i[0] > 0 &&
                          this.parameters.box.height + i[1] > 0
                        ) {
                          if ("text" === this.parameters.type)
                            return (
                              this.el.move(
                                this.parameters.box.x + i[0],
                                this.parameters.box.y
                              ),
                              void this.el.attr(
                                "font-size",
                                this.parameters.fontSize - i[0]
                              )
                            );
                          (i = this.checkAspectRatio(i, !0)),
                            this.el
                              .move(
                                this.parameters.box.x + i[0],
                                this.parameters.box.y
                              )
                              .size(
                                this.parameters.box.width - i[0],
                                this.parameters.box.height + i[1]
                              );
                        }
                      };
                      break;
                    case "t":
                      this.calc = function (t, e) {
                        var i = this.snapToGrid(t, e, 2);
                        if (this.parameters.box.height - i[1] > 0) {
                          if ("text" === this.parameters.type) return;
                          this.el
                            .move(
                              this.parameters.box.x,
                              this.parameters.box.y + i[1]
                            )
                            .height(this.parameters.box.height - i[1]);
                        }
                      };
                      break;
                    case "r":
                      this.calc = function (t, e) {
                        var i = this.snapToGrid(t, e, 0);
                        if (this.parameters.box.width + i[0] > 0) {
                          if ("text" === this.parameters.type) return;
                          this.el
                            .move(this.parameters.box.x, this.parameters.box.y)
                            .width(this.parameters.box.width + i[0]);
                        }
                      };
                      break;
                    case "b":
                      this.calc = function (t, e) {
                        var i = this.snapToGrid(t, e, 0);
                        if (this.parameters.box.height + i[1] > 0) {
                          if ("text" === this.parameters.type) return;
                          this.el
                            .move(this.parameters.box.x, this.parameters.box.y)
                            .height(this.parameters.box.height + i[1]);
                        }
                      };
                      break;
                    case "l":
                      this.calc = function (t, e) {
                        var i = this.snapToGrid(t, e, 1);
                        if (this.parameters.box.width - i[0] > 0) {
                          if ("text" === this.parameters.type) return;
                          this.el
                            .move(
                              this.parameters.box.x + i[0],
                              this.parameters.box.y
                            )
                            .width(this.parameters.box.width - i[0]);
                        }
                      };
                      break;
                    case "rot":
                      this.calc = function (t, e) {
                        var i = t + this.parameters.p.x,
                          n = e + this.parameters.p.y,
                          a = Math.atan2(
                            this.parameters.p.y -
                              this.parameters.box.y -
                              this.parameters.box.height / 2,
                            this.parameters.p.x -
                              this.parameters.box.x -
                              this.parameters.box.width / 2
                          ),
                          s = Math.atan2(
                            n -
                              this.parameters.box.y -
                              this.parameters.box.height / 2,
                            i -
                              this.parameters.box.x -
                              this.parameters.box.width / 2
                          ),
                          r =
                            this.parameters.rotation +
                            (180 * (s - a)) / Math.PI +
                            this.options.snapToAngle / 2;
                        this.el
                          .center(
                            this.parameters.box.cx,
                            this.parameters.box.cy
                          )
                          .rotate(
                            r - (r % this.options.snapToAngle),
                            this.parameters.box.cx,
                            this.parameters.box.cy
                          );
                      };
                      break;
                    case "point":
                      this.calc = function (t, e) {
                        var i = this.snapToGrid(
                            t,
                            e,
                            this.parameters.pointCoords[0],
                            this.parameters.pointCoords[1]
                          ),
                          n = this.el.array().valueOf();
                        (n[this.parameters.i][0] =
                          this.parameters.pointCoords[0] + i[0]),
                          (n[this.parameters.i][1] =
                            this.parameters.pointCoords[1] + i[1]),
                          this.el.plot(n);
                      };
                  }
                  this.el.fire("resizestart", {
                    dx: this.parameters.x,
                    dy: this.parameters.y,
                    event: t,
                  }),
                    SVG.on(window, "touchmove.resize", function (t) {
                      e.update(t || window.event);
                    }),
                    SVG.on(window, "touchend.resize", function () {
                      e.done();
                    }),
                    SVG.on(window, "mousemove.resize", function (t) {
                      e.update(t || window.event);
                    }),
                    SVG.on(window, "mouseup.resize", function () {
                      e.done();
                    });
                }),
                (t.prototype.update = function (t) {
                  if (t) {
                    var e = this._extractPosition(t),
                      i = this.transformPoint(e.x, e.y),
                      n = i.x - this.parameters.p.x,
                      a = i.y - this.parameters.p.y;
                    (this.lastUpdateCall = [n, a]),
                      this.calc(n, a),
                      this.el.fire("resizing", { dx: n, dy: a, event: t });
                  } else
                    this.lastUpdateCall &&
                      this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);
                }),
                (t.prototype.done = function () {
                  (this.lastUpdateCall = null),
                    SVG.off(window, "mousemove.resize"),
                    SVG.off(window, "mouseup.resize"),
                    SVG.off(window, "touchmove.resize"),
                    SVG.off(window, "touchend.resize"),
                    this.el.fire("resizedone");
                }),
                (t.prototype.snapToGrid = function (t, e, i, n) {
                  var a;
                  return (
                    void 0 !== n
                      ? (a = [
                          (i + t) % this.options.snapToGrid,
                          (n + e) % this.options.snapToGrid,
                        ])
                      : ((i = null == i ? 3 : i),
                        (a = [
                          (this.parameters.box.x +
                            t +
                            (1 & i ? 0 : this.parameters.box.width)) %
                            this.options.snapToGrid,
                          (this.parameters.box.y +
                            e +
                            (2 & i ? 0 : this.parameters.box.height)) %
                            this.options.snapToGrid,
                        ])),
                    t < 0 && (a[0] -= this.options.snapToGrid),
                    e < 0 && (a[1] -= this.options.snapToGrid),
                    (t -=
                      Math.abs(a[0]) < this.options.snapToGrid / 2
                        ? a[0]
                        : a[0] -
                          (t < 0
                            ? -this.options.snapToGrid
                            : this.options.snapToGrid)),
                    (e -=
                      Math.abs(a[1]) < this.options.snapToGrid / 2
                        ? a[1]
                        : a[1] -
                          (e < 0
                            ? -this.options.snapToGrid
                            : this.options.snapToGrid)),
                    this.constraintToBox(t, e, i, n)
                  );
                }),
                (t.prototype.constraintToBox = function (t, e, i, n) {
                  var a,
                    s,
                    r = this.options.constraint || {};
                  return (
                    void 0 !== n
                      ? ((a = i), (s = n))
                      : ((a =
                          this.parameters.box.x +
                          (1 & i ? 0 : this.parameters.box.width)),
                        (s =
                          this.parameters.box.y +
                          (2 & i ? 0 : this.parameters.box.height))),
                    void 0 !== r.minX && a + t < r.minX && (t = r.minX - a),
                    void 0 !== r.maxX && a + t > r.maxX && (t = r.maxX - a),
                    void 0 !== r.minY && s + e < r.minY && (e = r.minY - s),
                    void 0 !== r.maxY && s + e > r.maxY && (e = r.maxY - s),
                    [t, e]
                  );
                }),
                (t.prototype.checkAspectRatio = function (t, e) {
                  if (!this.options.saveAspectRatio) return t;
                  var i = t.slice(),
                    n = this.parameters.box.width / this.parameters.box.height,
                    a = this.parameters.box.width + t[0],
                    s = this.parameters.box.height - t[1],
                    r = a / s;
                  return (
                    r < n
                      ? ((i[1] = a / n - this.parameters.box.height),
                        e && (i[1] = -i[1]))
                      : r > n &&
                        ((i[0] = this.parameters.box.width - s * n),
                        e && (i[0] = -i[0])),
                    i
                  );
                }),
                SVG.extend(SVG.Element, {
                  resize: function (e) {
                    return (
                      (this.remember("_resizeHandler") || new t(this)).init(
                        e || {}
                      ),
                      this
                    );
                  },
                }),
                (SVG.Element.prototype.resize.defaults = {
                  snapToAngle: 0.1,
                  snapToGrid: 1,
                  constraint: {},
                  saveAspectRatio: !1,
                });
            }.call(this));
          })(),
          (function (t, e) {
            void 0 === e && (e = {});
            var i = e.insertAt;
            if ("undefined" != typeof document) {
              var n = document.head || document.getElementsByTagName("head")[0],
                a = document.createElement("style");
              (a.type = "text/css"),
                "top" === i && n.firstChild
                  ? n.insertBefore(a, n.firstChild)
                  : n.appendChild(a),
                a.styleSheet
                  ? (a.styleSheet.cssText = t)
                  : a.appendChild(document.createTextNode(t));
            }
          })(
            '.apexcharts-canvas {\n  position: relative;\n  user-select: none;\n  /* cannot give overflow: hidden as it will crop tooltips which overflow outside chart area */\n}\n\n\n/* scrollbar is not visible by default for legend, hence forcing the visibility */\n.apexcharts-canvas ::-webkit-scrollbar {\n  -webkit-appearance: none;\n  width: 6px;\n}\n\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\n  border-radius: 4px;\n  background-color: rgba(0, 0, 0, .5);\n  box-shadow: 0 0 1px rgba(255, 255, 255, .5);\n  -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5);\n}\n\n\n.apexcharts-inner {\n  position: relative;\n}\n\n.apexcharts-text tspan {\n  font-family: inherit;\n}\n\n.legend-mouseover-inactive {\n  transition: 0.15s ease all;\n  opacity: 0.20;\n}\n\n.apexcharts-series-collapsed {\n  opacity: 0;\n}\n\n.apexcharts-tooltip {\n  border-radius: 5px;\n  box-shadow: 2px 2px 6px -4px #999;\n  cursor: default;\n  font-size: 14px;\n  left: 62px;\n  opacity: 0;\n  pointer-events: none;\n  position: absolute;\n  top: 20px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  white-space: nowrap;\n  z-index: 12;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-tooltip.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-tooltip.apexcharts-theme-light {\n  border: 1px solid #e3e3e3;\n  background: rgba(255, 255, 255, 0.96);\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark {\n  color: #fff;\n  background: rgba(30, 30, 30, 0.8);\n}\n\n.apexcharts-tooltip * {\n  font-family: inherit;\n}\n\n\n.apexcharts-tooltip-title {\n  padding: 6px;\n  font-size: 15px;\n  margin-bottom: 4px;\n}\n\n.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {\n  background: #ECEFF1;\n  border-bottom: 1px solid #ddd;\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {\n  background: rgba(0, 0, 0, 0.7);\n  border-bottom: 1px solid #333;\n}\n\n.apexcharts-tooltip-text-y-value,\n.apexcharts-tooltip-text-goals-value,\n.apexcharts-tooltip-text-z-value {\n  display: inline-block;\n  font-weight: 600;\n  margin-left: 5px;\n}\n\n.apexcharts-tooltip-text-y-label:empty,\n.apexcharts-tooltip-text-y-value:empty,\n.apexcharts-tooltip-text-goals-label:empty,\n.apexcharts-tooltip-text-goals-value:empty,\n.apexcharts-tooltip-text-z-value:empty {\n  display: none;\n}\n\n.apexcharts-tooltip-text-y-value,\n.apexcharts-tooltip-text-goals-value,\n.apexcharts-tooltip-text-z-value {\n  font-weight: 600;\n}\n\n.apexcharts-tooltip-text-goals-label, \n.apexcharts-tooltip-text-goals-value {\n  padding: 6px 0 5px;\n}\n\n.apexcharts-tooltip-goals-group, \n.apexcharts-tooltip-text-goals-label, \n.apexcharts-tooltip-text-goals-value {\n  display: flex;\n}\n.apexcharts-tooltip-text-goals-label:not(:empty),\n.apexcharts-tooltip-text-goals-value:not(:empty) {\n  margin-top: -6px;\n}\n\n.apexcharts-tooltip-marker {\n  width: 12px;\n  height: 12px;\n  position: relative;\n  top: 0px;\n  margin-right: 10px;\n  border-radius: 50%;\n}\n\n.apexcharts-tooltip-series-group {\n  padding: 0 10px;\n  display: none;\n  text-align: left;\n  justify-content: left;\n  align-items: center;\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {\n  opacity: 1;\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active,\n.apexcharts-tooltip-series-group:last-child {\n  padding-bottom: 4px;\n}\n\n.apexcharts-tooltip-series-group-hidden {\n  opacity: 0;\n  height: 0;\n  line-height: 0;\n  padding: 0 !important;\n}\n\n.apexcharts-tooltip-y-group {\n  padding: 6px 0 5px;\n}\n\n.apexcharts-tooltip-box, .apexcharts-custom-tooltip {\n  padding: 4px 8px;\n}\n\n.apexcharts-tooltip-boxPlot {\n  display: flex;\n  flex-direction: column-reverse;\n}\n\n.apexcharts-tooltip-box>div {\n  margin: 4px 0;\n}\n\n.apexcharts-tooltip-box span.value {\n  font-weight: bold;\n}\n\n.apexcharts-tooltip-rangebar {\n  padding: 5px 8px;\n}\n\n.apexcharts-tooltip-rangebar .category {\n  font-weight: 600;\n  color: #777;\n}\n\n.apexcharts-tooltip-rangebar .series-name {\n  font-weight: bold;\n  display: block;\n  margin-bottom: 5px;\n}\n\n.apexcharts-xaxistooltip {\n  opacity: 0;\n  padding: 9px 10px;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #ECEFF1;\n  border: 1px solid #90A4AE;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-xaxistooltip.apexcharts-theme-dark {\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  color: #fff;\n}\n\n.apexcharts-xaxistooltip:after,\n.apexcharts-xaxistooltip:before {\n  left: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none;\n}\n\n.apexcharts-xaxistooltip:after {\n  border-color: rgba(236, 239, 241, 0);\n  border-width: 6px;\n  margin-left: -6px;\n}\n\n.apexcharts-xaxistooltip:before {\n  border-color: rgba(144, 164, 174, 0);\n  border-width: 7px;\n  margin-left: -7px;\n}\n\n.apexcharts-xaxistooltip-bottom:after,\n.apexcharts-xaxistooltip-bottom:before {\n  bottom: 100%;\n}\n\n.apexcharts-xaxistooltip-top:after,\n.apexcharts-xaxistooltip-top:before {\n  top: 100%;\n}\n\n.apexcharts-xaxistooltip-bottom:after {\n  border-bottom-color: #ECEFF1;\n}\n\n.apexcharts-xaxistooltip-bottom:before {\n  border-bottom-color: #90A4AE;\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after {\n  border-bottom-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {\n  border-bottom-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip-top:after {\n  border-top-color: #ECEFF1\n}\n\n.apexcharts-xaxistooltip-top:before {\n  border-top-color: #90A4AE;\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after {\n  border-top-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {\n  border-top-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-yaxistooltip {\n  opacity: 0;\n  padding: 4px 10px;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #ECEFF1;\n  border: 1px solid #90A4AE;\n}\n\n.apexcharts-yaxistooltip.apexcharts-theme-dark {\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  color: #fff;\n}\n\n.apexcharts-yaxistooltip:after,\n.apexcharts-yaxistooltip:before {\n  top: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none;\n}\n\n.apexcharts-yaxistooltip:after {\n  border-color: rgba(236, 239, 241, 0);\n  border-width: 6px;\n  margin-top: -6px;\n}\n\n.apexcharts-yaxistooltip:before {\n  border-color: rgba(144, 164, 174, 0);\n  border-width: 7px;\n  margin-top: -7px;\n}\n\n.apexcharts-yaxistooltip-left:after,\n.apexcharts-yaxistooltip-left:before {\n  left: 100%;\n}\n\n.apexcharts-yaxistooltip-right:after,\n.apexcharts-yaxistooltip-right:before {\n  right: 100%;\n}\n\n.apexcharts-yaxistooltip-left:after {\n  border-left-color: #ECEFF1;\n}\n\n.apexcharts-yaxistooltip-left:before {\n  border-left-color: #90A4AE;\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after {\n  border-left-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {\n  border-left-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip-right:after {\n  border-right-color: #ECEFF1;\n}\n\n.apexcharts-yaxistooltip-right:before {\n  border-right-color: #90A4AE;\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after {\n  border-right-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {\n  border-right-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip.apexcharts-active {\n  opacity: 1;\n}\n\n.apexcharts-yaxistooltip-hidden {\n  display: none;\n}\n\n.apexcharts-xcrosshairs,\n.apexcharts-ycrosshairs {\n  pointer-events: none;\n  opacity: 0;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-xcrosshairs.apexcharts-active,\n.apexcharts-ycrosshairs.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-ycrosshairs-hidden {\n  opacity: 0;\n}\n\n.apexcharts-selection-rect {\n  cursor: move;\n}\n\n.svg_select_boundingRect, .svg_select_points_rot {\n  pointer-events: none;\n  opacity: 0;\n  visibility: hidden;\n}\n.apexcharts-selection-rect + g .svg_select_boundingRect,\n.apexcharts-selection-rect + g .svg_select_points_rot {\n  opacity: 0;\n  visibility: hidden;\n}\n\n.apexcharts-selection-rect + g .svg_select_points_l,\n.apexcharts-selection-rect + g .svg_select_points_r {\n  cursor: ew-resize;\n  opacity: 1;\n  visibility: visible;\n}\n\n.svg_select_points {\n  fill: #efefef;\n  stroke: #333;\n  rx: 2;\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-zoom {\n  cursor: crosshair\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-pan {\n  cursor: move\n}\n\n.apexcharts-zoom-icon,\n.apexcharts-zoomin-icon,\n.apexcharts-zoomout-icon,\n.apexcharts-reset-icon,\n.apexcharts-pan-icon,\n.apexcharts-selection-icon,\n.apexcharts-menu-icon,\n.apexcharts-toolbar-custom-icon {\n  cursor: pointer;\n  width: 20px;\n  height: 20px;\n  line-height: 24px;\n  color: #6E8192;\n  text-align: center;\n}\n\n.apexcharts-zoom-icon svg,\n.apexcharts-zoomin-icon svg,\n.apexcharts-zoomout-icon svg,\n.apexcharts-reset-icon svg,\n.apexcharts-menu-icon svg {\n  fill: #6E8192;\n}\n\n.apexcharts-selection-icon svg {\n  fill: #444;\n  transform: scale(0.76)\n}\n\n.apexcharts-theme-dark .apexcharts-zoom-icon svg,\n.apexcharts-theme-dark .apexcharts-zoomin-icon svg,\n.apexcharts-theme-dark .apexcharts-zoomout-icon svg,\n.apexcharts-theme-dark .apexcharts-reset-icon svg,\n.apexcharts-theme-dark .apexcharts-pan-icon svg,\n.apexcharts-theme-dark .apexcharts-selection-icon svg,\n.apexcharts-theme-dark .apexcharts-menu-icon svg,\n.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg {\n  fill: #f3f4f5;\n}\n\n.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg,\n.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,\n.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg {\n  fill: #008FFB;\n}\n\n.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,\n.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,\n.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,\n.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg,\n.apexcharts-theme-light .apexcharts-reset-icon:hover svg,\n.apexcharts-theme-light .apexcharts-menu-icon:hover svg {\n  fill: #333;\n}\n\n.apexcharts-selection-icon,\n.apexcharts-menu-icon {\n  position: relative;\n}\n\n.apexcharts-reset-icon {\n  margin-left: 5px;\n}\n\n.apexcharts-zoom-icon,\n.apexcharts-reset-icon,\n.apexcharts-menu-icon {\n  transform: scale(0.85);\n}\n\n.apexcharts-zoomin-icon,\n.apexcharts-zoomout-icon {\n  transform: scale(0.7)\n}\n\n.apexcharts-zoomout-icon {\n  margin-right: 3px;\n}\n\n.apexcharts-pan-icon {\n  transform: scale(0.62);\n  position: relative;\n  left: 1px;\n  top: 0px;\n}\n\n.apexcharts-pan-icon svg {\n  fill: #fff;\n  stroke: #6E8192;\n  stroke-width: 2;\n}\n\n.apexcharts-pan-icon.apexcharts-selected svg {\n  stroke: #008FFB;\n}\n\n.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {\n  stroke: #333;\n}\n\n.apexcharts-toolbar {\n  position: absolute;\n  z-index: 11;\n  max-width: 176px;\n  text-align: right;\n  border-radius: 3px;\n  padding: 0px 6px 2px 6px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.apexcharts-menu {\n  background: #fff;\n  position: absolute;\n  top: 100%;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  padding: 3px;\n  right: 10px;\n  opacity: 0;\n  min-width: 110px;\n  transition: 0.15s ease all;\n  pointer-events: none;\n}\n\n.apexcharts-menu.apexcharts-menu-open {\n  opacity: 1;\n  pointer-events: all;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-menu-item {\n  padding: 6px 7px;\n  font-size: 12px;\n  cursor: pointer;\n}\n\n.apexcharts-theme-light .apexcharts-menu-item:hover {\n  background: #eee;\n}\n\n.apexcharts-theme-dark .apexcharts-menu {\n  background: rgba(0, 0, 0, 0.7);\n  color: #fff;\n}\n\n@media screen and (min-width: 768px) {\n  .apexcharts-canvas:hover .apexcharts-toolbar {\n    opacity: 1;\n  }\n}\n\n.apexcharts-datalabel.apexcharts-element-hidden {\n  opacity: 0;\n}\n\n.apexcharts-pie-label,\n.apexcharts-datalabels,\n.apexcharts-datalabel,\n.apexcharts-datalabel-label,\n.apexcharts-datalabel-value {\n  cursor: default;\n  pointer-events: none;\n}\n\n.apexcharts-pie-label-delay {\n  opacity: 0;\n  animation-name: opaque;\n  animation-duration: 0.3s;\n  animation-fill-mode: forwards;\n  animation-timing-function: ease;\n}\n\n.apexcharts-canvas .apexcharts-element-hidden {\n  opacity: 0;\n}\n\n.apexcharts-hide .apexcharts-series-points {\n  opacity: 0;\n}\n\n.apexcharts-gridline,\n.apexcharts-annotation-rect,\n.apexcharts-tooltip .apexcharts-marker,\n.apexcharts-area-series .apexcharts-area,\n.apexcharts-line,\n.apexcharts-zoom-rect,\n.apexcharts-toolbar svg,\n.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\n.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\n.apexcharts-radar-series path,\n.apexcharts-radar-series polygon {\n  pointer-events: none;\n}\n\n\n/* markers */\n\n.apexcharts-marker {\n  transition: 0.15s ease all;\n}\n\n@keyframes opaque {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n\n/* Resize generated styles */\n\n@keyframes resizeanim {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.resize-triggers {\n  animation: 1ms resizeanim;\n  visibility: hidden;\n  opacity: 0;\n}\n\n.resize-triggers,\n.resize-triggers>div,\n.contract-trigger:before {\n  content: " ";\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n}\n\n.resize-triggers>div {\n  background: #eee;\n  overflow: auto;\n}\n\n.contract-trigger:before {\n  width: 200%;\n  height: 200%;\n}'
          ),
          (function () {
            function t(t) {
              var e = t.__resizeTriggers__,
                i = e.firstElementChild,
                n = e.lastElementChild,
                a = i ? i.firstElementChild : null;
              n &&
                ((n.scrollLeft = n.scrollWidth),
                (n.scrollTop = n.scrollHeight)),
                a &&
                  ((a.style.width = i.offsetWidth + 1 + "px"),
                  (a.style.height = i.offsetHeight + 1 + "px")),
                i &&
                  ((i.scrollLeft = i.scrollWidth),
                  (i.scrollTop = i.scrollHeight));
            }
            function e(e) {
              var i = this;
              t(this),
                this.__resizeRAF__ && s(this.__resizeRAF__),
                (this.__resizeRAF__ = a(function () {
                  (function (t) {
                    return (
                      t.offsetWidth != t.__resizeLast__.width ||
                      t.offsetHeight != t.__resizeLast__.height
                    );
                  })(i) &&
                    ((i.__resizeLast__.width = i.offsetWidth),
                    (i.__resizeLast__.height = i.offsetHeight),
                    i.__resizeListeners__.forEach(function (t) {
                      t.call(e);
                    }));
                }));
            }
            var i,
              n,
              a =
                ((i =
                  window.requestAnimationFrame ||
                  window.mozRequestAnimationFrame ||
                  window.webkitRequestAnimationFrame ||
                  function (t) {
                    return window.setTimeout(t, 20);
                  }),
                function (t) {
                  return i(t);
                }),
              s =
                ((n =
                  window.cancelAnimationFrame ||
                  window.mozCancelAnimationFrame ||
                  window.webkitCancelAnimationFrame ||
                  window.clearTimeout),
                function (t) {
                  return n(t);
                }),
              r = !1,
              o = "animationstart",
              l = "Webkit Moz O ms".split(" "),
              c =
                "webkitAnimationStart animationstart oAnimationStart MSAnimationStart".split(
                  " "
                ),
              h = document.createElement("fakeelement");
            if ((void 0 !== h.style.animationName && (r = !0), !1 === r))
              for (var d = 0; d < l.length; d++)
                if (void 0 !== h.style[l[d] + "AnimationName"]) {
                  o = c[d];
                  break;
                }
            (window.addResizeListener = function (i, n) {
              i.__resizeTriggers__ ||
                ("static" == getComputedStyle(i).position &&
                  (i.style.position = "relative"),
                (i.__resizeLast__ = {}),
                (i.__resizeListeners__ = []),
                ((i.__resizeTriggers__ =
                  document.createElement("div")).className = "resize-triggers"),
                (i.__resizeTriggers__.innerHTML =
                  '<div class="expand-trigger"><div></div></div><div class="contract-trigger"></div>'),
                i.appendChild(i.__resizeTriggers__),
                t(i),
                i.addEventListener("scroll", e, !0),
                o &&
                  i.__resizeTriggers__.addEventListener(o, function (e) {
                    "resizeanim" == e.animationName && t(i);
                  })),
                i.__resizeListeners__.push(n);
            }),
              (window.removeResizeListener = function (t, i) {
                t &&
                  (t.__resizeListeners__.splice(
                    t.__resizeListeners__.indexOf(i),
                    1
                  ),
                  t.__resizeListeners__.length ||
                    (t.removeEventListener("scroll", e),
                    t.__resizeTriggers__.parentNode &&
                      (t.__resizeTriggers__ = !t.removeChild(
                        t.__resizeTriggers__
                      ))));
              });
          })(),
          void 0 === window.Apex && (window.Apex = {});
        var Xt = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.w = e.w);
            }
            return (
              o(t, [
                {
                  key: "initModules",
                  value: function () {
                    (this.ctx.publicMethods = [
                      "updateOptions",
                      "updateSeries",
                      "appendData",
                      "appendSeries",
                      "toggleSeries",
                      "showSeries",
                      "hideSeries",
                      "setLocale",
                      "resetSeries",
                      "zoomX",
                      "toggleDataPointSelection",
                      "dataURI",
                      "addXaxisAnnotation",
                      "addYaxisAnnotation",
                      "addPointAnnotation",
                      "clearAnnotations",
                      "removeAnnotation",
                      "paper",
                      "destroy",
                    ]),
                      (this.ctx.eventList = [
                        "click",
                        "mousedown",
                        "mousemove",
                        "mouseleave",
                        "touchstart",
                        "touchmove",
                        "touchleave",
                        "mouseup",
                        "touchend",
                      ]),
                      (this.ctx.animations = new b(this.ctx)),
                      (this.ctx.axes = new et(this.ctx)),
                      (this.ctx.core = new Ot(this.ctx.el, this.ctx)),
                      (this.ctx.config = new Y({})),
                      (this.ctx.data = new j(this.ctx)),
                      (this.ctx.grid = new $(this.ctx)),
                      (this.ctx.graphics = new w(this.ctx)),
                      (this.ctx.coreUtils = new A(this.ctx)),
                      (this.ctx.crosshairs = new it(this.ctx)),
                      (this.ctx.events = new J(this.ctx)),
                      (this.ctx.exports = new q(this.ctx)),
                      (this.ctx.localization = new tt(this.ctx)),
                      (this.ctx.options = new L()),
                      (this.ctx.responsive = new nt(this.ctx)),
                      (this.ctx.series = new z(this.ctx)),
                      (this.ctx.theme = new at(this.ctx)),
                      (this.ctx.formatters = new V(this.ctx)),
                      (this.ctx.titleSubtitle = new st(this.ctx)),
                      (this.ctx.legend = new ut(this.ctx)),
                      (this.ctx.toolbar = new ft(this.ctx)),
                      (this.ctx.dimensions = new ht(this.ctx)),
                      (this.ctx.updateHelpers = new Ft(this.ctx)),
                      (this.ctx.zoomPanSelection = new pt(this.ctx)),
                      (this.ctx.w.globals.tooltip = new wt(this.ctx));
                  },
                },
              ]),
              t
            );
          })(),
          Rt = (function () {
            function t(e) {
              s(this, t), (this.ctx = e), (this.w = e.w);
            }
            return (
              o(t, [
                {
                  key: "clear",
                  value: function (t) {
                    var e = t.isUpdating;
                    this.ctx.zoomPanSelection &&
                      this.ctx.zoomPanSelection.destroy(),
                      this.ctx.toolbar && this.ctx.toolbar.destroy(),
                      (this.ctx.animations = null),
                      (this.ctx.axes = null),
                      (this.ctx.annotations = null),
                      (this.ctx.core = null),
                      (this.ctx.data = null),
                      (this.ctx.grid = null),
                      (this.ctx.series = null),
                      (this.ctx.responsive = null),
                      (this.ctx.theme = null),
                      (this.ctx.formatters = null),
                      (this.ctx.titleSubtitle = null),
                      (this.ctx.legend = null),
                      (this.ctx.dimensions = null),
                      (this.ctx.options = null),
                      (this.ctx.crosshairs = null),
                      (this.ctx.zoomPanSelection = null),
                      (this.ctx.updateHelpers = null),
                      (this.ctx.toolbar = null),
                      (this.ctx.localization = null),
                      (this.ctx.w.globals.tooltip = null),
                      this.clearDomElements({ isUpdating: e });
                  },
                },
                {
                  key: "killSVG",
                  value: function (t) {
                    t.each(function (t, e) {
                      this.removeClass("*"), this.off(), this.stop();
                    }, !0),
                      t.ungroup(),
                      t.clear();
                  },
                },
                {
                  key: "clearDomElements",
                  value: function (t) {
                    var e = this,
                      i = t.isUpdating,
                      n = this.w.globals.dom.Paper.node;
                    n.parentNode &&
                      n.parentNode.parentNode &&
                      !i &&
                      (n.parentNode.parentNode.style.minHeight = "unset");
                    var a = this.w.globals.dom.baseEl;
                    a &&
                      this.ctx.eventList.forEach(function (t) {
                        a.removeEventListener(t, e.ctx.events.documentEvent);
                      });
                    var s = this.w.globals.dom;
                    if (null !== this.ctx.el)
                      for (; this.ctx.el.firstChild; )
                        this.ctx.el.removeChild(this.ctx.el.firstChild);
                    this.killSVG(s.Paper),
                      s.Paper.remove(),
                      (s.elWrap = null),
                      (s.elGraphical = null),
                      (s.elAnnotations = null),
                      (s.elLegendWrap = null),
                      (s.baseEl = null),
                      (s.elGridRect = null),
                      (s.elGridRectMask = null),
                      (s.elGridRectMarkerMask = null),
                      (s.elForecastMask = null),
                      (s.elNonForecastMask = null),
                      (s.elDefs = null);
                  },
                },
              ]),
              t
            );
          })(),
          Ht = (function () {
            function t(e, i) {
              s(this, t),
                (this.opts = i),
                (this.ctx = this),
                (this.w = new B(i).init()),
                (this.el = e),
                (this.w.globals.cuid = v.randomId()),
                (this.w.globals.chartID = this.w.config.chart.id
                  ? v.escapeString(this.w.config.chart.id)
                  : this.w.globals.cuid),
                new Xt(this).initModules(),
                (this.create = v.bind(this.create, this)),
                (this.windowResizeHandler =
                  this._windowResizeHandler.bind(this)),
                (this.parentResizeHandler =
                  this._parentResizeCallback.bind(this));
            }
            return (
              o(
                t,
                [
                  {
                    key: "render",
                    value: function () {
                      var t = this;
                      return new Promise(function (e, i) {
                        if (null !== t.el) {
                          void 0 === Apex._chartInstances &&
                            (Apex._chartInstances = []),
                            t.w.config.chart.id &&
                              Apex._chartInstances.push({
                                id: t.w.globals.chartID,
                                group: t.w.config.chart.group,
                                chart: t,
                              }),
                            t.setLocale(t.w.config.chart.defaultLocale);
                          var n = t.w.config.chart.events.beforeMount;
                          "function" == typeof n && n(t, t.w),
                            t.events.fireEvent("beforeMount", [t, t.w]),
                            window.addEventListener(
                              "resize",
                              t.windowResizeHandler
                            ),
                            window.addResizeListener(
                              t.el.parentNode,
                              t.parentResizeHandler
                            );
                          var a = t.create(t.w.config.series, {});
                          if (!a) return e(t);
                          t.mount(a)
                            .then(function () {
                              "function" ==
                                typeof t.w.config.chart.events.mounted &&
                                t.w.config.chart.events.mounted(t, t.w),
                                t.events.fireEvent("mounted", [t, t.w]),
                                e(a);
                            })
                            .catch(function (t) {
                              i(t);
                            });
                        } else i(new Error("Element not found"));
                      });
                    },
                  },
                  {
                    key: "create",
                    value: function (t, e) {
                      var i = this.w;
                      new Xt(this).initModules();
                      var n = this.w.globals;
                      if (
                        ((n.noData = !1),
                        (n.animationEnded = !1),
                        this.responsive.checkResponsiveConfig(e),
                        i.config.xaxis.convertedCatToNumeric &&
                          new H(i.config).convertCatToNumericXaxis(
                            i.config,
                            this.ctx
                          ),
                        null === this.el)
                      )
                        return (n.animationEnded = !0), null;
                      if (
                        (this.core.setupElements(),
                        "treemap" === i.config.chart.type &&
                          ((i.config.grid.show = !1),
                          (i.config.yaxis[0].show = !1)),
                        0 === n.svgWidth)
                      )
                        return (n.animationEnded = !0), null;
                      var a = A.checkComboSeries(t);
                      (n.comboCharts = a.comboCharts),
                        (n.comboBarCount = a.comboBarCount);
                      var s = t.every(function (t) {
                        return t.data && 0 === t.data.length;
                      });
                      (0 === t.length || s) && this.series.handleNoData(),
                        this.events.setupEventHandlers(),
                        this.data.parseData(t),
                        this.theme.init(),
                        new I(this).setGlobalMarkerSize(),
                        this.formatters.setLabelFormatters(),
                        this.titleSubtitle.draw(),
                        (n.noData &&
                          n.collapsedSeries.length !== n.series.length &&
                          !i.config.legend.showForSingleSeries) ||
                          this.legend.init(),
                        this.series.hasAllSeriesEqualX(),
                        n.axisCharts &&
                          (this.core.coreCalculations(),
                          "category" !== i.config.xaxis.type &&
                            this.formatters.setLabelFormatters(),
                          (this.ctx.toolbar.minX = i.globals.minX),
                          (this.ctx.toolbar.maxX = i.globals.maxX)),
                        this.formatters.heatmapLabelFormatters(),
                        this.dimensions.plotCoords();
                      var r = this.core.xySettings();
                      this.grid.createGridMask();
                      var o = this.core.plotChartType(t, r),
                        l = new N(this);
                      l.bringForward(),
                        i.config.dataLabels.background.enabled &&
                          l.dataLabelsBackground(),
                        this.core.shiftGraphPosition();
                      var c = {
                        plot: {
                          left: i.globals.translateX,
                          top: i.globals.translateY,
                          width: i.globals.gridWidth,
                          height: i.globals.gridHeight,
                        },
                      };
                      return {
                        elGraph: o,
                        xyRatios: r,
                        elInner: i.globals.dom.elGraphical,
                        dimensions: c,
                      };
                    },
                  },
                  {
                    key: "mount",
                    value: function () {
                      var t = this,
                        e =
                          arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : null,
                        i = this,
                        n = i.w;
                      return new Promise(function (a, s) {
                        if (null === i.el)
                          return s(
                            new Error(
                              "Not enough data to display or target element not found"
                            )
                          );
                        (null === e || n.globals.allSeriesCollapsed) &&
                          i.series.handleNoData(),
                          "treemap" !== n.config.chart.type &&
                            i.axes.drawAxis(n.config.chart.type, e.xyRatios),
                          (i.grid = new $(i));
                        var r = i.grid.drawGrid();
                        (i.annotations = new _(i)),
                          i.annotations.drawImageAnnos(),
                          i.annotations.drawTextAnnos(),
                          "back" === n.config.grid.position &&
                            r &&
                            n.globals.dom.elGraphical.add(r.el);
                        var o = new U(t.ctx),
                          l = new K(t.ctx);
                        if (
                          (null !== r &&
                            (o.xAxisLabelCorrections(r.xAxisTickWidth),
                            l.setYAxisTextAlignments(),
                            n.config.yaxis.map(function (t, e) {
                              -1 === n.globals.ignoreYAxisIndexes.indexOf(e) &&
                                l.yAxisTitleRotate(e, t.opposite);
                            })),
                          "back" === n.config.annotations.position &&
                            (n.globals.dom.Paper.add(
                              n.globals.dom.elAnnotations
                            ),
                            i.annotations.drawAxesAnnotations()),
                          Array.isArray(e.elGraph))
                        )
                          for (var c = 0; c < e.elGraph.length; c++)
                            n.globals.dom.elGraphical.add(e.elGraph[c]);
                        else n.globals.dom.elGraphical.add(e.elGraph);
                        if (
                          ("front" === n.config.grid.position &&
                            r &&
                            n.globals.dom.elGraphical.add(r.el),
                          "front" === n.config.xaxis.crosshairs.position &&
                            i.crosshairs.drawXCrosshairs(),
                          "front" === n.config.yaxis[0].crosshairs.position &&
                            i.crosshairs.drawYCrosshairs(),
                          "front" === n.config.annotations.position &&
                            (n.globals.dom.Paper.add(
                              n.globals.dom.elAnnotations
                            ),
                            i.annotations.drawAxesAnnotations()),
                          !n.globals.noData)
                        ) {
                          if (
                            (n.config.tooltip.enabled &&
                              !n.globals.noData &&
                              i.w.globals.tooltip.drawTooltip(e.xyRatios),
                            n.globals.axisCharts &&
                              (n.globals.isXNumeric ||
                                n.config.xaxis.convertedCatToNumeric ||
                                n.globals.isRangeBar))
                          )
                            (n.config.chart.zoom.enabled ||
                              (n.config.chart.selection &&
                                n.config.chart.selection.enabled) ||
                              (n.config.chart.pan &&
                                n.config.chart.pan.enabled)) &&
                              i.zoomPanSelection.init({ xyRatios: e.xyRatios });
                          else {
                            var h = n.config.chart.toolbar.tools;
                            [
                              "zoom",
                              "zoomin",
                              "zoomout",
                              "selection",
                              "pan",
                              "reset",
                            ].forEach(function (t) {
                              h[t] = !1;
                            });
                          }
                          n.config.chart.toolbar.show &&
                            !n.globals.allSeriesCollapsed &&
                            i.toolbar.createToolbar();
                        }
                        n.globals.memory.methodsToExec.length > 0 &&
                          n.globals.memory.methodsToExec.forEach(function (t) {
                            t.method(t.params, !1, t.context);
                          }),
                          n.globals.axisCharts ||
                            n.globals.noData ||
                            i.core.resizeNonAxisCharts(),
                          a(i);
                      });
                    },
                  },
                  {
                    key: "destroy",
                    value: function () {
                      window.removeEventListener(
                        "resize",
                        this.windowResizeHandler
                      ),
                        window.removeResizeListener(
                          this.el.parentNode,
                          this.parentResizeHandler
                        );
                      var t = this.w.config.chart.id;
                      t &&
                        Apex._chartInstances.forEach(function (e, i) {
                          e.id === v.escapeString(t) &&
                            Apex._chartInstances.splice(i, 1);
                        }),
                        new Rt(this.ctx).clear({ isUpdating: !1 });
                    },
                  },
                  {
                    key: "updateOptions",
                    value: function (t) {
                      var e = this,
                        i =
                          arguments.length > 1 &&
                          void 0 !== arguments[1] &&
                          arguments[1],
                        n =
                          !(arguments.length > 2 && void 0 !== arguments[2]) ||
                          arguments[2],
                        a =
                          !(arguments.length > 3 && void 0 !== arguments[3]) ||
                          arguments[3],
                        s =
                          !(arguments.length > 4 && void 0 !== arguments[4]) ||
                          arguments[4],
                        r = this.w;
                      return (
                        (r.globals.selection = void 0),
                        t.series &&
                          (this.series.resetSeries(!1, !0, !1),
                          t.series.length &&
                            t.series[0].data &&
                            (t.series = t.series.map(function (t, i) {
                              return e.updateHelpers._extendSeries(t, i);
                            })),
                          this.updateHelpers.revertDefaultAxisMinMax()),
                        t.xaxis && (t = this.updateHelpers.forceXAxisUpdate(t)),
                        t.yaxis && (t = this.updateHelpers.forceYAxisUpdate(t)),
                        r.globals.collapsedSeriesIndices.length > 0 &&
                          this.series.clearPreviousPaths(),
                        t.theme && (t = this.theme.updateThemeOptions(t)),
                        this.updateHelpers._updateOptions(t, i, n, a, s)
                      );
                    },
                  },
                  {
                    key: "updateSeries",
                    value: function () {
                      var t =
                          arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : [],
                        e =
                          !(arguments.length > 1 && void 0 !== arguments[1]) ||
                          arguments[1],
                        i =
                          !(arguments.length > 2 && void 0 !== arguments[2]) ||
                          arguments[2];
                      return (
                        this.series.resetSeries(!1),
                        this.updateHelpers.revertDefaultAxisMinMax(),
                        this.updateHelpers._updateSeries(t, e, i)
                      );
                    },
                  },
                  {
                    key: "appendSeries",
                    value: function (t) {
                      var e =
                          !(arguments.length > 1 && void 0 !== arguments[1]) ||
                          arguments[1],
                        i =
                          !(arguments.length > 2 && void 0 !== arguments[2]) ||
                          arguments[2],
                        n = this.w.config.series.slice();
                      return (
                        n.push(t),
                        this.series.resetSeries(!1),
                        this.updateHelpers.revertDefaultAxisMinMax(),
                        this.updateHelpers._updateSeries(n, e, i)
                      );
                    },
                  },
                  {
                    key: "appendData",
                    value: function (t) {
                      var e =
                          !(arguments.length > 1 && void 0 !== arguments[1]) ||
                          arguments[1],
                        i = this;
                      (i.w.globals.dataChanged = !0),
                        i.series.getPreviousPaths();
                      for (
                        var n = i.w.config.series.slice(), a = 0;
                        a < n.length;
                        a++
                      )
                        if (null !== t[a] && void 0 !== t[a])
                          for (var s = 0; s < t[a].data.length; s++)
                            n[a].data.push(t[a].data[s]);
                      return (
                        (i.w.config.series = n),
                        e &&
                          (i.w.globals.initialSeries = v.clone(
                            i.w.config.series
                          )),
                        this.update()
                      );
                    },
                  },
                  {
                    key: "update",
                    value: function (t) {
                      var e = this;
                      return new Promise(function (i, n) {
                        new Rt(e.ctx).clear({ isUpdating: !0 });
                        var a = e.create(e.w.config.series, t);
                        if (!a) return i(e);
                        e.mount(a)
                          .then(function () {
                            "function" ==
                              typeof e.w.config.chart.events.updated &&
                              e.w.config.chart.events.updated(e, e.w),
                              e.events.fireEvent("updated", [e, e.w]),
                              (e.w.globals.isDirty = !0),
                              i(e);
                          })
                          .catch(function (t) {
                            n(t);
                          });
                      });
                    },
                  },
                  {
                    key: "getSyncedCharts",
                    value: function () {
                      var t = this.getGroupedCharts(),
                        e = [this];
                      return (
                        t.length &&
                          ((e = []),
                          t.forEach(function (t) {
                            e.push(t);
                          })),
                        e
                      );
                    },
                  },
                  {
                    key: "getGroupedCharts",
                    value: function () {
                      var t = this;
                      return Apex._chartInstances
                        .filter(function (t) {
                          if (t.group) return !0;
                        })
                        .map(function (e) {
                          return t.w.config.chart.group === e.group
                            ? e.chart
                            : t;
                        });
                    },
                  },
                  {
                    key: "toggleSeries",
                    value: function (t) {
                      return this.series.toggleSeries(t);
                    },
                  },
                  {
                    key: "highlightSeriesOnLegendHover",
                    value: function (t, e) {
                      return this.series.toggleSeriesOnHover(t, e);
                    },
                  },
                  {
                    key: "showSeries",
                    value: function (t) {
                      this.series.showSeries(t);
                    },
                  },
                  {
                    key: "hideSeries",
                    value: function (t) {
                      this.series.hideSeries(t);
                    },
                  },
                  {
                    key: "resetSeries",
                    value: function () {
                      var t =
                          !(arguments.length > 0 && void 0 !== arguments[0]) ||
                          arguments[0],
                        e =
                          !(arguments.length > 1 && void 0 !== arguments[1]) ||
                          arguments[1];
                      this.series.resetSeries(t, e);
                    },
                  },
                  {
                    key: "addEventListener",
                    value: function (t, e) {
                      this.events.addEventListener(t, e);
                    },
                  },
                  {
                    key: "removeEventListener",
                    value: function (t, e) {
                      this.events.removeEventListener(t, e);
                    },
                  },
                  {
                    key: "addXaxisAnnotation",
                    value: function (t) {
                      var e =
                          !(arguments.length > 1 && void 0 !== arguments[1]) ||
                          arguments[1],
                        i =
                          arguments.length > 2 && void 0 !== arguments[2]
                            ? arguments[2]
                            : void 0,
                        n = this;
                      i && (n = i),
                        n.annotations.addXaxisAnnotationExternal(t, e, n);
                    },
                  },
                  {
                    key: "addYaxisAnnotation",
                    value: function (t) {
                      var e =
                          !(arguments.length > 1 && void 0 !== arguments[1]) ||
                          arguments[1],
                        i =
                          arguments.length > 2 && void 0 !== arguments[2]
                            ? arguments[2]
                            : void 0,
                        n = this;
                      i && (n = i),
                        n.annotations.addYaxisAnnotationExternal(t, e, n);
                    },
                  },
                  {
                    key: "addPointAnnotation",
                    value: function (t) {
                      var e =
                          !(arguments.length > 1 && void 0 !== arguments[1]) ||
                          arguments[1],
                        i =
                          arguments.length > 2 && void 0 !== arguments[2]
                            ? arguments[2]
                            : void 0,
                        n = this;
                      i && (n = i),
                        n.annotations.addPointAnnotationExternal(t, e, n);
                    },
                  },
                  {
                    key: "clearAnnotations",
                    value: function () {
                      var t =
                          arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : void 0,
                        e = this;
                      t && (e = t), e.annotations.clearAnnotations(e);
                    },
                  },
                  {
                    key: "removeAnnotation",
                    value: function (t) {
                      var e =
                          arguments.length > 1 && void 0 !== arguments[1]
                            ? arguments[1]
                            : void 0,
                        i = this;
                      e && (i = e), i.annotations.removeAnnotation(i, t);
                    },
                  },
                  {
                    key: "getChartArea",
                    value: function () {
                      return this.w.globals.dom.baseEl.querySelector(
                        ".apexcharts-inner"
                      );
                    },
                  },
                  {
                    key: "getSeriesTotalXRange",
                    value: function (t, e) {
                      return this.coreUtils.getSeriesTotalsXRange(t, e);
                    },
                  },
                  {
                    key: "getHighestValueInSeries",
                    value: function () {
                      var t =
                          arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : 0,
                        e = new Q(this.ctx);
                      return e.getMinYMaxY(t).highestY;
                    },
                  },
                  {
                    key: "getLowestValueInSeries",
                    value: function () {
                      var t =
                          arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : 0,
                        e = new Q(this.ctx);
                      return e.getMinYMaxY(t).lowestY;
                    },
                  },
                  {
                    key: "getSeriesTotal",
                    value: function () {
                      return this.w.globals.seriesTotals;
                    },
                  },
                  {
                    key: "toggleDataPointSelection",
                    value: function (t, e) {
                      return this.updateHelpers.toggleDataPointSelection(t, e);
                    },
                  },
                  {
                    key: "zoomX",
                    value: function (t, e) {
                      this.ctx.toolbar.zoomUpdateOptions(t, e);
                    },
                  },
                  {
                    key: "setLocale",
                    value: function (t) {
                      this.localization.setCurrentLocaleValues(t);
                    },
                  },
                  {
                    key: "dataURI",
                    value: function (t) {
                      return new q(this.ctx).dataURI(t);
                    },
                  },
                  {
                    key: "paper",
                    value: function () {
                      return this.w.globals.dom.Paper;
                    },
                  },
                  {
                    key: "_parentResizeCallback",
                    value: function () {
                      this.w.globals.animationEnded &&
                        this.w.config.chart.redrawOnParentResize &&
                        this._windowResize();
                    },
                  },
                  {
                    key: "_windowResize",
                    value: function () {
                      var t = this;
                      clearTimeout(this.w.globals.resizeTimer),
                        (this.w.globals.resizeTimer = window.setTimeout(
                          function () {
                            (t.w.globals.resized = !0),
                              (t.w.globals.dataChanged = !1),
                              t.ctx.update();
                          },
                          150
                        ));
                    },
                  },
                  {
                    key: "_windowResizeHandler",
                    value: function () {
                      var t = this.w.config.chart.redrawOnWindowResize;
                      "function" == typeof t && (t = t()),
                        t && this._windowResize();
                    },
                  },
                ],
                [
                  {
                    key: "getChartByID",
                    value: function (t) {
                      var e = v.escapeString(t),
                        i = Apex._chartInstances.filter(function (t) {
                          return t.id === e;
                        })[0];
                      return i && i.chart;
                    },
                  },
                  {
                    key: "initOnLoad",
                    value: function () {
                      for (
                        var e = document.querySelectorAll("[data-apexcharts]"),
                          i = 0;
                        i < e.length;
                        i++
                      )
                        new t(
                          e[i],
                          JSON.parse(e[i].getAttribute("data-options"))
                        ).render();
                    },
                  },
                  {
                    key: "exec",
                    value: function (t, e) {
                      var i = this.getChartByID(t);
                      if (i) {
                        i.w.globals.isExecCalled = !0;
                        var n = null;
                        if (-1 !== i.publicMethods.indexOf(e)) {
                          for (
                            var a = arguments.length,
                              s = new Array(a > 2 ? a - 2 : 0),
                              r = 2;
                            r < a;
                            r++
                          )
                            s[r - 2] = arguments[r];
                          n = i[e].apply(i, s);
                        }
                        return n;
                      }
                    },
                  },
                  {
                    key: "merge",
                    value: function (t, e) {
                      return v.extend(t, e);
                    },
                  },
                ]
              ),
              t
            );
          })();
        t.exports = Ht;
      },
      734: function (t, e, i) {
        /*!
         * Bootstrap v4.6.0 (https://getbootstrap.com/)
         * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
         */
        !(function (t, e, i) {
          "use strict";
          function n(t) {
            return t && "object" == typeof t && "default" in t
              ? t
              : { default: t };
          }
          var a = n(e),
            s = n(i);
          function r(t, e) {
            for (var i = 0; i < e.length; i++) {
              var n = e[i];
              (n.enumerable = n.enumerable || !1),
                (n.configurable = !0),
                "value" in n && (n.writable = !0),
                Object.defineProperty(t, n.key, n);
            }
          }
          function o(t, e, i) {
            return e && r(t.prototype, e), i && r(t, i), t;
          }
          function l() {
            return (
              (l =
                Object.assign ||
                function (t) {
                  for (var e = 1; e < arguments.length; e++) {
                    var i = arguments[e];
                    for (var n in i)
                      Object.prototype.hasOwnProperty.call(i, n) &&
                        (t[n] = i[n]);
                  }
                  return t;
                }),
              l.apply(this, arguments)
            );
          }
          function c(t, e) {
            (t.prototype = Object.create(e.prototype)),
              (t.prototype.constructor = t),
              (t.__proto__ = e);
          }
          var h = "transitionend",
            d = 1e6,
            u = 1e3;
          function f(t) {
            return null == t
              ? "" + t
              : {}.toString
                  .call(t)
                  .match(/\s([a-z]+)/i)[1]
                  .toLowerCase();
          }
          function p() {
            return {
              bindType: h,
              delegateType: h,
              handle: function (t) {
                if (a.default(t.target).is(this))
                  return t.handleObj.handler.apply(this, arguments);
              },
            };
          }
          function g(t) {
            var e = this,
              i = !1;
            return (
              a.default(this).one(x.TRANSITION_END, function () {
                i = !0;
              }),
              setTimeout(function () {
                i || x.triggerTransitionEnd(e);
              }, t),
              this
            );
          }
          function m() {
            (a.default.fn.emulateTransitionEnd = g),
              (a.default.event.special[x.TRANSITION_END] = p());
          }
          var x = {
            TRANSITION_END: "bsTransitionEnd",
            getUID: function (t) {
              do {
                t += ~~(Math.random() * d);
              } while (document.getElementById(t));
              return t;
            },
            getSelectorFromElement: function (t) {
              var e = t.getAttribute("data-target");
              if (!e || "#" === e) {
                var i = t.getAttribute("href");
                e = i && "#" !== i ? i.trim() : "";
              }
              try {
                return document.querySelector(e) ? e : null;
              } catch (t) {
                return null;
              }
            },
            getTransitionDurationFromElement: function (t) {
              if (!t) return 0;
              var e = a.default(t).css("transition-duration"),
                i = a.default(t).css("transition-delay"),
                n = parseFloat(e),
                s = parseFloat(i);
              return n || s
                ? ((e = e.split(",")[0]),
                  (i = i.split(",")[0]),
                  (parseFloat(e) + parseFloat(i)) * u)
                : 0;
            },
            reflow: function (t) {
              return t.offsetHeight;
            },
            triggerTransitionEnd: function (t) {
              a.default(t).trigger(h);
            },
            supportsTransitionEnd: function () {
              return Boolean(h);
            },
            isElement: function (t) {
              return (t[0] || t).nodeType;
            },
            typeCheckConfig: function (t, e, i) {
              for (var n in i)
                if (Object.prototype.hasOwnProperty.call(i, n)) {
                  var a = i[n],
                    s = e[n],
                    r = s && x.isElement(s) ? "element" : f(s);
                  if (!new RegExp(a).test(r))
                    throw new Error(
                      t.toUpperCase() +
                        ': Option "' +
                        n +
                        '" provided type "' +
                        r +
                        '" but expected type "' +
                        a +
                        '".'
                    );
                }
            },
            findShadowRoot: function (t) {
              if (!document.documentElement.attachShadow) return null;
              if ("function" == typeof t.getRootNode) {
                var e = t.getRootNode();
                return e instanceof ShadowRoot ? e : null;
              }
              return t instanceof ShadowRoot
                ? t
                : t.parentNode
                ? x.findShadowRoot(t.parentNode)
                : null;
            },
            jQueryDetection: function () {
              if (void 0 === a.default)
                throw new TypeError(
                  "Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript."
                );
              var t = a.default.fn.jquery.split(" ")[0].split("."),
                e = 1,
                i = 2,
                n = 9,
                s = 1,
                r = 4;
              if (
                (t[0] < i && t[1] < n) ||
                (t[0] === e && t[1] === n && t[2] < s) ||
                t[0] >= r
              )
                throw new Error(
                  "Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0"
                );
            },
          };
          x.jQueryDetection(), m();
          var v = "alert",
            b = "4.6.0",
            y = "bs.alert",
            w = "." + y,
            k = ".data-api",
            S = a.default.fn[v],
            A = '[data-dismiss="alert"]',
            C = "close" + w,
            E = "closed" + w,
            T = "click" + w + k,
            L = "alert",
            _ = "fade",
            P = "show",
            I = (function () {
              function t(t) {
                this._element = t;
              }
              var e = t.prototype;
              return (
                (e.close = function (t) {
                  var e = this._element;
                  t && (e = this._getRootElement(t)),
                    this._triggerCloseEvent(e).isDefaultPrevented() ||
                      this._removeElement(e);
                }),
                (e.dispose = function () {
                  a.default.removeData(this._element, y),
                    (this._element = null);
                }),
                (e._getRootElement = function (t) {
                  var e = x.getSelectorFromElement(t),
                    i = !1;
                  return (
                    e && (i = document.querySelector(e)),
                    i || (i = a.default(t).closest("." + L)[0]),
                    i
                  );
                }),
                (e._triggerCloseEvent = function (t) {
                  var e = a.default.Event(C);
                  return a.default(t).trigger(e), e;
                }),
                (e._removeElement = function (t) {
                  var e = this;
                  if ((a.default(t).removeClass(P), a.default(t).hasClass(_))) {
                    var i = x.getTransitionDurationFromElement(t);
                    a.default(t)
                      .one(x.TRANSITION_END, function (i) {
                        return e._destroyElement(t, i);
                      })
                      .emulateTransitionEnd(i);
                  } else this._destroyElement(t);
                }),
                (e._destroyElement = function (t) {
                  a.default(t).detach().trigger(E).remove();
                }),
                (t._jQueryInterface = function (e) {
                  return this.each(function () {
                    var i = a.default(this),
                      n = i.data(y);
                    n || ((n = new t(this)), i.data(y, n)),
                      "close" === e && n[e](this);
                  });
                }),
                (t._handleDismiss = function (t) {
                  return function (e) {
                    e && e.preventDefault(), t.close(this);
                  };
                }),
                o(t, null, [
                  {
                    key: "VERSION",
                    get: function () {
                      return b;
                    },
                  },
                ]),
                t
              );
            })();
          a.default(document).on(T, A, I._handleDismiss(new I())),
            (a.default.fn[v] = I._jQueryInterface),
            (a.default.fn[v].Constructor = I),
            (a.default.fn[v].noConflict = function () {
              return (a.default.fn[v] = S), I._jQueryInterface;
            });
          var M = "button",
            N = "4.6.0",
            D = "bs.button",
            z = "." + D,
            O = ".data-api",
            F = a.default.fn[M],
            X = "active",
            R = "btn",
            H = "focus",
            Y = '[data-toggle^="button"]',
            W = '[data-toggle="buttons"]',
            B = '[data-toggle="button"]',
            j = '[data-toggle="buttons"] .btn',
            V = 'input:not([type="hidden"])',
            G = ".active",
            q = ".btn",
            U = "click" + z + O,
            $ = "focus" + z + O + " blur" + z + O,
            Z = "load" + z + O,
            Q = (function () {
              function t(t) {
                (this._element = t), (this.shouldAvoidTriggerChange = !1);
              }
              var e = t.prototype;
              return (
                (e.toggle = function () {
                  var t = !0,
                    e = !0,
                    i = a.default(this._element).closest(W)[0];
                  if (i) {
                    var n = this._element.querySelector(V);
                    if (n) {
                      if ("radio" === n.type)
                        if (n.checked && this._element.classList.contains(X))
                          t = !1;
                        else {
                          var s = i.querySelector(G);
                          s && a.default(s).removeClass(X);
                        }
                      t &&
                        (("checkbox" !== n.type && "radio" !== n.type) ||
                          (n.checked = !this._element.classList.contains(X)),
                        this.shouldAvoidTriggerChange ||
                          a.default(n).trigger("change")),
                        n.focus(),
                        (e = !1);
                    }
                  }
                  this._element.hasAttribute("disabled") ||
                    this._element.classList.contains("disabled") ||
                    (e &&
                      this._element.setAttribute(
                        "aria-pressed",
                        !this._element.classList.contains(X)
                      ),
                    t && a.default(this._element).toggleClass(X));
                }),
                (e.dispose = function () {
                  a.default.removeData(this._element, D),
                    (this._element = null);
                }),
                (t._jQueryInterface = function (e, i) {
                  return this.each(function () {
                    var n = a.default(this),
                      s = n.data(D);
                    s || ((s = new t(this)), n.data(D, s)),
                      (s.shouldAvoidTriggerChange = i),
                      "toggle" === e && s[e]();
                  });
                }),
                o(t, null, [
                  {
                    key: "VERSION",
                    get: function () {
                      return N;
                    },
                  },
                ]),
                t
              );
            })();
          a
            .default(document)
            .on(U, Y, function (t) {
              var e = t.target,
                i = e;
              if (
                (a.default(e).hasClass(R) || (e = a.default(e).closest(q)[0]),
                !e ||
                  e.hasAttribute("disabled") ||
                  e.classList.contains("disabled"))
              )
                t.preventDefault();
              else {
                var n = e.querySelector(V);
                if (
                  n &&
                  (n.hasAttribute("disabled") ||
                    n.classList.contains("disabled"))
                )
                  return void t.preventDefault();
                ("INPUT" !== i.tagName && "LABEL" === e.tagName) ||
                  Q._jQueryInterface.call(
                    a.default(e),
                    "toggle",
                    "INPUT" === i.tagName
                  );
              }
            })
            .on($, Y, function (t) {
              var e = a.default(t.target).closest(q)[0];
              a.default(e).toggleClass(H, /^focus(in)?$/.test(t.type));
            }),
            a.default(window).on(Z, function () {
              for (
                var t = [].slice.call(document.querySelectorAll(j)),
                  e = 0,
                  i = t.length;
                e < i;
                e++
              ) {
                var n = t[e],
                  a = n.querySelector(V);
                a.checked || a.hasAttribute("checked")
                  ? n.classList.add(X)
                  : n.classList.remove(X);
              }
              for (
                var s = 0,
                  r = (t = [].slice.call(document.querySelectorAll(B))).length;
                s < r;
                s++
              ) {
                var o = t[s];
                "true" === o.getAttribute("aria-pressed")
                  ? o.classList.add(X)
                  : o.classList.remove(X);
              }
            }),
            (a.default.fn[M] = Q._jQueryInterface),
            (a.default.fn[M].Constructor = Q),
            (a.default.fn[M].noConflict = function () {
              return (a.default.fn[M] = F), Q._jQueryInterface;
            });
          var K = "carousel",
            J = "4.6.0",
            tt = "bs.carousel",
            et = "." + tt,
            it = ".data-api",
            nt = a.default.fn[K],
            at = 37,
            st = 39,
            rt = 500,
            ot = 40,
            lt = {
              interval: 5e3,
              keyboard: !0,
              slide: !1,
              pause: "hover",
              wrap: !0,
              touch: !0,
            },
            ct = {
              interval: "(number|boolean)",
              keyboard: "boolean",
              slide: "(boolean|string)",
              pause: "(string|boolean)",
              wrap: "boolean",
              touch: "boolean",
            },
            ht = "next",
            dt = "prev",
            ut = "left",
            ft = "right",
            pt = "slide" + et,
            gt = "slid" + et,
            mt = "keydown" + et,
            xt = "mouseenter" + et,
            vt = "mouseleave" + et,
            bt = "touchstart" + et,
            yt = "touchmove" + et,
            wt = "touchend" + et,
            kt = "pointerdown" + et,
            St = "pointerup" + et,
            At = "dragstart" + et,
            Ct = "load" + et + it,
            Et = "click" + et + it,
            Tt = "carousel",
            Lt = "active",
            _t = "slide",
            Pt = "carousel-item-right",
            It = "carousel-item-left",
            Mt = "carousel-item-next",
            Nt = "carousel-item-prev",
            Dt = "pointer-event",
            zt = ".active",
            Ot = ".active.carousel-item",
            Ft = ".carousel-item",
            Xt = ".carousel-item img",
            Rt = ".carousel-item-next, .carousel-item-prev",
            Ht = ".carousel-indicators",
            Yt = "[data-slide], [data-slide-to]",
            Wt = '[data-ride="carousel"]',
            Bt = { TOUCH: "touch", PEN: "pen" },
            jt = (function () {
              function t(t, e) {
                (this._items = null),
                  (this._interval = null),
                  (this._activeElement = null),
                  (this._isPaused = !1),
                  (this._isSliding = !1),
                  (this.touchTimeout = null),
                  (this.touchStartX = 0),
                  (this.touchDeltaX = 0),
                  (this._config = this._getConfig(e)),
                  (this._element = t),
                  (this._indicatorsElement = this._element.querySelector(Ht)),
                  (this._touchSupported =
                    "ontouchstart" in document.documentElement ||
                    navigator.maxTouchPoints > 0),
                  (this._pointerEvent = Boolean(
                    window.PointerEvent || window.MSPointerEvent
                  )),
                  this._addEventListeners();
              }
              var e = t.prototype;
              return (
                (e.next = function () {
                  this._isSliding || this._slide(ht);
                }),
                (e.nextWhenVisible = function () {
                  var t = a.default(this._element);
                  !document.hidden &&
                    t.is(":visible") &&
                    "hidden" !== t.css("visibility") &&
                    this.next();
                }),
                (e.prev = function () {
                  this._isSliding || this._slide(dt);
                }),
                (e.pause = function (t) {
                  t || (this._isPaused = !0),
                    this._element.querySelector(Rt) &&
                      (x.triggerTransitionEnd(this._element), this.cycle(!0)),
                    clearInterval(this._interval),
                    (this._interval = null);
                }),
                (e.cycle = function (t) {
                  t || (this._isPaused = !1),
                    this._interval &&
                      (clearInterval(this._interval), (this._interval = null)),
                    this._config.interval &&
                      !this._isPaused &&
                      (this._updateInterval(),
                      (this._interval = setInterval(
                        (document.visibilityState
                          ? this.nextWhenVisible
                          : this.next
                        ).bind(this),
                        this._config.interval
                      )));
                }),
                (e.to = function (t) {
                  var e = this;
                  this._activeElement = this._element.querySelector(Ot);
                  var i = this._getItemIndex(this._activeElement);
                  if (!(t > this._items.length - 1 || t < 0))
                    if (this._isSliding)
                      a.default(this._element).one(gt, function () {
                        return e.to(t);
                      });
                    else {
                      if (i === t) return this.pause(), void this.cycle();
                      var n = t > i ? ht : dt;
                      this._slide(n, this._items[t]);
                    }
                }),
                (e.dispose = function () {
                  a.default(this._element).off(et),
                    a.default.removeData(this._element, tt),
                    (this._items = null),
                    (this._config = null),
                    (this._element = null),
                    (this._interval = null),
                    (this._isPaused = null),
                    (this._isSliding = null),
                    (this._activeElement = null),
                    (this._indicatorsElement = null);
                }),
                (e._getConfig = function (t) {
                  return (t = l({}, lt, t)), x.typeCheckConfig(K, t, ct), t;
                }),
                (e._handleSwipe = function () {
                  var t = Math.abs(this.touchDeltaX);
                  if (!(t <= ot)) {
                    var e = t / this.touchDeltaX;
                    (this.touchDeltaX = 0),
                      e > 0 && this.prev(),
                      e < 0 && this.next();
                  }
                }),
                (e._addEventListeners = function () {
                  var t = this;
                  this._config.keyboard &&
                    a.default(this._element).on(mt, function (e) {
                      return t._keydown(e);
                    }),
                    "hover" === this._config.pause &&
                      a
                        .default(this._element)
                        .on(xt, function (e) {
                          return t.pause(e);
                        })
                        .on(vt, function (e) {
                          return t.cycle(e);
                        }),
                    this._config.touch && this._addTouchEventListeners();
                }),
                (e._addTouchEventListeners = function () {
                  var t = this;
                  if (this._touchSupported) {
                    var e = function (e) {
                        t._pointerEvent &&
                        Bt[e.originalEvent.pointerType.toUpperCase()]
                          ? (t.touchStartX = e.originalEvent.clientX)
                          : t._pointerEvent ||
                            (t.touchStartX =
                              e.originalEvent.touches[0].clientX);
                      },
                      i = function (e) {
                        e.originalEvent.touches &&
                        e.originalEvent.touches.length > 1
                          ? (t.touchDeltaX = 0)
                          : (t.touchDeltaX =
                              e.originalEvent.touches[0].clientX -
                              t.touchStartX);
                      },
                      n = function (e) {
                        t._pointerEvent &&
                          Bt[e.originalEvent.pointerType.toUpperCase()] &&
                          (t.touchDeltaX =
                            e.originalEvent.clientX - t.touchStartX),
                          t._handleSwipe(),
                          "hover" === t._config.pause &&
                            (t.pause(),
                            t.touchTimeout && clearTimeout(t.touchTimeout),
                            (t.touchTimeout = setTimeout(function (e) {
                              return t.cycle(e);
                            }, rt + t._config.interval)));
                      };
                    a
                      .default(this._element.querySelectorAll(Xt))
                      .on(At, function (t) {
                        return t.preventDefault();
                      }),
                      this._pointerEvent
                        ? (a.default(this._element).on(kt, function (t) {
                            return e(t);
                          }),
                          a.default(this._element).on(St, function (t) {
                            return n(t);
                          }),
                          this._element.classList.add(Dt))
                        : (a.default(this._element).on(bt, function (t) {
                            return e(t);
                          }),
                          a.default(this._element).on(yt, function (t) {
                            return i(t);
                          }),
                          a.default(this._element).on(wt, function (t) {
                            return n(t);
                          }));
                  }
                }),
                (e._keydown = function (t) {
                  if (!/input|textarea/i.test(t.target.tagName))
                    switch (t.which) {
                      case at:
                        t.preventDefault(), this.prev();
                        break;
                      case st:
                        t.preventDefault(), this.next();
                    }
                }),
                (e._getItemIndex = function (t) {
                  return (
                    (this._items =
                      t && t.parentNode
                        ? [].slice.call(t.parentNode.querySelectorAll(Ft))
                        : []),
                    this._items.indexOf(t)
                  );
                }),
                (e._getItemByDirection = function (t, e) {
                  var i = t === ht,
                    n = t === dt,
                    a = this._getItemIndex(e),
                    s = this._items.length - 1;
                  if (((n && 0 === a) || (i && a === s)) && !this._config.wrap)
                    return e;
                  var r = (a + (t === dt ? -1 : 1)) % this._items.length;
                  return -1 === r
                    ? this._items[this._items.length - 1]
                    : this._items[r];
                }),
                (e._triggerSlideEvent = function (t, e) {
                  var i = this._getItemIndex(t),
                    n = this._getItemIndex(this._element.querySelector(Ot)),
                    s = a.default.Event(pt, {
                      relatedTarget: t,
                      direction: e,
                      from: n,
                      to: i,
                    });
                  return a.default(this._element).trigger(s), s;
                }),
                (e._setActiveIndicatorElement = function (t) {
                  if (this._indicatorsElement) {
                    var e = [].slice.call(
                      this._indicatorsElement.querySelectorAll(zt)
                    );
                    a.default(e).removeClass(Lt);
                    var i =
                      this._indicatorsElement.children[this._getItemIndex(t)];
                    i && a.default(i).addClass(Lt);
                  }
                }),
                (e._updateInterval = function () {
                  var t =
                    this._activeElement || this._element.querySelector(Ot);
                  if (t) {
                    var e = parseInt(t.getAttribute("data-interval"), 10);
                    e
                      ? ((this._config.defaultInterval =
                          this._config.defaultInterval ||
                          this._config.interval),
                        (this._config.interval = e))
                      : (this._config.interval =
                          this._config.defaultInterval ||
                          this._config.interval);
                  }
                }),
                (e._slide = function (t, e) {
                  var i,
                    n,
                    s,
                    r = this,
                    o = this._element.querySelector(Ot),
                    l = this._getItemIndex(o),
                    c = e || (o && this._getItemByDirection(t, o)),
                    h = this._getItemIndex(c),
                    d = Boolean(this._interval);
                  if (
                    (t === ht
                      ? ((i = It), (n = Mt), (s = ut))
                      : ((i = Pt), (n = Nt), (s = ft)),
                    c && a.default(c).hasClass(Lt))
                  )
                    this._isSliding = !1;
                  else if (
                    !this._triggerSlideEvent(c, s).isDefaultPrevented() &&
                    o &&
                    c
                  ) {
                    (this._isSliding = !0),
                      d && this.pause(),
                      this._setActiveIndicatorElement(c),
                      (this._activeElement = c);
                    var u = a.default.Event(gt, {
                      relatedTarget: c,
                      direction: s,
                      from: l,
                      to: h,
                    });
                    if (a.default(this._element).hasClass(_t)) {
                      a.default(c).addClass(n),
                        x.reflow(c),
                        a.default(o).addClass(i),
                        a.default(c).addClass(i);
                      var f = x.getTransitionDurationFromElement(o);
                      a.default(o)
                        .one(x.TRANSITION_END, function () {
                          a
                            .default(c)
                            .removeClass(i + " " + n)
                            .addClass(Lt),
                            a.default(o).removeClass(Lt + " " + n + " " + i),
                            (r._isSliding = !1),
                            setTimeout(function () {
                              return a.default(r._element).trigger(u);
                            }, 0);
                        })
                        .emulateTransitionEnd(f);
                    } else
                      a.default(o).removeClass(Lt),
                        a.default(c).addClass(Lt),
                        (this._isSliding = !1),
                        a.default(this._element).trigger(u);
                    d && this.cycle();
                  }
                }),
                (t._jQueryInterface = function (e) {
                  return this.each(function () {
                    var i = a.default(this).data(tt),
                      n = l({}, lt, a.default(this).data());
                    "object" == typeof e && (n = l({}, n, e));
                    var s = "string" == typeof e ? e : n.slide;
                    if (
                      (i || ((i = new t(this, n)), a.default(this).data(tt, i)),
                      "number" == typeof e)
                    )
                      i.to(e);
                    else if ("string" == typeof s) {
                      if (void 0 === i[s])
                        throw new TypeError('No method named "' + s + '"');
                      i[s]();
                    } else n.interval && n.ride && (i.pause(), i.cycle());
                  });
                }),
                (t._dataApiClickHandler = function (e) {
                  var i = x.getSelectorFromElement(this);
                  if (i) {
                    var n = a.default(i)[0];
                    if (n && a.default(n).hasClass(Tt)) {
                      var s = l(
                          {},
                          a.default(n).data(),
                          a.default(this).data()
                        ),
                        r = this.getAttribute("data-slide-to");
                      r && (s.interval = !1),
                        t._jQueryInterface.call(a.default(n), s),
                        r && a.default(n).data(tt).to(r),
                        e.preventDefault();
                    }
                  }
                }),
                o(t, null, [
                  {
                    key: "VERSION",
                    get: function () {
                      return J;
                    },
                  },
                  {
                    key: "Default",
                    get: function () {
                      return lt;
                    },
                  },
                ]),
                t
              );
            })();
          a.default(document).on(Et, Yt, jt._dataApiClickHandler),
            a.default(window).on(Ct, function () {
              for (
                var t = [].slice.call(document.querySelectorAll(Wt)),
                  e = 0,
                  i = t.length;
                e < i;
                e++
              ) {
                var n = a.default(t[e]);
                jt._jQueryInterface.call(n, n.data());
              }
            }),
            (a.default.fn[K] = jt._jQueryInterface),
            (a.default.fn[K].Constructor = jt),
            (a.default.fn[K].noConflict = function () {
              return (a.default.fn[K] = nt), jt._jQueryInterface;
            });
          var Vt = "collapse",
            Gt = "4.6.0",
            qt = "bs.collapse",
            Ut = "." + qt,
            $t = ".data-api",
            Zt = a.default.fn[Vt],
            Qt = { toggle: !0, parent: "" },
            Kt = { toggle: "boolean", parent: "(string|element)" },
            Jt = "show" + Ut,
            te = "shown" + Ut,
            ee = "hide" + Ut,
            ie = "hidden" + Ut,
            ne = "click" + Ut + $t,
            ae = "show",
            se = "collapse",
            re = "collapsing",
            oe = "collapsed",
            le = "width",
            ce = "height",
            he = ".show, .collapsing",
            de = '[data-toggle="collapse"]',
            ue = (function () {
              function t(t, e) {
                (this._isTransitioning = !1),
                  (this._element = t),
                  (this._config = this._getConfig(e)),
                  (this._triggerArray = [].slice.call(
                    document.querySelectorAll(
                      '[data-toggle="collapse"][href="#' +
                        t.id +
                        '"],[data-toggle="collapse"][data-target="#' +
                        t.id +
                        '"]'
                    )
                  ));
                for (
                  var i = [].slice.call(document.querySelectorAll(de)),
                    n = 0,
                    a = i.length;
                  n < a;
                  n++
                ) {
                  var s = i[n],
                    r = x.getSelectorFromElement(s),
                    o = [].slice
                      .call(document.querySelectorAll(r))
                      .filter(function (e) {
                        return e === t;
                      });
                  null !== r &&
                    o.length > 0 &&
                    ((this._selector = r), this._triggerArray.push(s));
                }
                (this._parent = this._config.parent ? this._getParent() : null),
                  this._config.parent ||
                    this._addAriaAndCollapsedClass(
                      this._element,
                      this._triggerArray
                    ),
                  this._config.toggle && this.toggle();
              }
              var e = t.prototype;
              return (
                (e.toggle = function () {
                  a.default(this._element).hasClass(ae)
                    ? this.hide()
                    : this.show();
                }),
                (e.show = function () {
                  var e,
                    i,
                    n = this;
                  if (
                    !(
                      this._isTransitioning ||
                      a.default(this._element).hasClass(ae) ||
                      (this._parent &&
                        0 ===
                          (e = [].slice
                            .call(this._parent.querySelectorAll(he))
                            .filter(function (t) {
                              return "string" == typeof n._config.parent
                                ? t.getAttribute("data-parent") ===
                                    n._config.parent
                                : t.classList.contains(se);
                            })).length &&
                        (e = null),
                      e &&
                        (i = a.default(e).not(this._selector).data(qt)) &&
                        i._isTransitioning)
                    )
                  ) {
                    var s = a.default.Event(Jt);
                    if (
                      (a.default(this._element).trigger(s),
                      !s.isDefaultPrevented())
                    ) {
                      e &&
                        (t._jQueryInterface.call(
                          a.default(e).not(this._selector),
                          "hide"
                        ),
                        i || a.default(e).data(qt, null));
                      var r = this._getDimension();
                      a.default(this._element).removeClass(se).addClass(re),
                        (this._element.style[r] = 0),
                        this._triggerArray.length &&
                          a
                            .default(this._triggerArray)
                            .removeClass(oe)
                            .attr("aria-expanded", !0),
                        this.setTransitioning(!0);
                      var o = function () {
                          a
                            .default(n._element)
                            .removeClass(re)
                            .addClass(se + " " + ae),
                            (n._element.style[r] = ""),
                            n.setTransitioning(!1),
                            a.default(n._element).trigger(te);
                        },
                        l = "scroll" + (r[0].toUpperCase() + r.slice(1)),
                        c = x.getTransitionDurationFromElement(this._element);
                      a
                        .default(this._element)
                        .one(x.TRANSITION_END, o)
                        .emulateTransitionEnd(c),
                        (this._element.style[r] = this._element[l] + "px");
                    }
                  }
                }),
                (e.hide = function () {
                  var t = this;
                  if (
                    !this._isTransitioning &&
                    a.default(this._element).hasClass(ae)
                  ) {
                    var e = a.default.Event(ee);
                    if (
                      (a.default(this._element).trigger(e),
                      !e.isDefaultPrevented())
                    ) {
                      var i = this._getDimension();
                      (this._element.style[i] =
                        this._element.getBoundingClientRect()[i] + "px"),
                        x.reflow(this._element),
                        a
                          .default(this._element)
                          .addClass(re)
                          .removeClass(se + " " + ae);
                      var n = this._triggerArray.length;
                      if (n > 0)
                        for (var s = 0; s < n; s++) {
                          var r = this._triggerArray[s],
                            o = x.getSelectorFromElement(r);
                          null !== o &&
                            (a
                              .default(
                                [].slice.call(document.querySelectorAll(o))
                              )
                              .hasClass(ae) ||
                              a
                                .default(r)
                                .addClass(oe)
                                .attr("aria-expanded", !1));
                        }
                      this.setTransitioning(!0);
                      var l = function () {
                        t.setTransitioning(!1),
                          a
                            .default(t._element)
                            .removeClass(re)
                            .addClass(se)
                            .trigger(ie);
                      };
                      this._element.style[i] = "";
                      var c = x.getTransitionDurationFromElement(this._element);
                      a.default(this._element)
                        .one(x.TRANSITION_END, l)
                        .emulateTransitionEnd(c);
                    }
                  }
                }),
                (e.setTransitioning = function (t) {
                  this._isTransitioning = t;
                }),
                (e.dispose = function () {
                  a.default.removeData(this._element, qt),
                    (this._config = null),
                    (this._parent = null),
                    (this._element = null),
                    (this._triggerArray = null),
                    (this._isTransitioning = null);
                }),
                (e._getConfig = function (t) {
                  return (
                    ((t = l({}, Qt, t)).toggle = Boolean(t.toggle)),
                    x.typeCheckConfig(Vt, t, Kt),
                    t
                  );
                }),
                (e._getDimension = function () {
                  return a.default(this._element).hasClass(le) ? le : ce;
                }),
                (e._getParent = function () {
                  var e,
                    i = this;
                  x.isElement(this._config.parent)
                    ? ((e = this._config.parent),
                      void 0 !== this._config.parent.jquery &&
                        (e = this._config.parent[0]))
                    : (e = document.querySelector(this._config.parent));
                  var n =
                      '[data-toggle="collapse"][data-parent="' +
                      this._config.parent +
                      '"]',
                    s = [].slice.call(e.querySelectorAll(n));
                  return (
                    a.default(s).each(function (e, n) {
                      i._addAriaAndCollapsedClass(t._getTargetFromElement(n), [
                        n,
                      ]);
                    }),
                    e
                  );
                }),
                (e._addAriaAndCollapsedClass = function (t, e) {
                  var i = a.default(t).hasClass(ae);
                  e.length &&
                    a.default(e).toggleClass(oe, !i).attr("aria-expanded", i);
                }),
                (t._getTargetFromElement = function (t) {
                  var e = x.getSelectorFromElement(t);
                  return e ? document.querySelector(e) : null;
                }),
                (t._jQueryInterface = function (e) {
                  return this.each(function () {
                    var i = a.default(this),
                      n = i.data(qt),
                      s = l(
                        {},
                        Qt,
                        i.data(),
                        "object" == typeof e && e ? e : {}
                      );
                    if (
                      (!n &&
                        s.toggle &&
                        "string" == typeof e &&
                        /show|hide/.test(e) &&
                        (s.toggle = !1),
                      n || ((n = new t(this, s)), i.data(qt, n)),
                      "string" == typeof e)
                    ) {
                      if (void 0 === n[e])
                        throw new TypeError('No method named "' + e + '"');
                      n[e]();
                    }
                  });
                }),
                o(t, null, [
                  {
                    key: "VERSION",
                    get: function () {
                      return Gt;
                    },
                  },
                  {
                    key: "Default",
                    get: function () {
                      return Qt;
                    },
                  },
                ]),
                t
              );
            })();
          a.default(document).on(ne, de, function (t) {
            "A" === t.currentTarget.tagName && t.preventDefault();
            var e = a.default(this),
              i = x.getSelectorFromElement(this),
              n = [].slice.call(document.querySelectorAll(i));
            a.default(n).each(function () {
              var t = a.default(this),
                i = t.data(qt) ? "toggle" : e.data();
              ue._jQueryInterface.call(t, i);
            });
          }),
            (a.default.fn[Vt] = ue._jQueryInterface),
            (a.default.fn[Vt].Constructor = ue),
            (a.default.fn[Vt].noConflict = function () {
              return (a.default.fn[Vt] = Zt), ue._jQueryInterface;
            });
          var fe = "dropdown",
            pe = "4.6.0",
            ge = "bs.dropdown",
            me = "." + ge,
            xe = ".data-api",
            ve = a.default.fn[fe],
            be = 27,
            ye = 32,
            we = 9,
            ke = 38,
            Se = 40,
            Ae = 3,
            Ce = new RegExp(ke + "|" + Se + "|" + be),
            Ee = "hide" + me,
            Te = "hidden" + me,
            Le = "show" + me,
            _e = "shown" + me,
            Pe = "click" + me,
            Ie = "click" + me + xe,
            Me = "keydown" + me + xe,
            Ne = "keyup" + me + xe,
            De = "disabled",
            ze = "show",
            Oe = "dropup",
            Fe = "dropright",
            Xe = "dropleft",
            Re = "dropdown-menu-right",
            He = "position-static",
            Ye = '[data-toggle="dropdown"]',
            We = ".dropdown form",
            Be = ".dropdown-menu",
            je = ".navbar-nav",
            Ve = ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",
            Ge = "top-start",
            qe = "top-end",
            Ue = "bottom-start",
            $e = "bottom-end",
            Ze = "right-start",
            Qe = "left-start",
            Ke = {
              offset: 0,
              flip: !0,
              boundary: "scrollParent",
              reference: "toggle",
              display: "dynamic",
              popperConfig: null,
            },
            Je = {
              offset: "(number|string|function)",
              flip: "boolean",
              boundary: "(string|element)",
              reference: "(string|element)",
              display: "string",
              popperConfig: "(null|object)",
            },
            ti = (function () {
              function t(t, e) {
                (this._element = t),
                  (this._popper = null),
                  (this._config = this._getConfig(e)),
                  (this._menu = this._getMenuElement()),
                  (this._inNavbar = this._detectNavbar()),
                  this._addEventListeners();
              }
              var e = t.prototype;
              return (
                (e.toggle = function () {
                  if (
                    !this._element.disabled &&
                    !a.default(this._element).hasClass(De)
                  ) {
                    var e = a.default(this._menu).hasClass(ze);
                    t._clearMenus(), e || this.show(!0);
                  }
                }),
                (e.show = function (e) {
                  if (
                    (void 0 === e && (e = !1),
                    !(
                      this._element.disabled ||
                      a.default(this._element).hasClass(De) ||
                      a.default(this._menu).hasClass(ze)
                    ))
                  ) {
                    var i = { relatedTarget: this._element },
                      n = a.default.Event(Le, i),
                      r = t._getParentFromElement(this._element);
                    if ((a.default(r).trigger(n), !n.isDefaultPrevented())) {
                      if (!this._inNavbar && e) {
                        if (void 0 === s.default)
                          throw new TypeError(
                            "Bootstrap's dropdowns require Popper (https://popper.js.org)"
                          );
                        var o = this._element;
                        "parent" === this._config.reference
                          ? (o = r)
                          : x.isElement(this._config.reference) &&
                            ((o = this._config.reference),
                            void 0 !== this._config.reference.jquery &&
                              (o = this._config.reference[0])),
                          "scrollParent" !== this._config.boundary &&
                            a.default(r).addClass(He),
                          (this._popper = new s.default(
                            o,
                            this._menu,
                            this._getPopperConfig()
                          ));
                      }
                      "ontouchstart" in document.documentElement &&
                        0 === a.default(r).closest(je).length &&
                        a
                          .default(document.body)
                          .children()
                          .on("mouseover", null, a.default.noop),
                        this._element.focus(),
                        this._element.setAttribute("aria-expanded", !0),
                        a.default(this._menu).toggleClass(ze),
                        a
                          .default(r)
                          .toggleClass(ze)
                          .trigger(a.default.Event(_e, i));
                    }
                  }
                }),
                (e.hide = function () {
                  if (
                    !this._element.disabled &&
                    !a.default(this._element).hasClass(De) &&
                    a.default(this._menu).hasClass(ze)
                  ) {
                    var e = { relatedTarget: this._element },
                      i = a.default.Event(Ee, e),
                      n = t._getParentFromElement(this._element);
                    a.default(n).trigger(i),
                      i.isDefaultPrevented() ||
                        (this._popper && this._popper.destroy(),
                        a.default(this._menu).toggleClass(ze),
                        a
                          .default(n)
                          .toggleClass(ze)
                          .trigger(a.default.Event(Te, e)));
                  }
                }),
                (e.dispose = function () {
                  a.default.removeData(this._element, ge),
                    a.default(this._element).off(me),
                    (this._element = null),
                    (this._menu = null),
                    null !== this._popper &&
                      (this._popper.destroy(), (this._popper = null));
                }),
                (e.update = function () {
                  (this._inNavbar = this._detectNavbar()),
                    null !== this._popper && this._popper.scheduleUpdate();
                }),
                (e._addEventListeners = function () {
                  var t = this;
                  a.default(this._element).on(Pe, function (e) {
                    e.preventDefault(), e.stopPropagation(), t.toggle();
                  });
                }),
                (e._getConfig = function (t) {
                  return (
                    (t = l(
                      {},
                      this.constructor.Default,
                      a.default(this._element).data(),
                      t
                    )),
                    x.typeCheckConfig(fe, t, this.constructor.DefaultType),
                    t
                  );
                }),
                (e._getMenuElement = function () {
                  if (!this._menu) {
                    var e = t._getParentFromElement(this._element);
                    e && (this._menu = e.querySelector(Be));
                  }
                  return this._menu;
                }),
                (e._getPlacement = function () {
                  var t = a.default(this._element.parentNode),
                    e = Ue;
                  return (
                    t.hasClass(Oe)
                      ? (e = a.default(this._menu).hasClass(Re) ? qe : Ge)
                      : t.hasClass(Fe)
                      ? (e = Ze)
                      : t.hasClass(Xe)
                      ? (e = Qe)
                      : a.default(this._menu).hasClass(Re) && (e = $e),
                    e
                  );
                }),
                (e._detectNavbar = function () {
                  return a.default(this._element).closest(".navbar").length > 0;
                }),
                (e._getOffset = function () {
                  var t = this,
                    e = {};
                  return (
                    "function" == typeof this._config.offset
                      ? (e.fn = function (e) {
                          return (
                            (e.offsets = l(
                              {},
                              e.offsets,
                              t._config.offset(e.offsets, t._element) || {}
                            )),
                            e
                          );
                        })
                      : (e.offset = this._config.offset),
                    e
                  );
                }),
                (e._getPopperConfig = function () {
                  var t = {
                    placement: this._getPlacement(),
                    modifiers: {
                      offset: this._getOffset(),
                      flip: { enabled: this._config.flip },
                      preventOverflow: {
                        boundariesElement: this._config.boundary,
                      },
                    },
                  };
                  return (
                    "static" === this._config.display &&
                      (t.modifiers.applyStyle = { enabled: !1 }),
                    l({}, t, this._config.popperConfig)
                  );
                }),
                (t._jQueryInterface = function (e) {
                  return this.each(function () {
                    var i = a.default(this).data(ge);
                    if (
                      (i ||
                        ((i = new t(this, "object" == typeof e ? e : null)),
                        a.default(this).data(ge, i)),
                      "string" == typeof e)
                    ) {
                      if (void 0 === i[e])
                        throw new TypeError('No method named "' + e + '"');
                      i[e]();
                    }
                  });
                }),
                (t._clearMenus = function (e) {
                  if (
                    !e ||
                    (e.which !== Ae && ("keyup" !== e.type || e.which === we))
                  )
                    for (
                      var i = [].slice.call(document.querySelectorAll(Ye)),
                        n = 0,
                        s = i.length;
                      n < s;
                      n++
                    ) {
                      var r = t._getParentFromElement(i[n]),
                        o = a.default(i[n]).data(ge),
                        l = { relatedTarget: i[n] };
                      if ((e && "click" === e.type && (l.clickEvent = e), o)) {
                        var c = o._menu;
                        if (
                          a.default(r).hasClass(ze) &&
                          !(
                            e &&
                            (("click" === e.type &&
                              /input|textarea/i.test(e.target.tagName)) ||
                              ("keyup" === e.type && e.which === we)) &&
                            a.default.contains(r, e.target)
                          )
                        ) {
                          var h = a.default.Event(Ee, l);
                          a.default(r).trigger(h),
                            h.isDefaultPrevented() ||
                              ("ontouchstart" in document.documentElement &&
                                a
                                  .default(document.body)
                                  .children()
                                  .off("mouseover", null, a.default.noop),
                              i[n].setAttribute("aria-expanded", "false"),
                              o._popper && o._popper.destroy(),
                              a.default(c).removeClass(ze),
                              a
                                .default(r)
                                .removeClass(ze)
                                .trigger(a.default.Event(Te, l)));
                        }
                      }
                    }
                }),
                (t._getParentFromElement = function (t) {
                  var e,
                    i = x.getSelectorFromElement(t);
                  return (
                    i && (e = document.querySelector(i)), e || t.parentNode
                  );
                }),
                (t._dataApiKeydownHandler = function (e) {
                  if (
                    !(/input|textarea/i.test(e.target.tagName)
                      ? e.which === ye ||
                        (e.which !== be &&
                          ((e.which !== Se && e.which !== ke) ||
                            a.default(e.target).closest(Be).length))
                      : !Ce.test(e.which)) &&
                    !this.disabled &&
                    !a.default(this).hasClass(De)
                  ) {
                    var i = t._getParentFromElement(this),
                      n = a.default(i).hasClass(ze);
                    if (n || e.which !== be) {
                      if (
                        (e.preventDefault(),
                        e.stopPropagation(),
                        !n || e.which === be || e.which === ye)
                      )
                        return (
                          e.which === be &&
                            a.default(i.querySelector(Ye)).trigger("focus"),
                          void a.default(this).trigger("click")
                        );
                      var s = [].slice
                        .call(i.querySelectorAll(Ve))
                        .filter(function (t) {
                          return a.default(t).is(":visible");
                        });
                      if (0 !== s.length) {
                        var r = s.indexOf(e.target);
                        e.which === ke && r > 0 && r--,
                          e.which === Se && r < s.length - 1 && r++,
                          r < 0 && (r = 0),
                          s[r].focus();
                      }
                    }
                  }
                }),
                o(t, null, [
                  {
                    key: "VERSION",
                    get: function () {
                      return pe;
                    },
                  },
                  {
                    key: "Default",
                    get: function () {
                      return Ke;
                    },
                  },
                  {
                    key: "DefaultType",
                    get: function () {
                      return Je;
                    },
                  },
                ]),
                t
              );
            })();
          a
            .default(document)
            .on(Me, Ye, ti._dataApiKeydownHandler)
            .on(Me, Be, ti._dataApiKeydownHandler)
            .on(Ie + " " + Ne, ti._clearMenus)
            .on(Ie, Ye, function (t) {
              t.preventDefault(),
                t.stopPropagation(),
                ti._jQueryInterface.call(a.default(this), "toggle");
            })
            .on(Ie, We, function (t) {
              t.stopPropagation();
            }),
            (a.default.fn[fe] = ti._jQueryInterface),
            (a.default.fn[fe].Constructor = ti),
            (a.default.fn[fe].noConflict = function () {
              return (a.default.fn[fe] = ve), ti._jQueryInterface;
            });
          var ei = "modal",
            ii = "4.6.0",
            ni = "bs.modal",
            ai = "." + ni,
            si = ".data-api",
            ri = a.default.fn[ei],
            oi = 27,
            li = { backdrop: !0, keyboard: !0, focus: !0, show: !0 },
            ci = {
              backdrop: "(boolean|string)",
              keyboard: "boolean",
              focus: "boolean",
              show: "boolean",
            },
            hi = "hide" + ai,
            di = "hidePrevented" + ai,
            ui = "hidden" + ai,
            fi = "show" + ai,
            pi = "shown" + ai,
            gi = "focusin" + ai,
            mi = "resize" + ai,
            xi = "click.dismiss" + ai,
            vi = "keydown.dismiss" + ai,
            bi = "mouseup.dismiss" + ai,
            yi = "mousedown.dismiss" + ai,
            wi = "click" + ai + si,
            ki = "modal-dialog-scrollable",
            Si = "modal-scrollbar-measure",
            Ai = "modal-backdrop",
            Ci = "modal-open",
            Ei = "fade",
            Ti = "show",
            Li = "modal-static",
            _i = ".modal-dialog",
            Pi = ".modal-body",
            Ii = '[data-toggle="modal"]',
            Mi = '[data-dismiss="modal"]',
            Ni = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",
            Di = ".sticky-top",
            zi = (function () {
              function t(t, e) {
                (this._config = this._getConfig(e)),
                  (this._element = t),
                  (this._dialog = t.querySelector(_i)),
                  (this._backdrop = null),
                  (this._isShown = !1),
                  (this._isBodyOverflowing = !1),
                  (this._ignoreBackdropClick = !1),
                  (this._isTransitioning = !1),
                  (this._scrollbarWidth = 0);
              }
              var e = t.prototype;
              return (
                (e.toggle = function (t) {
                  return this._isShown ? this.hide() : this.show(t);
                }),
                (e.show = function (t) {
                  var e = this;
                  if (!this._isShown && !this._isTransitioning) {
                    a.default(this._element).hasClass(Ei) &&
                      (this._isTransitioning = !0);
                    var i = a.default.Event(fi, { relatedTarget: t });
                    a.default(this._element).trigger(i),
                      this._isShown ||
                        i.isDefaultPrevented() ||
                        ((this._isShown = !0),
                        this._checkScrollbar(),
                        this._setScrollbar(),
                        this._adjustDialog(),
                        this._setEscapeEvent(),
                        this._setResizeEvent(),
                        a.default(this._element).on(xi, Mi, function (t) {
                          return e.hide(t);
                        }),
                        a.default(this._dialog).on(yi, function () {
                          a.default(e._element).one(bi, function (t) {
                            a.default(t.target).is(e._element) &&
                              (e._ignoreBackdropClick = !0);
                          });
                        }),
                        this._showBackdrop(function () {
                          return e._showElement(t);
                        }));
                  }
                }),
                (e.hide = function (t) {
                  var e = this;
                  if (
                    (t && t.preventDefault(),
                    this._isShown && !this._isTransitioning)
                  ) {
                    var i = a.default.Event(hi);
                    if (
                      (a.default(this._element).trigger(i),
                      this._isShown && !i.isDefaultPrevented())
                    ) {
                      this._isShown = !1;
                      var n = a.default(this._element).hasClass(Ei);
                      if (
                        (n && (this._isTransitioning = !0),
                        this._setEscapeEvent(),
                        this._setResizeEvent(),
                        a.default(document).off(gi),
                        a.default(this._element).removeClass(Ti),
                        a.default(this._element).off(xi),
                        a.default(this._dialog).off(yi),
                        n)
                      ) {
                        var s = x.getTransitionDurationFromElement(
                          this._element
                        );
                        a.default(this._element)
                          .one(x.TRANSITION_END, function (t) {
                            return e._hideModal(t);
                          })
                          .emulateTransitionEnd(s);
                      } else this._hideModal();
                    }
                  }
                }),
                (e.dispose = function () {
                  [window, this._element, this._dialog].forEach(function (t) {
                    return a.default(t).off(ai);
                  }),
                    a.default(document).off(gi),
                    a.default.removeData(this._element, ni),
                    (this._config = null),
                    (this._element = null),
                    (this._dialog = null),
                    (this._backdrop = null),
                    (this._isShown = null),
                    (this._isBodyOverflowing = null),
                    (this._ignoreBackdropClick = null),
                    (this._isTransitioning = null),
                    (this._scrollbarWidth = null);
                }),
                (e.handleUpdate = function () {
                  this._adjustDialog();
                }),
                (e._getConfig = function (t) {
                  return (t = l({}, li, t)), x.typeCheckConfig(ei, t, ci), t;
                }),
                (e._triggerBackdropTransition = function () {
                  var t = this,
                    e = a.default.Event(di);
                  if (
                    (a.default(this._element).trigger(e),
                    !e.isDefaultPrevented())
                  ) {
                    var i =
                      this._element.scrollHeight >
                      document.documentElement.clientHeight;
                    i || (this._element.style.overflowY = "hidden"),
                      this._element.classList.add(Li);
                    var n = x.getTransitionDurationFromElement(this._dialog);
                    a.default(this._element).off(x.TRANSITION_END),
                      a
                        .default(this._element)
                        .one(x.TRANSITION_END, function () {
                          t._element.classList.remove(Li),
                            i ||
                              a
                                .default(t._element)
                                .one(x.TRANSITION_END, function () {
                                  t._element.style.overflowY = "";
                                })
                                .emulateTransitionEnd(t._element, n);
                        })
                        .emulateTransitionEnd(n),
                      this._element.focus();
                  }
                }),
                (e._showElement = function (t) {
                  var e = this,
                    i = a.default(this._element).hasClass(Ei),
                    n = this._dialog ? this._dialog.querySelector(Pi) : null;
                  (this._element.parentNode &&
                    this._element.parentNode.nodeType === Node.ELEMENT_NODE) ||
                    document.body.appendChild(this._element),
                    (this._element.style.display = "block"),
                    this._element.removeAttribute("aria-hidden"),
                    this._element.setAttribute("aria-modal", !0),
                    this._element.setAttribute("role", "dialog"),
                    a.default(this._dialog).hasClass(ki) && n
                      ? (n.scrollTop = 0)
                      : (this._element.scrollTop = 0),
                    i && x.reflow(this._element),
                    a.default(this._element).addClass(Ti),
                    this._config.focus && this._enforceFocus();
                  var s = a.default.Event(pi, { relatedTarget: t }),
                    r = function () {
                      e._config.focus && e._element.focus(),
                        (e._isTransitioning = !1),
                        a.default(e._element).trigger(s);
                    };
                  if (i) {
                    var o = x.getTransitionDurationFromElement(this._dialog);
                    a.default(this._dialog)
                      .one(x.TRANSITION_END, r)
                      .emulateTransitionEnd(o);
                  } else r();
                }),
                (e._enforceFocus = function () {
                  var t = this;
                  a.default(document)
                    .off(gi)
                    .on(gi, function (e) {
                      document !== e.target &&
                        t._element !== e.target &&
                        0 === a.default(t._element).has(e.target).length &&
                        t._element.focus();
                    });
                }),
                (e._setEscapeEvent = function () {
                  var t = this;
                  this._isShown
                    ? a.default(this._element).on(vi, function (e) {
                        t._config.keyboard && e.which === oi
                          ? (e.preventDefault(), t.hide())
                          : t._config.keyboard ||
                            e.which !== oi ||
                            t._triggerBackdropTransition();
                      })
                    : this._isShown || a.default(this._element).off(vi);
                }),
                (e._setResizeEvent = function () {
                  var t = this;
                  this._isShown
                    ? a.default(window).on(mi, function (e) {
                        return t.handleUpdate(e);
                      })
                    : a.default(window).off(mi);
                }),
                (e._hideModal = function () {
                  var t = this;
                  (this._element.style.display = "none"),
                    this._element.setAttribute("aria-hidden", !0),
                    this._element.removeAttribute("aria-modal"),
                    this._element.removeAttribute("role"),
                    (this._isTransitioning = !1),
                    this._showBackdrop(function () {
                      a.default(document.body).removeClass(Ci),
                        t._resetAdjustments(),
                        t._resetScrollbar(),
                        a.default(t._element).trigger(ui);
                    });
                }),
                (e._removeBackdrop = function () {
                  this._backdrop &&
                    (a.default(this._backdrop).remove(),
                    (this._backdrop = null));
                }),
                (e._showBackdrop = function (t) {
                  var e = this,
                    i = a.default(this._element).hasClass(Ei) ? Ei : "";
                  if (this._isShown && this._config.backdrop) {
                    if (
                      ((this._backdrop = document.createElement("div")),
                      (this._backdrop.className = Ai),
                      i && this._backdrop.classList.add(i),
                      a.default(this._backdrop).appendTo(document.body),
                      a.default(this._element).on(xi, function (t) {
                        e._ignoreBackdropClick
                          ? (e._ignoreBackdropClick = !1)
                          : t.target === t.currentTarget &&
                            ("static" === e._config.backdrop
                              ? e._triggerBackdropTransition()
                              : e.hide());
                      }),
                      i && x.reflow(this._backdrop),
                      a.default(this._backdrop).addClass(Ti),
                      !t)
                    )
                      return;
                    if (!i) return void t();
                    var n = x.getTransitionDurationFromElement(this._backdrop);
                    a.default(this._backdrop)
                      .one(x.TRANSITION_END, t)
                      .emulateTransitionEnd(n);
                  } else if (!this._isShown && this._backdrop) {
                    a.default(this._backdrop).removeClass(Ti);
                    var s = function () {
                      e._removeBackdrop(), t && t();
                    };
                    if (a.default(this._element).hasClass(Ei)) {
                      var r = x.getTransitionDurationFromElement(
                        this._backdrop
                      );
                      a.default(this._backdrop)
                        .one(x.TRANSITION_END, s)
                        .emulateTransitionEnd(r);
                    } else s();
                  } else t && t();
                }),
                (e._adjustDialog = function () {
                  var t =
                    this._element.scrollHeight >
                    document.documentElement.clientHeight;
                  !this._isBodyOverflowing &&
                    t &&
                    (this._element.style.paddingLeft =
                      this._scrollbarWidth + "px"),
                    this._isBodyOverflowing &&
                      !t &&
                      (this._element.style.paddingRight =
                        this._scrollbarWidth + "px");
                }),
                (e._resetAdjustments = function () {
                  (this._element.style.paddingLeft = ""),
                    (this._element.style.paddingRight = "");
                }),
                (e._checkScrollbar = function () {
                  var t = document.body.getBoundingClientRect();
                  (this._isBodyOverflowing =
                    Math.round(t.left + t.right) < window.innerWidth),
                    (this._scrollbarWidth = this._getScrollbarWidth());
                }),
                (e._setScrollbar = function () {
                  var t = this;
                  if (this._isBodyOverflowing) {
                    var e = [].slice.call(document.querySelectorAll(Ni)),
                      i = [].slice.call(document.querySelectorAll(Di));
                    a.default(e).each(function (e, i) {
                      var n = i.style.paddingRight,
                        s = a.default(i).css("padding-right");
                      a.default(i)
                        .data("padding-right", n)
                        .css(
                          "padding-right",
                          parseFloat(s) + t._scrollbarWidth + "px"
                        );
                    }),
                      a.default(i).each(function (e, i) {
                        var n = i.style.marginRight,
                          s = a.default(i).css("margin-right");
                        a.default(i)
                          .data("margin-right", n)
                          .css(
                            "margin-right",
                            parseFloat(s) - t._scrollbarWidth + "px"
                          );
                      });
                    var n = document.body.style.paddingRight,
                      s = a.default(document.body).css("padding-right");
                    a.default(document.body)
                      .data("padding-right", n)
                      .css(
                        "padding-right",
                        parseFloat(s) + this._scrollbarWidth + "px"
                      );
                  }
                  a.default(document.body).addClass(Ci);
                }),
                (e._resetScrollbar = function () {
                  var t = [].slice.call(document.querySelectorAll(Ni));
                  a.default(t).each(function (t, e) {
                    var i = a.default(e).data("padding-right");
                    a.default(e).removeData("padding-right"),
                      (e.style.paddingRight = i || "");
                  });
                  var e = [].slice.call(document.querySelectorAll("" + Di));
                  a.default(e).each(function (t, e) {
                    var i = a.default(e).data("margin-right");
                    void 0 !== i &&
                      a
                        .default(e)
                        .css("margin-right", i)
                        .removeData("margin-right");
                  });
                  var i = a.default(document.body).data("padding-right");
                  a.default(document.body).removeData("padding-right"),
                    (document.body.style.paddingRight = i || "");
                }),
                (e._getScrollbarWidth = function () {
                  var t = document.createElement("div");
                  (t.className = Si), document.body.appendChild(t);
                  var e = t.getBoundingClientRect().width - t.clientWidth;
                  return document.body.removeChild(t), e;
                }),
                (t._jQueryInterface = function (e, i) {
                  return this.each(function () {
                    var n = a.default(this).data(ni),
                      s = l(
                        {},
                        li,
                        a.default(this).data(),
                        "object" == typeof e && e ? e : {}
                      );
                    if (
                      (n || ((n = new t(this, s)), a.default(this).data(ni, n)),
                      "string" == typeof e)
                    ) {
                      if (void 0 === n[e])
                        throw new TypeError('No method named "' + e + '"');
                      n[e](i);
                    } else s.show && n.show(i);
                  });
                }),
                o(t, null, [
                  {
                    key: "VERSION",
                    get: function () {
                      return ii;
                    },
                  },
                  {
                    key: "Default",
                    get: function () {
                      return li;
                    },
                  },
                ]),
                t
              );
            })();
          a.default(document).on(wi, Ii, function (t) {
            var e,
              i = this,
              n = x.getSelectorFromElement(this);
            n && (e = document.querySelector(n));
            var s = a.default(e).data(ni)
              ? "toggle"
              : l({}, a.default(e).data(), a.default(this).data());
            ("A" !== this.tagName && "AREA" !== this.tagName) ||
              t.preventDefault();
            var r = a.default(e).one(fi, function (t) {
              t.isDefaultPrevented() ||
                r.one(ui, function () {
                  a.default(i).is(":visible") && i.focus();
                });
            });
            zi._jQueryInterface.call(a.default(e), s, this);
          }),
            (a.default.fn[ei] = zi._jQueryInterface),
            (a.default.fn[ei].Constructor = zi),
            (a.default.fn[ei].noConflict = function () {
              return (a.default.fn[ei] = ri), zi._jQueryInterface;
            });
          var Oi = [
              "background",
              "cite",
              "href",
              "itemtype",
              "longdesc",
              "poster",
              "src",
              "xlink:href",
            ],
            Fi = {
              "*": ["class", "dir", "id", "lang", "role", /^aria-[\w-]*$/i],
              a: ["target", "href", "title", "rel"],
              area: [],
              b: [],
              br: [],
              col: [],
              code: [],
              div: [],
              em: [],
              hr: [],
              h1: [],
              h2: [],
              h3: [],
              h4: [],
              h5: [],
              h6: [],
              i: [],
              img: ["src", "srcset", "alt", "title", "width", "height"],
              li: [],
              ol: [],
              p: [],
              pre: [],
              s: [],
              small: [],
              span: [],
              sub: [],
              sup: [],
              strong: [],
              u: [],
              ul: [],
            },
            Xi = /^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/gi,
            Ri =
              /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;
          function Hi(t, e) {
            var i = t.nodeName.toLowerCase();
            if (-1 !== e.indexOf(i))
              return (
                -1 === Oi.indexOf(i) ||
                Boolean(t.nodeValue.match(Xi) || t.nodeValue.match(Ri))
              );
            for (
              var n = e.filter(function (t) {
                  return t instanceof RegExp;
                }),
                a = 0,
                s = n.length;
              a < s;
              a++
            )
              if (i.match(n[a])) return !0;
            return !1;
          }
          function Yi(t, e, i) {
            if (0 === t.length) return t;
            if (i && "function" == typeof i) return i(t);
            for (
              var n = new window.DOMParser().parseFromString(t, "text/html"),
                a = Object.keys(e),
                s = [].slice.call(n.body.querySelectorAll("*")),
                r = function (t, i) {
                  var n = s[t],
                    r = n.nodeName.toLowerCase();
                  if (-1 === a.indexOf(n.nodeName.toLowerCase()))
                    return n.parentNode.removeChild(n), "continue";
                  var o = [].slice.call(n.attributes),
                    l = [].concat(e["*"] || [], e[r] || []);
                  o.forEach(function (t) {
                    Hi(t, l) || n.removeAttribute(t.nodeName);
                  });
                },
                o = 0,
                l = s.length;
              o < l;
              o++
            )
              r(o);
            return n.body.innerHTML;
          }
          var Wi = "tooltip",
            Bi = "4.6.0",
            ji = "bs.tooltip",
            Vi = "." + ji,
            Gi = a.default.fn[Wi],
            qi = "bs-tooltip",
            Ui = new RegExp("(^|\\s)" + qi + "\\S+", "g"),
            $i = ["sanitize", "whiteList", "sanitizeFn"],
            Zi = {
              animation: "boolean",
              template: "string",
              title: "(string|element|function)",
              trigger: "string",
              delay: "(number|object)",
              html: "boolean",
              selector: "(string|boolean)",
              placement: "(string|function)",
              offset: "(number|string|function)",
              container: "(string|element|boolean)",
              fallbackPlacement: "(string|array)",
              boundary: "(string|element)",
              customClass: "(string|function)",
              sanitize: "boolean",
              sanitizeFn: "(null|function)",
              whiteList: "object",
              popperConfig: "(null|object)",
            },
            Qi = {
              AUTO: "auto",
              TOP: "top",
              RIGHT: "right",
              BOTTOM: "bottom",
              LEFT: "left",
            },
            Ki = {
              animation: !0,
              template:
                '<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',
              trigger: "hover focus",
              title: "",
              delay: 0,
              html: !1,
              selector: !1,
              placement: "top",
              offset: 0,
              container: !1,
              fallbackPlacement: "flip",
              boundary: "scrollParent",
              customClass: "",
              sanitize: !0,
              sanitizeFn: null,
              whiteList: Fi,
              popperConfig: null,
            },
            Ji = "show",
            tn = "out",
            en = {
              HIDE: "hide" + Vi,
              HIDDEN: "hidden" + Vi,
              SHOW: "show" + Vi,
              SHOWN: "shown" + Vi,
              INSERTED: "inserted" + Vi,
              CLICK: "click" + Vi,
              FOCUSIN: "focusin" + Vi,
              FOCUSOUT: "focusout" + Vi,
              MOUSEENTER: "mouseenter" + Vi,
              MOUSELEAVE: "mouseleave" + Vi,
            },
            nn = "fade",
            an = "show",
            sn = ".tooltip-inner",
            rn = ".arrow",
            on = "hover",
            ln = "focus",
            cn = "click",
            hn = "manual",
            dn = (function () {
              function t(t, e) {
                if (void 0 === s.default)
                  throw new TypeError(
                    "Bootstrap's tooltips require Popper (https://popper.js.org)"
                  );
                (this._isEnabled = !0),
                  (this._timeout = 0),
                  (this._hoverState = ""),
                  (this._activeTrigger = {}),
                  (this._popper = null),
                  (this.element = t),
                  (this.config = this._getConfig(e)),
                  (this.tip = null),
                  this._setListeners();
              }
              var e = t.prototype;
              return (
                (e.enable = function () {
                  this._isEnabled = !0;
                }),
                (e.disable = function () {
                  this._isEnabled = !1;
                }),
                (e.toggleEnabled = function () {
                  this._isEnabled = !this._isEnabled;
                }),
                (e.toggle = function (t) {
                  if (this._isEnabled)
                    if (t) {
                      var e = this.constructor.DATA_KEY,
                        i = a.default(t.currentTarget).data(e);
                      i ||
                        ((i = new this.constructor(
                          t.currentTarget,
                          this._getDelegateConfig()
                        )),
                        a.default(t.currentTarget).data(e, i)),
                        (i._activeTrigger.click = !i._activeTrigger.click),
                        i._isWithActiveTrigger()
                          ? i._enter(null, i)
                          : i._leave(null, i);
                    } else {
                      if (a.default(this.getTipElement()).hasClass(an))
                        return void this._leave(null, this);
                      this._enter(null, this);
                    }
                }),
                (e.dispose = function () {
                  clearTimeout(this._timeout),
                    a.default.removeData(
                      this.element,
                      this.constructor.DATA_KEY
                    ),
                    a.default(this.element).off(this.constructor.EVENT_KEY),
                    a
                      .default(this.element)
                      .closest(".modal")
                      .off("hide.bs.modal", this._hideModalHandler),
                    this.tip && a.default(this.tip).remove(),
                    (this._isEnabled = null),
                    (this._timeout = null),
                    (this._hoverState = null),
                    (this._activeTrigger = null),
                    this._popper && this._popper.destroy(),
                    (this._popper = null),
                    (this.element = null),
                    (this.config = null),
                    (this.tip = null);
                }),
                (e.show = function () {
                  var t = this;
                  if ("none" === a.default(this.element).css("display"))
                    throw new Error("Please use show on visible elements");
                  var e = a.default.Event(this.constructor.Event.SHOW);
                  if (this.isWithContent() && this._isEnabled) {
                    a.default(this.element).trigger(e);
                    var i = x.findShadowRoot(this.element),
                      n = a.default.contains(
                        null !== i
                          ? i
                          : this.element.ownerDocument.documentElement,
                        this.element
                      );
                    if (e.isDefaultPrevented() || !n) return;
                    var r = this.getTipElement(),
                      o = x.getUID(this.constructor.NAME);
                    r.setAttribute("id", o),
                      this.element.setAttribute("aria-describedby", o),
                      this.setContent(),
                      this.config.animation && a.default(r).addClass(nn);
                    var l =
                        "function" == typeof this.config.placement
                          ? this.config.placement.call(this, r, this.element)
                          : this.config.placement,
                      c = this._getAttachment(l);
                    this.addAttachmentClass(c);
                    var h = this._getContainer();
                    a.default(r).data(this.constructor.DATA_KEY, this),
                      a.default.contains(
                        this.element.ownerDocument.documentElement,
                        this.tip
                      ) || a.default(r).appendTo(h),
                      a
                        .default(this.element)
                        .trigger(this.constructor.Event.INSERTED),
                      (this._popper = new s.default(
                        this.element,
                        r,
                        this._getPopperConfig(c)
                      )),
                      a.default(r).addClass(an),
                      a.default(r).addClass(this.config.customClass),
                      "ontouchstart" in document.documentElement &&
                        a
                          .default(document.body)
                          .children()
                          .on("mouseover", null, a.default.noop);
                    var d = function () {
                      t.config.animation && t._fixTransition();
                      var e = t._hoverState;
                      (t._hoverState = null),
                        a.default(t.element).trigger(t.constructor.Event.SHOWN),
                        e === tn && t._leave(null, t);
                    };
                    if (a.default(this.tip).hasClass(nn)) {
                      var u = x.getTransitionDurationFromElement(this.tip);
                      a.default(this.tip)
                        .one(x.TRANSITION_END, d)
                        .emulateTransitionEnd(u);
                    } else d();
                  }
                }),
                (e.hide = function (t) {
                  var e = this,
                    i = this.getTipElement(),
                    n = a.default.Event(this.constructor.Event.HIDE),
                    s = function () {
                      e._hoverState !== Ji &&
                        i.parentNode &&
                        i.parentNode.removeChild(i),
                        e._cleanTipClass(),
                        e.element.removeAttribute("aria-describedby"),
                        a
                          .default(e.element)
                          .trigger(e.constructor.Event.HIDDEN),
                        null !== e._popper && e._popper.destroy(),
                        t && t();
                    };
                  if (
                    (a.default(this.element).trigger(n),
                    !n.isDefaultPrevented())
                  ) {
                    if (
                      (a.default(i).removeClass(an),
                      "ontouchstart" in document.documentElement &&
                        a
                          .default(document.body)
                          .children()
                          .off("mouseover", null, a.default.noop),
                      (this._activeTrigger[cn] = !1),
                      (this._activeTrigger[ln] = !1),
                      (this._activeTrigger[on] = !1),
                      a.default(this.tip).hasClass(nn))
                    ) {
                      var r = x.getTransitionDurationFromElement(i);
                      a.default(i)
                        .one(x.TRANSITION_END, s)
                        .emulateTransitionEnd(r);
                    } else s();
                    this._hoverState = "";
                  }
                }),
                (e.update = function () {
                  null !== this._popper && this._popper.scheduleUpdate();
                }),
                (e.isWithContent = function () {
                  return Boolean(this.getTitle());
                }),
                (e.addAttachmentClass = function (t) {
                  a.default(this.getTipElement()).addClass(qi + "-" + t);
                }),
                (e.getTipElement = function () {
                  return (
                    (this.tip = this.tip || a.default(this.config.template)[0]),
                    this.tip
                  );
                }),
                (e.setContent = function () {
                  var t = this.getTipElement();
                  this.setElementContent(
                    a.default(t.querySelectorAll(sn)),
                    this.getTitle()
                  ),
                    a.default(t).removeClass(nn + " " + an);
                }),
                (e.setElementContent = function (t, e) {
                  "object" != typeof e || (!e.nodeType && !e.jquery)
                    ? this.config.html
                      ? (this.config.sanitize &&
                          (e = Yi(
                            e,
                            this.config.whiteList,
                            this.config.sanitizeFn
                          )),
                        t.html(e))
                      : t.text(e)
                    : this.config.html
                    ? a.default(e).parent().is(t) || t.empty().append(e)
                    : t.text(a.default(e).text());
                }),
                (e.getTitle = function () {
                  var t = this.element.getAttribute("data-original-title");
                  return (
                    t ||
                      (t =
                        "function" == typeof this.config.title
                          ? this.config.title.call(this.element)
                          : this.config.title),
                    t
                  );
                }),
                (e._getPopperConfig = function (t) {
                  var e = this;
                  return l(
                    {},
                    {
                      placement: t,
                      modifiers: {
                        offset: this._getOffset(),
                        flip: { behavior: this.config.fallbackPlacement },
                        arrow: { element: rn },
                        preventOverflow: {
                          boundariesElement: this.config.boundary,
                        },
                      },
                      onCreate: function (t) {
                        t.originalPlacement !== t.placement &&
                          e._handlePopperPlacementChange(t);
                      },
                      onUpdate: function (t) {
                        return e._handlePopperPlacementChange(t);
                      },
                    },
                    this.config.popperConfig
                  );
                }),
                (e._getOffset = function () {
                  var t = this,
                    e = {};
                  return (
                    "function" == typeof this.config.offset
                      ? (e.fn = function (e) {
                          return (
                            (e.offsets = l(
                              {},
                              e.offsets,
                              t.config.offset(e.offsets, t.element) || {}
                            )),
                            e
                          );
                        })
                      : (e.offset = this.config.offset),
                    e
                  );
                }),
                (e._getContainer = function () {
                  return !1 === this.config.container
                    ? document.body
                    : x.isElement(this.config.container)
                    ? a.default(this.config.container)
                    : a.default(document).find(this.config.container);
                }),
                (e._getAttachment = function (t) {
                  return Qi[t.toUpperCase()];
                }),
                (e._setListeners = function () {
                  var t = this;
                  this.config.trigger.split(" ").forEach(function (e) {
                    if ("click" === e)
                      a.default(t.element).on(
                        t.constructor.Event.CLICK,
                        t.config.selector,
                        function (e) {
                          return t.toggle(e);
                        }
                      );
                    else if (e !== hn) {
                      var i =
                          e === on
                            ? t.constructor.Event.MOUSEENTER
                            : t.constructor.Event.FOCUSIN,
                        n =
                          e === on
                            ? t.constructor.Event.MOUSELEAVE
                            : t.constructor.Event.FOCUSOUT;
                      a.default(t.element)
                        .on(i, t.config.selector, function (e) {
                          return t._enter(e);
                        })
                        .on(n, t.config.selector, function (e) {
                          return t._leave(e);
                        });
                    }
                  }),
                    (this._hideModalHandler = function () {
                      t.element && t.hide();
                    }),
                    a
                      .default(this.element)
                      .closest(".modal")
                      .on("hide.bs.modal", this._hideModalHandler),
                    this.config.selector
                      ? (this.config = l({}, this.config, {
                          trigger: "manual",
                          selector: "",
                        }))
                      : this._fixTitle();
                }),
                (e._fixTitle = function () {
                  var t = typeof this.element.getAttribute(
                    "data-original-title"
                  );
                  (this.element.getAttribute("title") || "string" !== t) &&
                    (this.element.setAttribute(
                      "data-original-title",
                      this.element.getAttribute("title") || ""
                    ),
                    this.element.setAttribute("title", ""));
                }),
                (e._enter = function (t, e) {
                  var i = this.constructor.DATA_KEY;
                  (e = e || a.default(t.currentTarget).data(i)) ||
                    ((e = new this.constructor(
                      t.currentTarget,
                      this._getDelegateConfig()
                    )),
                    a.default(t.currentTarget).data(i, e)),
                    t &&
                      (e._activeTrigger["focusin" === t.type ? ln : on] = !0),
                    a.default(e.getTipElement()).hasClass(an) ||
                    e._hoverState === Ji
                      ? (e._hoverState = Ji)
                      : (clearTimeout(e._timeout),
                        (e._hoverState = Ji),
                        e.config.delay && e.config.delay.show
                          ? (e._timeout = setTimeout(function () {
                              e._hoverState === Ji && e.show();
                            }, e.config.delay.show))
                          : e.show());
                }),
                (e._leave = function (t, e) {
                  var i = this.constructor.DATA_KEY;
                  (e = e || a.default(t.currentTarget).data(i)) ||
                    ((e = new this.constructor(
                      t.currentTarget,
                      this._getDelegateConfig()
                    )),
                    a.default(t.currentTarget).data(i, e)),
                    t &&
                      (e._activeTrigger["focusout" === t.type ? ln : on] = !1),
                    e._isWithActiveTrigger() ||
                      (clearTimeout(e._timeout),
                      (e._hoverState = tn),
                      e.config.delay && e.config.delay.hide
                        ? (e._timeout = setTimeout(function () {
                            e._hoverState === tn && e.hide();
                          }, e.config.delay.hide))
                        : e.hide());
                }),
                (e._isWithActiveTrigger = function () {
                  for (var t in this._activeTrigger)
                    if (this._activeTrigger[t]) return !0;
                  return !1;
                }),
                (e._getConfig = function (t) {
                  var e = a.default(this.element).data();
                  return (
                    Object.keys(e).forEach(function (t) {
                      -1 !== $i.indexOf(t) && delete e[t];
                    }),
                    "number" ==
                      typeof (t = l(
                        {},
                        this.constructor.Default,
                        e,
                        "object" == typeof t && t ? t : {}
                      )).delay && (t.delay = { show: t.delay, hide: t.delay }),
                    "number" == typeof t.title &&
                      (t.title = t.title.toString()),
                    "number" == typeof t.content &&
                      (t.content = t.content.toString()),
                    x.typeCheckConfig(Wi, t, this.constructor.DefaultType),
                    t.sanitize &&
                      (t.template = Yi(t.template, t.whiteList, t.sanitizeFn)),
                    t
                  );
                }),
                (e._getDelegateConfig = function () {
                  var t = {};
                  if (this.config)
                    for (var e in this.config)
                      this.constructor.Default[e] !== this.config[e] &&
                        (t[e] = this.config[e]);
                  return t;
                }),
                (e._cleanTipClass = function () {
                  var t = a.default(this.getTipElement()),
                    e = t.attr("class").match(Ui);
                  null !== e && e.length && t.removeClass(e.join(""));
                }),
                (e._handlePopperPlacementChange = function (t) {
                  (this.tip = t.instance.popper),
                    this._cleanTipClass(),
                    this.addAttachmentClass(this._getAttachment(t.placement));
                }),
                (e._fixTransition = function () {
                  var t = this.getTipElement(),
                    e = this.config.animation;
                  null === t.getAttribute("x-placement") &&
                    (a.default(t).removeClass(nn),
                    (this.config.animation = !1),
                    this.hide(),
                    this.show(),
                    (this.config.animation = e));
                }),
                (t._jQueryInterface = function (e) {
                  return this.each(function () {
                    var i = a.default(this),
                      n = i.data(ji),
                      s = "object" == typeof e && e;
                    if (
                      (n || !/dispose|hide/.test(e)) &&
                      (n || ((n = new t(this, s)), i.data(ji, n)),
                      "string" == typeof e)
                    ) {
                      if (void 0 === n[e])
                        throw new TypeError('No method named "' + e + '"');
                      n[e]();
                    }
                  });
                }),
                o(t, null, [
                  {
                    key: "VERSION",
                    get: function () {
                      return Bi;
                    },
                  },
                  {
                    key: "Default",
                    get: function () {
                      return Ki;
                    },
                  },
                  {
                    key: "NAME",
                    get: function () {
                      return Wi;
                    },
                  },
                  {
                    key: "DATA_KEY",
                    get: function () {
                      return ji;
                    },
                  },
                  {
                    key: "Event",
                    get: function () {
                      return en;
                    },
                  },
                  {
                    key: "EVENT_KEY",
                    get: function () {
                      return Vi;
                    },
                  },
                  {
                    key: "DefaultType",
                    get: function () {
                      return Zi;
                    },
                  },
                ]),
                t
              );
            })();
          (a.default.fn[Wi] = dn._jQueryInterface),
            (a.default.fn[Wi].Constructor = dn),
            (a.default.fn[Wi].noConflict = function () {
              return (a.default.fn[Wi] = Gi), dn._jQueryInterface;
            });
          var un = "popover",
            fn = "4.6.0",
            pn = "bs.popover",
            gn = "." + pn,
            mn = a.default.fn[un],
            xn = "bs-popover",
            vn = new RegExp("(^|\\s)" + xn + "\\S+", "g"),
            bn = l({}, dn.Default, {
              placement: "right",
              trigger: "click",
              content: "",
              template:
                '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',
            }),
            yn = l({}, dn.DefaultType, {
              content: "(string|element|function)",
            }),
            wn = "fade",
            kn = "show",
            Sn = ".popover-header",
            An = ".popover-body",
            Cn = {
              HIDE: "hide" + gn,
              HIDDEN: "hidden" + gn,
              SHOW: "show" + gn,
              SHOWN: "shown" + gn,
              INSERTED: "inserted" + gn,
              CLICK: "click" + gn,
              FOCUSIN: "focusin" + gn,
              FOCUSOUT: "focusout" + gn,
              MOUSEENTER: "mouseenter" + gn,
              MOUSELEAVE: "mouseleave" + gn,
            },
            En = (function (t) {
              function e() {
                return t.apply(this, arguments) || this;
              }
              c(e, t);
              var i = e.prototype;
              return (
                (i.isWithContent = function () {
                  return this.getTitle() || this._getContent();
                }),
                (i.addAttachmentClass = function (t) {
                  a.default(this.getTipElement()).addClass(xn + "-" + t);
                }),
                (i.getTipElement = function () {
                  return (
                    (this.tip = this.tip || a.default(this.config.template)[0]),
                    this.tip
                  );
                }),
                (i.setContent = function () {
                  var t = a.default(this.getTipElement());
                  this.setElementContent(t.find(Sn), this.getTitle());
                  var e = this._getContent();
                  "function" == typeof e && (e = e.call(this.element)),
                    this.setElementContent(t.find(An), e),
                    t.removeClass(wn + " " + kn);
                }),
                (i._getContent = function () {
                  return (
                    this.element.getAttribute("data-content") ||
                    this.config.content
                  );
                }),
                (i._cleanTipClass = function () {
                  var t = a.default(this.getTipElement()),
                    e = t.attr("class").match(vn);
                  null !== e && e.length > 0 && t.removeClass(e.join(""));
                }),
                (e._jQueryInterface = function (t) {
                  return this.each(function () {
                    var i = a.default(this).data(pn),
                      n = "object" == typeof t ? t : null;
                    if (
                      (i || !/dispose|hide/.test(t)) &&
                      (i || ((i = new e(this, n)), a.default(this).data(pn, i)),
                      "string" == typeof t)
                    ) {
                      if (void 0 === i[t])
                        throw new TypeError('No method named "' + t + '"');
                      i[t]();
                    }
                  });
                }),
                o(e, null, [
                  {
                    key: "VERSION",
                    get: function () {
                      return fn;
                    },
                  },
                  {
                    key: "Default",
                    get: function () {
                      return bn;
                    },
                  },
                  {
                    key: "NAME",
                    get: function () {
                      return un;
                    },
                  },
                  {
                    key: "DATA_KEY",
                    get: function () {
                      return pn;
                    },
                  },
                  {
                    key: "Event",
                    get: function () {
                      return Cn;
                    },
                  },
                  {
                    key: "EVENT_KEY",
                    get: function () {
                      return gn;
                    },
                  },
                  {
                    key: "DefaultType",
                    get: function () {
                      return yn;
                    },
                  },
                ]),
                e
              );
            })(dn);
          (a.default.fn[un] = En._jQueryInterface),
            (a.default.fn[un].Constructor = En),
            (a.default.fn[un].noConflict = function () {
              return (a.default.fn[un] = mn), En._jQueryInterface;
            });
          var Tn = "scrollspy",
            Ln = "4.6.0",
            _n = "bs.scrollspy",
            Pn = "." + _n,
            In = ".data-api",
            Mn = a.default.fn[Tn],
            Nn = { offset: 10, method: "auto", target: "" },
            Dn = {
              offset: "number",
              method: "string",
              target: "(string|element)",
            },
            zn = "activate" + Pn,
            On = "scroll" + Pn,
            Fn = "load" + Pn + In,
            Xn = "dropdown-item",
            Rn = "active",
            Hn = '[data-spy="scroll"]',
            Yn = ".nav, .list-group",
            Wn = ".nav-link",
            Bn = ".nav-item",
            jn = ".list-group-item",
            Vn = ".dropdown",
            Gn = ".dropdown-item",
            qn = ".dropdown-toggle",
            Un = "offset",
            $n = "position",
            Zn = (function () {
              function t(t, e) {
                var i = this;
                (this._element = t),
                  (this._scrollElement = "BODY" === t.tagName ? window : t),
                  (this._config = this._getConfig(e)),
                  (this._selector =
                    this._config.target +
                    " " +
                    Wn +
                    "," +
                    this._config.target +
                    " " +
                    jn +
                    "," +
                    this._config.target +
                    " " +
                    Gn),
                  (this._offsets = []),
                  (this._targets = []),
                  (this._activeTarget = null),
                  (this._scrollHeight = 0),
                  a.default(this._scrollElement).on(On, function (t) {
                    return i._process(t);
                  }),
                  this.refresh(),
                  this._process();
              }
              var e = t.prototype;
              return (
                (e.refresh = function () {
                  var t = this,
                    e =
                      this._scrollElement === this._scrollElement.window
                        ? Un
                        : $n,
                    i =
                      "auto" === this._config.method ? e : this._config.method,
                    n = i === $n ? this._getScrollTop() : 0;
                  (this._offsets = []),
                    (this._targets = []),
                    (this._scrollHeight = this._getScrollHeight()),
                    [].slice
                      .call(document.querySelectorAll(this._selector))
                      .map(function (t) {
                        var e,
                          s = x.getSelectorFromElement(t);
                        if ((s && (e = document.querySelector(s)), e)) {
                          var r = e.getBoundingClientRect();
                          if (r.width || r.height)
                            return [a.default(e)[i]().top + n, s];
                        }
                        return null;
                      })
                      .filter(function (t) {
                        return t;
                      })
                      .sort(function (t, e) {
                        return t[0] - e[0];
                      })
                      .forEach(function (e) {
                        t._offsets.push(e[0]), t._targets.push(e[1]);
                      });
                }),
                (e.dispose = function () {
                  a.default.removeData(this._element, _n),
                    a.default(this._scrollElement).off(Pn),
                    (this._element = null),
                    (this._scrollElement = null),
                    (this._config = null),
                    (this._selector = null),
                    (this._offsets = null),
                    (this._targets = null),
                    (this._activeTarget = null),
                    (this._scrollHeight = null);
                }),
                (e._getConfig = function (t) {
                  if (
                    "string" !=
                      typeof (t = l({}, Nn, "object" == typeof t && t ? t : {}))
                        .target &&
                    x.isElement(t.target)
                  ) {
                    var e = a.default(t.target).attr("id");
                    e ||
                      ((e = x.getUID(Tn)), a.default(t.target).attr("id", e)),
                      (t.target = "#" + e);
                  }
                  return x.typeCheckConfig(Tn, t, Dn), t;
                }),
                (e._getScrollTop = function () {
                  return this._scrollElement === window
                    ? this._scrollElement.pageYOffset
                    : this._scrollElement.scrollTop;
                }),
                (e._getScrollHeight = function () {
                  return (
                    this._scrollElement.scrollHeight ||
                    Math.max(
                      document.body.scrollHeight,
                      document.documentElement.scrollHeight
                    )
                  );
                }),
                (e._getOffsetHeight = function () {
                  return this._scrollElement === window
                    ? window.innerHeight
                    : this._scrollElement.getBoundingClientRect().height;
                }),
                (e._process = function () {
                  var t = this._getScrollTop() + this._config.offset,
                    e = this._getScrollHeight(),
                    i = this._config.offset + e - this._getOffsetHeight();
                  if ((this._scrollHeight !== e && this.refresh(), t >= i)) {
                    var n = this._targets[this._targets.length - 1];
                    this._activeTarget !== n && this._activate(n);
                  } else {
                    if (
                      this._activeTarget &&
                      t < this._offsets[0] &&
                      this._offsets[0] > 0
                    )
                      return (this._activeTarget = null), void this._clear();
                    for (var a = this._offsets.length; a--; )
                      this._activeTarget !== this._targets[a] &&
                        t >= this._offsets[a] &&
                        (void 0 === this._offsets[a + 1] ||
                          t < this._offsets[a + 1]) &&
                        this._activate(this._targets[a]);
                  }
                }),
                (e._activate = function (t) {
                  (this._activeTarget = t), this._clear();
                  var e = this._selector.split(",").map(function (e) {
                      return (
                        e +
                        '[data-target="' +
                        t +
                        '"],' +
                        e +
                        '[href="' +
                        t +
                        '"]'
                      );
                    }),
                    i = a.default(
                      [].slice.call(document.querySelectorAll(e.join(",")))
                    );
                  i.hasClass(Xn)
                    ? (i.closest(Vn).find(qn).addClass(Rn), i.addClass(Rn))
                    : (i.addClass(Rn),
                      i
                        .parents(Yn)
                        .prev(Wn + ", " + jn)
                        .addClass(Rn),
                      i.parents(Yn).prev(Bn).children(Wn).addClass(Rn)),
                    a
                      .default(this._scrollElement)
                      .trigger(zn, { relatedTarget: t });
                }),
                (e._clear = function () {
                  [].slice
                    .call(document.querySelectorAll(this._selector))
                    .filter(function (t) {
                      return t.classList.contains(Rn);
                    })
                    .forEach(function (t) {
                      return t.classList.remove(Rn);
                    });
                }),
                (t._jQueryInterface = function (e) {
                  return this.each(function () {
                    var i = a.default(this).data(_n);
                    if (
                      (i ||
                        ((i = new t(this, "object" == typeof e && e)),
                        a.default(this).data(_n, i)),
                      "string" == typeof e)
                    ) {
                      if (void 0 === i[e])
                        throw new TypeError('No method named "' + e + '"');
                      i[e]();
                    }
                  });
                }),
                o(t, null, [
                  {
                    key: "VERSION",
                    get: function () {
                      return Ln;
                    },
                  },
                  {
                    key: "Default",
                    get: function () {
                      return Nn;
                    },
                  },
                ]),
                t
              );
            })();
          a.default(window).on(Fn, function () {
            for (
              var t = [].slice.call(document.querySelectorAll(Hn)),
                e = t.length;
              e--;

            ) {
              var i = a.default(t[e]);
              Zn._jQueryInterface.call(i, i.data());
            }
          }),
            (a.default.fn[Tn] = Zn._jQueryInterface),
            (a.default.fn[Tn].Constructor = Zn),
            (a.default.fn[Tn].noConflict = function () {
              return (a.default.fn[Tn] = Mn), Zn._jQueryInterface;
            });
          var Qn = "tab",
            Kn = "4.6.0",
            Jn = "bs.tab",
            ta = "." + Jn,
            ea = ".data-api",
            ia = a.default.fn[Qn],
            na = "hide" + ta,
            aa = "hidden" + ta,
            sa = "show" + ta,
            ra = "shown" + ta,
            oa = "click" + ta + ea,
            la = "dropdown-menu",
            ca = "active",
            ha = "disabled",
            da = "fade",
            ua = "show",
            fa = ".dropdown",
            pa = ".nav, .list-group",
            ga = ".active",
            ma = "> li > .active",
            xa =
              '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',
            va = ".dropdown-toggle",
            ba = "> .dropdown-menu .active",
            ya = (function () {
              function t(t) {
                this._element = t;
              }
              var e = t.prototype;
              return (
                (e.show = function () {
                  var t = this;
                  if (
                    !(
                      (this._element.parentNode &&
                        this._element.parentNode.nodeType ===
                          Node.ELEMENT_NODE &&
                        a.default(this._element).hasClass(ca)) ||
                      a.default(this._element).hasClass(ha)
                    )
                  ) {
                    var e,
                      i,
                      n = a.default(this._element).closest(pa)[0],
                      s = x.getSelectorFromElement(this._element);
                    if (n) {
                      var r =
                        "UL" === n.nodeName || "OL" === n.nodeName ? ma : ga;
                      i = (i = a.default.makeArray(a.default(n).find(r)))[
                        i.length - 1
                      ];
                    }
                    var o = a.default.Event(na, {
                        relatedTarget: this._element,
                      }),
                      l = a.default.Event(sa, { relatedTarget: i });
                    if (
                      (i && a.default(i).trigger(o),
                      a.default(this._element).trigger(l),
                      !l.isDefaultPrevented() && !o.isDefaultPrevented())
                    ) {
                      s && (e = document.querySelector(s)),
                        this._activate(this._element, n);
                      var c = function () {
                        var e = a.default.Event(aa, {
                            relatedTarget: t._element,
                          }),
                          n = a.default.Event(ra, { relatedTarget: i });
                        a.default(i).trigger(e),
                          a.default(t._element).trigger(n);
                      };
                      e ? this._activate(e, e.parentNode, c) : c();
                    }
                  }
                }),
                (e.dispose = function () {
                  a.default.removeData(this._element, Jn),
                    (this._element = null);
                }),
                (e._activate = function (t, e, i) {
                  var n = this,
                    s = (
                      !e || ("UL" !== e.nodeName && "OL" !== e.nodeName)
                        ? a.default(e).children(ga)
                        : a.default(e).find(ma)
                    )[0],
                    r = i && s && a.default(s).hasClass(da),
                    o = function () {
                      return n._transitionComplete(t, s, i);
                    };
                  if (s && r) {
                    var l = x.getTransitionDurationFromElement(s);
                    a.default(s)
                      .removeClass(ua)
                      .one(x.TRANSITION_END, o)
                      .emulateTransitionEnd(l);
                  } else o();
                }),
                (e._transitionComplete = function (t, e, i) {
                  if (e) {
                    a.default(e).removeClass(ca);
                    var n = a.default(e.parentNode).find(ba)[0];
                    n && a.default(n).removeClass(ca),
                      "tab" === e.getAttribute("role") &&
                        e.setAttribute("aria-selected", !1);
                  }
                  if (
                    (a.default(t).addClass(ca),
                    "tab" === t.getAttribute("role") &&
                      t.setAttribute("aria-selected", !0),
                    x.reflow(t),
                    t.classList.contains(da) && t.classList.add(ua),
                    t.parentNode && a.default(t.parentNode).hasClass(la))
                  ) {
                    var s = a.default(t).closest(fa)[0];
                    if (s) {
                      var r = [].slice.call(s.querySelectorAll(va));
                      a.default(r).addClass(ca);
                    }
                    t.setAttribute("aria-expanded", !0);
                  }
                  i && i();
                }),
                (t._jQueryInterface = function (e) {
                  return this.each(function () {
                    var i = a.default(this),
                      n = i.data(Jn);
                    if (
                      (n || ((n = new t(this)), i.data(Jn, n)),
                      "string" == typeof e)
                    ) {
                      if (void 0 === n[e])
                        throw new TypeError('No method named "' + e + '"');
                      n[e]();
                    }
                  });
                }),
                o(t, null, [
                  {
                    key: "VERSION",
                    get: function () {
                      return Kn;
                    },
                  },
                ]),
                t
              );
            })();
          a.default(document).on(oa, xa, function (t) {
            t.preventDefault(),
              ya._jQueryInterface.call(a.default(this), "show");
          }),
            (a.default.fn[Qn] = ya._jQueryInterface),
            (a.default.fn[Qn].Constructor = ya),
            (a.default.fn[Qn].noConflict = function () {
              return (a.default.fn[Qn] = ia), ya._jQueryInterface;
            });
          var wa = "toast",
            ka = "4.6.0",
            Sa = "bs.toast",
            Aa = "." + Sa,
            Ca = a.default.fn[wa],
            Ea = "click.dismiss" + Aa,
            Ta = "hide" + Aa,
            La = "hidden" + Aa,
            _a = "show" + Aa,
            Pa = "shown" + Aa,
            Ia = "fade",
            Ma = "hide",
            Na = "show",
            Da = "showing",
            za = { animation: "boolean", autohide: "boolean", delay: "number" },
            Oa = { animation: !0, autohide: !0, delay: 500 },
            Fa = '[data-dismiss="toast"]',
            Xa = (function () {
              function t(t, e) {
                (this._element = t),
                  (this._config = this._getConfig(e)),
                  (this._timeout = null),
                  this._setListeners();
              }
              var e = t.prototype;
              return (
                (e.show = function () {
                  var t = this,
                    e = a.default.Event(_a);
                  if (
                    (a.default(this._element).trigger(e),
                    !e.isDefaultPrevented())
                  ) {
                    this._clearTimeout(),
                      this._config.animation && this._element.classList.add(Ia);
                    var i = function () {
                      t._element.classList.remove(Da),
                        t._element.classList.add(Na),
                        a.default(t._element).trigger(Pa),
                        t._config.autohide &&
                          (t._timeout = setTimeout(function () {
                            t.hide();
                          }, t._config.delay));
                    };
                    if (
                      (this._element.classList.remove(Ma),
                      x.reflow(this._element),
                      this._element.classList.add(Da),
                      this._config.animation)
                    ) {
                      var n = x.getTransitionDurationFromElement(this._element);
                      a.default(this._element)
                        .one(x.TRANSITION_END, i)
                        .emulateTransitionEnd(n);
                    } else i();
                  }
                }),
                (e.hide = function () {
                  if (this._element.classList.contains(Na)) {
                    var t = a.default.Event(Ta);
                    a.default(this._element).trigger(t),
                      t.isDefaultPrevented() || this._close();
                  }
                }),
                (e.dispose = function () {
                  this._clearTimeout(),
                    this._element.classList.contains(Na) &&
                      this._element.classList.remove(Na),
                    a.default(this._element).off(Ea),
                    a.default.removeData(this._element, Sa),
                    (this._element = null),
                    (this._config = null);
                }),
                (e._getConfig = function (t) {
                  return (
                    (t = l(
                      {},
                      Oa,
                      a.default(this._element).data(),
                      "object" == typeof t && t ? t : {}
                    )),
                    x.typeCheckConfig(wa, t, this.constructor.DefaultType),
                    t
                  );
                }),
                (e._setListeners = function () {
                  var t = this;
                  a.default(this._element).on(Ea, Fa, function () {
                    return t.hide();
                  });
                }),
                (e._close = function () {
                  var t = this,
                    e = function () {
                      t._element.classList.add(Ma),
                        a.default(t._element).trigger(La);
                    };
                  if (
                    (this._element.classList.remove(Na), this._config.animation)
                  ) {
                    var i = x.getTransitionDurationFromElement(this._element);
                    a.default(this._element)
                      .one(x.TRANSITION_END, e)
                      .emulateTransitionEnd(i);
                  } else e();
                }),
                (e._clearTimeout = function () {
                  clearTimeout(this._timeout), (this._timeout = null);
                }),
                (t._jQueryInterface = function (e) {
                  return this.each(function () {
                    var i = a.default(this),
                      n = i.data(Sa);
                    if (
                      (n ||
                        ((n = new t(this, "object" == typeof e && e)),
                        i.data(Sa, n)),
                      "string" == typeof e)
                    ) {
                      if (void 0 === n[e])
                        throw new TypeError('No method named "' + e + '"');
                      n[e](this);
                    }
                  });
                }),
                o(t, null, [
                  {
                    key: "VERSION",
                    get: function () {
                      return ka;
                    },
                  },
                  {
                    key: "DefaultType",
                    get: function () {
                      return za;
                    },
                  },
                  {
                    key: "Default",
                    get: function () {
                      return Oa;
                    },
                  },
                ]),
                t
              );
            })();
          (a.default.fn[wa] = Xa._jQueryInterface),
            (a.default.fn[wa].Constructor = Xa),
            (a.default.fn[wa].noConflict = function () {
              return (a.default.fn[wa] = Ca), Xa._jQueryInterface;
            }),
            (t.Alert = I),
            (t.Button = Q),
            (t.Carousel = jt),
            (t.Collapse = ue),
            (t.Dropdown = ti),
            (t.Modal = zi),
            (t.Popover = En),
            (t.Scrollspy = Zn),
            (t.Tab = ya),
            (t.Toast = Xa),
            (t.Tooltip = dn),
            (t.Util = x),
            Object.defineProperty(t, "__esModule", { value: !0 });
        })(e, i(755), i(981));
      },
      755: function (t, e) {
        var i;
        /*!
         * jQuery JavaScript Library v3.6.0
         * https://jquery.com/
         *
         * Includes Sizzle.js
         * https://sizzlejs.com/
         *
         * Copyright OpenJS Foundation and other contributors
         * Released under the MIT license
         * https://jquery.org/license
         *
         * Date: 2021-03-02T17:08Z
         */ !(function (e, i) {
          "use strict";
          "object" == typeof t.exports
            ? (t.exports = e.document
                ? i(e, !0)
                : function (t) {
                    if (!t.document)
                      throw new Error(
                        "jQuery requires a window with a document"
                      );
                    return i(t);
                  })
            : i(e);
        })("undefined" != typeof window ? window : this, function (n, a) {
          "use strict";
          var s = [],
            r = Object.getPrototypeOf,
            o = s.slice,
            l = s.flat
              ? function (t) {
                  return s.flat.call(t);
                }
              : function (t) {
                  return s.concat.apply([], t);
                },
            c = s.push,
            h = s.indexOf,
            d = {},
            u = d.toString,
            f = d.hasOwnProperty,
            p = f.toString,
            g = p.call(Object),
            m = {},
            x = function (t) {
              return (
                "function" == typeof t &&
                "number" != typeof t.nodeType &&
                "function" != typeof t.item
              );
            },
            v = function (t) {
              return null != t && t === t.window;
            },
            b = n.document,
            y = { type: !0, src: !0, nonce: !0, noModule: !0 };
          function w(t, e, i) {
            var n,
              a,
              s = (i = i || b).createElement("script");
            if (((s.text = t), e))
              for (n in y)
                (a = e[n] || (e.getAttribute && e.getAttribute(n))) &&
                  s.setAttribute(n, a);
            i.head.appendChild(s).parentNode.removeChild(s);
          }
          function k(t) {
            return null == t
              ? t + ""
              : "object" == typeof t || "function" == typeof t
              ? d[u.call(t)] || "object"
              : typeof t;
          }
          var S = "3.6.0",
            A = function (t, e) {
              return new A.fn.init(t, e);
            };
          function C(t) {
            var e = !!t && "length" in t && t.length,
              i = k(t);
            return (
              !x(t) &&
              !v(t) &&
              ("array" === i ||
                0 === e ||
                ("number" == typeof e && e > 0 && e - 1 in t))
            );
          }
          (A.fn = A.prototype =
            {
              jquery: S,
              constructor: A,
              length: 0,
              toArray: function () {
                return o.call(this);
              },
              get: function (t) {
                return null == t
                  ? o.call(this)
                  : t < 0
                  ? this[t + this.length]
                  : this[t];
              },
              pushStack: function (t) {
                var e = A.merge(this.constructor(), t);
                return (e.prevObject = this), e;
              },
              each: function (t) {
                return A.each(this, t);
              },
              map: function (t) {
                return this.pushStack(
                  A.map(this, function (e, i) {
                    return t.call(e, i, e);
                  })
                );
              },
              slice: function () {
                return this.pushStack(o.apply(this, arguments));
              },
              first: function () {
                return this.eq(0);
              },
              last: function () {
                return this.eq(-1);
              },
              even: function () {
                return this.pushStack(
                  A.grep(this, function (t, e) {
                    return (e + 1) % 2;
                  })
                );
              },
              odd: function () {
                return this.pushStack(
                  A.grep(this, function (t, e) {
                    return e % 2;
                  })
                );
              },
              eq: function (t) {
                var e = this.length,
                  i = +t + (t < 0 ? e : 0);
                return this.pushStack(i >= 0 && i < e ? [this[i]] : []);
              },
              end: function () {
                return this.prevObject || this.constructor();
              },
              push: c,
              sort: s.sort,
              splice: s.splice,
            }),
            (A.extend = A.fn.extend =
              function () {
                var t,
                  e,
                  i,
                  n,
                  a,
                  s,
                  r = arguments[0] || {},
                  o = 1,
                  l = arguments.length,
                  c = !1;
                for (
                  "boolean" == typeof r &&
                    ((c = r), (r = arguments[o] || {}), o++),
                    "object" == typeof r || x(r) || (r = {}),
                    o === l && ((r = this), o--);
                  o < l;
                  o++
                )
                  if (null != (t = arguments[o]))
                    for (e in t)
                      (n = t[e]),
                        "__proto__" !== e &&
                          r !== n &&
                          (c &&
                          n &&
                          (A.isPlainObject(n) || (a = Array.isArray(n)))
                            ? ((i = r[e]),
                              (s =
                                a && !Array.isArray(i)
                                  ? []
                                  : a || A.isPlainObject(i)
                                  ? i
                                  : {}),
                              (a = !1),
                              (r[e] = A.extend(c, s, n)))
                            : void 0 !== n && (r[e] = n));
                return r;
              }),
            A.extend({
              expando: "jQuery" + (S + Math.random()).replace(/\D/g, ""),
              isReady: !0,
              error: function (t) {
                throw new Error(t);
              },
              noop: function () {},
              isPlainObject: function (t) {
                var e, i;
                return (
                  !(!t || "[object Object]" !== u.call(t)) &&
                  (!(e = r(t)) ||
                    ("function" ==
                      typeof (i = f.call(e, "constructor") && e.constructor) &&
                      p.call(i) === g))
                );
              },
              isEmptyObject: function (t) {
                var e;
                for (e in t) return !1;
                return !0;
              },
              globalEval: function (t, e, i) {
                w(t, { nonce: e && e.nonce }, i);
              },
              each: function (t, e) {
                var i,
                  n = 0;
                if (C(t))
                  for (
                    i = t.length;
                    n < i && !1 !== e.call(t[n], n, t[n]);
                    n++
                  );
                else for (n in t) if (!1 === e.call(t[n], n, t[n])) break;
                return t;
              },
              makeArray: function (t, e) {
                var i = e || [];
                return (
                  null != t &&
                    (C(Object(t))
                      ? A.merge(i, "string" == typeof t ? [t] : t)
                      : c.call(i, t)),
                  i
                );
              },
              inArray: function (t, e, i) {
                return null == e ? -1 : h.call(e, t, i);
              },
              merge: function (t, e) {
                for (var i = +e.length, n = 0, a = t.length; n < i; n++)
                  t[a++] = e[n];
                return (t.length = a), t;
              },
              grep: function (t, e, i) {
                for (var n = [], a = 0, s = t.length, r = !i; a < s; a++)
                  !e(t[a], a) !== r && n.push(t[a]);
                return n;
              },
              map: function (t, e, i) {
                var n,
                  a,
                  s = 0,
                  r = [];
                if (C(t))
                  for (n = t.length; s < n; s++)
                    null != (a = e(t[s], s, i)) && r.push(a);
                else for (s in t) null != (a = e(t[s], s, i)) && r.push(a);
                return l(r);
              },
              guid: 1,
              support: m,
            }),
            "function" == typeof Symbol &&
              (A.fn[Symbol.iterator] = s[Symbol.iterator]),
            A.each(
              "Boolean Number String Function Array Date RegExp Object Error Symbol".split(
                " "
              ),
              function (t, e) {
                d["[object " + e + "]"] = e.toLowerCase();
              }
            );
          var E =
            /*!
             * Sizzle CSS Selector Engine v2.3.6
             * https://sizzlejs.com/
             *
             * Copyright JS Foundation and other contributors
             * Released under the MIT license
             * https://js.foundation/
             *
             * Date: 2021-02-16
             */
            (function (t) {
              var e,
                i,
                n,
                a,
                s,
                r,
                o,
                l,
                c,
                h,
                d,
                u,
                f,
                p,
                g,
                m,
                x,
                v,
                b,
                y = "sizzle" + 1 * new Date(),
                w = t.document,
                k = 0,
                S = 0,
                A = lt(),
                C = lt(),
                E = lt(),
                T = lt(),
                L = function (t, e) {
                  return t === e && (d = !0), 0;
                },
                _ = {}.hasOwnProperty,
                P = [],
                I = P.pop,
                M = P.push,
                N = P.push,
                D = P.slice,
                z = function (t, e) {
                  for (var i = 0, n = t.length; i < n; i++)
                    if (t[i] === e) return i;
                  return -1;
                },
                O =
                  "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
                F = "[\\x20\\t\\r\\n\\f]",
                X =
                  "(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",
                R =
                  "\\[[\\x20\\t\\r\\n\\f]*(" +
                  X +
                  ")(?:" +
                  F +
                  "*([*^$|!~]?=)" +
                  F +
                  "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" +
                  X +
                  "))|)" +
                  F +
                  "*\\]",
                H =
                  ":(" +
                  X +
                  ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" +
                  R +
                  ")*)|.*)\\)|)",
                Y = new RegExp(F + "+", "g"),
                W = new RegExp(
                  "^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$",
                  "g"
                ),
                B = new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),
                j = new RegExp(
                  "^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"
                ),
                V = new RegExp(F + "|>"),
                G = new RegExp(H),
                q = new RegExp("^" + X + "$"),
                U = {
                  ID: new RegExp("^#(" + X + ")"),
                  CLASS: new RegExp("^\\.(" + X + ")"),
                  TAG: new RegExp("^(" + X + "|[*])"),
                  ATTR: new RegExp("^" + R),
                  PSEUDO: new RegExp("^" + H),
                  CHILD: new RegExp(
                    "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)",
                    "i"
                  ),
                  bool: new RegExp("^(?:" + O + ")$", "i"),
                  needsContext: new RegExp(
                    "^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)",
                    "i"
                  ),
                },
                $ = /HTML$/i,
                Z = /^(?:input|select|textarea|button)$/i,
                Q = /^h\d$/i,
                K = /^[^{]+\{\s*\[native \w/,
                J = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
                tt = /[+~]/,
                et = new RegExp(
                  "\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])",
                  "g"
                ),
                it = function (t, e) {
                  var i = "0x" + t.slice(1) - 65536;
                  return (
                    e ||
                    (i < 0
                      ? String.fromCharCode(i + 65536)
                      : String.fromCharCode(
                          (i >> 10) | 55296,
                          (1023 & i) | 56320
                        ))
                  );
                },
                nt = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
                at = function (t, e) {
                  return e
                    ? "\0" === t
                      ? "�"
                      : t.slice(0, -1) +
                        "\\" +
                        t.charCodeAt(t.length - 1).toString(16) +
                        " "
                    : "\\" + t;
                },
                st = function () {
                  u();
                },
                rt = yt(
                  function (t) {
                    return (
                      !0 === t.disabled &&
                      "fieldset" === t.nodeName.toLowerCase()
                    );
                  },
                  { dir: "parentNode", next: "legend" }
                );
              try {
                N.apply((P = D.call(w.childNodes)), w.childNodes),
                  P[w.childNodes.length].nodeType;
              } catch (t) {
                N = {
                  apply: P.length
                    ? function (t, e) {
                        M.apply(t, D.call(e));
                      }
                    : function (t, e) {
                        for (var i = t.length, n = 0; (t[i++] = e[n++]); );
                        t.length = i - 1;
                      },
                };
              }
              function ot(t, e, n, a) {
                var s,
                  o,
                  c,
                  h,
                  d,
                  p,
                  x,
                  v = e && e.ownerDocument,
                  w = e ? e.nodeType : 9;
                if (
                  ((n = n || []),
                  "string" != typeof t ||
                    !t ||
                    (1 !== w && 9 !== w && 11 !== w))
                )
                  return n;
                if (!a && (u(e), (e = e || f), g)) {
                  if (11 !== w && (d = J.exec(t)))
                    if ((s = d[1])) {
                      if (9 === w) {
                        if (!(c = e.getElementById(s))) return n;
                        if (c.id === s) return n.push(c), n;
                      } else if (
                        v &&
                        (c = v.getElementById(s)) &&
                        b(e, c) &&
                        c.id === s
                      )
                        return n.push(c), n;
                    } else {
                      if (d[2]) return N.apply(n, e.getElementsByTagName(t)), n;
                      if (
                        (s = d[3]) &&
                        i.getElementsByClassName &&
                        e.getElementsByClassName
                      )
                        return N.apply(n, e.getElementsByClassName(s)), n;
                    }
                  if (
                    i.qsa &&
                    !T[t + " "] &&
                    (!m || !m.test(t)) &&
                    (1 !== w || "object" !== e.nodeName.toLowerCase())
                  ) {
                    if (
                      ((x = t), (v = e), 1 === w && (V.test(t) || j.test(t)))
                    ) {
                      for (
                        ((v = (tt.test(t) && xt(e.parentNode)) || e) === e &&
                          i.scope) ||
                          ((h = e.getAttribute("id"))
                            ? (h = h.replace(nt, at))
                            : e.setAttribute("id", (h = y))),
                          o = (p = r(t)).length;
                        o--;

                      )
                        p[o] = (h ? "#" + h : ":scope") + " " + bt(p[o]);
                      x = p.join(",");
                    }
                    try {
                      return N.apply(n, v.querySelectorAll(x)), n;
                    } catch (e) {
                      T(t, !0);
                    } finally {
                      h === y && e.removeAttribute("id");
                    }
                  }
                }
                return l(t.replace(W, "$1"), e, n, a);
              }
              function lt() {
                var t = [];
                return function e(i, a) {
                  return (
                    t.push(i + " ") > n.cacheLength && delete e[t.shift()],
                    (e[i + " "] = a)
                  );
                };
              }
              function ct(t) {
                return (t[y] = !0), t;
              }
              function ht(t) {
                var e = f.createElement("fieldset");
                try {
                  return !!t(e);
                } catch (t) {
                  return !1;
                } finally {
                  e.parentNode && e.parentNode.removeChild(e), (e = null);
                }
              }
              function dt(t, e) {
                for (var i = t.split("|"), a = i.length; a--; )
                  n.attrHandle[i[a]] = e;
              }
              function ut(t, e) {
                var i = e && t,
                  n =
                    i &&
                    1 === t.nodeType &&
                    1 === e.nodeType &&
                    t.sourceIndex - e.sourceIndex;
                if (n) return n;
                if (i) for (; (i = i.nextSibling); ) if (i === e) return -1;
                return t ? 1 : -1;
              }
              function ft(t) {
                return function (e) {
                  return "input" === e.nodeName.toLowerCase() && e.type === t;
                };
              }
              function pt(t) {
                return function (e) {
                  var i = e.nodeName.toLowerCase();
                  return ("input" === i || "button" === i) && e.type === t;
                };
              }
              function gt(t) {
                return function (e) {
                  return "form" in e
                    ? e.parentNode && !1 === e.disabled
                      ? "label" in e
                        ? "label" in e.parentNode
                          ? e.parentNode.disabled === t
                          : e.disabled === t
                        : e.isDisabled === t ||
                          (e.isDisabled !== !t && rt(e) === t)
                      : e.disabled === t
                    : "label" in e && e.disabled === t;
                };
              }
              function mt(t) {
                return ct(function (e) {
                  return (
                    (e = +e),
                    ct(function (i, n) {
                      for (var a, s = t([], i.length, e), r = s.length; r--; )
                        i[(a = s[r])] && (i[a] = !(n[a] = i[a]));
                    })
                  );
                });
              }
              function xt(t) {
                return t && void 0 !== t.getElementsByTagName && t;
              }
              for (e in ((i = ot.support = {}),
              (s = ot.isXML =
                function (t) {
                  var e = t && t.namespaceURI,
                    i = t && (t.ownerDocument || t).documentElement;
                  return !$.test(e || (i && i.nodeName) || "HTML");
                }),
              (u = ot.setDocument =
                function (t) {
                  var e,
                    a,
                    r = t ? t.ownerDocument || t : w;
                  return r != f && 9 === r.nodeType && r.documentElement
                    ? ((p = (f = r).documentElement),
                      (g = !s(f)),
                      w != f &&
                        (a = f.defaultView) &&
                        a.top !== a &&
                        (a.addEventListener
                          ? a.addEventListener("unload", st, !1)
                          : a.attachEvent && a.attachEvent("onunload", st)),
                      (i.scope = ht(function (t) {
                        return (
                          p.appendChild(t).appendChild(f.createElement("div")),
                          void 0 !== t.querySelectorAll &&
                            !t.querySelectorAll(":scope fieldset div").length
                        );
                      })),
                      (i.attributes = ht(function (t) {
                        return (
                          (t.className = "i"), !t.getAttribute("className")
                        );
                      })),
                      (i.getElementsByTagName = ht(function (t) {
                        return (
                          t.appendChild(f.createComment("")),
                          !t.getElementsByTagName("*").length
                        );
                      })),
                      (i.getElementsByClassName = K.test(
                        f.getElementsByClassName
                      )),
                      (i.getById = ht(function (t) {
                        return (
                          (p.appendChild(t).id = y),
                          !f.getElementsByName || !f.getElementsByName(y).length
                        );
                      })),
                      i.getById
                        ? ((n.filter.ID = function (t) {
                            var e = t.replace(et, it);
                            return function (t) {
                              return t.getAttribute("id") === e;
                            };
                          }),
                          (n.find.ID = function (t, e) {
                            if (void 0 !== e.getElementById && g) {
                              var i = e.getElementById(t);
                              return i ? [i] : [];
                            }
                          }))
                        : ((n.filter.ID = function (t) {
                            var e = t.replace(et, it);
                            return function (t) {
                              var i =
                                void 0 !== t.getAttributeNode &&
                                t.getAttributeNode("id");
                              return i && i.value === e;
                            };
                          }),
                          (n.find.ID = function (t, e) {
                            if (void 0 !== e.getElementById && g) {
                              var i,
                                n,
                                a,
                                s = e.getElementById(t);
                              if (s) {
                                if (
                                  (i = s.getAttributeNode("id")) &&
                                  i.value === t
                                )
                                  return [s];
                                for (
                                  a = e.getElementsByName(t), n = 0;
                                  (s = a[n++]);

                                )
                                  if (
                                    (i = s.getAttributeNode("id")) &&
                                    i.value === t
                                  )
                                    return [s];
                              }
                              return [];
                            }
                          })),
                      (n.find.TAG = i.getElementsByTagName
                        ? function (t, e) {
                            return void 0 !== e.getElementsByTagName
                              ? e.getElementsByTagName(t)
                              : i.qsa
                              ? e.querySelectorAll(t)
                              : void 0;
                          }
                        : function (t, e) {
                            var i,
                              n = [],
                              a = 0,
                              s = e.getElementsByTagName(t);
                            if ("*" === t) {
                              for (; (i = s[a++]); )
                                1 === i.nodeType && n.push(i);
                              return n;
                            }
                            return s;
                          }),
                      (n.find.CLASS =
                        i.getElementsByClassName &&
                        function (t, e) {
                          if (void 0 !== e.getElementsByClassName && g)
                            return e.getElementsByClassName(t);
                        }),
                      (x = []),
                      (m = []),
                      (i.qsa = K.test(f.querySelectorAll)) &&
                        (ht(function (t) {
                          var e;
                          (p.appendChild(t).innerHTML =
                            "<a id='" +
                            y +
                            "'></a><select id='" +
                            y +
                            "-\r\\' msallowcapture=''><option selected=''></option></select>"),
                            t.querySelectorAll("[msallowcapture^='']").length &&
                              m.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),
                            t.querySelectorAll("[selected]").length ||
                              m.push(
                                "\\[[\\x20\\t\\r\\n\\f]*(?:value|" + O + ")"
                              ),
                            t.querySelectorAll("[id~=" + y + "-]").length ||
                              m.push("~="),
                            (e = f.createElement("input")).setAttribute(
                              "name",
                              ""
                            ),
                            t.appendChild(e),
                            t.querySelectorAll("[name='']").length ||
                              m.push(
                                "\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"
                              ),
                            t.querySelectorAll(":checked").length ||
                              m.push(":checked"),
                            t.querySelectorAll("a#" + y + "+*").length ||
                              m.push(".#.+[+~]"),
                            t.querySelectorAll("\\\f"),
                            m.push("[\\r\\n\\f]");
                        }),
                        ht(function (t) {
                          t.innerHTML =
                            "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
                          var e = f.createElement("input");
                          e.setAttribute("type", "hidden"),
                            t.appendChild(e).setAttribute("name", "D"),
                            t.querySelectorAll("[name=d]").length &&
                              m.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),
                            2 !== t.querySelectorAll(":enabled").length &&
                              m.push(":enabled", ":disabled"),
                            (p.appendChild(t).disabled = !0),
                            2 !== t.querySelectorAll(":disabled").length &&
                              m.push(":enabled", ":disabled"),
                            t.querySelectorAll("*,:x"),
                            m.push(",.*:");
                        })),
                      (i.matchesSelector = K.test(
                        (v =
                          p.matches ||
                          p.webkitMatchesSelector ||
                          p.mozMatchesSelector ||
                          p.oMatchesSelector ||
                          p.msMatchesSelector)
                      )) &&
                        ht(function (t) {
                          (i.disconnectedMatch = v.call(t, "*")),
                            v.call(t, "[s!='']:x"),
                            x.push("!=", H);
                        }),
                      (m = m.length && new RegExp(m.join("|"))),
                      (x = x.length && new RegExp(x.join("|"))),
                      (e = K.test(p.compareDocumentPosition)),
                      (b =
                        e || K.test(p.contains)
                          ? function (t, e) {
                              var i = 9 === t.nodeType ? t.documentElement : t,
                                n = e && e.parentNode;
                              return (
                                t === n ||
                                !(
                                  !n ||
                                  1 !== n.nodeType ||
                                  !(i.contains
                                    ? i.contains(n)
                                    : t.compareDocumentPosition &&
                                      16 & t.compareDocumentPosition(n))
                                )
                              );
                            }
                          : function (t, e) {
                              if (e)
                                for (; (e = e.parentNode); )
                                  if (e === t) return !0;
                              return !1;
                            }),
                      (L = e
                        ? function (t, e) {
                            if (t === e) return (d = !0), 0;
                            var n =
                              !t.compareDocumentPosition -
                              !e.compareDocumentPosition;
                            return (
                              n ||
                              (1 &
                                (n =
                                  (t.ownerDocument || t) ==
                                  (e.ownerDocument || e)
                                    ? t.compareDocumentPosition(e)
                                    : 1) ||
                              (!i.sortDetached &&
                                e.compareDocumentPosition(t) === n)
                                ? t == f || (t.ownerDocument == w && b(w, t))
                                  ? -1
                                  : e == f || (e.ownerDocument == w && b(w, e))
                                  ? 1
                                  : h
                                  ? z(h, t) - z(h, e)
                                  : 0
                                : 4 & n
                                ? -1
                                : 1)
                            );
                          }
                        : function (t, e) {
                            if (t === e) return (d = !0), 0;
                            var i,
                              n = 0,
                              a = t.parentNode,
                              s = e.parentNode,
                              r = [t],
                              o = [e];
                            if (!a || !s)
                              return t == f
                                ? -1
                                : e == f
                                ? 1
                                : a
                                ? -1
                                : s
                                ? 1
                                : h
                                ? z(h, t) - z(h, e)
                                : 0;
                            if (a === s) return ut(t, e);
                            for (i = t; (i = i.parentNode); ) r.unshift(i);
                            for (i = e; (i = i.parentNode); ) o.unshift(i);
                            for (; r[n] === o[n]; ) n++;
                            return n
                              ? ut(r[n], o[n])
                              : r[n] == w
                              ? -1
                              : o[n] == w
                              ? 1
                              : 0;
                          }),
                      f)
                    : f;
                }),
              (ot.matches = function (t, e) {
                return ot(t, null, null, e);
              }),
              (ot.matchesSelector = function (t, e) {
                if (
                  (u(t),
                  i.matchesSelector &&
                    g &&
                    !T[e + " "] &&
                    (!x || !x.test(e)) &&
                    (!m || !m.test(e)))
                )
                  try {
                    var n = v.call(t, e);
                    if (
                      n ||
                      i.disconnectedMatch ||
                      (t.document && 11 !== t.document.nodeType)
                    )
                      return n;
                  } catch (t) {
                    T(e, !0);
                  }
                return ot(e, f, null, [t]).length > 0;
              }),
              (ot.contains = function (t, e) {
                return (t.ownerDocument || t) != f && u(t), b(t, e);
              }),
              (ot.attr = function (t, e) {
                (t.ownerDocument || t) != f && u(t);
                var a = n.attrHandle[e.toLowerCase()],
                  s =
                    a && _.call(n.attrHandle, e.toLowerCase())
                      ? a(t, e, !g)
                      : void 0;
                return void 0 !== s
                  ? s
                  : i.attributes || !g
                  ? t.getAttribute(e)
                  : (s = t.getAttributeNode(e)) && s.specified
                  ? s.value
                  : null;
              }),
              (ot.escape = function (t) {
                return (t + "").replace(nt, at);
              }),
              (ot.error = function (t) {
                throw new Error("Syntax error, unrecognized expression: " + t);
              }),
              (ot.uniqueSort = function (t) {
                var e,
                  n = [],
                  a = 0,
                  s = 0;
                if (
                  ((d = !i.detectDuplicates),
                  (h = !i.sortStable && t.slice(0)),
                  t.sort(L),
                  d)
                ) {
                  for (; (e = t[s++]); ) e === t[s] && (a = n.push(s));
                  for (; a--; ) t.splice(n[a], 1);
                }
                return (h = null), t;
              }),
              (a = ot.getText =
                function (t) {
                  var e,
                    i = "",
                    n = 0,
                    s = t.nodeType;
                  if (s) {
                    if (1 === s || 9 === s || 11 === s) {
                      if ("string" == typeof t.textContent)
                        return t.textContent;
                      for (t = t.firstChild; t; t = t.nextSibling) i += a(t);
                    } else if (3 === s || 4 === s) return t.nodeValue;
                  } else for (; (e = t[n++]); ) i += a(e);
                  return i;
                }),
              (n = ot.selectors =
                {
                  cacheLength: 50,
                  createPseudo: ct,
                  match: U,
                  attrHandle: {},
                  find: {},
                  relative: {
                    ">": { dir: "parentNode", first: !0 },
                    " ": { dir: "parentNode" },
                    "+": { dir: "previousSibling", first: !0 },
                    "~": { dir: "previousSibling" },
                  },
                  preFilter: {
                    ATTR: function (t) {
                      return (
                        (t[1] = t[1].replace(et, it)),
                        (t[3] = (t[3] || t[4] || t[5] || "").replace(et, it)),
                        "~=" === t[2] && (t[3] = " " + t[3] + " "),
                        t.slice(0, 4)
                      );
                    },
                    CHILD: function (t) {
                      return (
                        (t[1] = t[1].toLowerCase()),
                        "nth" === t[1].slice(0, 3)
                          ? (t[3] || ot.error(t[0]),
                            (t[4] = +(t[4]
                              ? t[5] + (t[6] || 1)
                              : 2 * ("even" === t[3] || "odd" === t[3]))),
                            (t[5] = +(t[7] + t[8] || "odd" === t[3])))
                          : t[3] && ot.error(t[0]),
                        t
                      );
                    },
                    PSEUDO: function (t) {
                      var e,
                        i = !t[6] && t[2];
                      return U.CHILD.test(t[0])
                        ? null
                        : (t[3]
                            ? (t[2] = t[4] || t[5] || "")
                            : i &&
                              G.test(i) &&
                              (e = r(i, !0)) &&
                              (e = i.indexOf(")", i.length - e) - i.length) &&
                              ((t[0] = t[0].slice(0, e)),
                              (t[2] = i.slice(0, e))),
                          t.slice(0, 3));
                    },
                  },
                  filter: {
                    TAG: function (t) {
                      var e = t.replace(et, it).toLowerCase();
                      return "*" === t
                        ? function () {
                            return !0;
                          }
                        : function (t) {
                            return t.nodeName && t.nodeName.toLowerCase() === e;
                          };
                    },
                    CLASS: function (t) {
                      var e = A[t + " "];
                      return (
                        e ||
                        ((e = new RegExp(
                          "(^|[\\x20\\t\\r\\n\\f])" + t + "(" + F + "|$)"
                        )) &&
                          A(t, function (t) {
                            return e.test(
                              ("string" == typeof t.className && t.className) ||
                                (void 0 !== t.getAttribute &&
                                  t.getAttribute("class")) ||
                                ""
                            );
                          }))
                      );
                    },
                    ATTR: function (t, e, i) {
                      return function (n) {
                        var a = ot.attr(n, t);
                        return null == a
                          ? "!=" === e
                          : !e ||
                              ((a += ""),
                              "=" === e
                                ? a === i
                                : "!=" === e
                                ? a !== i
                                : "^=" === e
                                ? i && 0 === a.indexOf(i)
                                : "*=" === e
                                ? i && a.indexOf(i) > -1
                                : "$=" === e
                                ? i && a.slice(-i.length) === i
                                : "~=" === e
                                ? (" " + a.replace(Y, " ") + " ").indexOf(i) >
                                  -1
                                : "|=" === e &&
                                  (a === i ||
                                    a.slice(0, i.length + 1) === i + "-"));
                      };
                    },
                    CHILD: function (t, e, i, n, a) {
                      var s = "nth" !== t.slice(0, 3),
                        r = "last" !== t.slice(-4),
                        o = "of-type" === e;
                      return 1 === n && 0 === a
                        ? function (t) {
                            return !!t.parentNode;
                          }
                        : function (e, i, l) {
                            var c,
                              h,
                              d,
                              u,
                              f,
                              p,
                              g = s !== r ? "nextSibling" : "previousSibling",
                              m = e.parentNode,
                              x = o && e.nodeName.toLowerCase(),
                              v = !l && !o,
                              b = !1;
                            if (m) {
                              if (s) {
                                for (; g; ) {
                                  for (u = e; (u = u[g]); )
                                    if (
                                      o
                                        ? u.nodeName.toLowerCase() === x
                                        : 1 === u.nodeType
                                    )
                                      return !1;
                                  p = g = "only" === t && !p && "nextSibling";
                                }
                                return !0;
                              }
                              if (
                                ((p = [r ? m.firstChild : m.lastChild]), r && v)
                              ) {
                                for (
                                  b =
                                    (f =
                                      (c =
                                        (h =
                                          (d = (u = m)[y] || (u[y] = {}))[
                                            u.uniqueID
                                          ] || (d[u.uniqueID] = {}))[t] ||
                                        [])[0] === k && c[1]) && c[2],
                                    u = f && m.childNodes[f];
                                  (u =
                                    (++f && u && u[g]) ||
                                    (b = f = 0) ||
                                    p.pop());

                                )
                                  if (1 === u.nodeType && ++b && u === e) {
                                    h[t] = [k, f, b];
                                    break;
                                  }
                              } else if (
                                (v &&
                                  (b = f =
                                    (c =
                                      (h =
                                        (d = (u = e)[y] || (u[y] = {}))[
                                          u.uniqueID
                                        ] || (d[u.uniqueID] = {}))[t] ||
                                      [])[0] === k && c[1]),
                                !1 === b)
                              )
                                for (
                                  ;
                                  (u =
                                    (++f && u && u[g]) ||
                                    (b = f = 0) ||
                                    p.pop()) &&
                                  ((o
                                    ? u.nodeName.toLowerCase() !== x
                                    : 1 !== u.nodeType) ||
                                    !++b ||
                                    (v &&
                                      ((h =
                                        (d = u[y] || (u[y] = {}))[u.uniqueID] ||
                                        (d[u.uniqueID] = {}))[t] = [k, b]),
                                    u !== e));

                                );
                              return (
                                (b -= a) === n || (b % n == 0 && b / n >= 0)
                              );
                            }
                          };
                    },
                    PSEUDO: function (t, e) {
                      var i,
                        a =
                          n.pseudos[t] ||
                          n.setFilters[t.toLowerCase()] ||
                          ot.error("unsupported pseudo: " + t);
                      return a[y]
                        ? a(e)
                        : a.length > 1
                        ? ((i = [t, t, "", e]),
                          n.setFilters.hasOwnProperty(t.toLowerCase())
                            ? ct(function (t, i) {
                                for (var n, s = a(t, e), r = s.length; r--; )
                                  t[(n = z(t, s[r]))] = !(i[n] = s[r]);
                              })
                            : function (t) {
                                return a(t, 0, i);
                              })
                        : a;
                    },
                  },
                  pseudos: {
                    not: ct(function (t) {
                      var e = [],
                        i = [],
                        n = o(t.replace(W, "$1"));
                      return n[y]
                        ? ct(function (t, e, i, a) {
                            for (
                              var s, r = n(t, null, a, []), o = t.length;
                              o--;

                            )
                              (s = r[o]) && (t[o] = !(e[o] = s));
                          })
                        : function (t, a, s) {
                            return (
                              (e[0] = t),
                              n(e, null, s, i),
                              (e[0] = null),
                              !i.pop()
                            );
                          };
                    }),
                    has: ct(function (t) {
                      return function (e) {
                        return ot(t, e).length > 0;
                      };
                    }),
                    contains: ct(function (t) {
                      return (
                        (t = t.replace(et, it)),
                        function (e) {
                          return (e.textContent || a(e)).indexOf(t) > -1;
                        }
                      );
                    }),
                    lang: ct(function (t) {
                      return (
                        q.test(t || "") || ot.error("unsupported lang: " + t),
                        (t = t.replace(et, it).toLowerCase()),
                        function (e) {
                          var i;
                          do {
                            if (
                              (i = g
                                ? e.lang
                                : e.getAttribute("xml:lang") ||
                                  e.getAttribute("lang"))
                            )
                              return (
                                (i = i.toLowerCase()) === t ||
                                0 === i.indexOf(t + "-")
                              );
                          } while ((e = e.parentNode) && 1 === e.nodeType);
                          return !1;
                        }
                      );
                    }),
                    target: function (e) {
                      var i = t.location && t.location.hash;
                      return i && i.slice(1) === e.id;
                    },
                    root: function (t) {
                      return t === p;
                    },
                    focus: function (t) {
                      return (
                        t === f.activeElement &&
                        (!f.hasFocus || f.hasFocus()) &&
                        !!(t.type || t.href || ~t.tabIndex)
                      );
                    },
                    enabled: gt(!1),
                    disabled: gt(!0),
                    checked: function (t) {
                      var e = t.nodeName.toLowerCase();
                      return (
                        ("input" === e && !!t.checked) ||
                        ("option" === e && !!t.selected)
                      );
                    },
                    selected: function (t) {
                      return (
                        t.parentNode && t.parentNode.selectedIndex,
                        !0 === t.selected
                      );
                    },
                    empty: function (t) {
                      for (t = t.firstChild; t; t = t.nextSibling)
                        if (t.nodeType < 6) return !1;
                      return !0;
                    },
                    parent: function (t) {
                      return !n.pseudos.empty(t);
                    },
                    header: function (t) {
                      return Q.test(t.nodeName);
                    },
                    input: function (t) {
                      return Z.test(t.nodeName);
                    },
                    button: function (t) {
                      var e = t.nodeName.toLowerCase();
                      return (
                        ("input" === e && "button" === t.type) || "button" === e
                      );
                    },
                    text: function (t) {
                      var e;
                      return (
                        "input" === t.nodeName.toLowerCase() &&
                        "text" === t.type &&
                        (null == (e = t.getAttribute("type")) ||
                          "text" === e.toLowerCase())
                      );
                    },
                    first: mt(function () {
                      return [0];
                    }),
                    last: mt(function (t, e) {
                      return [e - 1];
                    }),
                    eq: mt(function (t, e, i) {
                      return [i < 0 ? i + e : i];
                    }),
                    even: mt(function (t, e) {
                      for (var i = 0; i < e; i += 2) t.push(i);
                      return t;
                    }),
                    odd: mt(function (t, e) {
                      for (var i = 1; i < e; i += 2) t.push(i);
                      return t;
                    }),
                    lt: mt(function (t, e, i) {
                      for (var n = i < 0 ? i + e : i > e ? e : i; --n >= 0; )
                        t.push(n);
                      return t;
                    }),
                    gt: mt(function (t, e, i) {
                      for (var n = i < 0 ? i + e : i; ++n < e; ) t.push(n);
                      return t;
                    }),
                  },
                }),
              (n.pseudos.nth = n.pseudos.eq),
              { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 }))
                n.pseudos[e] = ft(e);
              for (e in { submit: !0, reset: !0 }) n.pseudos[e] = pt(e);
              function vt() {}
              function bt(t) {
                for (var e = 0, i = t.length, n = ""; e < i; e++)
                  n += t[e].value;
                return n;
              }
              function yt(t, e, i) {
                var n = e.dir,
                  a = e.next,
                  s = a || n,
                  r = i && "parentNode" === s,
                  o = S++;
                return e.first
                  ? function (e, i, a) {
                      for (; (e = e[n]); )
                        if (1 === e.nodeType || r) return t(e, i, a);
                      return !1;
                    }
                  : function (e, i, l) {
                      var c,
                        h,
                        d,
                        u = [k, o];
                      if (l) {
                        for (; (e = e[n]); )
                          if ((1 === e.nodeType || r) && t(e, i, l)) return !0;
                      } else
                        for (; (e = e[n]); )
                          if (1 === e.nodeType || r)
                            if (
                              ((h =
                                (d = e[y] || (e[y] = {}))[e.uniqueID] ||
                                (d[e.uniqueID] = {})),
                              a && a === e.nodeName.toLowerCase())
                            )
                              e = e[n] || e;
                            else {
                              if ((c = h[s]) && c[0] === k && c[1] === o)
                                return (u[2] = c[2]);
                              if (((h[s] = u), (u[2] = t(e, i, l)))) return !0;
                            }
                      return !1;
                    };
              }
              function wt(t) {
                return t.length > 1
                  ? function (e, i, n) {
                      for (var a = t.length; a--; )
                        if (!t[a](e, i, n)) return !1;
                      return !0;
                    }
                  : t[0];
              }
              function kt(t, e, i, n, a) {
                for (
                  var s, r = [], o = 0, l = t.length, c = null != e;
                  o < l;
                  o++
                )
                  (s = t[o]) &&
                    ((i && !i(s, n, a)) || (r.push(s), c && e.push(o)));
                return r;
              }
              function St(t, e, i, n, a, s) {
                return (
                  n && !n[y] && (n = St(n)),
                  a && !a[y] && (a = St(a, s)),
                  ct(function (s, r, o, l) {
                    var c,
                      h,
                      d,
                      u = [],
                      f = [],
                      p = r.length,
                      g =
                        s ||
                        (function (t, e, i) {
                          for (var n = 0, a = e.length; n < a; n++)
                            ot(t, e[n], i);
                          return i;
                        })(e || "*", o.nodeType ? [o] : o, []),
                      m = !t || (!s && e) ? g : kt(g, u, t, o, l),
                      x = i ? (a || (s ? t : p || n) ? [] : r) : m;
                    if ((i && i(m, x, o, l), n))
                      for (c = kt(x, f), n(c, [], o, l), h = c.length; h--; )
                        (d = c[h]) && (x[f[h]] = !(m[f[h]] = d));
                    if (s) {
                      if (a || t) {
                        if (a) {
                          for (c = [], h = x.length; h--; )
                            (d = x[h]) && c.push((m[h] = d));
                          a(null, (x = []), c, l);
                        }
                        for (h = x.length; h--; )
                          (d = x[h]) &&
                            (c = a ? z(s, d) : u[h]) > -1 &&
                            (s[c] = !(r[c] = d));
                      }
                    } else (x = kt(x === r ? x.splice(p, x.length) : x)), a ? a(null, r, x, l) : N.apply(r, x);
                  })
                );
              }
              function At(t) {
                for (
                  var e,
                    i,
                    a,
                    s = t.length,
                    r = n.relative[t[0].type],
                    o = r || n.relative[" "],
                    l = r ? 1 : 0,
                    h = yt(
                      function (t) {
                        return t === e;
                      },
                      o,
                      !0
                    ),
                    d = yt(
                      function (t) {
                        return z(e, t) > -1;
                      },
                      o,
                      !0
                    ),
                    u = [
                      function (t, i, n) {
                        var a =
                          (!r && (n || i !== c)) ||
                          ((e = i).nodeType ? h(t, i, n) : d(t, i, n));
                        return (e = null), a;
                      },
                    ];
                  l < s;
                  l++
                )
                  if ((i = n.relative[t[l].type])) u = [yt(wt(u), i)];
                  else {
                    if (
                      (i = n.filter[t[l].type].apply(null, t[l].matches))[y]
                    ) {
                      for (a = ++l; a < s && !n.relative[t[a].type]; a++);
                      return St(
                        l > 1 && wt(u),
                        l > 1 &&
                          bt(
                            t.slice(0, l - 1).concat({
                              value: " " === t[l - 2].type ? "*" : "",
                            })
                          ).replace(W, "$1"),
                        i,
                        l < a && At(t.slice(l, a)),
                        a < s && At((t = t.slice(a))),
                        a < s && bt(t)
                      );
                    }
                    u.push(i);
                  }
                return wt(u);
              }
              return (
                (vt.prototype = n.filters = n.pseudos),
                (n.setFilters = new vt()),
                (r = ot.tokenize =
                  function (t, e) {
                    var i,
                      a,
                      s,
                      r,
                      o,
                      l,
                      c,
                      h = C[t + " "];
                    if (h) return e ? 0 : h.slice(0);
                    for (o = t, l = [], c = n.preFilter; o; ) {
                      for (r in ((i && !(a = B.exec(o))) ||
                        (a && (o = o.slice(a[0].length) || o),
                        l.push((s = []))),
                      (i = !1),
                      (a = j.exec(o)) &&
                        ((i = a.shift()),
                        s.push({ value: i, type: a[0].replace(W, " ") }),
                        (o = o.slice(i.length))),
                      n.filter))
                        !(a = U[r].exec(o)) ||
                          (c[r] && !(a = c[r](a))) ||
                          ((i = a.shift()),
                          s.push({ value: i, type: r, matches: a }),
                          (o = o.slice(i.length)));
                      if (!i) break;
                    }
                    return e ? o.length : o ? ot.error(t) : C(t, l).slice(0);
                  }),
                (o = ot.compile =
                  function (t, e) {
                    var i,
                      a = [],
                      s = [],
                      o = E[t + " "];
                    if (!o) {
                      for (e || (e = r(t)), i = e.length; i--; )
                        (o = At(e[i]))[y] ? a.push(o) : s.push(o);
                      (o = E(
                        t,
                        (function (t, e) {
                          var i = e.length > 0,
                            a = t.length > 0,
                            s = function (s, r, o, l, h) {
                              var d,
                                p,
                                m,
                                x = 0,
                                v = "0",
                                b = s && [],
                                y = [],
                                w = c,
                                S = s || (a && n.find.TAG("*", h)),
                                A = (k += null == w ? 1 : Math.random() || 0.1),
                                C = S.length;
                              for (
                                h && (c = r == f || r || h);
                                v !== C && null != (d = S[v]);
                                v++
                              ) {
                                if (a && d) {
                                  for (
                                    p = 0,
                                      r ||
                                        d.ownerDocument == f ||
                                        (u(d), (o = !g));
                                    (m = t[p++]);

                                  )
                                    if (m(d, r || f, o)) {
                                      l.push(d);
                                      break;
                                    }
                                  h && (k = A);
                                }
                                i && ((d = !m && d) && x--, s && b.push(d));
                              }
                              if (((x += v), i && v !== x)) {
                                for (p = 0; (m = e[p++]); ) m(b, y, r, o);
                                if (s) {
                                  if (x > 0)
                                    for (; v--; )
                                      b[v] || y[v] || (y[v] = I.call(l));
                                  y = kt(y);
                                }
                                N.apply(l, y),
                                  h &&
                                    !s &&
                                    y.length > 0 &&
                                    x + e.length > 1 &&
                                    ot.uniqueSort(l);
                              }
                              return h && ((k = A), (c = w)), b;
                            };
                          return i ? ct(s) : s;
                        })(s, a)
                      )),
                        (o.selector = t);
                    }
                    return o;
                  }),
                (l = ot.select =
                  function (t, e, i, a) {
                    var s,
                      l,
                      c,
                      h,
                      d,
                      u = "function" == typeof t && t,
                      f = !a && r((t = u.selector || t));
                    if (((i = i || []), 1 === f.length)) {
                      if (
                        (l = f[0] = f[0].slice(0)).length > 2 &&
                        "ID" === (c = l[0]).type &&
                        9 === e.nodeType &&
                        g &&
                        n.relative[l[1].type]
                      ) {
                        if (
                          !(e = (n.find.ID(c.matches[0].replace(et, it), e) ||
                            [])[0])
                        )
                          return i;
                        u && (e = e.parentNode),
                          (t = t.slice(l.shift().value.length));
                      }
                      for (
                        s = U.needsContext.test(t) ? 0 : l.length;
                        s-- && ((c = l[s]), !n.relative[(h = c.type)]);

                      )
                        if (
                          (d = n.find[h]) &&
                          (a = d(
                            c.matches[0].replace(et, it),
                            (tt.test(l[0].type) && xt(e.parentNode)) || e
                          ))
                        ) {
                          if ((l.splice(s, 1), !(t = a.length && bt(l))))
                            return N.apply(i, a), i;
                          break;
                        }
                    }
                    return (
                      (u || o(t, f))(
                        a,
                        e,
                        !g,
                        i,
                        !e || (tt.test(t) && xt(e.parentNode)) || e
                      ),
                      i
                    );
                  }),
                (i.sortStable = y.split("").sort(L).join("") === y),
                (i.detectDuplicates = !!d),
                u(),
                (i.sortDetached = ht(function (t) {
                  return (
                    1 & t.compareDocumentPosition(f.createElement("fieldset"))
                  );
                })),
                ht(function (t) {
                  return (
                    (t.innerHTML = "<a href='#'></a>"),
                    "#" === t.firstChild.getAttribute("href")
                  );
                }) ||
                  dt("type|href|height|width", function (t, e, i) {
                    if (!i)
                      return t.getAttribute(
                        e,
                        "type" === e.toLowerCase() ? 1 : 2
                      );
                  }),
                (i.attributes &&
                  ht(function (t) {
                    return (
                      (t.innerHTML = "<input/>"),
                      t.firstChild.setAttribute("value", ""),
                      "" === t.firstChild.getAttribute("value")
                    );
                  })) ||
                  dt("value", function (t, e, i) {
                    if (!i && "input" === t.nodeName.toLowerCase())
                      return t.defaultValue;
                  }),
                ht(function (t) {
                  return null == t.getAttribute("disabled");
                }) ||
                  dt(O, function (t, e, i) {
                    var n;
                    if (!i)
                      return !0 === t[e]
                        ? e.toLowerCase()
                        : (n = t.getAttributeNode(e)) && n.specified
                        ? n.value
                        : null;
                  }),
                ot
              );
            })(n);
          (A.find = E),
            (A.expr = E.selectors),
            (A.expr[":"] = A.expr.pseudos),
            (A.uniqueSort = A.unique = E.uniqueSort),
            (A.text = E.getText),
            (A.isXMLDoc = E.isXML),
            (A.contains = E.contains),
            (A.escapeSelector = E.escape);
          var T = function (t, e, i) {
              for (
                var n = [], a = void 0 !== i;
                (t = t[e]) && 9 !== t.nodeType;

              )
                if (1 === t.nodeType) {
                  if (a && A(t).is(i)) break;
                  n.push(t);
                }
              return n;
            },
            L = function (t, e) {
              for (var i = []; t; t = t.nextSibling)
                1 === t.nodeType && t !== e && i.push(t);
              return i;
            },
            _ = A.expr.match.needsContext;
          function P(t, e) {
            return t.nodeName && t.nodeName.toLowerCase() === e.toLowerCase();
          }
          var I =
            /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
          function M(t, e, i) {
            return x(e)
              ? A.grep(t, function (t, n) {
                  return !!e.call(t, n, t) !== i;
                })
              : e.nodeType
              ? A.grep(t, function (t) {
                  return (t === e) !== i;
                })
              : "string" != typeof e
              ? A.grep(t, function (t) {
                  return h.call(e, t) > -1 !== i;
                })
              : A.filter(e, t, i);
          }
          (A.filter = function (t, e, i) {
            var n = e[0];
            return (
              i && (t = ":not(" + t + ")"),
              1 === e.length && 1 === n.nodeType
                ? A.find.matchesSelector(n, t)
                  ? [n]
                  : []
                : A.find.matches(
                    t,
                    A.grep(e, function (t) {
                      return 1 === t.nodeType;
                    })
                  )
            );
          }),
            A.fn.extend({
              find: function (t) {
                var e,
                  i,
                  n = this.length,
                  a = this;
                if ("string" != typeof t)
                  return this.pushStack(
                    A(t).filter(function () {
                      for (e = 0; e < n; e++)
                        if (A.contains(a[e], this)) return !0;
                    })
                  );
                for (i = this.pushStack([]), e = 0; e < n; e++)
                  A.find(t, a[e], i);
                return n > 1 ? A.uniqueSort(i) : i;
              },
              filter: function (t) {
                return this.pushStack(M(this, t || [], !1));
              },
              not: function (t) {
                return this.pushStack(M(this, t || [], !0));
              },
              is: function (t) {
                return !!M(
                  this,
                  "string" == typeof t && _.test(t) ? A(t) : t || [],
                  !1
                ).length;
              },
            });
          var N,
            D = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;
          ((A.fn.init = function (t, e, i) {
            var n, a;
            if (!t) return this;
            if (((i = i || N), "string" == typeof t)) {
              if (
                !(n =
                  "<" === t[0] && ">" === t[t.length - 1] && t.length >= 3
                    ? [null, t, null]
                    : D.exec(t)) ||
                (!n[1] && e)
              )
                return !e || e.jquery
                  ? (e || i).find(t)
                  : this.constructor(e).find(t);
              if (n[1]) {
                if (
                  ((e = e instanceof A ? e[0] : e),
                  A.merge(
                    this,
                    A.parseHTML(
                      n[1],
                      e && e.nodeType ? e.ownerDocument || e : b,
                      !0
                    )
                  ),
                  I.test(n[1]) && A.isPlainObject(e))
                )
                  for (n in e) x(this[n]) ? this[n](e[n]) : this.attr(n, e[n]);
                return this;
              }
              return (
                (a = b.getElementById(n[2])) &&
                  ((this[0] = a), (this.length = 1)),
                this
              );
            }
            return t.nodeType
              ? ((this[0] = t), (this.length = 1), this)
              : x(t)
              ? void 0 !== i.ready
                ? i.ready(t)
                : t(A)
              : A.makeArray(t, this);
          }).prototype = A.fn),
            (N = A(b));
          var z = /^(?:parents|prev(?:Until|All))/,
            O = { children: !0, contents: !0, next: !0, prev: !0 };
          function F(t, e) {
            for (; (t = t[e]) && 1 !== t.nodeType; );
            return t;
          }
          A.fn.extend({
            has: function (t) {
              var e = A(t, this),
                i = e.length;
              return this.filter(function () {
                for (var t = 0; t < i; t++)
                  if (A.contains(this, e[t])) return !0;
              });
            },
            closest: function (t, e) {
              var i,
                n = 0,
                a = this.length,
                s = [],
                r = "string" != typeof t && A(t);
              if (!_.test(t))
                for (; n < a; n++)
                  for (i = this[n]; i && i !== e; i = i.parentNode)
                    if (
                      i.nodeType < 11 &&
                      (r
                        ? r.index(i) > -1
                        : 1 === i.nodeType && A.find.matchesSelector(i, t))
                    ) {
                      s.push(i);
                      break;
                    }
              return this.pushStack(s.length > 1 ? A.uniqueSort(s) : s);
            },
            index: function (t) {
              return t
                ? "string" == typeof t
                  ? h.call(A(t), this[0])
                  : h.call(this, t.jquery ? t[0] : t)
                : this[0] && this[0].parentNode
                ? this.first().prevAll().length
                : -1;
            },
            add: function (t, e) {
              return this.pushStack(A.uniqueSort(A.merge(this.get(), A(t, e))));
            },
            addBack: function (t) {
              return this.add(
                null == t ? this.prevObject : this.prevObject.filter(t)
              );
            },
          }),
            A.each(
              {
                parent: function (t) {
                  var e = t.parentNode;
                  return e && 11 !== e.nodeType ? e : null;
                },
                parents: function (t) {
                  return T(t, "parentNode");
                },
                parentsUntil: function (t, e, i) {
                  return T(t, "parentNode", i);
                },
                next: function (t) {
                  return F(t, "nextSibling");
                },
                prev: function (t) {
                  return F(t, "previousSibling");
                },
                nextAll: function (t) {
                  return T(t, "nextSibling");
                },
                prevAll: function (t) {
                  return T(t, "previousSibling");
                },
                nextUntil: function (t, e, i) {
                  return T(t, "nextSibling", i);
                },
                prevUntil: function (t, e, i) {
                  return T(t, "previousSibling", i);
                },
                siblings: function (t) {
                  return L((t.parentNode || {}).firstChild, t);
                },
                children: function (t) {
                  return L(t.firstChild);
                },
                contents: function (t) {
                  return null != t.contentDocument && r(t.contentDocument)
                    ? t.contentDocument
                    : (P(t, "template") && (t = t.content || t),
                      A.merge([], t.childNodes));
                },
              },
              function (t, e) {
                A.fn[t] = function (i, n) {
                  var a = A.map(this, e, i);
                  return (
                    "Until" !== t.slice(-5) && (n = i),
                    n && "string" == typeof n && (a = A.filter(n, a)),
                    this.length > 1 &&
                      (O[t] || A.uniqueSort(a), z.test(t) && a.reverse()),
                    this.pushStack(a)
                  );
                };
              }
            );
          var X = /[^\x20\t\r\n\f]+/g;
          function R(t) {
            return t;
          }
          function H(t) {
            throw t;
          }
          function Y(t, e, i, n) {
            var a;
            try {
              t && x((a = t.promise))
                ? a.call(t).done(e).fail(i)
                : t && x((a = t.then))
                ? a.call(t, e, i)
                : e.apply(void 0, [t].slice(n));
            } catch (t) {
              i.apply(void 0, [t]);
            }
          }
          (A.Callbacks = function (t) {
            t =
              "string" == typeof t
                ? (function (t) {
                    var e = {};
                    return (
                      A.each(t.match(X) || [], function (t, i) {
                        e[i] = !0;
                      }),
                      e
                    );
                  })(t)
                : A.extend({}, t);
            var e,
              i,
              n,
              a,
              s = [],
              r = [],
              o = -1,
              l = function () {
                for (a = a || t.once, n = e = !0; r.length; o = -1)
                  for (i = r.shift(); ++o < s.length; )
                    !1 === s[o].apply(i[0], i[1]) &&
                      t.stopOnFalse &&
                      ((o = s.length), (i = !1));
                t.memory || (i = !1), (e = !1), a && (s = i ? [] : "");
              },
              c = {
                add: function () {
                  return (
                    s &&
                      (i && !e && ((o = s.length - 1), r.push(i)),
                      (function e(i) {
                        A.each(i, function (i, n) {
                          x(n)
                            ? (t.unique && c.has(n)) || s.push(n)
                            : n && n.length && "string" !== k(n) && e(n);
                        });
                      })(arguments),
                      i && !e && l()),
                    this
                  );
                },
                remove: function () {
                  return (
                    A.each(arguments, function (t, e) {
                      for (var i; (i = A.inArray(e, s, i)) > -1; )
                        s.splice(i, 1), i <= o && o--;
                    }),
                    this
                  );
                },
                has: function (t) {
                  return t ? A.inArray(t, s) > -1 : s.length > 0;
                },
                empty: function () {
                  return s && (s = []), this;
                },
                disable: function () {
                  return (a = r = []), (s = i = ""), this;
                },
                disabled: function () {
                  return !s;
                },
                lock: function () {
                  return (a = r = []), i || e || (s = i = ""), this;
                },
                locked: function () {
                  return !!a;
                },
                fireWith: function (t, i) {
                  return (
                    a ||
                      ((i = [t, (i = i || []).slice ? i.slice() : i]),
                      r.push(i),
                      e || l()),
                    this
                  );
                },
                fire: function () {
                  return c.fireWith(this, arguments), this;
                },
                fired: function () {
                  return !!n;
                },
              };
            return c;
          }),
            A.extend({
              Deferred: function (t) {
                var e = [
                    [
                      "notify",
                      "progress",
                      A.Callbacks("memory"),
                      A.Callbacks("memory"),
                      2,
                    ],
                    [
                      "resolve",
                      "done",
                      A.Callbacks("once memory"),
                      A.Callbacks("once memory"),
                      0,
                      "resolved",
                    ],
                    [
                      "reject",
                      "fail",
                      A.Callbacks("once memory"),
                      A.Callbacks("once memory"),
                      1,
                      "rejected",
                    ],
                  ],
                  i = "pending",
                  a = {
                    state: function () {
                      return i;
                    },
                    always: function () {
                      return s.done(arguments).fail(arguments), this;
                    },
                    catch: function (t) {
                      return a.then(null, t);
                    },
                    pipe: function () {
                      var t = arguments;
                      return A.Deferred(function (i) {
                        A.each(e, function (e, n) {
                          var a = x(t[n[4]]) && t[n[4]];
                          s[n[1]](function () {
                            var t = a && a.apply(this, arguments);
                            t && x(t.promise)
                              ? t
                                  .promise()
                                  .progress(i.notify)
                                  .done(i.resolve)
                                  .fail(i.reject)
                              : i[n[0] + "With"](this, a ? [t] : arguments);
                          });
                        }),
                          (t = null);
                      }).promise();
                    },
                    then: function (t, i, a) {
                      var s = 0;
                      function r(t, e, i, a) {
                        return function () {
                          var o = this,
                            l = arguments,
                            c = function () {
                              var n, c;
                              if (!(t < s)) {
                                if ((n = i.apply(o, l)) === e.promise())
                                  throw new TypeError(
                                    "Thenable self-resolution"
                                  );
                                (c =
                                  n &&
                                  ("object" == typeof n ||
                                    "function" == typeof n) &&
                                  n.then),
                                  x(c)
                                    ? a
                                      ? c.call(n, r(s, e, R, a), r(s, e, H, a))
                                      : (s++,
                                        c.call(
                                          n,
                                          r(s, e, R, a),
                                          r(s, e, H, a),
                                          r(s, e, R, e.notifyWith)
                                        ))
                                    : (i !== R && ((o = void 0), (l = [n])),
                                      (a || e.resolveWith)(o, l));
                              }
                            },
                            h = a
                              ? c
                              : function () {
                                  try {
                                    c();
                                  } catch (n) {
                                    A.Deferred.exceptionHook &&
                                      A.Deferred.exceptionHook(n, h.stackTrace),
                                      t + 1 >= s &&
                                        (i !== H && ((o = void 0), (l = [n])),
                                        e.rejectWith(o, l));
                                  }
                                };
                          t
                            ? h()
                            : (A.Deferred.getStackHook &&
                                (h.stackTrace = A.Deferred.getStackHook()),
                              n.setTimeout(h));
                        };
                      }
                      return A.Deferred(function (n) {
                        e[0][3].add(r(0, n, x(a) ? a : R, n.notifyWith)),
                          e[1][3].add(r(0, n, x(t) ? t : R)),
                          e[2][3].add(r(0, n, x(i) ? i : H));
                      }).promise();
                    },
                    promise: function (t) {
                      return null != t ? A.extend(t, a) : a;
                    },
                  },
                  s = {};
                return (
                  A.each(e, function (t, n) {
                    var r = n[2],
                      o = n[5];
                    (a[n[1]] = r.add),
                      o &&
                        r.add(
                          function () {
                            i = o;
                          },
                          e[3 - t][2].disable,
                          e[3 - t][3].disable,
                          e[0][2].lock,
                          e[0][3].lock
                        ),
                      r.add(n[3].fire),
                      (s[n[0]] = function () {
                        return (
                          s[n[0] + "With"](
                            this === s ? void 0 : this,
                            arguments
                          ),
                          this
                        );
                      }),
                      (s[n[0] + "With"] = r.fireWith);
                  }),
                  a.promise(s),
                  t && t.call(s, s),
                  s
                );
              },
              when: function (t) {
                var e = arguments.length,
                  i = e,
                  n = Array(i),
                  a = o.call(arguments),
                  s = A.Deferred(),
                  r = function (t) {
                    return function (i) {
                      (n[t] = this),
                        (a[t] = arguments.length > 1 ? o.call(arguments) : i),
                        --e || s.resolveWith(n, a);
                    };
                  };
                if (
                  e <= 1 &&
                  (Y(t, s.done(r(i)).resolve, s.reject, !e),
                  "pending" === s.state() || x(a[i] && a[i].then))
                )
                  return s.then();
                for (; i--; ) Y(a[i], r(i), s.reject);
                return s.promise();
              },
            });
          var W = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
          (A.Deferred.exceptionHook = function (t, e) {
            n.console &&
              n.console.warn &&
              t &&
              W.test(t.name) &&
              n.console.warn(
                "jQuery.Deferred exception: " + t.message,
                t.stack,
                e
              );
          }),
            (A.readyException = function (t) {
              n.setTimeout(function () {
                throw t;
              });
            });
          var B = A.Deferred();
          function j() {
            b.removeEventListener("DOMContentLoaded", j),
              n.removeEventListener("load", j),
              A.ready();
          }
          (A.fn.ready = function (t) {
            return (
              B.then(t).catch(function (t) {
                A.readyException(t);
              }),
              this
            );
          }),
            A.extend({
              isReady: !1,
              readyWait: 1,
              ready: function (t) {
                (!0 === t ? --A.readyWait : A.isReady) ||
                  ((A.isReady = !0),
                  (!0 !== t && --A.readyWait > 0) || B.resolveWith(b, [A]));
              },
            }),
            (A.ready.then = B.then),
            "complete" === b.readyState ||
            ("loading" !== b.readyState && !b.documentElement.doScroll)
              ? n.setTimeout(A.ready)
              : (b.addEventListener("DOMContentLoaded", j),
                n.addEventListener("load", j));
          var V = function (t, e, i, n, a, s, r) {
              var o = 0,
                l = t.length,
                c = null == i;
              if ("object" === k(i))
                for (o in ((a = !0), i)) V(t, e, o, i[o], !0, s, r);
              else if (
                void 0 !== n &&
                ((a = !0),
                x(n) || (r = !0),
                c &&
                  (r
                    ? (e.call(t, n), (e = null))
                    : ((c = e),
                      (e = function (t, e, i) {
                        return c.call(A(t), i);
                      }))),
                e)
              )
                for (; o < l; o++)
                  e(t[o], i, r ? n : n.call(t[o], o, e(t[o], i)));
              return a ? t : c ? e.call(t) : l ? e(t[0], i) : s;
            },
            G = /^-ms-/,
            q = /-([a-z])/g;
          function U(t, e) {
            return e.toUpperCase();
          }
          function $(t) {
            return t.replace(G, "ms-").replace(q, U);
          }
          var Z = function (t) {
            return 1 === t.nodeType || 9 === t.nodeType || !+t.nodeType;
          };
          function Q() {
            this.expando = A.expando + Q.uid++;
          }
          (Q.uid = 1),
            (Q.prototype = {
              cache: function (t) {
                var e = t[this.expando];
                return (
                  e ||
                    ((e = {}),
                    Z(t) &&
                      (t.nodeType
                        ? (t[this.expando] = e)
                        : Object.defineProperty(t, this.expando, {
                            value: e,
                            configurable: !0,
                          }))),
                  e
                );
              },
              set: function (t, e, i) {
                var n,
                  a = this.cache(t);
                if ("string" == typeof e) a[$(e)] = i;
                else for (n in e) a[$(n)] = e[n];
                return a;
              },
              get: function (t, e) {
                return void 0 === e
                  ? this.cache(t)
                  : t[this.expando] && t[this.expando][$(e)];
              },
              access: function (t, e, i) {
                return void 0 === e ||
                  (e && "string" == typeof e && void 0 === i)
                  ? this.get(t, e)
                  : (this.set(t, e, i), void 0 !== i ? i : e);
              },
              remove: function (t, e) {
                var i,
                  n = t[this.expando];
                if (void 0 !== n) {
                  if (void 0 !== e) {
                    i = (e = Array.isArray(e)
                      ? e.map($)
                      : (e = $(e)) in n
                      ? [e]
                      : e.match(X) || []).length;
                    for (; i--; ) delete n[e[i]];
                  }
                  (void 0 === e || A.isEmptyObject(n)) &&
                    (t.nodeType
                      ? (t[this.expando] = void 0)
                      : delete t[this.expando]);
                }
              },
              hasData: function (t) {
                var e = t[this.expando];
                return void 0 !== e && !A.isEmptyObject(e);
              },
            });
          var K = new Q(),
            J = new Q(),
            tt = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
            et = /[A-Z]/g;
          function it(t, e, i) {
            var n;
            if (void 0 === i && 1 === t.nodeType)
              if (
                ((n = "data-" + e.replace(et, "-$&").toLowerCase()),
                "string" == typeof (i = t.getAttribute(n)))
              ) {
                try {
                  i = (function (t) {
                    return (
                      "true" === t ||
                      ("false" !== t &&
                        ("null" === t
                          ? null
                          : t === +t + ""
                          ? +t
                          : tt.test(t)
                          ? JSON.parse(t)
                          : t))
                    );
                  })(i);
                } catch (t) {}
                J.set(t, e, i);
              } else i = void 0;
            return i;
          }
          A.extend({
            hasData: function (t) {
              return J.hasData(t) || K.hasData(t);
            },
            data: function (t, e, i) {
              return J.access(t, e, i);
            },
            removeData: function (t, e) {
              J.remove(t, e);
            },
            _data: function (t, e, i) {
              return K.access(t, e, i);
            },
            _removeData: function (t, e) {
              K.remove(t, e);
            },
          }),
            A.fn.extend({
              data: function (t, e) {
                var i,
                  n,
                  a,
                  s = this[0],
                  r = s && s.attributes;
                if (void 0 === t) {
                  if (
                    this.length &&
                    ((a = J.get(s)),
                    1 === s.nodeType && !K.get(s, "hasDataAttrs"))
                  ) {
                    for (i = r.length; i--; )
                      r[i] &&
                        0 === (n = r[i].name).indexOf("data-") &&
                        ((n = $(n.slice(5))), it(s, n, a[n]));
                    K.set(s, "hasDataAttrs", !0);
                  }
                  return a;
                }
                return "object" == typeof t
                  ? this.each(function () {
                      J.set(this, t);
                    })
                  : V(
                      this,
                      function (e) {
                        var i;
                        if (s && void 0 === e)
                          return void 0 !== (i = J.get(s, t)) ||
                            void 0 !== (i = it(s, t))
                            ? i
                            : void 0;
                        this.each(function () {
                          J.set(this, t, e);
                        });
                      },
                      null,
                      e,
                      arguments.length > 1,
                      null,
                      !0
                    );
              },
              removeData: function (t) {
                return this.each(function () {
                  J.remove(this, t);
                });
              },
            }),
            A.extend({
              queue: function (t, e, i) {
                var n;
                if (t)
                  return (
                    (e = (e || "fx") + "queue"),
                    (n = K.get(t, e)),
                    i &&
                      (!n || Array.isArray(i)
                        ? (n = K.access(t, e, A.makeArray(i)))
                        : n.push(i)),
                    n || []
                  );
              },
              dequeue: function (t, e) {
                e = e || "fx";
                var i = A.queue(t, e),
                  n = i.length,
                  a = i.shift(),
                  s = A._queueHooks(t, e);
                "inprogress" === a && ((a = i.shift()), n--),
                  a &&
                    ("fx" === e && i.unshift("inprogress"),
                    delete s.stop,
                    a.call(
                      t,
                      function () {
                        A.dequeue(t, e);
                      },
                      s
                    )),
                  !n && s && s.empty.fire();
              },
              _queueHooks: function (t, e) {
                var i = e + "queueHooks";
                return (
                  K.get(t, i) ||
                  K.access(t, i, {
                    empty: A.Callbacks("once memory").add(function () {
                      K.remove(t, [e + "queue", i]);
                    }),
                  })
                );
              },
            }),
            A.fn.extend({
              queue: function (t, e) {
                var i = 2;
                return (
                  "string" != typeof t && ((e = t), (t = "fx"), i--),
                  arguments.length < i
                    ? A.queue(this[0], t)
                    : void 0 === e
                    ? this
                    : this.each(function () {
                        var i = A.queue(this, t, e);
                        A._queueHooks(this, t),
                          "fx" === t &&
                            "inprogress" !== i[0] &&
                            A.dequeue(this, t);
                      })
                );
              },
              dequeue: function (t) {
                return this.each(function () {
                  A.dequeue(this, t);
                });
              },
              clearQueue: function (t) {
                return this.queue(t || "fx", []);
              },
              promise: function (t, e) {
                var i,
                  n = 1,
                  a = A.Deferred(),
                  s = this,
                  r = this.length,
                  o = function () {
                    --n || a.resolveWith(s, [s]);
                  };
                for (
                  "string" != typeof t && ((e = t), (t = void 0)),
                    t = t || "fx";
                  r--;

                )
                  (i = K.get(s[r], t + "queueHooks")) &&
                    i.empty &&
                    (n++, i.empty.add(o));
                return o(), a.promise(e);
              },
            });
          var nt = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
            at = new RegExp("^(?:([+-])=|)(" + nt + ")([a-z%]*)$", "i"),
            st = ["Top", "Right", "Bottom", "Left"],
            rt = b.documentElement,
            ot = function (t) {
              return A.contains(t.ownerDocument, t);
            },
            lt = { composed: !0 };
          rt.getRootNode &&
            (ot = function (t) {
              return (
                A.contains(t.ownerDocument, t) ||
                t.getRootNode(lt) === t.ownerDocument
              );
            });
          var ct = function (t, e) {
            return (
              "none" === (t = e || t).style.display ||
              ("" === t.style.display &&
                ot(t) &&
                "none" === A.css(t, "display"))
            );
          };
          function ht(t, e, i, n) {
            var a,
              s,
              r = 20,
              o = n
                ? function () {
                    return n.cur();
                  }
                : function () {
                    return A.css(t, e, "");
                  },
              l = o(),
              c = (i && i[3]) || (A.cssNumber[e] ? "" : "px"),
              h =
                t.nodeType &&
                (A.cssNumber[e] || ("px" !== c && +l)) &&
                at.exec(A.css(t, e));
            if (h && h[3] !== c) {
              for (l /= 2, c = c || h[3], h = +l || 1; r--; )
                A.style(t, e, h + c),
                  (1 - s) * (1 - (s = o() / l || 0.5)) <= 0 && (r = 0),
                  (h /= s);
              (h *= 2), A.style(t, e, h + c), (i = i || []);
            }
            return (
              i &&
                ((h = +h || +l || 0),
                (a = i[1] ? h + (i[1] + 1) * i[2] : +i[2]),
                n && ((n.unit = c), (n.start = h), (n.end = a))),
              a
            );
          }
          var dt = {};
          function ut(t) {
            var e,
              i = t.ownerDocument,
              n = t.nodeName,
              a = dt[n];
            return (
              a ||
              ((e = i.body.appendChild(i.createElement(n))),
              (a = A.css(e, "display")),
              e.parentNode.removeChild(e),
              "none" === a && (a = "block"),
              (dt[n] = a),
              a)
            );
          }
          function ft(t, e) {
            for (var i, n, a = [], s = 0, r = t.length; s < r; s++)
              (n = t[s]).style &&
                ((i = n.style.display),
                e
                  ? ("none" === i &&
                      ((a[s] = K.get(n, "display") || null),
                      a[s] || (n.style.display = "")),
                    "" === n.style.display && ct(n) && (a[s] = ut(n)))
                  : "none" !== i && ((a[s] = "none"), K.set(n, "display", i)));
            for (s = 0; s < r; s++) null != a[s] && (t[s].style.display = a[s]);
            return t;
          }
          A.fn.extend({
            show: function () {
              return ft(this, !0);
            },
            hide: function () {
              return ft(this);
            },
            toggle: function (t) {
              return "boolean" == typeof t
                ? t
                  ? this.show()
                  : this.hide()
                : this.each(function () {
                    ct(this) ? A(this).show() : A(this).hide();
                  });
            },
          });
          var pt,
            gt,
            mt = /^(?:checkbox|radio)$/i,
            xt = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i,
            vt = /^$|^module$|\/(?:java|ecma)script/i;
          (pt = b.createDocumentFragment().appendChild(b.createElement("div"))),
            (gt = b.createElement("input")).setAttribute("type", "radio"),
            gt.setAttribute("checked", "checked"),
            gt.setAttribute("name", "t"),
            pt.appendChild(gt),
            (m.checkClone = pt.cloneNode(!0).cloneNode(!0).lastChild.checked),
            (pt.innerHTML = "<textarea>x</textarea>"),
            (m.noCloneChecked = !!pt.cloneNode(!0).lastChild.defaultValue),
            (pt.innerHTML = "<option></option>"),
            (m.option = !!pt.lastChild);
          var bt = {
            thead: [1, "<table>", "</table>"],
            col: [2, "<table><colgroup>", "</colgroup></table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
            _default: [0, "", ""],
          };
          function yt(t, e) {
            var i;
            return (
              (i =
                void 0 !== t.getElementsByTagName
                  ? t.getElementsByTagName(e || "*")
                  : void 0 !== t.querySelectorAll
                  ? t.querySelectorAll(e || "*")
                  : []),
              void 0 === e || (e && P(t, e)) ? A.merge([t], i) : i
            );
          }
          function wt(t, e) {
            for (var i = 0, n = t.length; i < n; i++)
              K.set(t[i], "globalEval", !e || K.get(e[i], "globalEval"));
          }
          (bt.tbody = bt.tfoot = bt.colgroup = bt.caption = bt.thead),
            (bt.th = bt.td),
            m.option ||
              (bt.optgroup = bt.option =
                [1, "<select multiple='multiple'>", "</select>"]);
          var kt = /<|&#?\w+;/;
          function St(t, e, i, n, a) {
            for (
              var s,
                r,
                o,
                l,
                c,
                h,
                d = e.createDocumentFragment(),
                u = [],
                f = 0,
                p = t.length;
              f < p;
              f++
            )
              if ((s = t[f]) || 0 === s)
                if ("object" === k(s)) A.merge(u, s.nodeType ? [s] : s);
                else if (kt.test(s)) {
                  for (
                    r = r || d.appendChild(e.createElement("div")),
                      o = (xt.exec(s) || ["", ""])[1].toLowerCase(),
                      l = bt[o] || bt._default,
                      r.innerHTML = l[1] + A.htmlPrefilter(s) + l[2],
                      h = l[0];
                    h--;

                  )
                    r = r.lastChild;
                  A.merge(u, r.childNodes),
                    ((r = d.firstChild).textContent = "");
                } else u.push(e.createTextNode(s));
            for (d.textContent = "", f = 0; (s = u[f++]); )
              if (n && A.inArray(s, n) > -1) a && a.push(s);
              else if (
                ((c = ot(s)),
                (r = yt(d.appendChild(s), "script")),
                c && wt(r),
                i)
              )
                for (h = 0; (s = r[h++]); ) vt.test(s.type || "") && i.push(s);
            return d;
          }
          var At = /^([^.]*)(?:\.(.+)|)/;
          function Ct() {
            return !0;
          }
          function Et() {
            return !1;
          }
          function Tt(t, e) {
            return (
              (t ===
                (function () {
                  try {
                    return b.activeElement;
                  } catch (t) {}
                })()) ==
              ("focus" === e)
            );
          }
          function Lt(t, e, i, n, a, s) {
            var r, o;
            if ("object" == typeof e) {
              for (o in ("string" != typeof i && ((n = n || i), (i = void 0)),
              e))
                Lt(t, o, i, n, e[o], s);
              return t;
            }
            if (
              (null == n && null == a
                ? ((a = i), (n = i = void 0))
                : null == a &&
                  ("string" == typeof i
                    ? ((a = n), (n = void 0))
                    : ((a = n), (n = i), (i = void 0))),
              !1 === a)
            )
              a = Et;
            else if (!a) return t;
            return (
              1 === s &&
                ((r = a),
                (a = function (t) {
                  return A().off(t), r.apply(this, arguments);
                }),
                (a.guid = r.guid || (r.guid = A.guid++))),
              t.each(function () {
                A.event.add(this, e, a, n, i);
              })
            );
          }
          function _t(t, e, i) {
            i
              ? (K.set(t, e, !1),
                A.event.add(t, e, {
                  namespace: !1,
                  handler: function (t) {
                    var n,
                      a,
                      s = K.get(this, e);
                    if (1 & t.isTrigger && this[e]) {
                      if (s.length)
                        (A.event.special[e] || {}).delegateType &&
                          t.stopPropagation();
                      else if (
                        ((s = o.call(arguments)),
                        K.set(this, e, s),
                        (n = i(this, e)),
                        this[e](),
                        s !== (a = K.get(this, e)) || n
                          ? K.set(this, e, !1)
                          : (a = {}),
                        s !== a)
                      )
                        return (
                          t.stopImmediatePropagation(),
                          t.preventDefault(),
                          a && a.value
                        );
                    } else
                      s.length &&
                        (K.set(this, e, {
                          value: A.event.trigger(
                            A.extend(s[0], A.Event.prototype),
                            s.slice(1),
                            this
                          ),
                        }),
                        t.stopImmediatePropagation());
                  },
                }))
              : void 0 === K.get(t, e) && A.event.add(t, e, Ct);
          }
          (A.event = {
            global: {},
            add: function (t, e, i, n, a) {
              var s,
                r,
                o,
                l,
                c,
                h,
                d,
                u,
                f,
                p,
                g,
                m = K.get(t);
              if (Z(t))
                for (
                  i.handler && ((i = (s = i).handler), (a = s.selector)),
                    a && A.find.matchesSelector(rt, a),
                    i.guid || (i.guid = A.guid++),
                    (l = m.events) || (l = m.events = Object.create(null)),
                    (r = m.handle) ||
                      (r = m.handle =
                        function (e) {
                          return void 0 !== A && A.event.triggered !== e.type
                            ? A.event.dispatch.apply(t, arguments)
                            : void 0;
                        }),
                    c = (e = (e || "").match(X) || [""]).length;
                  c--;

                )
                  (f = g = (o = At.exec(e[c]) || [])[1]),
                    (p = (o[2] || "").split(".").sort()),
                    f &&
                      ((d = A.event.special[f] || {}),
                      (f = (a ? d.delegateType : d.bindType) || f),
                      (d = A.event.special[f] || {}),
                      (h = A.extend(
                        {
                          type: f,
                          origType: g,
                          data: n,
                          handler: i,
                          guid: i.guid,
                          selector: a,
                          needsContext: a && A.expr.match.needsContext.test(a),
                          namespace: p.join("."),
                        },
                        s
                      )),
                      (u = l[f]) ||
                        (((u = l[f] = []).delegateCount = 0),
                        (d.setup && !1 !== d.setup.call(t, n, p, r)) ||
                          (t.addEventListener && t.addEventListener(f, r))),
                      d.add &&
                        (d.add.call(t, h),
                        h.handler.guid || (h.handler.guid = i.guid)),
                      a ? u.splice(u.delegateCount++, 0, h) : u.push(h),
                      (A.event.global[f] = !0));
            },
            remove: function (t, e, i, n, a) {
              var s,
                r,
                o,
                l,
                c,
                h,
                d,
                u,
                f,
                p,
                g,
                m = K.hasData(t) && K.get(t);
              if (m && (l = m.events)) {
                for (c = (e = (e || "").match(X) || [""]).length; c--; )
                  if (
                    ((f = g = (o = At.exec(e[c]) || [])[1]),
                    (p = (o[2] || "").split(".").sort()),
                    f)
                  ) {
                    for (
                      d = A.event.special[f] || {},
                        u =
                          l[(f = (n ? d.delegateType : d.bindType) || f)] || [],
                        o =
                          o[2] &&
                          new RegExp(
                            "(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)"
                          ),
                        r = s = u.length;
                      s--;

                    )
                      (h = u[s]),
                        (!a && g !== h.origType) ||
                          (i && i.guid !== h.guid) ||
                          (o && !o.test(h.namespace)) ||
                          (n &&
                            n !== h.selector &&
                            ("**" !== n || !h.selector)) ||
                          (u.splice(s, 1),
                          h.selector && u.delegateCount--,
                          d.remove && d.remove.call(t, h));
                    r &&
                      !u.length &&
                      ((d.teardown && !1 !== d.teardown.call(t, p, m.handle)) ||
                        A.removeEvent(t, f, m.handle),
                      delete l[f]);
                  } else for (f in l) A.event.remove(t, f + e[c], i, n, !0);
                A.isEmptyObject(l) && K.remove(t, "handle events");
              }
            },
            dispatch: function (t) {
              var e,
                i,
                n,
                a,
                s,
                r,
                o = new Array(arguments.length),
                l = A.event.fix(t),
                c =
                  (K.get(this, "events") || Object.create(null))[l.type] || [],
                h = A.event.special[l.type] || {};
              for (o[0] = l, e = 1; e < arguments.length; e++)
                o[e] = arguments[e];
              if (
                ((l.delegateTarget = this),
                !h.preDispatch || !1 !== h.preDispatch.call(this, l))
              ) {
                for (
                  r = A.event.handlers.call(this, l, c), e = 0;
                  (a = r[e++]) && !l.isPropagationStopped();

                )
                  for (
                    l.currentTarget = a.elem, i = 0;
                    (s = a.handlers[i++]) && !l.isImmediatePropagationStopped();

                  )
                    (l.rnamespace &&
                      !1 !== s.namespace &&
                      !l.rnamespace.test(s.namespace)) ||
                      ((l.handleObj = s),
                      (l.data = s.data),
                      void 0 !==
                        (n = (
                          (A.event.special[s.origType] || {}).handle ||
                          s.handler
                        ).apply(a.elem, o)) &&
                        !1 === (l.result = n) &&
                        (l.preventDefault(), l.stopPropagation()));
                return h.postDispatch && h.postDispatch.call(this, l), l.result;
              }
            },
            handlers: function (t, e) {
              var i,
                n,
                a,
                s,
                r,
                o = [],
                l = e.delegateCount,
                c = t.target;
              if (l && c.nodeType && !("click" === t.type && t.button >= 1))
                for (; c !== this; c = c.parentNode || this)
                  if (
                    1 === c.nodeType &&
                    ("click" !== t.type || !0 !== c.disabled)
                  ) {
                    for (s = [], r = {}, i = 0; i < l; i++)
                      void 0 === r[(a = (n = e[i]).selector + " ")] &&
                        (r[a] = n.needsContext
                          ? A(a, this).index(c) > -1
                          : A.find(a, this, null, [c]).length),
                        r[a] && s.push(n);
                    s.length && o.push({ elem: c, handlers: s });
                  }
              return (
                (c = this),
                l < e.length && o.push({ elem: c, handlers: e.slice(l) }),
                o
              );
            },
            addProp: function (t, e) {
              Object.defineProperty(A.Event.prototype, t, {
                enumerable: !0,
                configurable: !0,
                get: x(e)
                  ? function () {
                      if (this.originalEvent) return e(this.originalEvent);
                    }
                  : function () {
                      if (this.originalEvent) return this.originalEvent[t];
                    },
                set: function (e) {
                  Object.defineProperty(this, t, {
                    enumerable: !0,
                    configurable: !0,
                    writable: !0,
                    value: e,
                  });
                },
              });
            },
            fix: function (t) {
              return t[A.expando] ? t : new A.Event(t);
            },
            special: {
              load: { noBubble: !0 },
              click: {
                setup: function (t) {
                  var e = this || t;
                  return (
                    mt.test(e.type) &&
                      e.click &&
                      P(e, "input") &&
                      _t(e, "click", Ct),
                    !1
                  );
                },
                trigger: function (t) {
                  var e = this || t;
                  return (
                    mt.test(e.type) &&
                      e.click &&
                      P(e, "input") &&
                      _t(e, "click"),
                    !0
                  );
                },
                _default: function (t) {
                  var e = t.target;
                  return (
                    (mt.test(e.type) &&
                      e.click &&
                      P(e, "input") &&
                      K.get(e, "click")) ||
                    P(e, "a")
                  );
                },
              },
              beforeunload: {
                postDispatch: function (t) {
                  void 0 !== t.result &&
                    t.originalEvent &&
                    (t.originalEvent.returnValue = t.result);
                },
              },
            },
          }),
            (A.removeEvent = function (t, e, i) {
              t.removeEventListener && t.removeEventListener(e, i);
            }),
            (A.Event = function (t, e) {
              if (!(this instanceof A.Event)) return new A.Event(t, e);
              t && t.type
                ? ((this.originalEvent = t),
                  (this.type = t.type),
                  (this.isDefaultPrevented =
                    t.defaultPrevented ||
                    (void 0 === t.defaultPrevented && !1 === t.returnValue)
                      ? Ct
                      : Et),
                  (this.target =
                    t.target && 3 === t.target.nodeType
                      ? t.target.parentNode
                      : t.target),
                  (this.currentTarget = t.currentTarget),
                  (this.relatedTarget = t.relatedTarget))
                : (this.type = t),
                e && A.extend(this, e),
                (this.timeStamp = (t && t.timeStamp) || Date.now()),
                (this[A.expando] = !0);
            }),
            (A.Event.prototype = {
              constructor: A.Event,
              isDefaultPrevented: Et,
              isPropagationStopped: Et,
              isImmediatePropagationStopped: Et,
              isSimulated: !1,
              preventDefault: function () {
                var t = this.originalEvent;
                (this.isDefaultPrevented = Ct),
                  t && !this.isSimulated && t.preventDefault();
              },
              stopPropagation: function () {
                var t = this.originalEvent;
                (this.isPropagationStopped = Ct),
                  t && !this.isSimulated && t.stopPropagation();
              },
              stopImmediatePropagation: function () {
                var t = this.originalEvent;
                (this.isImmediatePropagationStopped = Ct),
                  t && !this.isSimulated && t.stopImmediatePropagation(),
                  this.stopPropagation();
              },
            }),
            A.each(
              {
                altKey: !0,
                bubbles: !0,
                cancelable: !0,
                changedTouches: !0,
                ctrlKey: !0,
                detail: !0,
                eventPhase: !0,
                metaKey: !0,
                pageX: !0,
                pageY: !0,
                shiftKey: !0,
                view: !0,
                char: !0,
                code: !0,
                charCode: !0,
                key: !0,
                keyCode: !0,
                button: !0,
                buttons: !0,
                clientX: !0,
                clientY: !0,
                offsetX: !0,
                offsetY: !0,
                pointerId: !0,
                pointerType: !0,
                screenX: !0,
                screenY: !0,
                targetTouches: !0,
                toElement: !0,
                touches: !0,
                which: !0,
              },
              A.event.addProp
            ),
            A.each({ focus: "focusin", blur: "focusout" }, function (t, e) {
              A.event.special[t] = {
                setup: function () {
                  return _t(this, t, Tt), !1;
                },
                trigger: function () {
                  return _t(this, t), !0;
                },
                _default: function () {
                  return !0;
                },
                delegateType: e,
              };
            }),
            A.each(
              {
                mouseenter: "mouseover",
                mouseleave: "mouseout",
                pointerenter: "pointerover",
                pointerleave: "pointerout",
              },
              function (t, e) {
                A.event.special[t] = {
                  delegateType: e,
                  bindType: e,
                  handle: function (t) {
                    var i,
                      n = this,
                      a = t.relatedTarget,
                      s = t.handleObj;
                    return (
                      (a && (a === n || A.contains(n, a))) ||
                        ((t.type = s.origType),
                        (i = s.handler.apply(this, arguments)),
                        (t.type = e)),
                      i
                    );
                  },
                };
              }
            ),
            A.fn.extend({
              on: function (t, e, i, n) {
                return Lt(this, t, e, i, n);
              },
              one: function (t, e, i, n) {
                return Lt(this, t, e, i, n, 1);
              },
              off: function (t, e, i) {
                var n, a;
                if (t && t.preventDefault && t.handleObj)
                  return (
                    (n = t.handleObj),
                    A(t.delegateTarget).off(
                      n.namespace ? n.origType + "." + n.namespace : n.origType,
                      n.selector,
                      n.handler
                    ),
                    this
                  );
                if ("object" == typeof t) {
                  for (a in t) this.off(a, e, t[a]);
                  return this;
                }
                return (
                  (!1 !== e && "function" != typeof e) ||
                    ((i = e), (e = void 0)),
                  !1 === i && (i = Et),
                  this.each(function () {
                    A.event.remove(this, t, i, e);
                  })
                );
              },
            });
          var Pt = /<script|<style|<link/i,
            It = /checked\s*(?:[^=]|=\s*.checked.)/i,
            Mt = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
          function Nt(t, e) {
            return (
              (P(t, "table") &&
                P(11 !== e.nodeType ? e : e.firstChild, "tr") &&
                A(t).children("tbody")[0]) ||
              t
            );
          }
          function Dt(t) {
            return (
              (t.type = (null !== t.getAttribute("type")) + "/" + t.type), t
            );
          }
          function zt(t) {
            return (
              "true/" === (t.type || "").slice(0, 5)
                ? (t.type = t.type.slice(5))
                : t.removeAttribute("type"),
              t
            );
          }
          function Ot(t, e) {
            var i, n, a, s, r, o;
            if (1 === e.nodeType) {
              if (K.hasData(t) && (o = K.get(t).events))
                for (a in (K.remove(e, "handle events"), o))
                  for (i = 0, n = o[a].length; i < n; i++)
                    A.event.add(e, a, o[a][i]);
              J.hasData(t) &&
                ((s = J.access(t)), (r = A.extend({}, s)), J.set(e, r));
            }
          }
          function Ft(t, e) {
            var i = e.nodeName.toLowerCase();
            "input" === i && mt.test(t.type)
              ? (e.checked = t.checked)
              : ("input" !== i && "textarea" !== i) ||
                (e.defaultValue = t.defaultValue);
          }
          function Xt(t, e, i, n) {
            e = l(e);
            var a,
              s,
              r,
              o,
              c,
              h,
              d = 0,
              u = t.length,
              f = u - 1,
              p = e[0],
              g = x(p);
            if (
              g ||
              (u > 1 && "string" == typeof p && !m.checkClone && It.test(p))
            )
              return t.each(function (a) {
                var s = t.eq(a);
                g && (e[0] = p.call(this, a, s.html())), Xt(s, e, i, n);
              });
            if (
              u &&
              ((s = (a = St(e, t[0].ownerDocument, !1, t, n)).firstChild),
              1 === a.childNodes.length && (a = s),
              s || n)
            ) {
              for (o = (r = A.map(yt(a, "script"), Dt)).length; d < u; d++)
                (c = a),
                  d !== f &&
                    ((c = A.clone(c, !0, !0)),
                    o && A.merge(r, yt(c, "script"))),
                  i.call(t[d], c, d);
              if (o)
                for (
                  h = r[r.length - 1].ownerDocument, A.map(r, zt), d = 0;
                  d < o;
                  d++
                )
                  (c = r[d]),
                    vt.test(c.type || "") &&
                      !K.access(c, "globalEval") &&
                      A.contains(h, c) &&
                      (c.src && "module" !== (c.type || "").toLowerCase()
                        ? A._evalUrl &&
                          !c.noModule &&
                          A._evalUrl(
                            c.src,
                            { nonce: c.nonce || c.getAttribute("nonce") },
                            h
                          )
                        : w(c.textContent.replace(Mt, ""), c, h));
            }
            return t;
          }
          function Rt(t, e, i) {
            for (
              var n, a = e ? A.filter(e, t) : t, s = 0;
              null != (n = a[s]);
              s++
            )
              i || 1 !== n.nodeType || A.cleanData(yt(n)),
                n.parentNode &&
                  (i && ot(n) && wt(yt(n, "script")),
                  n.parentNode.removeChild(n));
            return t;
          }
          A.extend({
            htmlPrefilter: function (t) {
              return t;
            },
            clone: function (t, e, i) {
              var n,
                a,
                s,
                r,
                o = t.cloneNode(!0),
                l = ot(t);
              if (
                !(
                  m.noCloneChecked ||
                  (1 !== t.nodeType && 11 !== t.nodeType) ||
                  A.isXMLDoc(t)
                )
              )
                for (r = yt(o), n = 0, a = (s = yt(t)).length; n < a; n++)
                  Ft(s[n], r[n]);
              if (e)
                if (i)
                  for (
                    s = s || yt(t), r = r || yt(o), n = 0, a = s.length;
                    n < a;
                    n++
                  )
                    Ot(s[n], r[n]);
                else Ot(t, o);
              return (
                (r = yt(o, "script")).length > 0 &&
                  wt(r, !l && yt(t, "script")),
                o
              );
            },
            cleanData: function (t) {
              for (
                var e, i, n, a = A.event.special, s = 0;
                void 0 !== (i = t[s]);
                s++
              )
                if (Z(i)) {
                  if ((e = i[K.expando])) {
                    if (e.events)
                      for (n in e.events)
                        a[n]
                          ? A.event.remove(i, n)
                          : A.removeEvent(i, n, e.handle);
                    i[K.expando] = void 0;
                  }
                  i[J.expando] && (i[J.expando] = void 0);
                }
            },
          }),
            A.fn.extend({
              detach: function (t) {
                return Rt(this, t, !0);
              },
              remove: function (t) {
                return Rt(this, t);
              },
              text: function (t) {
                return V(
                  this,
                  function (t) {
                    return void 0 === t
                      ? A.text(this)
                      : this.empty().each(function () {
                          (1 !== this.nodeType &&
                            11 !== this.nodeType &&
                            9 !== this.nodeType) ||
                            (this.textContent = t);
                        });
                  },
                  null,
                  t,
                  arguments.length
                );
              },
              append: function () {
                return Xt(this, arguments, function (t) {
                  (1 !== this.nodeType &&
                    11 !== this.nodeType &&
                    9 !== this.nodeType) ||
                    Nt(this, t).appendChild(t);
                });
              },
              prepend: function () {
                return Xt(this, arguments, function (t) {
                  if (
                    1 === this.nodeType ||
                    11 === this.nodeType ||
                    9 === this.nodeType
                  ) {
                    var e = Nt(this, t);
                    e.insertBefore(t, e.firstChild);
                  }
                });
              },
              before: function () {
                return Xt(this, arguments, function (t) {
                  this.parentNode && this.parentNode.insertBefore(t, this);
                });
              },
              after: function () {
                return Xt(this, arguments, function (t) {
                  this.parentNode &&
                    this.parentNode.insertBefore(t, this.nextSibling);
                });
              },
              empty: function () {
                for (var t, e = 0; null != (t = this[e]); e++)
                  1 === t.nodeType &&
                    (A.cleanData(yt(t, !1)), (t.textContent = ""));
                return this;
              },
              clone: function (t, e) {
                return (
                  (t = null != t && t),
                  (e = null == e ? t : e),
                  this.map(function () {
                    return A.clone(this, t, e);
                  })
                );
              },
              html: function (t) {
                return V(
                  this,
                  function (t) {
                    var e = this[0] || {},
                      i = 0,
                      n = this.length;
                    if (void 0 === t && 1 === e.nodeType) return e.innerHTML;
                    if (
                      "string" == typeof t &&
                      !Pt.test(t) &&
                      !bt[(xt.exec(t) || ["", ""])[1].toLowerCase()]
                    ) {
                      t = A.htmlPrefilter(t);
                      try {
                        for (; i < n; i++)
                          1 === (e = this[i] || {}).nodeType &&
                            (A.cleanData(yt(e, !1)), (e.innerHTML = t));
                        e = 0;
                      } catch (t) {}
                    }
                    e && this.empty().append(t);
                  },
                  null,
                  t,
                  arguments.length
                );
              },
              replaceWith: function () {
                var t = [];
                return Xt(
                  this,
                  arguments,
                  function (e) {
                    var i = this.parentNode;
                    A.inArray(this, t) < 0 &&
                      (A.cleanData(yt(this)), i && i.replaceChild(e, this));
                  },
                  t
                );
              },
            }),
            A.each(
              {
                appendTo: "append",
                prependTo: "prepend",
                insertBefore: "before",
                insertAfter: "after",
                replaceAll: "replaceWith",
              },
              function (t, e) {
                A.fn[t] = function (t) {
                  for (
                    var i, n = [], a = A(t), s = a.length - 1, r = 0;
                    r <= s;
                    r++
                  )
                    (i = r === s ? this : this.clone(!0)),
                      A(a[r])[e](i),
                      c.apply(n, i.get());
                  return this.pushStack(n);
                };
              }
            );
          var Ht = new RegExp("^(" + nt + ")(?!px)[a-z%]+$", "i"),
            Yt = function (t) {
              var e = t.ownerDocument.defaultView;
              return (e && e.opener) || (e = n), e.getComputedStyle(t);
            },
            Wt = function (t, e, i) {
              var n,
                a,
                s = {};
              for (a in e) (s[a] = t.style[a]), (t.style[a] = e[a]);
              for (a in ((n = i.call(t)), e)) t.style[a] = s[a];
              return n;
            },
            Bt = new RegExp(st.join("|"), "i");
          function jt(t, e, i) {
            var n,
              a,
              s,
              r,
              o = t.style;
            return (
              (i = i || Yt(t)) &&
                ("" !== (r = i.getPropertyValue(e) || i[e]) ||
                  ot(t) ||
                  (r = A.style(t, e)),
                !m.pixelBoxStyles() &&
                  Ht.test(r) &&
                  Bt.test(e) &&
                  ((n = o.width),
                  (a = o.minWidth),
                  (s = o.maxWidth),
                  (o.minWidth = o.maxWidth = o.width = r),
                  (r = i.width),
                  (o.width = n),
                  (o.minWidth = a),
                  (o.maxWidth = s))),
              void 0 !== r ? r + "" : r
            );
          }
          function Vt(t, e) {
            return {
              get: function () {
                if (!t()) return (this.get = e).apply(this, arguments);
                delete this.get;
              },
            };
          }
          !(function () {
            function t() {
              if (h) {
                (c.style.cssText =
                  "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0"),
                  (h.style.cssText =
                    "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%"),
                  rt.appendChild(c).appendChild(h);
                var t = n.getComputedStyle(h);
                (i = "1%" !== t.top),
                  (l = 12 === e(t.marginLeft)),
                  (h.style.right = "60%"),
                  (r = 36 === e(t.right)),
                  (a = 36 === e(t.width)),
                  (h.style.position = "absolute"),
                  (s = 12 === e(h.offsetWidth / 3)),
                  rt.removeChild(c),
                  (h = null);
              }
            }
            function e(t) {
              return Math.round(parseFloat(t));
            }
            var i,
              a,
              s,
              r,
              o,
              l,
              c = b.createElement("div"),
              h = b.createElement("div");
            h.style &&
              ((h.style.backgroundClip = "content-box"),
              (h.cloneNode(!0).style.backgroundClip = ""),
              (m.clearCloneStyle = "content-box" === h.style.backgroundClip),
              A.extend(m, {
                boxSizingReliable: function () {
                  return t(), a;
                },
                pixelBoxStyles: function () {
                  return t(), r;
                },
                pixelPosition: function () {
                  return t(), i;
                },
                reliableMarginLeft: function () {
                  return t(), l;
                },
                scrollboxSize: function () {
                  return t(), s;
                },
                reliableTrDimensions: function () {
                  var t, e, i, a;
                  return (
                    null == o &&
                      ((t = b.createElement("table")),
                      (e = b.createElement("tr")),
                      (i = b.createElement("div")),
                      (t.style.cssText =
                        "position:absolute;left:-11111px;border-collapse:separate"),
                      (e.style.cssText = "border:1px solid"),
                      (e.style.height = "1px"),
                      (i.style.height = "9px"),
                      (i.style.display = "block"),
                      rt.appendChild(t).appendChild(e).appendChild(i),
                      (a = n.getComputedStyle(e)),
                      (o =
                        parseInt(a.height, 10) +
                          parseInt(a.borderTopWidth, 10) +
                          parseInt(a.borderBottomWidth, 10) ===
                        e.offsetHeight),
                      rt.removeChild(t)),
                    o
                  );
                },
              }));
          })();
          var Gt = ["Webkit", "Moz", "ms"],
            qt = b.createElement("div").style,
            Ut = {};
          function $t(t) {
            var e = A.cssProps[t] || Ut[t];
            return (
              e ||
              (t in qt
                ? t
                : (Ut[t] =
                    (function (t) {
                      for (
                        var e = t[0].toUpperCase() + t.slice(1), i = Gt.length;
                        i--;

                      )
                        if ((t = Gt[i] + e) in qt) return t;
                    })(t) || t))
            );
          }
          var Zt = /^(none|table(?!-c[ea]).+)/,
            Qt = /^--/,
            Kt = {
              position: "absolute",
              visibility: "hidden",
              display: "block",
            },
            Jt = { letterSpacing: "0", fontWeight: "400" };
          function te(t, e, i) {
            var n = at.exec(e);
            return n ? Math.max(0, n[2] - (i || 0)) + (n[3] || "px") : e;
          }
          function ee(t, e, i, n, a, s) {
            var r = "width" === e ? 1 : 0,
              o = 0,
              l = 0;
            if (i === (n ? "border" : "content")) return 0;
            for (; r < 4; r += 2)
              "margin" === i && (l += A.css(t, i + st[r], !0, a)),
                n
                  ? ("content" === i &&
                      (l -= A.css(t, "padding" + st[r], !0, a)),
                    "margin" !== i &&
                      (l -= A.css(t, "border" + st[r] + "Width", !0, a)))
                  : ((l += A.css(t, "padding" + st[r], !0, a)),
                    "padding" !== i
                      ? (l += A.css(t, "border" + st[r] + "Width", !0, a))
                      : (o += A.css(t, "border" + st[r] + "Width", !0, a)));
            return (
              !n &&
                s >= 0 &&
                (l +=
                  Math.max(
                    0,
                    Math.ceil(
                      t["offset" + e[0].toUpperCase() + e.slice(1)] -
                        s -
                        l -
                        o -
                        0.5
                    )
                  ) || 0),
              l
            );
          }
          function ie(t, e, i) {
            var n = Yt(t),
              a =
                (!m.boxSizingReliable() || i) &&
                "border-box" === A.css(t, "boxSizing", !1, n),
              s = a,
              r = jt(t, e, n),
              o = "offset" + e[0].toUpperCase() + e.slice(1);
            if (Ht.test(r)) {
              if (!i) return r;
              r = "auto";
            }
            return (
              ((!m.boxSizingReliable() && a) ||
                (!m.reliableTrDimensions() && P(t, "tr")) ||
                "auto" === r ||
                (!parseFloat(r) && "inline" === A.css(t, "display", !1, n))) &&
                t.getClientRects().length &&
                ((a = "border-box" === A.css(t, "boxSizing", !1, n)),
                (s = o in t) && (r = t[o])),
              (r = parseFloat(r) || 0) +
                ee(t, e, i || (a ? "border" : "content"), s, n, r) +
                "px"
            );
          }
          function ne(t, e, i, n, a) {
            return new ne.prototype.init(t, e, i, n, a);
          }
          A.extend({
            cssHooks: {
              opacity: {
                get: function (t, e) {
                  if (e) {
                    var i = jt(t, "opacity");
                    return "" === i ? "1" : i;
                  }
                },
              },
            },
            cssNumber: {
              animationIterationCount: !0,
              columnCount: !0,
              fillOpacity: !0,
              flexGrow: !0,
              flexShrink: !0,
              fontWeight: !0,
              gridArea: !0,
              gridColumn: !0,
              gridColumnEnd: !0,
              gridColumnStart: !0,
              gridRow: !0,
              gridRowEnd: !0,
              gridRowStart: !0,
              lineHeight: !0,
              opacity: !0,
              order: !0,
              orphans: !0,
              widows: !0,
              zIndex: !0,
              zoom: !0,
            },
            cssProps: {},
            style: function (t, e, i, n) {
              if (t && 3 !== t.nodeType && 8 !== t.nodeType && t.style) {
                var a,
                  s,
                  r,
                  o = $(e),
                  l = Qt.test(e),
                  c = t.style;
                if (
                  (l || (e = $t(o)),
                  (r = A.cssHooks[e] || A.cssHooks[o]),
                  void 0 === i)
                )
                  return r && "get" in r && void 0 !== (a = r.get(t, !1, n))
                    ? a
                    : c[e];
                "string" === (s = typeof i) &&
                  (a = at.exec(i)) &&
                  a[1] &&
                  ((i = ht(t, e, a)), (s = "number")),
                  null != i &&
                    i == i &&
                    ("number" !== s ||
                      l ||
                      (i += (a && a[3]) || (A.cssNumber[o] ? "" : "px")),
                    m.clearCloneStyle ||
                      "" !== i ||
                      0 !== e.indexOf("background") ||
                      (c[e] = "inherit"),
                    (r && "set" in r && void 0 === (i = r.set(t, i, n))) ||
                      (l ? c.setProperty(e, i) : (c[e] = i)));
              }
            },
            css: function (t, e, i, n) {
              var a,
                s,
                r,
                o = $(e);
              return (
                Qt.test(e) || (e = $t(o)),
                (r = A.cssHooks[e] || A.cssHooks[o]) &&
                  "get" in r &&
                  (a = r.get(t, !0, i)),
                void 0 === a && (a = jt(t, e, n)),
                "normal" === a && e in Jt && (a = Jt[e]),
                "" === i || i
                  ? ((s = parseFloat(a)), !0 === i || isFinite(s) ? s || 0 : a)
                  : a
              );
            },
          }),
            A.each(["height", "width"], function (t, e) {
              A.cssHooks[e] = {
                get: function (t, i, n) {
                  if (i)
                    return !Zt.test(A.css(t, "display")) ||
                      (t.getClientRects().length &&
                        t.getBoundingClientRect().width)
                      ? ie(t, e, n)
                      : Wt(t, Kt, function () {
                          return ie(t, e, n);
                        });
                },
                set: function (t, i, n) {
                  var a,
                    s = Yt(t),
                    r = !m.scrollboxSize() && "absolute" === s.position,
                    o =
                      (r || n) && "border-box" === A.css(t, "boxSizing", !1, s),
                    l = n ? ee(t, e, n, o, s) : 0;
                  return (
                    o &&
                      r &&
                      (l -= Math.ceil(
                        t["offset" + e[0].toUpperCase() + e.slice(1)] -
                          parseFloat(s[e]) -
                          ee(t, e, "border", !1, s) -
                          0.5
                      )),
                    l &&
                      (a = at.exec(i)) &&
                      "px" !== (a[3] || "px") &&
                      ((t.style[e] = i), (i = A.css(t, e))),
                    te(0, i, l)
                  );
                },
              };
            }),
            (A.cssHooks.marginLeft = Vt(m.reliableMarginLeft, function (t, e) {
              if (e)
                return (
                  (parseFloat(jt(t, "marginLeft")) ||
                    t.getBoundingClientRect().left -
                      Wt(t, { marginLeft: 0 }, function () {
                        return t.getBoundingClientRect().left;
                      })) + "px"
                );
            })),
            A.each(
              { margin: "", padding: "", border: "Width" },
              function (t, e) {
                (A.cssHooks[t + e] = {
                  expand: function (i) {
                    for (
                      var n = 0,
                        a = {},
                        s = "string" == typeof i ? i.split(" ") : [i];
                      n < 4;
                      n++
                    )
                      a[t + st[n] + e] = s[n] || s[n - 2] || s[0];
                    return a;
                  },
                }),
                  "margin" !== t && (A.cssHooks[t + e].set = te);
              }
            ),
            A.fn.extend({
              css: function (t, e) {
                return V(
                  this,
                  function (t, e, i) {
                    var n,
                      a,
                      s = {},
                      r = 0;
                    if (Array.isArray(e)) {
                      for (n = Yt(t), a = e.length; r < a; r++)
                        s[e[r]] = A.css(t, e[r], !1, n);
                      return s;
                    }
                    return void 0 !== i ? A.style(t, e, i) : A.css(t, e);
                  },
                  t,
                  e,
                  arguments.length > 1
                );
              },
            }),
            (A.Tween = ne),
            (ne.prototype = {
              constructor: ne,
              init: function (t, e, i, n, a, s) {
                (this.elem = t),
                  (this.prop = i),
                  (this.easing = a || A.easing._default),
                  (this.options = e),
                  (this.start = this.now = this.cur()),
                  (this.end = n),
                  (this.unit = s || (A.cssNumber[i] ? "" : "px"));
              },
              cur: function () {
                var t = ne.propHooks[this.prop];
                return t && t.get
                  ? t.get(this)
                  : ne.propHooks._default.get(this);
              },
              run: function (t) {
                var e,
                  i = ne.propHooks[this.prop];
                return (
                  this.options.duration
                    ? (this.pos = e =
                        A.easing[this.easing](
                          t,
                          this.options.duration * t,
                          0,
                          1,
                          this.options.duration
                        ))
                    : (this.pos = e = t),
                  (this.now = (this.end - this.start) * e + this.start),
                  this.options.step &&
                    this.options.step.call(this.elem, this.now, this),
                  i && i.set ? i.set(this) : ne.propHooks._default.set(this),
                  this
                );
              },
            }),
            (ne.prototype.init.prototype = ne.prototype),
            (ne.propHooks = {
              _default: {
                get: function (t) {
                  var e;
                  return 1 !== t.elem.nodeType ||
                    (null != t.elem[t.prop] && null == t.elem.style[t.prop])
                    ? t.elem[t.prop]
                    : (e = A.css(t.elem, t.prop, "")) && "auto" !== e
                    ? e
                    : 0;
                },
                set: function (t) {
                  A.fx.step[t.prop]
                    ? A.fx.step[t.prop](t)
                    : 1 !== t.elem.nodeType ||
                      (!A.cssHooks[t.prop] && null == t.elem.style[$t(t.prop)])
                    ? (t.elem[t.prop] = t.now)
                    : A.style(t.elem, t.prop, t.now + t.unit);
                },
              },
            }),
            (ne.propHooks.scrollTop = ne.propHooks.scrollLeft =
              {
                set: function (t) {
                  t.elem.nodeType &&
                    t.elem.parentNode &&
                    (t.elem[t.prop] = t.now);
                },
              }),
            (A.easing = {
              linear: function (t) {
                return t;
              },
              swing: function (t) {
                return 0.5 - Math.cos(t * Math.PI) / 2;
              },
              _default: "swing",
            }),
            (A.fx = ne.prototype.init),
            (A.fx.step = {});
          var ae,
            se,
            re = /^(?:toggle|show|hide)$/,
            oe = /queueHooks$/;
          function le() {
            se &&
              (!1 === b.hidden && n.requestAnimationFrame
                ? n.requestAnimationFrame(le)
                : n.setTimeout(le, A.fx.interval),
              A.fx.tick());
          }
          function ce() {
            return (
              n.setTimeout(function () {
                ae = void 0;
              }),
              (ae = Date.now())
            );
          }
          function he(t, e) {
            var i,
              n = 0,
              a = { height: t };
            for (e = e ? 1 : 0; n < 4; n += 2 - e)
              a["margin" + (i = st[n])] = a["padding" + i] = t;
            return e && (a.opacity = a.width = t), a;
          }
          function de(t, e, i) {
            for (
              var n,
                a = (ue.tweeners[e] || []).concat(ue.tweeners["*"]),
                s = 0,
                r = a.length;
              s < r;
              s++
            )
              if ((n = a[s].call(i, e, t))) return n;
          }
          function ue(t, e, i) {
            var n,
              a,
              s = 0,
              r = ue.prefilters.length,
              o = A.Deferred().always(function () {
                delete l.elem;
              }),
              l = function () {
                if (a) return !1;
                for (
                  var e = ae || ce(),
                    i = Math.max(0, c.startTime + c.duration - e),
                    n = 1 - (i / c.duration || 0),
                    s = 0,
                    r = c.tweens.length;
                  s < r;
                  s++
                )
                  c.tweens[s].run(n);
                return (
                  o.notifyWith(t, [c, n, i]),
                  n < 1 && r
                    ? i
                    : (r || o.notifyWith(t, [c, 1, 0]),
                      o.resolveWith(t, [c]),
                      !1)
                );
              },
              c = o.promise({
                elem: t,
                props: A.extend({}, e),
                opts: A.extend(
                  !0,
                  { specialEasing: {}, easing: A.easing._default },
                  i
                ),
                originalProperties: e,
                originalOptions: i,
                startTime: ae || ce(),
                duration: i.duration,
                tweens: [],
                createTween: function (e, i) {
                  var n = A.Tween(
                    t,
                    c.opts,
                    e,
                    i,
                    c.opts.specialEasing[e] || c.opts.easing
                  );
                  return c.tweens.push(n), n;
                },
                stop: function (e) {
                  var i = 0,
                    n = e ? c.tweens.length : 0;
                  if (a) return this;
                  for (a = !0; i < n; i++) c.tweens[i].run(1);
                  return (
                    e
                      ? (o.notifyWith(t, [c, 1, 0]), o.resolveWith(t, [c, e]))
                      : o.rejectWith(t, [c, e]),
                    this
                  );
                },
              }),
              h = c.props;
            for (
              !(function (t, e) {
                var i, n, a, s, r;
                for (i in t)
                  if (
                    ((a = e[(n = $(i))]),
                    (s = t[i]),
                    Array.isArray(s) && ((a = s[1]), (s = t[i] = s[0])),
                    i !== n && ((t[n] = s), delete t[i]),
                    (r = A.cssHooks[n]) && ("expand" in r))
                  )
                    for (i in ((s = r.expand(s)), delete t[n], s))
                      (i in t) || ((t[i] = s[i]), (e[i] = a));
                  else e[n] = a;
              })(h, c.opts.specialEasing);
              s < r;
              s++
            )
              if ((n = ue.prefilters[s].call(c, t, h, c.opts)))
                return (
                  x(n.stop) &&
                    (A._queueHooks(c.elem, c.opts.queue).stop = n.stop.bind(n)),
                  n
                );
            return (
              A.map(h, de, c),
              x(c.opts.start) && c.opts.start.call(t, c),
              c
                .progress(c.opts.progress)
                .done(c.opts.done, c.opts.complete)
                .fail(c.opts.fail)
                .always(c.opts.always),
              A.fx.timer(
                A.extend(l, { elem: t, anim: c, queue: c.opts.queue })
              ),
              c
            );
          }
          (A.Animation = A.extend(ue, {
            tweeners: {
              "*": [
                function (t, e) {
                  var i = this.createTween(t, e);
                  return ht(i.elem, t, at.exec(e), i), i;
                },
              ],
            },
            tweener: function (t, e) {
              x(t) ? ((e = t), (t = ["*"])) : (t = t.match(X));
              for (var i, n = 0, a = t.length; n < a; n++)
                (i = t[n]),
                  (ue.tweeners[i] = ue.tweeners[i] || []),
                  ue.tweeners[i].unshift(e);
            },
            prefilters: [
              function (t, e, i) {
                var n,
                  a,
                  s,
                  r,
                  o,
                  l,
                  c,
                  h,
                  d = "width" in e || "height" in e,
                  u = this,
                  f = {},
                  p = t.style,
                  g = t.nodeType && ct(t),
                  m = K.get(t, "fxshow");
                for (n in (i.queue ||
                  (null == (r = A._queueHooks(t, "fx")).unqueued &&
                    ((r.unqueued = 0),
                    (o = r.empty.fire),
                    (r.empty.fire = function () {
                      r.unqueued || o();
                    })),
                  r.unqueued++,
                  u.always(function () {
                    u.always(function () {
                      r.unqueued--, A.queue(t, "fx").length || r.empty.fire();
                    });
                  })),
                e))
                  if (((a = e[n]), re.test(a))) {
                    if (
                      (delete e[n],
                      (s = s || "toggle" === a),
                      a === (g ? "hide" : "show"))
                    ) {
                      if ("show" !== a || !m || void 0 === m[n]) continue;
                      g = !0;
                    }
                    f[n] = (m && m[n]) || A.style(t, n);
                  }
                if ((l = !A.isEmptyObject(e)) || !A.isEmptyObject(f))
                  for (n in (d &&
                    1 === t.nodeType &&
                    ((i.overflow = [p.overflow, p.overflowX, p.overflowY]),
                    null == (c = m && m.display) && (c = K.get(t, "display")),
                    "none" === (h = A.css(t, "display")) &&
                      (c
                        ? (h = c)
                        : (ft([t], !0),
                          (c = t.style.display || c),
                          (h = A.css(t, "display")),
                          ft([t]))),
                    ("inline" === h || ("inline-block" === h && null != c)) &&
                      "none" === A.css(t, "float") &&
                      (l ||
                        (u.done(function () {
                          p.display = c;
                        }),
                        null == c &&
                          ((h = p.display), (c = "none" === h ? "" : h))),
                      (p.display = "inline-block"))),
                  i.overflow &&
                    ((p.overflow = "hidden"),
                    u.always(function () {
                      (p.overflow = i.overflow[0]),
                        (p.overflowX = i.overflow[1]),
                        (p.overflowY = i.overflow[2]);
                    })),
                  (l = !1),
                  f))
                    l ||
                      (m
                        ? "hidden" in m && (g = m.hidden)
                        : (m = K.access(t, "fxshow", { display: c })),
                      s && (m.hidden = !g),
                      g && ft([t], !0),
                      u.done(function () {
                        for (n in (g || ft([t]), K.remove(t, "fxshow"), f))
                          A.style(t, n, f[n]);
                      })),
                      (l = de(g ? m[n] : 0, n, u)),
                      n in m ||
                        ((m[n] = l.start),
                        g && ((l.end = l.start), (l.start = 0)));
              },
            ],
            prefilter: function (t, e) {
              e ? ue.prefilters.unshift(t) : ue.prefilters.push(t);
            },
          })),
            (A.speed = function (t, e, i) {
              var n =
                t && "object" == typeof t
                  ? A.extend({}, t)
                  : {
                      complete: i || (!i && e) || (x(t) && t),
                      duration: t,
                      easing: (i && e) || (e && !x(e) && e),
                    };
              return (
                A.fx.off
                  ? (n.duration = 0)
                  : "number" != typeof n.duration &&
                    (n.duration in A.fx.speeds
                      ? (n.duration = A.fx.speeds[n.duration])
                      : (n.duration = A.fx.speeds._default)),
                (null != n.queue && !0 !== n.queue) || (n.queue = "fx"),
                (n.old = n.complete),
                (n.complete = function () {
                  x(n.old) && n.old.call(this),
                    n.queue && A.dequeue(this, n.queue);
                }),
                n
              );
            }),
            A.fn.extend({
              fadeTo: function (t, e, i, n) {
                return this.filter(ct)
                  .css("opacity", 0)
                  .show()
                  .end()
                  .animate({ opacity: e }, t, i, n);
              },
              animate: function (t, e, i, n) {
                var a = A.isEmptyObject(t),
                  s = A.speed(e, i, n),
                  r = function () {
                    var e = ue(this, A.extend({}, t), s);
                    (a || K.get(this, "finish")) && e.stop(!0);
                  };
                return (
                  (r.finish = r),
                  a || !1 === s.queue ? this.each(r) : this.queue(s.queue, r)
                );
              },
              stop: function (t, e, i) {
                var n = function (t) {
                  var e = t.stop;
                  delete t.stop, e(i);
                };
                return (
                  "string" != typeof t && ((i = e), (e = t), (t = void 0)),
                  e && this.queue(t || "fx", []),
                  this.each(function () {
                    var e = !0,
                      a = null != t && t + "queueHooks",
                      s = A.timers,
                      r = K.get(this);
                    if (a) r[a] && r[a].stop && n(r[a]);
                    else
                      for (a in r) r[a] && r[a].stop && oe.test(a) && n(r[a]);
                    for (a = s.length; a--; )
                      s[a].elem !== this ||
                        (null != t && s[a].queue !== t) ||
                        (s[a].anim.stop(i), (e = !1), s.splice(a, 1));
                    (!e && i) || A.dequeue(this, t);
                  })
                );
              },
              finish: function (t) {
                return (
                  !1 !== t && (t = t || "fx"),
                  this.each(function () {
                    var e,
                      i = K.get(this),
                      n = i[t + "queue"],
                      a = i[t + "queueHooks"],
                      s = A.timers,
                      r = n ? n.length : 0;
                    for (
                      i.finish = !0,
                        A.queue(this, t, []),
                        a && a.stop && a.stop.call(this, !0),
                        e = s.length;
                      e--;

                    )
                      s[e].elem === this &&
                        s[e].queue === t &&
                        (s[e].anim.stop(!0), s.splice(e, 1));
                    for (e = 0; e < r; e++)
                      n[e] && n[e].finish && n[e].finish.call(this);
                    delete i.finish;
                  })
                );
              },
            }),
            A.each(["toggle", "show", "hide"], function (t, e) {
              var i = A.fn[e];
              A.fn[e] = function (t, n, a) {
                return null == t || "boolean" == typeof t
                  ? i.apply(this, arguments)
                  : this.animate(he(e, !0), t, n, a);
              };
            }),
            A.each(
              {
                slideDown: he("show"),
                slideUp: he("hide"),
                slideToggle: he("toggle"),
                fadeIn: { opacity: "show" },
                fadeOut: { opacity: "hide" },
                fadeToggle: { opacity: "toggle" },
              },
              function (t, e) {
                A.fn[t] = function (t, i, n) {
                  return this.animate(e, t, i, n);
                };
              }
            ),
            (A.timers = []),
            (A.fx.tick = function () {
              var t,
                e = 0,
                i = A.timers;
              for (ae = Date.now(); e < i.length; e++)
                (t = i[e])() || i[e] !== t || i.splice(e--, 1);
              i.length || A.fx.stop(), (ae = void 0);
            }),
            (A.fx.timer = function (t) {
              A.timers.push(t), A.fx.start();
            }),
            (A.fx.interval = 13),
            (A.fx.start = function () {
              se || ((se = !0), le());
            }),
            (A.fx.stop = function () {
              se = null;
            }),
            (A.fx.speeds = { slow: 600, fast: 200, _default: 400 }),
            (A.fn.delay = function (t, e) {
              return (
                (t = (A.fx && A.fx.speeds[t]) || t),
                (e = e || "fx"),
                this.queue(e, function (e, i) {
                  var a = n.setTimeout(e, t);
                  i.stop = function () {
                    n.clearTimeout(a);
                  };
                })
              );
            }),
            (function () {
              var t = b.createElement("input"),
                e = b
                  .createElement("select")
                  .appendChild(b.createElement("option"));
              (t.type = "checkbox"),
                (m.checkOn = "" !== t.value),
                (m.optSelected = e.selected),
                ((t = b.createElement("input")).value = "t"),
                (t.type = "radio"),
                (m.radioValue = "t" === t.value);
            })();
          var fe,
            pe = A.expr.attrHandle;
          A.fn.extend({
            attr: function (t, e) {
              return V(this, A.attr, t, e, arguments.length > 1);
            },
            removeAttr: function (t) {
              return this.each(function () {
                A.removeAttr(this, t);
              });
            },
          }),
            A.extend({
              attr: function (t, e, i) {
                var n,
                  a,
                  s = t.nodeType;
                if (3 !== s && 8 !== s && 2 !== s)
                  return void 0 === t.getAttribute
                    ? A.prop(t, e, i)
                    : ((1 === s && A.isXMLDoc(t)) ||
                        (a =
                          A.attrHooks[e.toLowerCase()] ||
                          (A.expr.match.bool.test(e) ? fe : void 0)),
                      void 0 !== i
                        ? null === i
                          ? void A.removeAttr(t, e)
                          : a && "set" in a && void 0 !== (n = a.set(t, i, e))
                          ? n
                          : (t.setAttribute(e, i + ""), i)
                        : a && "get" in a && null !== (n = a.get(t, e))
                        ? n
                        : null == (n = A.find.attr(t, e))
                        ? void 0
                        : n);
              },
              attrHooks: {
                type: {
                  set: function (t, e) {
                    if (!m.radioValue && "radio" === e && P(t, "input")) {
                      var i = t.value;
                      return t.setAttribute("type", e), i && (t.value = i), e;
                    }
                  },
                },
              },
              removeAttr: function (t, e) {
                var i,
                  n = 0,
                  a = e && e.match(X);
                if (a && 1 === t.nodeType)
                  for (; (i = a[n++]); ) t.removeAttribute(i);
              },
            }),
            (fe = {
              set: function (t, e, i) {
                return !1 === e ? A.removeAttr(t, i) : t.setAttribute(i, i), i;
              },
            }),
            A.each(A.expr.match.bool.source.match(/\w+/g), function (t, e) {
              var i = pe[e] || A.find.attr;
              pe[e] = function (t, e, n) {
                var a,
                  s,
                  r = e.toLowerCase();
                return (
                  n ||
                    ((s = pe[r]),
                    (pe[r] = a),
                    (a = null != i(t, e, n) ? r : null),
                    (pe[r] = s)),
                  a
                );
              };
            });
          var ge = /^(?:input|select|textarea|button)$/i,
            me = /^(?:a|area)$/i;
          function xe(t) {
            return (t.match(X) || []).join(" ");
          }
          function ve(t) {
            return (t.getAttribute && t.getAttribute("class")) || "";
          }
          function be(t) {
            return Array.isArray(t)
              ? t
              : ("string" == typeof t && t.match(X)) || [];
          }
          A.fn.extend({
            prop: function (t, e) {
              return V(this, A.prop, t, e, arguments.length > 1);
            },
            removeProp: function (t) {
              return this.each(function () {
                delete this[A.propFix[t] || t];
              });
            },
          }),
            A.extend({
              prop: function (t, e, i) {
                var n,
                  a,
                  s = t.nodeType;
                if (3 !== s && 8 !== s && 2 !== s)
                  return (
                    (1 === s && A.isXMLDoc(t)) ||
                      ((e = A.propFix[e] || e), (a = A.propHooks[e])),
                    void 0 !== i
                      ? a && "set" in a && void 0 !== (n = a.set(t, i, e))
                        ? n
                        : (t[e] = i)
                      : a && "get" in a && null !== (n = a.get(t, e))
                      ? n
                      : t[e]
                  );
              },
              propHooks: {
                tabIndex: {
                  get: function (t) {
                    var e = A.find.attr(t, "tabindex");
                    return e
                      ? parseInt(e, 10)
                      : ge.test(t.nodeName) || (me.test(t.nodeName) && t.href)
                      ? 0
                      : -1;
                  },
                },
              },
              propFix: { for: "htmlFor", class: "className" },
            }),
            m.optSelected ||
              (A.propHooks.selected = {
                get: function (t) {
                  var e = t.parentNode;
                  return e && e.parentNode && e.parentNode.selectedIndex, null;
                },
                set: function (t) {
                  var e = t.parentNode;
                  e &&
                    (e.selectedIndex,
                    e.parentNode && e.parentNode.selectedIndex);
                },
              }),
            A.each(
              [
                "tabIndex",
                "readOnly",
                "maxLength",
                "cellSpacing",
                "cellPadding",
                "rowSpan",
                "colSpan",
                "useMap",
                "frameBorder",
                "contentEditable",
              ],
              function () {
                A.propFix[this.toLowerCase()] = this;
              }
            ),
            A.fn.extend({
              addClass: function (t) {
                var e,
                  i,
                  n,
                  a,
                  s,
                  r,
                  o,
                  l = 0;
                if (x(t))
                  return this.each(function (e) {
                    A(this).addClass(t.call(this, e, ve(this)));
                  });
                if ((e = be(t)).length)
                  for (; (i = this[l++]); )
                    if (
                      ((a = ve(i)), (n = 1 === i.nodeType && " " + xe(a) + " "))
                    ) {
                      for (r = 0; (s = e[r++]); )
                        n.indexOf(" " + s + " ") < 0 && (n += s + " ");
                      a !== (o = xe(n)) && i.setAttribute("class", o);
                    }
                return this;
              },
              removeClass: function (t) {
                var e,
                  i,
                  n,
                  a,
                  s,
                  r,
                  o,
                  l = 0;
                if (x(t))
                  return this.each(function (e) {
                    A(this).removeClass(t.call(this, e, ve(this)));
                  });
                if (!arguments.length) return this.attr("class", "");
                if ((e = be(t)).length)
                  for (; (i = this[l++]); )
                    if (
                      ((a = ve(i)), (n = 1 === i.nodeType && " " + xe(a) + " "))
                    ) {
                      for (r = 0; (s = e[r++]); )
                        for (; n.indexOf(" " + s + " ") > -1; )
                          n = n.replace(" " + s + " ", " ");
                      a !== (o = xe(n)) && i.setAttribute("class", o);
                    }
                return this;
              },
              toggleClass: function (t, e) {
                var i = typeof t,
                  n = "string" === i || Array.isArray(t);
                return "boolean" == typeof e && n
                  ? e
                    ? this.addClass(t)
                    : this.removeClass(t)
                  : x(t)
                  ? this.each(function (i) {
                      A(this).toggleClass(t.call(this, i, ve(this), e), e);
                    })
                  : this.each(function () {
                      var e, a, s, r;
                      if (n)
                        for (a = 0, s = A(this), r = be(t); (e = r[a++]); )
                          s.hasClass(e) ? s.removeClass(e) : s.addClass(e);
                      else
                        (void 0 !== t && "boolean" !== i) ||
                          ((e = ve(this)) && K.set(this, "__className__", e),
                          this.setAttribute &&
                            this.setAttribute(
                              "class",
                              e || !1 === t
                                ? ""
                                : K.get(this, "__className__") || ""
                            ));
                    });
              },
              hasClass: function (t) {
                var e,
                  i,
                  n = 0;
                for (e = " " + t + " "; (i = this[n++]); )
                  if (
                    1 === i.nodeType &&
                    (" " + xe(ve(i)) + " ").indexOf(e) > -1
                  )
                    return !0;
                return !1;
              },
            });
          var ye = /\r/g;
          A.fn.extend({
            val: function (t) {
              var e,
                i,
                n,
                a = this[0];
              return arguments.length
                ? ((n = x(t)),
                  this.each(function (i) {
                    var a;
                    1 === this.nodeType &&
                      (null == (a = n ? t.call(this, i, A(this).val()) : t)
                        ? (a = "")
                        : "number" == typeof a
                        ? (a += "")
                        : Array.isArray(a) &&
                          (a = A.map(a, function (t) {
                            return null == t ? "" : t + "";
                          })),
                      ((e =
                        A.valHooks[this.type] ||
                        A.valHooks[this.nodeName.toLowerCase()]) &&
                        "set" in e &&
                        void 0 !== e.set(this, a, "value")) ||
                        (this.value = a));
                  }))
                : a
                ? (e =
                    A.valHooks[a.type] ||
                    A.valHooks[a.nodeName.toLowerCase()]) &&
                  "get" in e &&
                  void 0 !== (i = e.get(a, "value"))
                  ? i
                  : "string" == typeof (i = a.value)
                  ? i.replace(ye, "")
                  : null == i
                  ? ""
                  : i
                : void 0;
            },
          }),
            A.extend({
              valHooks: {
                option: {
                  get: function (t) {
                    var e = A.find.attr(t, "value");
                    return null != e ? e : xe(A.text(t));
                  },
                },
                select: {
                  get: function (t) {
                    var e,
                      i,
                      n,
                      a = t.options,
                      s = t.selectedIndex,
                      r = "select-one" === t.type,
                      o = r ? null : [],
                      l = r ? s + 1 : a.length;
                    for (n = s < 0 ? l : r ? s : 0; n < l; n++)
                      if (
                        ((i = a[n]).selected || n === s) &&
                        !i.disabled &&
                        (!i.parentNode.disabled || !P(i.parentNode, "optgroup"))
                      ) {
                        if (((e = A(i).val()), r)) return e;
                        o.push(e);
                      }
                    return o;
                  },
                  set: function (t, e) {
                    for (
                      var i, n, a = t.options, s = A.makeArray(e), r = a.length;
                      r--;

                    )
                      ((n = a[r]).selected =
                        A.inArray(A.valHooks.option.get(n), s) > -1) &&
                        (i = !0);
                    return i || (t.selectedIndex = -1), s;
                  },
                },
              },
            }),
            A.each(["radio", "checkbox"], function () {
              (A.valHooks[this] = {
                set: function (t, e) {
                  if (Array.isArray(e))
                    return (t.checked = A.inArray(A(t).val(), e) > -1);
                },
              }),
                m.checkOn ||
                  (A.valHooks[this].get = function (t) {
                    return null === t.getAttribute("value") ? "on" : t.value;
                  });
            }),
            (m.focusin = "onfocusin" in n);
          var we = /^(?:focusinfocus|focusoutblur)$/,
            ke = function (t) {
              t.stopPropagation();
            };
          A.extend(A.event, {
            trigger: function (t, e, i, a) {
              var s,
                r,
                o,
                l,
                c,
                h,
                d,
                u,
                p = [i || b],
                g = f.call(t, "type") ? t.type : t,
                m = f.call(t, "namespace") ? t.namespace.split(".") : [];
              if (
                ((r = u = o = i = i || b),
                3 !== i.nodeType &&
                  8 !== i.nodeType &&
                  !we.test(g + A.event.triggered) &&
                  (g.indexOf(".") > -1 &&
                    ((m = g.split(".")), (g = m.shift()), m.sort()),
                  (c = g.indexOf(":") < 0 && "on" + g),
                  ((t = t[A.expando]
                    ? t
                    : new A.Event(g, "object" == typeof t && t)).isTrigger = a
                    ? 2
                    : 3),
                  (t.namespace = m.join(".")),
                  (t.rnamespace = t.namespace
                    ? new RegExp(
                        "(^|\\.)" + m.join("\\.(?:.*\\.|)") + "(\\.|$)"
                      )
                    : null),
                  (t.result = void 0),
                  t.target || (t.target = i),
                  (e = null == e ? [t] : A.makeArray(e, [t])),
                  (d = A.event.special[g] || {}),
                  a || !d.trigger || !1 !== d.trigger.apply(i, e)))
              ) {
                if (!a && !d.noBubble && !v(i)) {
                  for (
                    l = d.delegateType || g,
                      we.test(l + g) || (r = r.parentNode);
                    r;
                    r = r.parentNode
                  )
                    p.push(r), (o = r);
                  o === (i.ownerDocument || b) &&
                    p.push(o.defaultView || o.parentWindow || n);
                }
                for (s = 0; (r = p[s++]) && !t.isPropagationStopped(); )
                  (u = r),
                    (t.type = s > 1 ? l : d.bindType || g),
                    (h =
                      (K.get(r, "events") || Object.create(null))[t.type] &&
                      K.get(r, "handle")) && h.apply(r, e),
                    (h = c && r[c]) &&
                      h.apply &&
                      Z(r) &&
                      ((t.result = h.apply(r, e)),
                      !1 === t.result && t.preventDefault());
                return (
                  (t.type = g),
                  a ||
                    t.isDefaultPrevented() ||
                    (d._default && !1 !== d._default.apply(p.pop(), e)) ||
                    !Z(i) ||
                    (c &&
                      x(i[g]) &&
                      !v(i) &&
                      ((o = i[c]) && (i[c] = null),
                      (A.event.triggered = g),
                      t.isPropagationStopped() && u.addEventListener(g, ke),
                      i[g](),
                      t.isPropagationStopped() && u.removeEventListener(g, ke),
                      (A.event.triggered = void 0),
                      o && (i[c] = o))),
                  t.result
                );
              }
            },
            simulate: function (t, e, i) {
              var n = A.extend(new A.Event(), i, { type: t, isSimulated: !0 });
              A.event.trigger(n, null, e);
            },
          }),
            A.fn.extend({
              trigger: function (t, e) {
                return this.each(function () {
                  A.event.trigger(t, e, this);
                });
              },
              triggerHandler: function (t, e) {
                var i = this[0];
                if (i) return A.event.trigger(t, e, i, !0);
              },
            }),
            m.focusin ||
              A.each({ focus: "focusin", blur: "focusout" }, function (t, e) {
                var i = function (t) {
                  A.event.simulate(e, t.target, A.event.fix(t));
                };
                A.event.special[e] = {
                  setup: function () {
                    var n = this.ownerDocument || this.document || this,
                      a = K.access(n, e);
                    a || n.addEventListener(t, i, !0),
                      K.access(n, e, (a || 0) + 1);
                  },
                  teardown: function () {
                    var n = this.ownerDocument || this.document || this,
                      a = K.access(n, e) - 1;
                    a
                      ? K.access(n, e, a)
                      : (n.removeEventListener(t, i, !0), K.remove(n, e));
                  },
                };
              });
          var Se = n.location,
            Ae = { guid: Date.now() },
            Ce = /\?/;
          A.parseXML = function (t) {
            var e, i;
            if (!t || "string" != typeof t) return null;
            try {
              e = new n.DOMParser().parseFromString(t, "text/xml");
            } catch (t) {}
            return (
              (i = e && e.getElementsByTagName("parsererror")[0]),
              (e && !i) ||
                A.error(
                  "Invalid XML: " +
                    (i
                      ? A.map(i.childNodes, function (t) {
                          return t.textContent;
                        }).join("\n")
                      : t)
                ),
              e
            );
          };
          var Ee = /\[\]$/,
            Te = /\r?\n/g,
            Le = /^(?:submit|button|image|reset|file)$/i,
            _e = /^(?:input|select|textarea|keygen)/i;
          function Pe(t, e, i, n) {
            var a;
            if (Array.isArray(e))
              A.each(e, function (e, a) {
                i || Ee.test(t)
                  ? n(t, a)
                  : Pe(
                      t +
                        "[" +
                        ("object" == typeof a && null != a ? e : "") +
                        "]",
                      a,
                      i,
                      n
                    );
              });
            else if (i || "object" !== k(e)) n(t, e);
            else for (a in e) Pe(t + "[" + a + "]", e[a], i, n);
          }
          (A.param = function (t, e) {
            var i,
              n = [],
              a = function (t, e) {
                var i = x(e) ? e() : e;
                n[n.length] =
                  encodeURIComponent(t) +
                  "=" +
                  encodeURIComponent(null == i ? "" : i);
              };
            if (null == t) return "";
            if (Array.isArray(t) || (t.jquery && !A.isPlainObject(t)))
              A.each(t, function () {
                a(this.name, this.value);
              });
            else for (i in t) Pe(i, t[i], e, a);
            return n.join("&");
          }),
            A.fn.extend({
              serialize: function () {
                return A.param(this.serializeArray());
              },
              serializeArray: function () {
                return this.map(function () {
                  var t = A.prop(this, "elements");
                  return t ? A.makeArray(t) : this;
                })
                  .filter(function () {
                    var t = this.type;
                    return (
                      this.name &&
                      !A(this).is(":disabled") &&
                      _e.test(this.nodeName) &&
                      !Le.test(t) &&
                      (this.checked || !mt.test(t))
                    );
                  })
                  .map(function (t, e) {
                    var i = A(this).val();
                    return null == i
                      ? null
                      : Array.isArray(i)
                      ? A.map(i, function (t) {
                          return { name: e.name, value: t.replace(Te, "\r\n") };
                        })
                      : { name: e.name, value: i.replace(Te, "\r\n") };
                  })
                  .get();
              },
            });
          var Ie = /%20/g,
            Me = /#.*$/,
            Ne = /([?&])_=[^&]*/,
            De = /^(.*?):[ \t]*([^\r\n]*)$/gm,
            ze = /^(?:GET|HEAD)$/,
            Oe = /^\/\//,
            Fe = {},
            Xe = {},
            Re = "*/".concat("*"),
            He = b.createElement("a");
          function Ye(t) {
            return function (e, i) {
              "string" != typeof e && ((i = e), (e = "*"));
              var n,
                a = 0,
                s = e.toLowerCase().match(X) || [];
              if (x(i))
                for (; (n = s[a++]); )
                  "+" === n[0]
                    ? ((n = n.slice(1) || "*"), (t[n] = t[n] || []).unshift(i))
                    : (t[n] = t[n] || []).push(i);
            };
          }
          function We(t, e, i, n) {
            var a = {},
              s = t === Xe;
            function r(o) {
              var l;
              return (
                (a[o] = !0),
                A.each(t[o] || [], function (t, o) {
                  var c = o(e, i, n);
                  return "string" != typeof c || s || a[c]
                    ? s
                      ? !(l = c)
                      : void 0
                    : (e.dataTypes.unshift(c), r(c), !1);
                }),
                l
              );
            }
            return r(e.dataTypes[0]) || (!a["*"] && r("*"));
          }
          function Be(t, e) {
            var i,
              n,
              a = A.ajaxSettings.flatOptions || {};
            for (i in e)
              void 0 !== e[i] && ((a[i] ? t : n || (n = {}))[i] = e[i]);
            return n && A.extend(!0, t, n), t;
          }
          (He.href = Se.href),
            A.extend({
              active: 0,
              lastModified: {},
              etag: {},
              ajaxSettings: {
                url: Se.href,
                type: "GET",
                isLocal:
                  /^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(
                    Se.protocol
                  ),
                global: !0,
                processData: !0,
                async: !0,
                contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                accepts: {
                  "*": Re,
                  text: "text/plain",
                  html: "text/html",
                  xml: "application/xml, text/xml",
                  json: "application/json, text/javascript",
                },
                contents: { xml: /\bxml\b/, html: /\bhtml/, json: /\bjson\b/ },
                responseFields: {
                  xml: "responseXML",
                  text: "responseText",
                  json: "responseJSON",
                },
                converters: {
                  "* text": String,
                  "text html": !0,
                  "text json": JSON.parse,
                  "text xml": A.parseXML,
                },
                flatOptions: { url: !0, context: !0 },
              },
              ajaxSetup: function (t, e) {
                return e ? Be(Be(t, A.ajaxSettings), e) : Be(A.ajaxSettings, t);
              },
              ajaxPrefilter: Ye(Fe),
              ajaxTransport: Ye(Xe),
              ajax: function (t, e) {
                "object" == typeof t && ((e = t), (t = void 0)), (e = e || {});
                var i,
                  a,
                  s,
                  r,
                  o,
                  l,
                  c,
                  h,
                  d,
                  u,
                  f = A.ajaxSetup({}, e),
                  p = f.context || f,
                  g = f.context && (p.nodeType || p.jquery) ? A(p) : A.event,
                  m = A.Deferred(),
                  x = A.Callbacks("once memory"),
                  v = f.statusCode || {},
                  y = {},
                  w = {},
                  k = "canceled",
                  S = {
                    readyState: 0,
                    getResponseHeader: function (t) {
                      var e;
                      if (c) {
                        if (!r)
                          for (r = {}; (e = De.exec(s)); )
                            r[e[1].toLowerCase() + " "] = (
                              r[e[1].toLowerCase() + " "] || []
                            ).concat(e[2]);
                        e = r[t.toLowerCase() + " "];
                      }
                      return null == e ? null : e.join(", ");
                    },
                    getAllResponseHeaders: function () {
                      return c ? s : null;
                    },
                    setRequestHeader: function (t, e) {
                      return (
                        null == c &&
                          ((t = w[t.toLowerCase()] = w[t.toLowerCase()] || t),
                          (y[t] = e)),
                        this
                      );
                    },
                    overrideMimeType: function (t) {
                      return null == c && (f.mimeType = t), this;
                    },
                    statusCode: function (t) {
                      var e;
                      if (t)
                        if (c) S.always(t[S.status]);
                        else for (e in t) v[e] = [v[e], t[e]];
                      return this;
                    },
                    abort: function (t) {
                      var e = t || k;
                      return i && i.abort(e), C(0, e), this;
                    },
                  };
                if (
                  (m.promise(S),
                  (f.url = ((t || f.url || Se.href) + "").replace(
                    Oe,
                    Se.protocol + "//"
                  )),
                  (f.type = e.method || e.type || f.method || f.type),
                  (f.dataTypes = (f.dataType || "*").toLowerCase().match(X) || [
                    "",
                  ]),
                  null == f.crossDomain)
                ) {
                  l = b.createElement("a");
                  try {
                    (l.href = f.url),
                      (l.href = l.href),
                      (f.crossDomain =
                        He.protocol + "//" + He.host !=
                        l.protocol + "//" + l.host);
                  } catch (t) {
                    f.crossDomain = !0;
                  }
                }
                if (
                  (f.data &&
                    f.processData &&
                    "string" != typeof f.data &&
                    (f.data = A.param(f.data, f.traditional)),
                  We(Fe, f, e, S),
                  c)
                )
                  return S;
                for (d in ((h = A.event && f.global) &&
                  0 == A.active++ &&
                  A.event.trigger("ajaxStart"),
                (f.type = f.type.toUpperCase()),
                (f.hasContent = !ze.test(f.type)),
                (a = f.url.replace(Me, "")),
                f.hasContent
                  ? f.data &&
                    f.processData &&
                    0 ===
                      (f.contentType || "").indexOf(
                        "application/x-www-form-urlencoded"
                      ) &&
                    (f.data = f.data.replace(Ie, "+"))
                  : ((u = f.url.slice(a.length)),
                    f.data &&
                      (f.processData || "string" == typeof f.data) &&
                      ((a += (Ce.test(a) ? "&" : "?") + f.data), delete f.data),
                    !1 === f.cache &&
                      ((a = a.replace(Ne, "$1")),
                      (u = (Ce.test(a) ? "&" : "?") + "_=" + Ae.guid++ + u)),
                    (f.url = a + u)),
                f.ifModified &&
                  (A.lastModified[a] &&
                    S.setRequestHeader("If-Modified-Since", A.lastModified[a]),
                  A.etag[a] && S.setRequestHeader("If-None-Match", A.etag[a])),
                ((f.data && f.hasContent && !1 !== f.contentType) ||
                  e.contentType) &&
                  S.setRequestHeader("Content-Type", f.contentType),
                S.setRequestHeader(
                  "Accept",
                  f.dataTypes[0] && f.accepts[f.dataTypes[0]]
                    ? f.accepts[f.dataTypes[0]] +
                        ("*" !== f.dataTypes[0] ? ", " + Re + "; q=0.01" : "")
                    : f.accepts["*"]
                ),
                f.headers))
                  S.setRequestHeader(d, f.headers[d]);
                if (f.beforeSend && (!1 === f.beforeSend.call(p, S, f) || c))
                  return S.abort();
                if (
                  ((k = "abort"),
                  x.add(f.complete),
                  S.done(f.success),
                  S.fail(f.error),
                  (i = We(Xe, f, e, S)))
                ) {
                  if (
                    ((S.readyState = 1), h && g.trigger("ajaxSend", [S, f]), c)
                  )
                    return S;
                  f.async &&
                    f.timeout > 0 &&
                    (o = n.setTimeout(function () {
                      S.abort("timeout");
                    }, f.timeout));
                  try {
                    (c = !1), i.send(y, C);
                  } catch (t) {
                    if (c) throw t;
                    C(-1, t);
                  }
                } else C(-1, "No Transport");
                function C(t, e, r, l) {
                  var d,
                    u,
                    b,
                    y,
                    w,
                    k = e;
                  c ||
                    ((c = !0),
                    o && n.clearTimeout(o),
                    (i = void 0),
                    (s = l || ""),
                    (S.readyState = t > 0 ? 4 : 0),
                    (d = (t >= 200 && t < 300) || 304 === t),
                    r &&
                      (y = (function (t, e, i) {
                        for (
                          var n, a, s, r, o = t.contents, l = t.dataTypes;
                          "*" === l[0];

                        )
                          l.shift(),
                            void 0 === n &&
                              (n =
                                t.mimeType ||
                                e.getResponseHeader("Content-Type"));
                        if (n)
                          for (a in o)
                            if (o[a] && o[a].test(n)) {
                              l.unshift(a);
                              break;
                            }
                        if (l[0] in i) s = l[0];
                        else {
                          for (a in i) {
                            if (!l[0] || t.converters[a + " " + l[0]]) {
                              s = a;
                              break;
                            }
                            r || (r = a);
                          }
                          s = s || r;
                        }
                        if (s) return s !== l[0] && l.unshift(s), i[s];
                      })(f, S, r)),
                    !d &&
                      A.inArray("script", f.dataTypes) > -1 &&
                      A.inArray("json", f.dataTypes) < 0 &&
                      (f.converters["text script"] = function () {}),
                    (y = (function (t, e, i, n) {
                      var a,
                        s,
                        r,
                        o,
                        l,
                        c = {},
                        h = t.dataTypes.slice();
                      if (h[1])
                        for (r in t.converters)
                          c[r.toLowerCase()] = t.converters[r];
                      for (s = h.shift(); s; )
                        if (
                          (t.responseFields[s] && (i[t.responseFields[s]] = e),
                          !l &&
                            n &&
                            t.dataFilter &&
                            (e = t.dataFilter(e, t.dataType)),
                          (l = s),
                          (s = h.shift()))
                        )
                          if ("*" === s) s = l;
                          else if ("*" !== l && l !== s) {
                            if (!(r = c[l + " " + s] || c["* " + s]))
                              for (a in c)
                                if (
                                  (o = a.split(" "))[1] === s &&
                                  (r = c[l + " " + o[0]] || c["* " + o[0]])
                                ) {
                                  !0 === r
                                    ? (r = c[a])
                                    : !0 !== c[a] &&
                                      ((s = o[0]), h.unshift(o[1]));
                                  break;
                                }
                            if (!0 !== r)
                              if (r && t.throws) e = r(e);
                              else
                                try {
                                  e = r(e);
                                } catch (t) {
                                  return {
                                    state: "parsererror",
                                    error: r
                                      ? t
                                      : "No conversion from " + l + " to " + s,
                                  };
                                }
                          }
                      return { state: "success", data: e };
                    })(f, y, S, d)),
                    d
                      ? (f.ifModified &&
                          ((w = S.getResponseHeader("Last-Modified")) &&
                            (A.lastModified[a] = w),
                          (w = S.getResponseHeader("etag")) && (A.etag[a] = w)),
                        204 === t || "HEAD" === f.type
                          ? (k = "nocontent")
                          : 304 === t
                          ? (k = "notmodified")
                          : ((k = y.state), (u = y.data), (d = !(b = y.error))))
                      : ((b = k),
                        (!t && k) || ((k = "error"), t < 0 && (t = 0))),
                    (S.status = t),
                    (S.statusText = (e || k) + ""),
                    d
                      ? m.resolveWith(p, [u, k, S])
                      : m.rejectWith(p, [S, k, b]),
                    S.statusCode(v),
                    (v = void 0),
                    h &&
                      g.trigger(d ? "ajaxSuccess" : "ajaxError", [
                        S,
                        f,
                        d ? u : b,
                      ]),
                    x.fireWith(p, [S, k]),
                    h &&
                      (g.trigger("ajaxComplete", [S, f]),
                      --A.active || A.event.trigger("ajaxStop")));
                }
                return S;
              },
              getJSON: function (t, e, i) {
                return A.get(t, e, i, "json");
              },
              getScript: function (t, e) {
                return A.get(t, void 0, e, "script");
              },
            }),
            A.each(["get", "post"], function (t, e) {
              A[e] = function (t, i, n, a) {
                return (
                  x(i) && ((a = a || n), (n = i), (i = void 0)),
                  A.ajax(
                    A.extend(
                      { url: t, type: e, dataType: a, data: i, success: n },
                      A.isPlainObject(t) && t
                    )
                  )
                );
              };
            }),
            A.ajaxPrefilter(function (t) {
              var e;
              for (e in t.headers)
                "content-type" === e.toLowerCase() &&
                  (t.contentType = t.headers[e] || "");
            }),
            (A._evalUrl = function (t, e, i) {
              return A.ajax({
                url: t,
                type: "GET",
                dataType: "script",
                cache: !0,
                async: !1,
                global: !1,
                converters: { "text script": function () {} },
                dataFilter: function (t) {
                  A.globalEval(t, e, i);
                },
              });
            }),
            A.fn.extend({
              wrapAll: function (t) {
                var e;
                return (
                  this[0] &&
                    (x(t) && (t = t.call(this[0])),
                    (e = A(t, this[0].ownerDocument).eq(0).clone(!0)),
                    this[0].parentNode && e.insertBefore(this[0]),
                    e
                      .map(function () {
                        for (var t = this; t.firstElementChild; )
                          t = t.firstElementChild;
                        return t;
                      })
                      .append(this)),
                  this
                );
              },
              wrapInner: function (t) {
                return x(t)
                  ? this.each(function (e) {
                      A(this).wrapInner(t.call(this, e));
                    })
                  : this.each(function () {
                      var e = A(this),
                        i = e.contents();
                      i.length ? i.wrapAll(t) : e.append(t);
                    });
              },
              wrap: function (t) {
                var e = x(t);
                return this.each(function (i) {
                  A(this).wrapAll(e ? t.call(this, i) : t);
                });
              },
              unwrap: function (t) {
                return (
                  this.parent(t)
                    .not("body")
                    .each(function () {
                      A(this).replaceWith(this.childNodes);
                    }),
                  this
                );
              },
            }),
            (A.expr.pseudos.hidden = function (t) {
              return !A.expr.pseudos.visible(t);
            }),
            (A.expr.pseudos.visible = function (t) {
              return !!(
                t.offsetWidth ||
                t.offsetHeight ||
                t.getClientRects().length
              );
            }),
            (A.ajaxSettings.xhr = function () {
              try {
                return new n.XMLHttpRequest();
              } catch (t) {}
            });
          var je = { 0: 200, 1223: 204 },
            Ve = A.ajaxSettings.xhr();
          (m.cors = !!Ve && "withCredentials" in Ve),
            (m.ajax = Ve = !!Ve),
            A.ajaxTransport(function (t) {
              var e, i;
              if (m.cors || (Ve && !t.crossDomain))
                return {
                  send: function (a, s) {
                    var r,
                      o = t.xhr();
                    if (
                      (o.open(t.type, t.url, t.async, t.username, t.password),
                      t.xhrFields)
                    )
                      for (r in t.xhrFields) o[r] = t.xhrFields[r];
                    for (r in (t.mimeType &&
                      o.overrideMimeType &&
                      o.overrideMimeType(t.mimeType),
                    t.crossDomain ||
                      a["X-Requested-With"] ||
                      (a["X-Requested-With"] = "XMLHttpRequest"),
                    a))
                      o.setRequestHeader(r, a[r]);
                    (e = function (t) {
                      return function () {
                        e &&
                          ((e =
                            i =
                            o.onload =
                            o.onerror =
                            o.onabort =
                            o.ontimeout =
                            o.onreadystatechange =
                              null),
                          "abort" === t
                            ? o.abort()
                            : "error" === t
                            ? "number" != typeof o.status
                              ? s(0, "error")
                              : s(o.status, o.statusText)
                            : s(
                                je[o.status] || o.status,
                                o.statusText,
                                "text" !== (o.responseType || "text") ||
                                  "string" != typeof o.responseText
                                  ? { binary: o.response }
                                  : { text: o.responseText },
                                o.getAllResponseHeaders()
                              ));
                      };
                    }),
                      (o.onload = e()),
                      (i = o.onerror = o.ontimeout = e("error")),
                      void 0 !== o.onabort
                        ? (o.onabort = i)
                        : (o.onreadystatechange = function () {
                            4 === o.readyState &&
                              n.setTimeout(function () {
                                e && i();
                              });
                          }),
                      (e = e("abort"));
                    try {
                      o.send((t.hasContent && t.data) || null);
                    } catch (t) {
                      if (e) throw t;
                    }
                  },
                  abort: function () {
                    e && e();
                  },
                };
            }),
            A.ajaxPrefilter(function (t) {
              t.crossDomain && (t.contents.script = !1);
            }),
            A.ajaxSetup({
              accepts: {
                script:
                  "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript",
              },
              contents: { script: /\b(?:java|ecma)script\b/ },
              converters: {
                "text script": function (t) {
                  return A.globalEval(t), t;
                },
              },
            }),
            A.ajaxPrefilter("script", function (t) {
              void 0 === t.cache && (t.cache = !1),
                t.crossDomain && (t.type = "GET");
            }),
            A.ajaxTransport("script", function (t) {
              var e, i;
              if (t.crossDomain || t.scriptAttrs)
                return {
                  send: function (n, a) {
                    (e = A("<script>")
                      .attr(t.scriptAttrs || {})
                      .prop({ charset: t.scriptCharset, src: t.url })
                      .on(
                        "load error",
                        (i = function (t) {
                          e.remove(),
                            (i = null),
                            t && a("error" === t.type ? 404 : 200, t.type);
                        })
                      )),
                      b.head.appendChild(e[0]);
                  },
                  abort: function () {
                    i && i();
                  },
                };
            });
          var Ge,
            qe = [],
            Ue = /(=)\?(?=&|$)|\?\?/;
          A.ajaxSetup({
            jsonp: "callback",
            jsonpCallback: function () {
              var t = qe.pop() || A.expando + "_" + Ae.guid++;
              return (this[t] = !0), t;
            },
          }),
            A.ajaxPrefilter("json jsonp", function (t, e, i) {
              var a,
                s,
                r,
                o =
                  !1 !== t.jsonp &&
                  (Ue.test(t.url)
                    ? "url"
                    : "string" == typeof t.data &&
                      0 ===
                        (t.contentType || "").indexOf(
                          "application/x-www-form-urlencoded"
                        ) &&
                      Ue.test(t.data) &&
                      "data");
              if (o || "jsonp" === t.dataTypes[0])
                return (
                  (a = t.jsonpCallback =
                    x(t.jsonpCallback) ? t.jsonpCallback() : t.jsonpCallback),
                  o
                    ? (t[o] = t[o].replace(Ue, "$1" + a))
                    : !1 !== t.jsonp &&
                      (t.url +=
                        (Ce.test(t.url) ? "&" : "?") + t.jsonp + "=" + a),
                  (t.converters["script json"] = function () {
                    return r || A.error(a + " was not called"), r[0];
                  }),
                  (t.dataTypes[0] = "json"),
                  (s = n[a]),
                  (n[a] = function () {
                    r = arguments;
                  }),
                  i.always(function () {
                    void 0 === s ? A(n).removeProp(a) : (n[a] = s),
                      t[a] && ((t.jsonpCallback = e.jsonpCallback), qe.push(a)),
                      r && x(s) && s(r[0]),
                      (r = s = void 0);
                  }),
                  "script"
                );
            }),
            (m.createHTMLDocument =
              (((Ge = b.implementation.createHTMLDocument("").body).innerHTML =
                "<form></form><form></form>"),
              2 === Ge.childNodes.length)),
            (A.parseHTML = function (t, e, i) {
              return "string" != typeof t
                ? []
                : ("boolean" == typeof e && ((i = e), (e = !1)),
                  e ||
                    (m.createHTMLDocument
                      ? (((n = (e =
                          b.implementation.createHTMLDocument(
                            ""
                          )).createElement("base")).href = b.location.href),
                        e.head.appendChild(n))
                      : (e = b)),
                  (s = !i && []),
                  (a = I.exec(t))
                    ? [e.createElement(a[1])]
                    : ((a = St([t], e, s)),
                      s && s.length && A(s).remove(),
                      A.merge([], a.childNodes)));
              var n, a, s;
            }),
            (A.fn.load = function (t, e, i) {
              var n,
                a,
                s,
                r = this,
                o = t.indexOf(" ");
              return (
                o > -1 && ((n = xe(t.slice(o))), (t = t.slice(0, o))),
                x(e)
                  ? ((i = e), (e = void 0))
                  : e && "object" == typeof e && (a = "POST"),
                r.length > 0 &&
                  A.ajax({
                    url: t,
                    type: a || "GET",
                    dataType: "html",
                    data: e,
                  })
                    .done(function (t) {
                      (s = arguments),
                        r.html(
                          n ? A("<div>").append(A.parseHTML(t)).find(n) : t
                        );
                    })
                    .always(
                      i &&
                        function (t, e) {
                          r.each(function () {
                            i.apply(this, s || [t.responseText, e, t]);
                          });
                        }
                    ),
                this
              );
            }),
            (A.expr.pseudos.animated = function (t) {
              return A.grep(A.timers, function (e) {
                return t === e.elem;
              }).length;
            }),
            (A.offset = {
              setOffset: function (t, e, i) {
                var n,
                  a,
                  s,
                  r,
                  o,
                  l,
                  c = A.css(t, "position"),
                  h = A(t),
                  d = {};
                "static" === c && (t.style.position = "relative"),
                  (o = h.offset()),
                  (s = A.css(t, "top")),
                  (l = A.css(t, "left")),
                  ("absolute" === c || "fixed" === c) &&
                  (s + l).indexOf("auto") > -1
                    ? ((r = (n = h.position()).top), (a = n.left))
                    : ((r = parseFloat(s) || 0), (a = parseFloat(l) || 0)),
                  x(e) && (e = e.call(t, i, A.extend({}, o))),
                  null != e.top && (d.top = e.top - o.top + r),
                  null != e.left && (d.left = e.left - o.left + a),
                  "using" in e ? e.using.call(t, d) : h.css(d);
              },
            }),
            A.fn.extend({
              offset: function (t) {
                if (arguments.length)
                  return void 0 === t
                    ? this
                    : this.each(function (e) {
                        A.offset.setOffset(this, t, e);
                      });
                var e,
                  i,
                  n = this[0];
                return n
                  ? n.getClientRects().length
                    ? ((e = n.getBoundingClientRect()),
                      (i = n.ownerDocument.defaultView),
                      {
                        top: e.top + i.pageYOffset,
                        left: e.left + i.pageXOffset,
                      })
                    : { top: 0, left: 0 }
                  : void 0;
              },
              position: function () {
                if (this[0]) {
                  var t,
                    e,
                    i,
                    n = this[0],
                    a = { top: 0, left: 0 };
                  if ("fixed" === A.css(n, "position"))
                    e = n.getBoundingClientRect();
                  else {
                    for (
                      e = this.offset(),
                        i = n.ownerDocument,
                        t = n.offsetParent || i.documentElement;
                      t &&
                      (t === i.body || t === i.documentElement) &&
                      "static" === A.css(t, "position");

                    )
                      t = t.parentNode;
                    t &&
                      t !== n &&
                      1 === t.nodeType &&
                      (((a = A(t).offset()).top += A.css(
                        t,
                        "borderTopWidth",
                        !0
                      )),
                      (a.left += A.css(t, "borderLeftWidth", !0)));
                  }
                  return {
                    top: e.top - a.top - A.css(n, "marginTop", !0),
                    left: e.left - a.left - A.css(n, "marginLeft", !0),
                  };
                }
              },
              offsetParent: function () {
                return this.map(function () {
                  for (
                    var t = this.offsetParent;
                    t && "static" === A.css(t, "position");

                  )
                    t = t.offsetParent;
                  return t || rt;
                });
              },
            }),
            A.each(
              { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" },
              function (t, e) {
                var i = "pageYOffset" === e;
                A.fn[t] = function (n) {
                  return V(
                    this,
                    function (t, n, a) {
                      var s;
                      if (
                        (v(t)
                          ? (s = t)
                          : 9 === t.nodeType && (s = t.defaultView),
                        void 0 === a)
                      )
                        return s ? s[e] : t[n];
                      s
                        ? s.scrollTo(
                            i ? s.pageXOffset : a,
                            i ? a : s.pageYOffset
                          )
                        : (t[n] = a);
                    },
                    t,
                    n,
                    arguments.length
                  );
                };
              }
            ),
            A.each(["top", "left"], function (t, e) {
              A.cssHooks[e] = Vt(m.pixelPosition, function (t, i) {
                if (i)
                  return (
                    (i = jt(t, e)), Ht.test(i) ? A(t).position()[e] + "px" : i
                  );
              });
            }),
            A.each({ Height: "height", Width: "width" }, function (t, e) {
              A.each(
                { padding: "inner" + t, content: e, "": "outer" + t },
                function (i, n) {
                  A.fn[n] = function (a, s) {
                    var r = arguments.length && (i || "boolean" != typeof a),
                      o = i || (!0 === a || !0 === s ? "margin" : "border");
                    return V(
                      this,
                      function (e, i, a) {
                        var s;
                        return v(e)
                          ? 0 === n.indexOf("outer")
                            ? e["inner" + t]
                            : e.document.documentElement["client" + t]
                          : 9 === e.nodeType
                          ? ((s = e.documentElement),
                            Math.max(
                              e.body["scroll" + t],
                              s["scroll" + t],
                              e.body["offset" + t],
                              s["offset" + t],
                              s["client" + t]
                            ))
                          : void 0 === a
                          ? A.css(e, i, o)
                          : A.style(e, i, a, o);
                      },
                      e,
                      r ? a : void 0,
                      r
                    );
                  };
                }
              );
            }),
            A.each(
              [
                "ajaxStart",
                "ajaxStop",
                "ajaxComplete",
                "ajaxError",
                "ajaxSuccess",
                "ajaxSend",
              ],
              function (t, e) {
                A.fn[e] = function (t) {
                  return this.on(e, t);
                };
              }
            ),
            A.fn.extend({
              bind: function (t, e, i) {
                return this.on(t, null, e, i);
              },
              unbind: function (t, e) {
                return this.off(t, null, e);
              },
              delegate: function (t, e, i, n) {
                return this.on(e, t, i, n);
              },
              undelegate: function (t, e, i) {
                return 1 === arguments.length
                  ? this.off(t, "**")
                  : this.off(e, t || "**", i);
              },
              hover: function (t, e) {
                return this.mouseenter(t).mouseleave(e || t);
              },
            }),
            A.each(
              "blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(
                " "
              ),
              function (t, e) {
                A.fn[e] = function (t, i) {
                  return arguments.length > 0
                    ? this.on(e, null, t, i)
                    : this.trigger(e);
                };
              }
            );
          var $e = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
          (A.proxy = function (t, e) {
            var i, n, a;
            if (("string" == typeof e && ((i = t[e]), (e = t), (t = i)), x(t)))
              return (
                (n = o.call(arguments, 2)),
                (a = function () {
                  return t.apply(e || this, n.concat(o.call(arguments)));
                }),
                (a.guid = t.guid = t.guid || A.guid++),
                a
              );
          }),
            (A.holdReady = function (t) {
              t ? A.readyWait++ : A.ready(!0);
            }),
            (A.isArray = Array.isArray),
            (A.parseJSON = JSON.parse),
            (A.nodeName = P),
            (A.isFunction = x),
            (A.isWindow = v),
            (A.camelCase = $),
            (A.type = k),
            (A.now = Date.now),
            (A.isNumeric = function (t) {
              var e = A.type(t);
              return (
                ("number" === e || "string" === e) && !isNaN(t - parseFloat(t))
              );
            }),
            (A.trim = function (t) {
              return null == t ? "" : (t + "").replace($e, "");
            }),
            void 0 ===
              (i = function () {
                return A;
              }.apply(e, [])) || (t.exports = i);
          var Ze = n.jQuery,
            Qe = n.$;
          return (
            (A.noConflict = function (t) {
              return (
                n.$ === A && (n.$ = Qe),
                t && n.jQuery === A && (n.jQuery = Ze),
                A
              );
            }),
            void 0 === a && (n.jQuery = n.$ = A),
            A
          );
        });
      },
      211: function (t, e) {
        !(function (t) {
          "use strict";
          function e(t) {
            return i(t) && "function" == typeof t.from;
          }
          function i(t) {
            return "object" == typeof t && "function" == typeof t.to;
          }
          function n(t) {
            t.parentElement.removeChild(t);
          }
          function a(t) {
            return null != t;
          }
          function s(t) {
            t.preventDefault();
          }
          function r(t) {
            return t.filter(function (t) {
              return !this[t] && (this[t] = !0);
            }, {});
          }
          function o(t, e) {
            return Math.round(t / e) * e;
          }
          function l(t, e) {
            var i = t.getBoundingClientRect(),
              n = t.ownerDocument,
              a = n.documentElement,
              s = x(n);
            return (
              /webkit.*Chrome.*Mobile/i.test(navigator.userAgent) && (s.x = 0),
              e ? i.top + s.y - a.clientTop : i.left + s.x - a.clientLeft
            );
          }
          function c(t) {
            return "number" == typeof t && !isNaN(t) && isFinite(t);
          }
          function h(t, e, i) {
            i > 0 &&
              (p(t, e),
              setTimeout(function () {
                g(t, e);
              }, i));
          }
          function d(t) {
            return Math.max(Math.min(t, 100), 0);
          }
          function u(t) {
            return Array.isArray(t) ? t : [t];
          }
          function f(t) {
            var e = (t = String(t)).split(".");
            return e.length > 1 ? e[1].length : 0;
          }
          function p(t, e) {
            t.classList && !/\s/.test(e)
              ? t.classList.add(e)
              : (t.className += " " + e);
          }
          function g(t, e) {
            t.classList && !/\s/.test(e)
              ? t.classList.remove(e)
              : (t.className = t.className.replace(
                  new RegExp(
                    "(^|\\b)" + e.split(" ").join("|") + "(\\b|$)",
                    "gi"
                  ),
                  " "
                ));
          }
          function m(t, e) {
            return t.classList
              ? t.classList.contains(e)
              : new RegExp("\\b" + e + "\\b").test(t.className);
          }
          function x(t) {
            var e = void 0 !== window.pageXOffset,
              i = "CSS1Compat" === (t.compatMode || "");
            return {
              x: e
                ? window.pageXOffset
                : i
                ? t.documentElement.scrollLeft
                : t.body.scrollLeft,
              y: e
                ? window.pageYOffset
                : i
                ? t.documentElement.scrollTop
                : t.body.scrollTop,
            };
          }
          function v() {
            return window.navigator.pointerEnabled
              ? { start: "pointerdown", move: "pointermove", end: "pointerup" }
              : window.navigator.msPointerEnabled
              ? {
                  start: "MSPointerDown",
                  move: "MSPointerMove",
                  end: "MSPointerUp",
                }
              : {
                  start: "mousedown touchstart",
                  move: "mousemove touchmove",
                  end: "mouseup touchend",
                };
          }
          function b() {
            var t = !1;
            try {
              var e = Object.defineProperty({}, "passive", {
                get: function () {
                  t = !0;
                },
              });
              window.addEventListener("test", null, e);
            } catch (t) {}
            return t;
          }
          function y() {
            return (
              window.CSS && CSS.supports && CSS.supports("touch-action", "none")
            );
          }
          function w(t, e) {
            return 100 / (e - t);
          }
          function k(t, e, i) {
            return (100 * e) / (t[i + 1] - t[i]);
          }
          function S(t, e) {
            return k(t, t[0] < 0 ? e + Math.abs(t[0]) : e - t[0], 0);
          }
          function A(t, e) {
            return (e * (t[1] - t[0])) / 100 + t[0];
          }
          function C(t, e) {
            for (var i = 1; t >= e[i]; ) i += 1;
            return i;
          }
          function E(t, e, i) {
            if (i >= t.slice(-1)[0]) return 100;
            var n = C(i, t),
              a = t[n - 1],
              s = t[n],
              r = e[n - 1],
              o = e[n];
            return r + S([a, s], i) / w(r, o);
          }
          function T(t, e, i) {
            if (i >= 100) return t.slice(-1)[0];
            var n = C(i, e),
              a = t[n - 1],
              s = t[n],
              r = e[n - 1];
            return A([a, s], (i - r) * w(r, e[n]));
          }
          function L(t, e, i, n) {
            if (100 === n) return n;
            var a = C(n, t),
              s = t[a - 1],
              r = t[a];
            return i
              ? n - s > (r - s) / 2
                ? r
                : s
              : e[a - 1]
              ? t[a - 1] + o(n - t[a - 1], e[a - 1])
              : n;
          }
          var _, P;
          (t.PipsMode = void 0),
            ((P = t.PipsMode || (t.PipsMode = {})).Range = "range"),
            (P.Steps = "steps"),
            (P.Positions = "positions"),
            (P.Count = "count"),
            (P.Values = "values"),
            (t.PipsType = void 0),
            ((_ = t.PipsType || (t.PipsType = {}))[(_.None = -1)] = "None"),
            (_[(_.NoValue = 0)] = "NoValue"),
            (_[(_.LargeValue = 1)] = "LargeValue"),
            (_[(_.SmallValue = 2)] = "SmallValue");
          var I = (function () {
              function t(t, e, i) {
                var n;
                (this.xPct = []),
                  (this.xVal = []),
                  (this.xSteps = []),
                  (this.xNumSteps = []),
                  (this.xHighestCompleteStep = []),
                  (this.xSteps = [i || !1]),
                  (this.xNumSteps = [!1]),
                  (this.snap = e);
                var a = [];
                for (
                  Object.keys(t).forEach(function (e) {
                    a.push([u(t[e]), e]);
                  }),
                    a.sort(function (t, e) {
                      return t[0][0] - e[0][0];
                    }),
                    n = 0;
                  n < a.length;
                  n++
                )
                  this.handleEntryPoint(a[n][1], a[n][0]);
                for (
                  this.xNumSteps = this.xSteps.slice(0), n = 0;
                  n < this.xNumSteps.length;
                  n++
                )
                  this.handleStepPoint(n, this.xNumSteps[n]);
              }
              return (
                (t.prototype.getDistance = function (t) {
                  for (var e = [], i = 0; i < this.xNumSteps.length - 1; i++)
                    e[i] = k(this.xVal, t, i);
                  return e;
                }),
                (t.prototype.getAbsoluteDistance = function (t, e, i) {
                  var n,
                    a = 0;
                  if (t < this.xPct[this.xPct.length - 1])
                    for (; t > this.xPct[a + 1]; ) a++;
                  else
                    t === this.xPct[this.xPct.length - 1] &&
                      (a = this.xPct.length - 2);
                  i || t !== this.xPct[a + 1] || a++, null === e && (e = []);
                  var s = 1,
                    r = e[a],
                    o = 0,
                    l = 0,
                    c = 0,
                    h = 0;
                  for (
                    n = i
                      ? (t - this.xPct[a]) / (this.xPct[a + 1] - this.xPct[a])
                      : (this.xPct[a + 1] - t) /
                        (this.xPct[a + 1] - this.xPct[a]);
                    r > 0;

                  )
                    (o = this.xPct[a + 1 + h] - this.xPct[a + h]),
                      e[a + h] * s + 100 - 100 * n > 100
                        ? ((l = o * n), (s = (r - 100 * n) / e[a + h]), (n = 1))
                        : ((l = ((e[a + h] * o) / 100) * s), (s = 0)),
                      i
                        ? ((c -= l), this.xPct.length + h >= 1 && h--)
                        : ((c += l), this.xPct.length - h >= 1 && h++),
                      (r = e[a + h] * s);
                  return t + c;
                }),
                (t.prototype.toStepping = function (t) {
                  return (t = E(this.xVal, this.xPct, t));
                }),
                (t.prototype.fromStepping = function (t) {
                  return T(this.xVal, this.xPct, t);
                }),
                (t.prototype.getStep = function (t) {
                  return (t = L(this.xPct, this.xSteps, this.snap, t));
                }),
                (t.prototype.getDefaultStep = function (t, e, i) {
                  var n = C(t, this.xPct);
                  return (
                    (100 === t || (e && t === this.xPct[n - 1])) &&
                      (n = Math.max(n - 1, 1)),
                    (this.xVal[n] - this.xVal[n - 1]) / i
                  );
                }),
                (t.prototype.getNearbySteps = function (t) {
                  var e = C(t, this.xPct);
                  return {
                    stepBefore: {
                      startValue: this.xVal[e - 2],
                      step: this.xNumSteps[e - 2],
                      highestStep: this.xHighestCompleteStep[e - 2],
                    },
                    thisStep: {
                      startValue: this.xVal[e - 1],
                      step: this.xNumSteps[e - 1],
                      highestStep: this.xHighestCompleteStep[e - 1],
                    },
                    stepAfter: {
                      startValue: this.xVal[e],
                      step: this.xNumSteps[e],
                      highestStep: this.xHighestCompleteStep[e],
                    },
                  };
                }),
                (t.prototype.countStepDecimals = function () {
                  var t = this.xNumSteps.map(f);
                  return Math.max.apply(null, t);
                }),
                (t.prototype.hasNoSize = function () {
                  return this.xVal[0] === this.xVal[this.xVal.length - 1];
                }),
                (t.prototype.convert = function (t) {
                  return this.getStep(this.toStepping(t));
                }),
                (t.prototype.handleEntryPoint = function (t, e) {
                  var i;
                  if (
                    !c(
                      (i = "min" === t ? 0 : "max" === t ? 100 : parseFloat(t))
                    ) ||
                    !c(e[0])
                  )
                    throw new Error("noUiSlider: 'range' value isn't numeric.");
                  this.xPct.push(i), this.xVal.push(e[0]);
                  var n = Number(e[1]);
                  i
                    ? this.xSteps.push(!isNaN(n) && n)
                    : isNaN(n) || (this.xSteps[0] = n),
                    this.xHighestCompleteStep.push(0);
                }),
                (t.prototype.handleStepPoint = function (t, e) {
                  if (e)
                    if (this.xVal[t] !== this.xVal[t + 1]) {
                      this.xSteps[t] =
                        k([this.xVal[t], this.xVal[t + 1]], e, 0) /
                        w(this.xPct[t], this.xPct[t + 1]);
                      var i =
                          (this.xVal[t + 1] - this.xVal[t]) / this.xNumSteps[t],
                        n = Math.ceil(Number(i.toFixed(3)) - 1),
                        a = this.xVal[t] + this.xNumSteps[t] * n;
                      this.xHighestCompleteStep[t] = a;
                    } else
                      this.xSteps[t] = this.xHighestCompleteStep[t] =
                        this.xVal[t];
                }),
                t
              );
            })(),
            M = {
              to: function (t) {
                return void 0 === t ? "" : t.toFixed(2);
              },
              from: Number,
            },
            N = {
              target: "target",
              base: "base",
              origin: "origin",
              handle: "handle",
              handleLower: "handle-lower",
              handleUpper: "handle-upper",
              touchArea: "touch-area",
              horizontal: "horizontal",
              vertical: "vertical",
              background: "background",
              connect: "connect",
              connects: "connects",
              ltr: "ltr",
              rtl: "rtl",
              textDirectionLtr: "txt-dir-ltr",
              textDirectionRtl: "txt-dir-rtl",
              draggable: "draggable",
              drag: "state-drag",
              tap: "state-tap",
              active: "active",
              tooltip: "tooltip",
              pips: "pips",
              pipsHorizontal: "pips-horizontal",
              pipsVertical: "pips-vertical",
              marker: "marker",
              markerHorizontal: "marker-horizontal",
              markerVertical: "marker-vertical",
              markerNormal: "marker-normal",
              markerLarge: "marker-large",
              markerSub: "marker-sub",
              value: "value",
              valueHorizontal: "value-horizontal",
              valueVertical: "value-vertical",
              valueNormal: "value-normal",
              valueLarge: "value-large",
              valueSub: "value-sub",
            },
            D = { tooltips: ".__tooltips", aria: ".__aria" };
          function z(t, e) {
            if (!c(e)) throw new Error("noUiSlider: 'step' is not numeric.");
            t.singleStep = e;
          }
          function O(t, e) {
            if (!c(e))
              throw new Error(
                "noUiSlider: 'keyboardPageMultiplier' is not numeric."
              );
            t.keyboardPageMultiplier = e;
          }
          function F(t, e) {
            if (!c(e))
              throw new Error(
                "noUiSlider: 'keyboardMultiplier' is not numeric."
              );
            t.keyboardMultiplier = e;
          }
          function X(t, e) {
            if (!c(e))
              throw new Error(
                "noUiSlider: 'keyboardDefaultStep' is not numeric."
              );
            t.keyboardDefaultStep = e;
          }
          function R(t, e) {
            if ("object" != typeof e || Array.isArray(e))
              throw new Error("noUiSlider: 'range' is not an object.");
            if (void 0 === e.min || void 0 === e.max)
              throw new Error("noUiSlider: Missing 'min' or 'max' in 'range'.");
            t.spectrum = new I(e, t.snap || !1, t.singleStep);
          }
          function H(t, e) {
            if (((e = u(e)), !Array.isArray(e) || !e.length))
              throw new Error("noUiSlider: 'start' option is incorrect.");
            (t.handles = e.length), (t.start = e);
          }
          function Y(t, e) {
            if ("boolean" != typeof e)
              throw new Error("noUiSlider: 'snap' option must be a boolean.");
            t.snap = e;
          }
          function W(t, e) {
            if ("boolean" != typeof e)
              throw new Error(
                "noUiSlider: 'animate' option must be a boolean."
              );
            t.animate = e;
          }
          function B(t, e) {
            if ("number" != typeof e)
              throw new Error(
                "noUiSlider: 'animationDuration' option must be a number."
              );
            t.animationDuration = e;
          }
          function j(t, e) {
            var i,
              n = [!1];
            if (
              ("lower" === e ? (e = [!0, !1]) : "upper" === e && (e = [!1, !0]),
              !0 === e || !1 === e)
            ) {
              for (i = 1; i < t.handles; i++) n.push(e);
              n.push(!1);
            } else {
              if (!Array.isArray(e) || !e.length || e.length !== t.handles + 1)
                throw new Error(
                  "noUiSlider: 'connect' option doesn't match handle count."
                );
              n = e;
            }
            t.connect = n;
          }
          function V(t, e) {
            switch (e) {
              case "horizontal":
                t.ort = 0;
                break;
              case "vertical":
                t.ort = 1;
                break;
              default:
                throw new Error("noUiSlider: 'orientation' option is invalid.");
            }
          }
          function G(t, e) {
            if (!c(e))
              throw new Error("noUiSlider: 'margin' option must be numeric.");
            0 !== e && (t.margin = t.spectrum.getDistance(e));
          }
          function q(t, e) {
            if (!c(e))
              throw new Error("noUiSlider: 'limit' option must be numeric.");
            if (
              ((t.limit = t.spectrum.getDistance(e)), !t.limit || t.handles < 2)
            )
              throw new Error(
                "noUiSlider: 'limit' option is only supported on linear sliders with 2 or more handles."
              );
          }
          function U(t, e) {
            var i;
            if (!c(e) && !Array.isArray(e))
              throw new Error(
                "noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers."
              );
            if (Array.isArray(e) && 2 !== e.length && !c(e[0]) && !c(e[1]))
              throw new Error(
                "noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers."
              );
            if (0 !== e) {
              for (
                Array.isArray(e) || (e = [e, e]),
                  t.padding = [
                    t.spectrum.getDistance(e[0]),
                    t.spectrum.getDistance(e[1]),
                  ],
                  i = 0;
                i < t.spectrum.xNumSteps.length - 1;
                i++
              )
                if (t.padding[0][i] < 0 || t.padding[1][i] < 0)
                  throw new Error(
                    "noUiSlider: 'padding' option must be a positive number(s)."
                  );
              var n = e[0] + e[1],
                a = t.spectrum.xVal[0];
              if (n / (t.spectrum.xVal[t.spectrum.xVal.length - 1] - a) > 1)
                throw new Error(
                  "noUiSlider: 'padding' option must not exceed 100% of the range."
                );
            }
          }
          function $(t, e) {
            switch (e) {
              case "ltr":
                t.dir = 0;
                break;
              case "rtl":
                t.dir = 1;
                break;
              default:
                throw new Error(
                  "noUiSlider: 'direction' option was not recognized."
                );
            }
          }
          function Z(t, e) {
            if ("string" != typeof e)
              throw new Error(
                "noUiSlider: 'behaviour' must be a string containing options."
              );
            var i = e.indexOf("tap") >= 0,
              n = e.indexOf("drag") >= 0,
              a = e.indexOf("fixed") >= 0,
              s = e.indexOf("snap") >= 0,
              r = e.indexOf("hover") >= 0,
              o = e.indexOf("unconstrained") >= 0,
              l = e.indexOf("drag-all") >= 0;
            if (a) {
              if (2 !== t.handles)
                throw new Error(
                  "noUiSlider: 'fixed' behaviour must be used with 2 handles"
                );
              G(t, t.start[1] - t.start[0]);
            }
            if (o && (t.margin || t.limit))
              throw new Error(
                "noUiSlider: 'unconstrained' behaviour cannot be used with margin or limit"
              );
            t.events = {
              tap: i || s,
              drag: n,
              dragAll: l,
              fixed: a,
              snap: s,
              hover: r,
              unconstrained: o,
            };
          }
          function Q(t, e) {
            if (!1 !== e)
              if (!0 === e || i(e)) {
                t.tooltips = [];
                for (var n = 0; n < t.handles; n++) t.tooltips.push(e);
              } else {
                if ((e = u(e)).length !== t.handles)
                  throw new Error(
                    "noUiSlider: must pass a formatter for all handles."
                  );
                e.forEach(function (t) {
                  if ("boolean" != typeof t && !i(t))
                    throw new Error(
                      "noUiSlider: 'tooltips' must be passed a formatter or 'false'."
                    );
                }),
                  (t.tooltips = e);
              }
          }
          function K(t, e) {
            if (e.length !== t.handles)
              throw new Error(
                "noUiSlider: must pass a attributes for all handles."
              );
            t.handleAttributes = e;
          }
          function J(t, e) {
            if (!i(e))
              throw new Error("noUiSlider: 'ariaFormat' requires 'to' method.");
            t.ariaFormat = e;
          }
          function tt(t, i) {
            if (!e(i))
              throw new Error(
                "noUiSlider: 'format' requires 'to' and 'from' methods."
              );
            t.format = i;
          }
          function et(t, e) {
            if ("boolean" != typeof e)
              throw new Error(
                "noUiSlider: 'keyboardSupport' option must be a boolean."
              );
            t.keyboardSupport = e;
          }
          function it(t, e) {
            t.documentElement = e;
          }
          function nt(t, e) {
            if ("string" != typeof e && !1 !== e)
              throw new Error(
                "noUiSlider: 'cssPrefix' must be a string or `false`."
              );
            t.cssPrefix = e;
          }
          function at(t, e) {
            if ("object" != typeof e)
              throw new Error("noUiSlider: 'cssClasses' must be an object.");
            "string" == typeof t.cssPrefix
              ? ((t.cssClasses = {}),
                Object.keys(e).forEach(function (i) {
                  t.cssClasses[i] = t.cssPrefix + e[i];
                }))
              : (t.cssClasses = e);
          }
          function st(t) {
            var e = {
                margin: null,
                limit: null,
                padding: null,
                animate: !0,
                animationDuration: 300,
                ariaFormat: M,
                format: M,
              },
              i = {
                step: { r: !1, t: z },
                keyboardPageMultiplier: { r: !1, t: O },
                keyboardMultiplier: { r: !1, t: F },
                keyboardDefaultStep: { r: !1, t: X },
                start: { r: !0, t: H },
                connect: { r: !0, t: j },
                direction: { r: !0, t: $ },
                snap: { r: !1, t: Y },
                animate: { r: !1, t: W },
                animationDuration: { r: !1, t: B },
                range: { r: !0, t: R },
                orientation: { r: !1, t: V },
                margin: { r: !1, t: G },
                limit: { r: !1, t: q },
                padding: { r: !1, t: U },
                behaviour: { r: !0, t: Z },
                ariaFormat: { r: !1, t: J },
                format: { r: !1, t: tt },
                tooltips: { r: !1, t: Q },
                keyboardSupport: { r: !0, t: et },
                documentElement: { r: !1, t: it },
                cssPrefix: { r: !0, t: nt },
                cssClasses: { r: !0, t: at },
                handleAttributes: { r: !1, t: K },
              },
              n = {
                connect: !1,
                direction: "ltr",
                behaviour: "tap",
                orientation: "horizontal",
                keyboardSupport: !0,
                cssPrefix: "noUi-",
                cssClasses: N,
                keyboardPageMultiplier: 5,
                keyboardMultiplier: 1,
                keyboardDefaultStep: 10,
              };
            t.format && !t.ariaFormat && (t.ariaFormat = t.format),
              Object.keys(i).forEach(function (s) {
                if (a(t[s]) || void 0 !== n[s])
                  i[s].t(e, a(t[s]) ? t[s] : n[s]);
                else if (i[s].r)
                  throw new Error("noUiSlider: '" + s + "' is required.");
              }),
              (e.pips = t.pips);
            var s = document.createElement("div"),
              r = void 0 !== s.style.msTransform,
              o = void 0 !== s.style.transform;
            e.transformRule = o
              ? "transform"
              : r
              ? "msTransform"
              : "webkitTransform";
            var l = [
              ["left", "top"],
              ["right", "bottom"],
            ];
            return (e.style = l[e.dir][e.ort]), e;
          }
          function rt(e, i, o) {
            var c,
              f,
              w,
              k,
              S,
              A = v(),
              C = y() && b(),
              E = e,
              T = i.spectrum,
              L = [],
              _ = [],
              P = [],
              I = 0,
              M = {},
              N = e.ownerDocument,
              z = i.documentElement || N.documentElement,
              O = N.body,
              F = "rtl" === N.dir || 1 === i.ort ? 0 : 100;
            function X(t, e) {
              var i = N.createElement("div");
              return e && p(i, e), t.appendChild(i), i;
            }
            function R(t, e) {
              var n = X(t, i.cssClasses.origin),
                a = X(n, i.cssClasses.handle);
              if (
                (X(a, i.cssClasses.touchArea),
                a.setAttribute("data-handle", String(e)),
                i.keyboardSupport &&
                  (a.setAttribute("tabindex", "0"),
                  a.addEventListener("keydown", function (t) {
                    return ft(t, e);
                  })),
                void 0 !== i.handleAttributes)
              ) {
                var s = i.handleAttributes[e];
                Object.keys(s).forEach(function (t) {
                  a.setAttribute(t, s[t]);
                });
              }
              return (
                a.setAttribute("role", "slider"),
                a.setAttribute(
                  "aria-orientation",
                  i.ort ? "vertical" : "horizontal"
                ),
                0 === e
                  ? p(a, i.cssClasses.handleLower)
                  : e === i.handles - 1 && p(a, i.cssClasses.handleUpper),
                n
              );
            }
            function H(t, e) {
              return !!e && X(t, i.cssClasses.connect);
            }
            function Y(t, e) {
              var n = X(e, i.cssClasses.connects);
              (f = []), (w = []).push(H(n, t[0]));
              for (var a = 0; a < i.handles; a++)
                f.push(R(e, a)), (P[a] = a), w.push(H(n, t[a + 1]));
            }
            function W(t) {
              return (
                p(t, i.cssClasses.target),
                0 === i.dir ? p(t, i.cssClasses.ltr) : p(t, i.cssClasses.rtl),
                0 === i.ort
                  ? p(t, i.cssClasses.horizontal)
                  : p(t, i.cssClasses.vertical),
                p(
                  t,
                  "rtl" === getComputedStyle(t).direction
                    ? i.cssClasses.textDirectionRtl
                    : i.cssClasses.textDirectionLtr
                ),
                X(t, i.cssClasses.base)
              );
            }
            function B(t, e) {
              return (
                !(!i.tooltips || !i.tooltips[e]) &&
                X(t.firstChild, i.cssClasses.tooltip)
              );
            }
            function j() {
              return E.hasAttribute("disabled");
            }
            function V(t) {
              return f[t].hasAttribute("disabled");
            }
            function G() {
              S &&
                (xt("update" + D.tooltips),
                S.forEach(function (t) {
                  t && n(t);
                }),
                (S = null));
            }
            function q() {
              G(),
                (S = f.map(B)),
                gt("update" + D.tooltips, function (t, e, n) {
                  if (S && i.tooltips && !1 !== S[e]) {
                    var a = t[e];
                    !0 !== i.tooltips[e] && (a = i.tooltips[e].to(n[e])),
                      (S[e].innerHTML = a);
                  }
                });
            }
            function U() {
              xt("update" + D.aria),
                gt("update" + D.aria, function (t, e, n, a, s) {
                  P.forEach(function (t) {
                    var e = f[t],
                      a = bt(_, t, 0, !0, !0, !0),
                      r = bt(_, t, 100, !0, !0, !0),
                      o = s[t],
                      l = String(i.ariaFormat.to(n[t]));
                    (a = T.fromStepping(a).toFixed(1)),
                      (r = T.fromStepping(r).toFixed(1)),
                      (o = T.fromStepping(o).toFixed(1)),
                      e.children[0].setAttribute("aria-valuemin", a),
                      e.children[0].setAttribute("aria-valuemax", r),
                      e.children[0].setAttribute("aria-valuenow", o),
                      e.children[0].setAttribute("aria-valuetext", l);
                  });
                });
            }
            function $(e) {
              if (e.mode === t.PipsMode.Range || e.mode === t.PipsMode.Steps)
                return T.xVal;
              if (e.mode === t.PipsMode.Count) {
                if (e.values < 2)
                  throw new Error(
                    "noUiSlider: 'values' (>= 2) required for mode 'count'."
                  );
                for (var i = e.values - 1, n = 100 / i, a = []; i--; )
                  a[i] = i * n;
                return a.push(100), Z(a, e.stepped);
              }
              return e.mode === t.PipsMode.Positions
                ? Z(e.values, e.stepped)
                : e.mode === t.PipsMode.Values
                ? e.stepped
                  ? e.values.map(function (t) {
                      return T.fromStepping(T.getStep(T.toStepping(t)));
                    })
                  : e.values
                : [];
            }
            function Z(t, e) {
              return t.map(function (t) {
                return T.fromStepping(e ? T.getStep(t) : t);
              });
            }
            function Q(e) {
              function i(t, e) {
                return Number((t + e).toFixed(7));
              }
              var n = $(e),
                a = {},
                s = T.xVal[0],
                o = T.xVal[T.xVal.length - 1],
                l = !1,
                c = !1,
                h = 0;
              return (
                (n = r(
                  n.slice().sort(function (t, e) {
                    return t - e;
                  })
                ))[0] !== s && (n.unshift(s), (l = !0)),
                n[n.length - 1] !== o && (n.push(o), (c = !0)),
                n.forEach(function (s, r) {
                  var o,
                    d,
                    u,
                    f,
                    p,
                    g,
                    m,
                    x,
                    v,
                    b,
                    y = s,
                    w = n[r + 1],
                    k = e.mode === t.PipsMode.Steps;
                  for (
                    k && (o = T.xNumSteps[r]),
                      o || (o = w - y),
                      void 0 === w && (w = y),
                      o = Math.max(o, 1e-7),
                      d = y;
                    d <= w;
                    d = i(d, o)
                  ) {
                    for (
                      x = (p = (f = T.toStepping(d)) - h) / (e.density || 1),
                        b = p / (v = Math.round(x)),
                        u = 1;
                      u <= v;
                      u += 1
                    )
                      a[(g = h + u * b).toFixed(5)] = [T.fromStepping(g), 0];
                    (m =
                      n.indexOf(d) > -1
                        ? t.PipsType.LargeValue
                        : k
                        ? t.PipsType.SmallValue
                        : t.PipsType.NoValue),
                      !r && l && d !== w && (m = 0),
                      (d === w && c) || (a[f.toFixed(5)] = [d, m]),
                      (h = f);
                  }
                }),
                a
              );
            }
            function K(e, n, a) {
              var s,
                r,
                o = N.createElement("div"),
                l =
                  (((s = {})[t.PipsType.None] = ""),
                  (s[t.PipsType.NoValue] = i.cssClasses.valueNormal),
                  (s[t.PipsType.LargeValue] = i.cssClasses.valueLarge),
                  (s[t.PipsType.SmallValue] = i.cssClasses.valueSub),
                  s),
                c =
                  (((r = {})[t.PipsType.None] = ""),
                  (r[t.PipsType.NoValue] = i.cssClasses.markerNormal),
                  (r[t.PipsType.LargeValue] = i.cssClasses.markerLarge),
                  (r[t.PipsType.SmallValue] = i.cssClasses.markerSub),
                  r),
                h = [i.cssClasses.valueHorizontal, i.cssClasses.valueVertical],
                d = [
                  i.cssClasses.markerHorizontal,
                  i.cssClasses.markerVertical,
                ];
              function u(t, e) {
                var n = e === i.cssClasses.value,
                  a = n ? l : c;
                return e + " " + (n ? h : d)[i.ort] + " " + a[t];
              }
              function f(e, s, r) {
                if ((r = n ? n(s, r) : r) !== t.PipsType.None) {
                  var l = X(o, !1);
                  (l.className = u(r, i.cssClasses.marker)),
                    (l.style[i.style] = e + "%"),
                    r > t.PipsType.NoValue &&
                      (((l = X(o, !1)).className = u(r, i.cssClasses.value)),
                      l.setAttribute("data-value", String(s)),
                      (l.style[i.style] = e + "%"),
                      (l.innerHTML = String(a.to(s))));
                }
              }
              return (
                p(o, i.cssClasses.pips),
                p(
                  o,
                  0 === i.ort
                    ? i.cssClasses.pipsHorizontal
                    : i.cssClasses.pipsVertical
                ),
                Object.keys(e).forEach(function (t) {
                  f(t, e[t][0], e[t][1]);
                }),
                o
              );
            }
            function J() {
              k && (n(k), (k = null));
            }
            function tt(t) {
              J();
              var e = Q(t),
                i = t.filter,
                n = t.format || {
                  to: function (t) {
                    return String(Math.round(t));
                  },
                };
              return (k = E.appendChild(K(e, i, n)));
            }
            function et() {
              var t = c.getBoundingClientRect(),
                e = "offset" + ["Width", "Height"][i.ort];
              return 0 === i.ort ? t.width || c[e] : t.height || c[e];
            }
            function it(t, e, n, a) {
              var s = function (s) {
                  var r = nt(s, a.pageOffset, a.target || e);
                  return (
                    !!r &&
                    !(j() && !a.doNotReject) &&
                    !(m(E, i.cssClasses.tap) && !a.doNotReject) &&
                    !(t === A.start && void 0 !== r.buttons && r.buttons > 1) &&
                    (!a.hover || !r.buttons) &&
                    (C || r.preventDefault(),
                    (r.calcPoint = r.points[i.ort]),
                    void n(r, a))
                  );
                },
                r = [];
              return (
                t.split(" ").forEach(function (t) {
                  e.addEventListener(t, s, !!C && { passive: !0 }),
                    r.push([t, s]);
                }),
                r
              );
            }
            function nt(t, e, i) {
              var n = 0 === t.type.indexOf("touch"),
                a = 0 === t.type.indexOf("mouse"),
                s = 0 === t.type.indexOf("pointer"),
                r = 0,
                o = 0;
              if (
                (0 === t.type.indexOf("MSPointer") && (s = !0),
                "mousedown" === t.type && !t.buttons && !t.touches)
              )
                return !1;
              if (n) {
                var l = function (e) {
                  var n = e.target;
                  return (
                    n === i ||
                    i.contains(n) ||
                    (t.composed && t.composedPath().shift() === i)
                  );
                };
                if ("touchstart" === t.type) {
                  var c = Array.prototype.filter.call(t.touches, l);
                  if (c.length > 1) return !1;
                  (r = c[0].pageX), (o = c[0].pageY);
                } else {
                  var h = Array.prototype.find.call(t.changedTouches, l);
                  if (!h) return !1;
                  (r = h.pageX), (o = h.pageY);
                }
              }
              return (
                (e = e || x(N)),
                (a || s) && ((r = t.clientX + e.x), (o = t.clientY + e.y)),
                (t.pageOffset = e),
                (t.points = [r, o]),
                (t.cursor = a || s),
                t
              );
            }
            function at(t) {
              var e = (100 * (t - l(c, i.ort))) / et();
              return (e = d(e)), i.dir ? 100 - e : e;
            }
            function rt(t) {
              var e = 100,
                i = !1;
              return (
                f.forEach(function (n, a) {
                  if (!V(a)) {
                    var s = _[a],
                      r = Math.abs(s - t);
                    (r < e || (r <= e && t > s) || (100 === r && 100 === e)) &&
                      ((i = a), (e = r));
                  }
                }),
                i
              );
            }
            function ot(t, e) {
              "mouseout" === t.type &&
                "HTML" === t.target.nodeName &&
                null === t.relatedTarget &&
                ct(t, e);
            }
            function lt(t, e) {
              if (
                -1 === navigator.appVersion.indexOf("MSIE 9") &&
                0 === t.buttons &&
                0 !== e.buttonsProperty
              )
                return ct(t, e);
              var n = (i.dir ? -1 : 1) * (t.calcPoint - e.startCalcPoint);
              wt(
                n > 0,
                (100 * n) / e.baseSize,
                e.locations,
                e.handleNumbers,
                e.connect
              );
            }
            function ct(t, e) {
              e.handle && (g(e.handle, i.cssClasses.active), (I -= 1)),
                e.listeners.forEach(function (t) {
                  z.removeEventListener(t[0], t[1]);
                }),
                0 === I &&
                  (g(E, i.cssClasses.drag),
                  At(),
                  t.cursor &&
                    ((O.style.cursor = ""),
                    O.removeEventListener("selectstart", s))),
                e.handleNumbers.forEach(function (t) {
                  vt("change", t), vt("set", t), vt("end", t);
                });
            }
            function ht(t, e) {
              if (!e.handleNumbers.some(V)) {
                var n;
                1 === e.handleNumbers.length &&
                  ((n = f[e.handleNumbers[0]].children[0]),
                  (I += 1),
                  p(n, i.cssClasses.active)),
                  t.stopPropagation();
                var a = [],
                  r = it(A.move, z, lt, {
                    target: t.target,
                    handle: n,
                    connect: e.connect,
                    listeners: a,
                    startCalcPoint: t.calcPoint,
                    baseSize: et(),
                    pageOffset: t.pageOffset,
                    handleNumbers: e.handleNumbers,
                    buttonsProperty: t.buttons,
                    locations: _.slice(),
                  }),
                  o = it(A.end, z, ct, {
                    target: t.target,
                    handle: n,
                    listeners: a,
                    doNotReject: !0,
                    handleNumbers: e.handleNumbers,
                  }),
                  l = it("mouseout", z, ot, {
                    target: t.target,
                    handle: n,
                    listeners: a,
                    doNotReject: !0,
                    handleNumbers: e.handleNumbers,
                  });
                a.push.apply(a, r.concat(o, l)),
                  t.cursor &&
                    ((O.style.cursor = getComputedStyle(t.target).cursor),
                    f.length > 1 && p(E, i.cssClasses.drag),
                    O.addEventListener("selectstart", s, !1)),
                  e.handleNumbers.forEach(function (t) {
                    vt("start", t);
                  });
              }
            }
            function dt(t) {
              t.stopPropagation();
              var e = at(t.calcPoint),
                n = rt(e);
              !1 !== n &&
                (i.events.snap || h(E, i.cssClasses.tap, i.animationDuration),
                Ct(n, e, !0, !0),
                At(),
                vt("slide", n, !0),
                vt("update", n, !0),
                i.events.snap
                  ? ht(t, { handleNumbers: [n] })
                  : (vt("change", n, !0), vt("set", n, !0)));
            }
            function ut(t) {
              var e = at(t.calcPoint),
                i = T.getStep(e),
                n = T.fromStepping(i);
              Object.keys(M).forEach(function (t) {
                "hover" === t.split(".")[0] &&
                  M[t].forEach(function (t) {
                    t.call(Ft, n);
                  });
              });
            }
            function ft(t, e) {
              if (j() || V(e)) return !1;
              var n = ["Left", "Right"],
                a = ["Down", "Up"],
                s = ["PageDown", "PageUp"],
                r = ["Home", "End"];
              i.dir && !i.ort
                ? n.reverse()
                : i.ort && !i.dir && (a.reverse(), s.reverse());
              var o,
                l = t.key.replace("Arrow", ""),
                c = l === s[0],
                h = l === s[1],
                d = l === a[0] || l === n[0] || c,
                u = l === a[1] || l === n[1] || h,
                f = l === r[0],
                p = l === r[1];
              if (!(d || u || f || p)) return !0;
              if ((t.preventDefault(), u || d)) {
                var g = d ? 0 : 1,
                  m = Nt(e)[g];
                if (null === m) return !1;
                !1 === m &&
                  (m = T.getDefaultStep(_[e], d, i.keyboardDefaultStep)),
                  (m *=
                    h || c ? i.keyboardPageMultiplier : i.keyboardMultiplier),
                  (m = Math.max(m, 1e-7)),
                  (m *= d ? -1 : 1),
                  (o = L[e] + m);
              } else
                o = p
                  ? i.spectrum.xVal[i.spectrum.xVal.length - 1]
                  : i.spectrum.xVal[0];
              return (
                Ct(e, T.toStepping(o), !0, !0),
                vt("slide", e),
                vt("update", e),
                vt("change", e),
                vt("set", e),
                !1
              );
            }
            function pt(t) {
              t.fixed ||
                f.forEach(function (t, e) {
                  it(A.start, t.children[0], ht, { handleNumbers: [e] });
                }),
                t.tap && it(A.start, c, dt, {}),
                t.hover && it(A.move, c, ut, { hover: !0 }),
                t.drag &&
                  w.forEach(function (e, n) {
                    if (!1 !== e && 0 !== n && n !== w.length - 1) {
                      var a = f[n - 1],
                        s = f[n],
                        r = [e],
                        o = [a, s],
                        l = [n - 1, n];
                      p(e, i.cssClasses.draggable),
                        t.fixed &&
                          (r.push(a.children[0]), r.push(s.children[0])),
                        t.dragAll && ((o = f), (l = P)),
                        r.forEach(function (t) {
                          it(A.start, t, ht, {
                            handles: o,
                            handleNumbers: l,
                            connect: e,
                          });
                        });
                    }
                  });
            }
            function gt(t, e) {
              (M[t] = M[t] || []),
                M[t].push(e),
                "update" === t.split(".")[0] &&
                  f.forEach(function (t, e) {
                    vt("update", e);
                  });
            }
            function mt(t) {
              return t === D.aria || t === D.tooltips;
            }
            function xt(t) {
              var e = t && t.split(".")[0],
                i = e ? t.substring(e.length) : t;
              Object.keys(M).forEach(function (t) {
                var n = t.split(".")[0],
                  a = t.substring(n.length);
                (e && e !== n) ||
                  (i && i !== a) ||
                  (mt(a) && i !== a) ||
                  delete M[t];
              });
            }
            function vt(t, e, n) {
              Object.keys(M).forEach(function (a) {
                var s = a.split(".")[0];
                t === s &&
                  M[a].forEach(function (t) {
                    t.call(
                      Ft,
                      L.map(i.format.to),
                      e,
                      L.slice(),
                      n || !1,
                      _.slice(),
                      Ft
                    );
                  });
              });
            }
            function bt(t, e, n, a, s, r) {
              var o;
              return (
                f.length > 1 &&
                  !i.events.unconstrained &&
                  (a &&
                    e > 0 &&
                    ((o = T.getAbsoluteDistance(t[e - 1], i.margin, !1)),
                    (n = Math.max(n, o))),
                  s &&
                    e < f.length - 1 &&
                    ((o = T.getAbsoluteDistance(t[e + 1], i.margin, !0)),
                    (n = Math.min(n, o)))),
                f.length > 1 &&
                  i.limit &&
                  (a &&
                    e > 0 &&
                    ((o = T.getAbsoluteDistance(t[e - 1], i.limit, !1)),
                    (n = Math.min(n, o))),
                  s &&
                    e < f.length - 1 &&
                    ((o = T.getAbsoluteDistance(t[e + 1], i.limit, !0)),
                    (n = Math.max(n, o)))),
                i.padding &&
                  (0 === e &&
                    ((o = T.getAbsoluteDistance(0, i.padding[0], !1)),
                    (n = Math.max(n, o))),
                  e === f.length - 1 &&
                    ((o = T.getAbsoluteDistance(100, i.padding[1], !0)),
                    (n = Math.min(n, o)))),
                !((n = d((n = T.getStep(n)))) === t[e] && !r) && n
              );
            }
            function yt(t, e) {
              var n = i.ort;
              return (n ? e : t) + ", " + (n ? t : e);
            }
            function wt(t, e, i, n, a) {
              var s = i.slice(),
                r = n[0],
                o = [!t, t],
                l = [t, !t];
              (n = n.slice()),
                t && n.reverse(),
                n.length > 1
                  ? n.forEach(function (t, i) {
                      var n = bt(s, t, s[t] + e, o[i], l[i], !1);
                      !1 === n ? (e = 0) : ((e = n - s[t]), (s[t] = n));
                    })
                  : (o = l = [!0]);
              var c = !1;
              n.forEach(function (t, n) {
                c = Ct(t, i[t] + e, o[n], l[n]) || c;
              }),
                c &&
                  (n.forEach(function (t) {
                    vt("update", t), vt("slide", t);
                  }),
                  null != a && vt("drag", r));
            }
            function kt(t, e) {
              return i.dir ? 100 - t - e : t;
            }
            function St(t, e) {
              (_[t] = e), (L[t] = T.fromStepping(e));
              var n = "translate(" + yt(kt(e, 0) - F + "%", "0") + ")";
              (f[t].style[i.transformRule] = n), Et(t), Et(t + 1);
            }
            function At() {
              P.forEach(function (t) {
                var e = _[t] > 50 ? -1 : 1,
                  i = 3 + (f.length + e * t);
                f[t].style.zIndex = String(i);
              });
            }
            function Ct(t, e, i, n, a) {
              return (
                a || (e = bt(_, t, e, i, n, !1)), !1 !== e && (St(t, e), !0)
              );
            }
            function Et(t) {
              if (w[t]) {
                var e = 0,
                  n = 100;
                0 !== t && (e = _[t - 1]), t !== w.length - 1 && (n = _[t]);
                var a = n - e,
                  s = "translate(" + yt(kt(e, a) + "%", "0") + ")",
                  r = "scale(" + yt(a / 100, "1") + ")";
                w[t].style[i.transformRule] = s + " " + r;
              }
            }
            function Tt(t, e) {
              return null === t || !1 === t || void 0 === t
                ? _[e]
                : ("number" == typeof t && (t = String(t)),
                  !1 !== (t = i.format.from(t)) && (t = T.toStepping(t)),
                  !1 === t || isNaN(t) ? _[e] : t);
            }
            function Lt(t, e, n) {
              var a = u(t),
                s = void 0 === _[0];
              (e = void 0 === e || e),
                i.animate && !s && h(E, i.cssClasses.tap, i.animationDuration),
                P.forEach(function (t) {
                  Ct(t, Tt(a[t], t), !0, !1, n);
                });
              var r = 1 === P.length ? 0 : 1;
              if (s && T.hasNoSize() && ((n = !0), (_[0] = 0), P.length > 1)) {
                var o = 100 / (P.length - 1);
                P.forEach(function (t) {
                  _[t] = t * o;
                });
              }
              for (; r < P.length; ++r)
                P.forEach(function (t) {
                  Ct(t, _[t], !0, !0, n);
                });
              At(),
                P.forEach(function (t) {
                  vt("update", t), null !== a[t] && e && vt("set", t);
                });
            }
            function _t(t) {
              Lt(i.start, t);
            }
            function Pt(t, e, i, n) {
              if (!((t = Number(t)) >= 0 && t < P.length))
                throw new Error("noUiSlider: invalid handle number, got: " + t);
              Ct(t, Tt(e, t), !0, !0, n), vt("update", t), i && vt("set", t);
            }
            function It(t) {
              if ((void 0 === t && (t = !1), t))
                return 1 === L.length ? L[0] : L.slice(0);
              var e = L.map(i.format.to);
              return 1 === e.length ? e[0] : e;
            }
            function Mt() {
              for (
                xt(D.aria),
                  xt(D.tooltips),
                  Object.keys(i.cssClasses).forEach(function (t) {
                    g(E, i.cssClasses[t]);
                  });
                E.firstChild;

              )
                E.removeChild(E.firstChild);
              delete E.noUiSlider;
            }
            function Nt(t) {
              var e = _[t],
                n = T.getNearbySteps(e),
                a = L[t],
                s = n.thisStep.step,
                r = null;
              if (i.snap)
                return [
                  a - n.stepBefore.startValue || null,
                  n.stepAfter.startValue - a || null,
                ];
              !1 !== s &&
                a + s > n.stepAfter.startValue &&
                (s = n.stepAfter.startValue - a),
                (r =
                  a > n.thisStep.startValue
                    ? n.thisStep.step
                    : !1 !== n.stepBefore.step && a - n.stepBefore.highestStep),
                100 === e ? (s = null) : 0 === e && (r = null);
              var o = T.countStepDecimals();
              return (
                null !== s && !1 !== s && (s = Number(s.toFixed(o))),
                null !== r && !1 !== r && (r = Number(r.toFixed(o))),
                [r, s]
              );
            }
            function Dt() {
              return P.map(Nt);
            }
            function zt(t, e) {
              var n = It(),
                s = [
                  "margin",
                  "limit",
                  "padding",
                  "range",
                  "animate",
                  "snap",
                  "step",
                  "format",
                  "pips",
                  "tooltips",
                ];
              s.forEach(function (e) {
                void 0 !== t[e] && (o[e] = t[e]);
              });
              var r = st(o);
              s.forEach(function (e) {
                void 0 !== t[e] && (i[e] = r[e]);
              }),
                (T = r.spectrum),
                (i.margin = r.margin),
                (i.limit = r.limit),
                (i.padding = r.padding),
                i.pips ? tt(i.pips) : J(),
                i.tooltips ? q() : G(),
                (_ = []),
                Lt(a(t.start) ? t.start : n, e);
            }
            function Ot() {
              (c = W(E)),
                Y(i.connect, c),
                pt(i.events),
                Lt(i.start),
                i.pips && tt(i.pips),
                i.tooltips && q(),
                U();
            }
            Ot();
            var Ft = {
              destroy: Mt,
              steps: Dt,
              on: gt,
              off: xt,
              get: It,
              set: Lt,
              setHandle: Pt,
              reset: _t,
              __moveHandles: function (t, e, i) {
                wt(t, e, _, i);
              },
              options: o,
              updateOptions: zt,
              target: E,
              removePips: J,
              removeTooltips: G,
              getPositions: function () {
                return _.slice();
              },
              getTooltips: function () {
                return S;
              },
              getOrigins: function () {
                return f;
              },
              pips: tt,
            };
            return Ft;
          }
          function ot(t, e) {
            if (!t || !t.nodeName)
              throw new Error(
                "noUiSlider: create requires a single element, got: " + t
              );
            if (t.noUiSlider)
              throw new Error("noUiSlider: Slider was already initialized.");
            var i = rt(t, st(e), e);
            return (t.noUiSlider = i), i;
          }
          var lt = { __spectrum: I, cssClasses: N, create: ot };
          (t.create = ot),
            (t.cssClasses = N),
            (t.default = lt),
            Object.defineProperty(t, "__esModule", { value: !0 });
        })(e);
      },
      981: (t, e, i) => {
        "use strict";
        i.r(e), i.d(e, { default: () => ht });
        /**!
         * @fileOverview Kickass library to create and place poppers near their reference elements.
         * @version 1.16.1
         * @license
         * Copyright (c) 2016 Federico Zivolo and contributors
         *
         * Permission is hereby granted, free of charge, to any person obtaining a copy
         * of this software and associated documentation files (the "Software"), to deal
         * in the Software without restriction, including without limitation the rights
         * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
         * copies of the Software, and to permit persons to whom the Software is
         * furnished to do so, subject to the following conditions:
         *
         * The above copyright notice and this permission notice shall be included in all
         * copies or substantial portions of the Software.
         *
         * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
         * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
         * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
         * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
         * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
         * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
         * SOFTWARE.
         */
        var n =
            "undefined" != typeof window &&
            "undefined" != typeof document &&
            "undefined" != typeof navigator,
          a = (function () {
            for (
              var t = ["Edge", "Trident", "Firefox"], e = 0;
              e < t.length;
              e += 1
            )
              if (n && navigator.userAgent.indexOf(t[e]) >= 0) return 1;
            return 0;
          })();
        var s =
          n && window.Promise
            ? function (t) {
                var e = !1;
                return function () {
                  e ||
                    ((e = !0),
                    window.Promise.resolve().then(function () {
                      (e = !1), t();
                    }));
                };
              }
            : function (t) {
                var e = !1;
                return function () {
                  e ||
                    ((e = !0),
                    setTimeout(function () {
                      (e = !1), t();
                    }, a));
                };
              };
        function r(t) {
          return t && "[object Function]" === {}.toString.call(t);
        }
        function o(t, e) {
          if (1 !== t.nodeType) return [];
          var i = t.ownerDocument.defaultView.getComputedStyle(t, null);
          return e ? i[e] : i;
        }
        function l(t) {
          return "HTML" === t.nodeName ? t : t.parentNode || t.host;
        }
        function c(t) {
          if (!t) return document.body;
          switch (t.nodeName) {
            case "HTML":
            case "BODY":
              return t.ownerDocument.body;
            case "#document":
              return t.body;
          }
          var e = o(t),
            i = e.overflow,
            n = e.overflowX,
            a = e.overflowY;
          return /(auto|scroll|overlay)/.test(i + a + n) ? t : c(l(t));
        }
        function h(t) {
          return t && t.referenceNode ? t.referenceNode : t;
        }
        var d = n && !(!window.MSInputMethodContext || !document.documentMode),
          u = n && /MSIE 10/.test(navigator.userAgent);
        function f(t) {
          return 11 === t ? d : 10 === t ? u : d || u;
        }
        function p(t) {
          if (!t) return document.documentElement;
          for (
            var e = f(10) ? document.body : null, i = t.offsetParent || null;
            i === e && t.nextElementSibling;

          )
            i = (t = t.nextElementSibling).offsetParent;
          var n = i && i.nodeName;
          return n && "BODY" !== n && "HTML" !== n
            ? -1 !== ["TH", "TD", "TABLE"].indexOf(i.nodeName) &&
              "static" === o(i, "position")
              ? p(i)
              : i
            : t
            ? t.ownerDocument.documentElement
            : document.documentElement;
        }
        function g(t) {
          return null !== t.parentNode ? g(t.parentNode) : t;
        }
        function m(t, e) {
          if (!(t && t.nodeType && e && e.nodeType))
            return document.documentElement;
          var i =
              t.compareDocumentPosition(e) & Node.DOCUMENT_POSITION_FOLLOWING,
            n = i ? t : e,
            a = i ? e : t,
            s = document.createRange();
          s.setStart(n, 0), s.setEnd(a, 0);
          var r,
            o,
            l = s.commonAncestorContainer;
          if ((t !== l && e !== l) || n.contains(a))
            return "BODY" === (o = (r = l).nodeName) ||
              ("HTML" !== o && p(r.firstElementChild) !== r)
              ? p(l)
              : l;
          var c = g(t);
          return c.host ? m(c.host, e) : m(t, g(e).host);
        }
        function x(t) {
          var e =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : "top",
            i = "top" === e ? "scrollTop" : "scrollLeft",
            n = t.nodeName;
          if ("BODY" === n || "HTML" === n) {
            var a = t.ownerDocument.documentElement,
              s = t.ownerDocument.scrollingElement || a;
            return s[i];
          }
          return t[i];
        }
        function v(t, e) {
          var i =
              arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
            n = x(e, "top"),
            a = x(e, "left"),
            s = i ? -1 : 1;
          return (
            (t.top += n * s),
            (t.bottom += n * s),
            (t.left += a * s),
            (t.right += a * s),
            t
          );
        }
        function b(t, e) {
          var i = "x" === e ? "Left" : "Top",
            n = "Left" === i ? "Right" : "Bottom";
          return (
            parseFloat(t["border" + i + "Width"]) +
            parseFloat(t["border" + n + "Width"])
          );
        }
        function y(t, e, i, n) {
          return Math.max(
            e["offset" + t],
            e["scroll" + t],
            i["client" + t],
            i["offset" + t],
            i["scroll" + t],
            f(10)
              ? parseInt(i["offset" + t]) +
                  parseInt(n["margin" + ("Height" === t ? "Top" : "Left")]) +
                  parseInt(n["margin" + ("Height" === t ? "Bottom" : "Right")])
              : 0
          );
        }
        function w(t) {
          var e = t.body,
            i = t.documentElement,
            n = f(10) && getComputedStyle(i);
          return { height: y("Height", e, i, n), width: y("Width", e, i, n) };
        }
        var k = function (t, e) {
            if (!(t instanceof e))
              throw new TypeError("Cannot call a class as a function");
          },
          S = (function () {
            function t(t, e) {
              for (var i = 0; i < e.length; i++) {
                var n = e[i];
                (n.enumerable = n.enumerable || !1),
                  (n.configurable = !0),
                  "value" in n && (n.writable = !0),
                  Object.defineProperty(t, n.key, n);
              }
            }
            return function (e, i, n) {
              return i && t(e.prototype, i), n && t(e, n), e;
            };
          })(),
          A = function (t, e, i) {
            return (
              e in t
                ? Object.defineProperty(t, e, {
                    value: i,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0,
                  })
                : (t[e] = i),
              t
            );
          },
          C =
            Object.assign ||
            function (t) {
              for (var e = 1; e < arguments.length; e++) {
                var i = arguments[e];
                for (var n in i)
                  Object.prototype.hasOwnProperty.call(i, n) && (t[n] = i[n]);
              }
              return t;
            };
        function E(t) {
          return C({}, t, {
            right: t.left + t.width,
            bottom: t.top + t.height,
          });
        }
        function T(t) {
          var e = {};
          try {
            if (f(10)) {
              e = t.getBoundingClientRect();
              var i = x(t, "top"),
                n = x(t, "left");
              (e.top += i), (e.left += n), (e.bottom += i), (e.right += n);
            } else e = t.getBoundingClientRect();
          } catch (t) {}
          var a = {
              left: e.left,
              top: e.top,
              width: e.right - e.left,
              height: e.bottom - e.top,
            },
            s = "HTML" === t.nodeName ? w(t.ownerDocument) : {},
            r = s.width || t.clientWidth || a.width,
            l = s.height || t.clientHeight || a.height,
            c = t.offsetWidth - r,
            h = t.offsetHeight - l;
          if (c || h) {
            var d = o(t);
            (c -= b(d, "x")), (h -= b(d, "y")), (a.width -= c), (a.height -= h);
          }
          return E(a);
        }
        function L(t, e) {
          var i =
              arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
            n = f(10),
            a = "HTML" === e.nodeName,
            s = T(t),
            r = T(e),
            l = c(t),
            h = o(e),
            d = parseFloat(h.borderTopWidth),
            u = parseFloat(h.borderLeftWidth);
          i &&
            a &&
            ((r.top = Math.max(r.top, 0)), (r.left = Math.max(r.left, 0)));
          var p = E({
            top: s.top - r.top - d,
            left: s.left - r.left - u,
            width: s.width,
            height: s.height,
          });
          if (((p.marginTop = 0), (p.marginLeft = 0), !n && a)) {
            var g = parseFloat(h.marginTop),
              m = parseFloat(h.marginLeft);
            (p.top -= d - g),
              (p.bottom -= d - g),
              (p.left -= u - m),
              (p.right -= u - m),
              (p.marginTop = g),
              (p.marginLeft = m);
          }
          return (
            (n && !i ? e.contains(l) : e === l && "BODY" !== l.nodeName) &&
              (p = v(p, e)),
            p
          );
        }
        function _(t) {
          var e =
              arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
            i = t.ownerDocument.documentElement,
            n = L(t, i),
            a = Math.max(i.clientWidth, window.innerWidth || 0),
            s = Math.max(i.clientHeight, window.innerHeight || 0),
            r = e ? 0 : x(i),
            o = e ? 0 : x(i, "left"),
            l = {
              top: r - n.top + n.marginTop,
              left: o - n.left + n.marginLeft,
              width: a,
              height: s,
            };
          return E(l);
        }
        function P(t) {
          var e = t.nodeName;
          if ("BODY" === e || "HTML" === e) return !1;
          if ("fixed" === o(t, "position")) return !0;
          var i = l(t);
          return !!i && P(i);
        }
        function I(t) {
          if (!t || !t.parentElement || f()) return document.documentElement;
          for (var e = t.parentElement; e && "none" === o(e, "transform"); )
            e = e.parentElement;
          return e || document.documentElement;
        }
        function M(t, e, i, n) {
          var a =
              arguments.length > 4 && void 0 !== arguments[4] && arguments[4],
            s = { top: 0, left: 0 },
            r = a ? I(t) : m(t, h(e));
          if ("viewport" === n) s = _(r, a);
          else {
            var o = void 0;
            "scrollParent" === n
              ? "BODY" === (o = c(l(e))).nodeName &&
                (o = t.ownerDocument.documentElement)
              : (o = "window" === n ? t.ownerDocument.documentElement : n);
            var d = L(o, r, a);
            if ("HTML" !== o.nodeName || P(r)) s = d;
            else {
              var u = w(t.ownerDocument),
                f = u.height,
                p = u.width;
              (s.top += d.top - d.marginTop),
                (s.bottom = f + d.top),
                (s.left += d.left - d.marginLeft),
                (s.right = p + d.left);
            }
          }
          var g = "number" == typeof (i = i || 0);
          return (
            (s.left += g ? i : i.left || 0),
            (s.top += g ? i : i.top || 0),
            (s.right -= g ? i : i.right || 0),
            (s.bottom -= g ? i : i.bottom || 0),
            s
          );
        }
        function N(t) {
          return t.width * t.height;
        }
        function D(t, e, i, n, a) {
          var s =
            arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0;
          if (-1 === t.indexOf("auto")) return t;
          var r = M(i, n, s, a),
            o = {
              top: { width: r.width, height: e.top - r.top },
              right: { width: r.right - e.right, height: r.height },
              bottom: { width: r.width, height: r.bottom - e.bottom },
              left: { width: e.left - r.left, height: r.height },
            },
            l = Object.keys(o)
              .map(function (t) {
                return C({ key: t }, o[t], { area: N(o[t]) });
              })
              .sort(function (t, e) {
                return e.area - t.area;
              }),
            c = l.filter(function (t) {
              var e = t.width,
                n = t.height;
              return e >= i.clientWidth && n >= i.clientHeight;
            }),
            h = c.length > 0 ? c[0].key : l[0].key,
            d = t.split("-")[1];
          return h + (d ? "-" + d : "");
        }
        function z(t, e, i) {
          var n =
              arguments.length > 3 && void 0 !== arguments[3]
                ? arguments[3]
                : null,
            a = n ? I(e) : m(e, h(i));
          return L(i, a, n);
        }
        function O(t) {
          var e = t.ownerDocument.defaultView.getComputedStyle(t),
            i = parseFloat(e.marginTop || 0) + parseFloat(e.marginBottom || 0),
            n = parseFloat(e.marginLeft || 0) + parseFloat(e.marginRight || 0);
          return { width: t.offsetWidth + n, height: t.offsetHeight + i };
        }
        function F(t) {
          var e = {
            left: "right",
            right: "left",
            bottom: "top",
            top: "bottom",
          };
          return t.replace(/left|right|bottom|top/g, function (t) {
            return e[t];
          });
        }
        function X(t, e, i) {
          i = i.split("-")[0];
          var n = O(t),
            a = { width: n.width, height: n.height },
            s = -1 !== ["right", "left"].indexOf(i),
            r = s ? "top" : "left",
            o = s ? "left" : "top",
            l = s ? "height" : "width",
            c = s ? "width" : "height";
          return (
            (a[r] = e[r] + e[l] / 2 - n[l] / 2),
            (a[o] = i === o ? e[o] - n[c] : e[F(o)]),
            a
          );
        }
        function R(t, e) {
          return Array.prototype.find ? t.find(e) : t.filter(e)[0];
        }
        function H(t, e, i) {
          return (
            (void 0 === i
              ? t
              : t.slice(
                  0,
                  (function (t, e, i) {
                    if (Array.prototype.findIndex)
                      return t.findIndex(function (t) {
                        return t[e] === i;
                      });
                    var n = R(t, function (t) {
                      return t[e] === i;
                    });
                    return t.indexOf(n);
                  })(t, "name", i)
                )
            ).forEach(function (t) {
              t.function &&
                console.warn(
                  "`modifier.function` is deprecated, use `modifier.fn`!"
                );
              var i = t.function || t.fn;
              t.enabled &&
                r(i) &&
                ((e.offsets.popper = E(e.offsets.popper)),
                (e.offsets.reference = E(e.offsets.reference)),
                (e = i(e, t)));
            }),
            e
          );
        }
        function Y() {
          if (!this.state.isDestroyed) {
            var t = {
              instance: this,
              styles: {},
              arrowStyles: {},
              attributes: {},
              flipped: !1,
              offsets: {},
            };
            (t.offsets.reference = z(
              this.state,
              this.popper,
              this.reference,
              this.options.positionFixed
            )),
              (t.placement = D(
                this.options.placement,
                t.offsets.reference,
                this.popper,
                this.reference,
                this.options.modifiers.flip.boundariesElement,
                this.options.modifiers.flip.padding
              )),
              (t.originalPlacement = t.placement),
              (t.positionFixed = this.options.positionFixed),
              (t.offsets.popper = X(
                this.popper,
                t.offsets.reference,
                t.placement
              )),
              (t.offsets.popper.position = this.options.positionFixed
                ? "fixed"
                : "absolute"),
              (t = H(this.modifiers, t)),
              this.state.isCreated
                ? this.options.onUpdate(t)
                : ((this.state.isCreated = !0), this.options.onCreate(t));
          }
        }
        function W(t, e) {
          return t.some(function (t) {
            var i = t.name;
            return t.enabled && i === e;
          });
        }
        function B(t) {
          for (
            var e = [!1, "ms", "Webkit", "Moz", "O"],
              i = t.charAt(0).toUpperCase() + t.slice(1),
              n = 0;
            n < e.length;
            n++
          ) {
            var a = e[n],
              s = a ? "" + a + i : t;
            if (void 0 !== document.body.style[s]) return s;
          }
          return null;
        }
        function j() {
          return (
            (this.state.isDestroyed = !0),
            W(this.modifiers, "applyStyle") &&
              (this.popper.removeAttribute("x-placement"),
              (this.popper.style.position = ""),
              (this.popper.style.top = ""),
              (this.popper.style.left = ""),
              (this.popper.style.right = ""),
              (this.popper.style.bottom = ""),
              (this.popper.style.willChange = ""),
              (this.popper.style[B("transform")] = "")),
            this.disableEventListeners(),
            this.options.removeOnDestroy &&
              this.popper.parentNode.removeChild(this.popper),
            this
          );
        }
        function V(t) {
          var e = t.ownerDocument;
          return e ? e.defaultView : window;
        }
        function G(t, e, i, n) {
          var a = "BODY" === t.nodeName,
            s = a ? t.ownerDocument.defaultView : t;
          s.addEventListener(e, i, { passive: !0 }),
            a || G(c(s.parentNode), e, i, n),
            n.push(s);
        }
        function q(t, e, i, n) {
          (i.updateBound = n),
            V(t).addEventListener("resize", i.updateBound, { passive: !0 });
          var a = c(t);
          return (
            G(a, "scroll", i.updateBound, i.scrollParents),
            (i.scrollElement = a),
            (i.eventsEnabled = !0),
            i
          );
        }
        function U() {
          this.state.eventsEnabled ||
            (this.state = q(
              this.reference,
              this.options,
              this.state,
              this.scheduleUpdate
            ));
        }
        function $() {
          var t, e;
          this.state.eventsEnabled &&
            (cancelAnimationFrame(this.scheduleUpdate),
            (this.state =
              ((t = this.reference),
              (e = this.state),
              V(t).removeEventListener("resize", e.updateBound),
              e.scrollParents.forEach(function (t) {
                t.removeEventListener("scroll", e.updateBound);
              }),
              (e.updateBound = null),
              (e.scrollParents = []),
              (e.scrollElement = null),
              (e.eventsEnabled = !1),
              e)));
        }
        function Z(t) {
          return "" !== t && !isNaN(parseFloat(t)) && isFinite(t);
        }
        function Q(t, e) {
          Object.keys(e).forEach(function (i) {
            var n = "";
            -1 !==
              ["width", "height", "top", "right", "bottom", "left"].indexOf(
                i
              ) &&
              Z(e[i]) &&
              (n = "px"),
              (t.style[i] = e[i] + n);
          });
        }
        var K = n && /Firefox/i.test(navigator.userAgent);
        function J(t, e, i) {
          var n = R(t, function (t) {
              return t.name === e;
            }),
            a =
              !!n &&
              t.some(function (t) {
                return t.name === i && t.enabled && t.order < n.order;
              });
          if (!a) {
            var s = "`" + e + "`",
              r = "`" + i + "`";
            console.warn(
              r +
                " modifier is required by " +
                s +
                " modifier in order to work, be sure to include it before " +
                s +
                "!"
            );
          }
          return a;
        }
        var tt = [
            "auto-start",
            "auto",
            "auto-end",
            "top-start",
            "top",
            "top-end",
            "right-start",
            "right",
            "right-end",
            "bottom-end",
            "bottom",
            "bottom-start",
            "left-end",
            "left",
            "left-start",
          ],
          et = tt.slice(3);
        function it(t) {
          var e =
              arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
            i = et.indexOf(t),
            n = et.slice(i + 1).concat(et.slice(0, i));
          return e ? n.reverse() : n;
        }
        var nt = "flip",
          at = "clockwise",
          st = "counterclockwise";
        function rt(t, e, i, n) {
          var a = [0, 0],
            s = -1 !== ["right", "left"].indexOf(n),
            r = t.split(/(\+|\-)/).map(function (t) {
              return t.trim();
            }),
            o = r.indexOf(
              R(r, function (t) {
                return -1 !== t.search(/,|\s/);
              })
            );
          r[o] &&
            -1 === r[o].indexOf(",") &&
            console.warn(
              "Offsets separated by white space(s) are deprecated, use a comma (,) instead."
            );
          var l = /\s*,\s*|\s+/,
            c =
              -1 !== o
                ? [
                    r.slice(0, o).concat([r[o].split(l)[0]]),
                    [r[o].split(l)[1]].concat(r.slice(o + 1)),
                  ]
                : [r];
          return (
            (c = c.map(function (t, n) {
              var a = (1 === n ? !s : s) ? "height" : "width",
                r = !1;
              return t
                .reduce(function (t, e) {
                  return "" === t[t.length - 1] && -1 !== ["+", "-"].indexOf(e)
                    ? ((t[t.length - 1] = e), (r = !0), t)
                    : r
                    ? ((t[t.length - 1] += e), (r = !1), t)
                    : t.concat(e);
                }, [])
                .map(function (t) {
                  return (function (t, e, i, n) {
                    var a = t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),
                      s = +a[1],
                      r = a[2];
                    if (!s) return t;
                    if (0 === r.indexOf("%")) {
                      return (E("%p" === r ? i : n)[e] / 100) * s;
                    }
                    if ("vh" === r || "vw" === r)
                      return (
                        (("vh" === r
                          ? Math.max(
                              document.documentElement.clientHeight,
                              window.innerHeight || 0
                            )
                          : Math.max(
                              document.documentElement.clientWidth,
                              window.innerWidth || 0
                            )) /
                          100) *
                        s
                      );
                    return s;
                  })(t, a, e, i);
                });
            })),
            c.forEach(function (t, e) {
              t.forEach(function (i, n) {
                Z(i) && (a[e] += i * ("-" === t[n - 1] ? -1 : 1));
              });
            }),
            a
          );
        }
        var ot = {
            shift: {
              order: 100,
              enabled: !0,
              fn: function (t) {
                var e = t.placement,
                  i = e.split("-")[0],
                  n = e.split("-")[1];
                if (n) {
                  var a = t.offsets,
                    s = a.reference,
                    r = a.popper,
                    o = -1 !== ["bottom", "top"].indexOf(i),
                    l = o ? "left" : "top",
                    c = o ? "width" : "height",
                    h = {
                      start: A({}, l, s[l]),
                      end: A({}, l, s[l] + s[c] - r[c]),
                    };
                  t.offsets.popper = C({}, r, h[n]);
                }
                return t;
              },
            },
            offset: {
              order: 200,
              enabled: !0,
              fn: function (t, e) {
                var i = e.offset,
                  n = t.placement,
                  a = t.offsets,
                  s = a.popper,
                  r = a.reference,
                  o = n.split("-")[0],
                  l = void 0;
                return (
                  (l = Z(+i) ? [+i, 0] : rt(i, s, r, o)),
                  "left" === o
                    ? ((s.top += l[0]), (s.left -= l[1]))
                    : "right" === o
                    ? ((s.top += l[0]), (s.left += l[1]))
                    : "top" === o
                    ? ((s.left += l[0]), (s.top -= l[1]))
                    : "bottom" === o && ((s.left += l[0]), (s.top += l[1])),
                  (t.popper = s),
                  t
                );
              },
              offset: 0,
            },
            preventOverflow: {
              order: 300,
              enabled: !0,
              fn: function (t, e) {
                var i = e.boundariesElement || p(t.instance.popper);
                t.instance.reference === i && (i = p(i));
                var n = B("transform"),
                  a = t.instance.popper.style,
                  s = a.top,
                  r = a.left,
                  o = a[n];
                (a.top = ""), (a.left = ""), (a[n] = "");
                var l = M(
                  t.instance.popper,
                  t.instance.reference,
                  e.padding,
                  i,
                  t.positionFixed
                );
                (a.top = s), (a.left = r), (a[n] = o), (e.boundaries = l);
                var c = e.priority,
                  h = t.offsets.popper,
                  d = {
                    primary: function (t) {
                      var i = h[t];
                      return (
                        h[t] < l[t] &&
                          !e.escapeWithReference &&
                          (i = Math.max(h[t], l[t])),
                        A({}, t, i)
                      );
                    },
                    secondary: function (t) {
                      var i = "right" === t ? "left" : "top",
                        n = h[i];
                      return (
                        h[t] > l[t] &&
                          !e.escapeWithReference &&
                          (n = Math.min(
                            h[i],
                            l[t] - ("right" === t ? h.width : h.height)
                          )),
                        A({}, i, n)
                      );
                    },
                  };
                return (
                  c.forEach(function (t) {
                    var e =
                      -1 !== ["left", "top"].indexOf(t)
                        ? "primary"
                        : "secondary";
                    h = C({}, h, d[e](t));
                  }),
                  (t.offsets.popper = h),
                  t
                );
              },
              priority: ["left", "right", "top", "bottom"],
              padding: 5,
              boundariesElement: "scrollParent",
            },
            keepTogether: {
              order: 400,
              enabled: !0,
              fn: function (t) {
                var e = t.offsets,
                  i = e.popper,
                  n = e.reference,
                  a = t.placement.split("-")[0],
                  s = Math.floor,
                  r = -1 !== ["top", "bottom"].indexOf(a),
                  o = r ? "right" : "bottom",
                  l = r ? "left" : "top",
                  c = r ? "width" : "height";
                return (
                  i[o] < s(n[l]) && (t.offsets.popper[l] = s(n[l]) - i[c]),
                  i[l] > s(n[o]) && (t.offsets.popper[l] = s(n[o])),
                  t
                );
              },
            },
            arrow: {
              order: 500,
              enabled: !0,
              fn: function (t, e) {
                var i;
                if (!J(t.instance.modifiers, "arrow", "keepTogether")) return t;
                var n = e.element;
                if ("string" == typeof n) {
                  if (!(n = t.instance.popper.querySelector(n))) return t;
                } else if (!t.instance.popper.contains(n))
                  return (
                    console.warn(
                      "WARNING: `arrow.element` must be child of its popper element!"
                    ),
                    t
                  );
                var a = t.placement.split("-")[0],
                  s = t.offsets,
                  r = s.popper,
                  l = s.reference,
                  c = -1 !== ["left", "right"].indexOf(a),
                  h = c ? "height" : "width",
                  d = c ? "Top" : "Left",
                  u = d.toLowerCase(),
                  f = c ? "left" : "top",
                  p = c ? "bottom" : "right",
                  g = O(n)[h];
                l[p] - g < r[u] && (t.offsets.popper[u] -= r[u] - (l[p] - g)),
                  l[u] + g > r[p] && (t.offsets.popper[u] += l[u] + g - r[p]),
                  (t.offsets.popper = E(t.offsets.popper));
                var m = l[u] + l[h] / 2 - g / 2,
                  x = o(t.instance.popper),
                  v = parseFloat(x["margin" + d]),
                  b = parseFloat(x["border" + d + "Width"]),
                  y = m - t.offsets.popper[u] - v - b;
                return (
                  (y = Math.max(Math.min(r[h] - g, y), 0)),
                  (t.arrowElement = n),
                  (t.offsets.arrow =
                    (A((i = {}), u, Math.round(y)), A(i, f, ""), i)),
                  t
                );
              },
              element: "[x-arrow]",
            },
            flip: {
              order: 600,
              enabled: !0,
              fn: function (t, e) {
                if (W(t.instance.modifiers, "inner")) return t;
                if (t.flipped && t.placement === t.originalPlacement) return t;
                var i = M(
                    t.instance.popper,
                    t.instance.reference,
                    e.padding,
                    e.boundariesElement,
                    t.positionFixed
                  ),
                  n = t.placement.split("-")[0],
                  a = F(n),
                  s = t.placement.split("-")[1] || "",
                  r = [];
                switch (e.behavior) {
                  case nt:
                    r = [n, a];
                    break;
                  case at:
                    r = it(n);
                    break;
                  case st:
                    r = it(n, !0);
                    break;
                  default:
                    r = e.behavior;
                }
                return (
                  r.forEach(function (o, l) {
                    if (n !== o || r.length === l + 1) return t;
                    (n = t.placement.split("-")[0]), (a = F(n));
                    var c = t.offsets.popper,
                      h = t.offsets.reference,
                      d = Math.floor,
                      u =
                        ("left" === n && d(c.right) > d(h.left)) ||
                        ("right" === n && d(c.left) < d(h.right)) ||
                        ("top" === n && d(c.bottom) > d(h.top)) ||
                        ("bottom" === n && d(c.top) < d(h.bottom)),
                      f = d(c.left) < d(i.left),
                      p = d(c.right) > d(i.right),
                      g = d(c.top) < d(i.top),
                      m = d(c.bottom) > d(i.bottom),
                      x =
                        ("left" === n && f) ||
                        ("right" === n && p) ||
                        ("top" === n && g) ||
                        ("bottom" === n && m),
                      v = -1 !== ["top", "bottom"].indexOf(n),
                      b =
                        !!e.flipVariations &&
                        ((v && "start" === s && f) ||
                          (v && "end" === s && p) ||
                          (!v && "start" === s && g) ||
                          (!v && "end" === s && m)),
                      y =
                        !!e.flipVariationsByContent &&
                        ((v && "start" === s && p) ||
                          (v && "end" === s && f) ||
                          (!v && "start" === s && m) ||
                          (!v && "end" === s && g)),
                      w = b || y;
                    (u || x || w) &&
                      ((t.flipped = !0),
                      (u || x) && (n = r[l + 1]),
                      w &&
                        (s = (function (t) {
                          return "end" === t
                            ? "start"
                            : "start" === t
                            ? "end"
                            : t;
                        })(s)),
                      (t.placement = n + (s ? "-" + s : "")),
                      (t.offsets.popper = C(
                        {},
                        t.offsets.popper,
                        X(t.instance.popper, t.offsets.reference, t.placement)
                      )),
                      (t = H(t.instance.modifiers, t, "flip")));
                  }),
                  t
                );
              },
              behavior: "flip",
              padding: 5,
              boundariesElement: "viewport",
              flipVariations: !1,
              flipVariationsByContent: !1,
            },
            inner: {
              order: 700,
              enabled: !1,
              fn: function (t) {
                var e = t.placement,
                  i = e.split("-")[0],
                  n = t.offsets,
                  a = n.popper,
                  s = n.reference,
                  r = -1 !== ["left", "right"].indexOf(i),
                  o = -1 === ["top", "left"].indexOf(i);
                return (
                  (a[r ? "left" : "top"] =
                    s[i] - (o ? a[r ? "width" : "height"] : 0)),
                  (t.placement = F(e)),
                  (t.offsets.popper = E(a)),
                  t
                );
              },
            },
            hide: {
              order: 800,
              enabled: !0,
              fn: function (t) {
                if (!J(t.instance.modifiers, "hide", "preventOverflow"))
                  return t;
                var e = t.offsets.reference,
                  i = R(t.instance.modifiers, function (t) {
                    return "preventOverflow" === t.name;
                  }).boundaries;
                if (
                  e.bottom < i.top ||
                  e.left > i.right ||
                  e.top > i.bottom ||
                  e.right < i.left
                ) {
                  if (!0 === t.hide) return t;
                  (t.hide = !0), (t.attributes["x-out-of-boundaries"] = "");
                } else {
                  if (!1 === t.hide) return t;
                  (t.hide = !1), (t.attributes["x-out-of-boundaries"] = !1);
                }
                return t;
              },
            },
            computeStyle: {
              order: 850,
              enabled: !0,
              fn: function (t, e) {
                var i = e.x,
                  n = e.y,
                  a = t.offsets.popper,
                  s = R(t.instance.modifiers, function (t) {
                    return "applyStyle" === t.name;
                  }).gpuAcceleration;
                void 0 !== s &&
                  console.warn(
                    "WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!"
                  );
                var r = void 0 !== s ? s : e.gpuAcceleration,
                  o = p(t.instance.popper),
                  l = T(o),
                  c = { position: a.position },
                  h = (function (t, e) {
                    var i = t.offsets,
                      n = i.popper,
                      a = i.reference,
                      s = Math.round,
                      r = Math.floor,
                      o = function (t) {
                        return t;
                      },
                      l = s(a.width),
                      c = s(n.width),
                      h = -1 !== ["left", "right"].indexOf(t.placement),
                      d = -1 !== t.placement.indexOf("-"),
                      u = e ? (h || d || l % 2 == c % 2 ? s : r) : o,
                      f = e ? s : o;
                    return {
                      left: u(
                        l % 2 == 1 && c % 2 == 1 && !d && e
                          ? n.left - 1
                          : n.left
                      ),
                      top: f(n.top),
                      bottom: f(n.bottom),
                      right: u(n.right),
                    };
                  })(t, window.devicePixelRatio < 2 || !K),
                  d = "bottom" === i ? "top" : "bottom",
                  u = "right" === n ? "left" : "right",
                  f = B("transform"),
                  g = void 0,
                  m = void 0;
                if (
                  ((m =
                    "bottom" === d
                      ? "HTML" === o.nodeName
                        ? -o.clientHeight + h.bottom
                        : -l.height + h.bottom
                      : h.top),
                  (g =
                    "right" === u
                      ? "HTML" === o.nodeName
                        ? -o.clientWidth + h.right
                        : -l.width + h.right
                      : h.left),
                  r && f)
                )
                  (c[f] = "translate3d(" + g + "px, " + m + "px, 0)"),
                    (c[d] = 0),
                    (c[u] = 0),
                    (c.willChange = "transform");
                else {
                  var x = "bottom" === d ? -1 : 1,
                    v = "right" === u ? -1 : 1;
                  (c[d] = m * x), (c[u] = g * v), (c.willChange = d + ", " + u);
                }
                var b = { "x-placement": t.placement };
                return (
                  (t.attributes = C({}, b, t.attributes)),
                  (t.styles = C({}, c, t.styles)),
                  (t.arrowStyles = C({}, t.offsets.arrow, t.arrowStyles)),
                  t
                );
              },
              gpuAcceleration: !0,
              x: "bottom",
              y: "right",
            },
            applyStyle: {
              order: 900,
              enabled: !0,
              fn: function (t) {
                var e, i;
                return (
                  Q(t.instance.popper, t.styles),
                  (e = t.instance.popper),
                  (i = t.attributes),
                  Object.keys(i).forEach(function (t) {
                    !1 !== i[t]
                      ? e.setAttribute(t, i[t])
                      : e.removeAttribute(t);
                  }),
                  t.arrowElement &&
                    Object.keys(t.arrowStyles).length &&
                    Q(t.arrowElement, t.arrowStyles),
                  t
                );
              },
              onLoad: function (t, e, i, n, a) {
                var s = z(a, e, t, i.positionFixed),
                  r = D(
                    i.placement,
                    s,
                    e,
                    t,
                    i.modifiers.flip.boundariesElement,
                    i.modifiers.flip.padding
                  );
                return (
                  e.setAttribute("x-placement", r),
                  Q(e, { position: i.positionFixed ? "fixed" : "absolute" }),
                  i
                );
              },
              gpuAcceleration: void 0,
            },
          },
          lt = {
            placement: "bottom",
            positionFixed: !1,
            eventsEnabled: !0,
            removeOnDestroy: !1,
            onCreate: function () {},
            onUpdate: function () {},
            modifiers: ot,
          },
          ct = (function () {
            function t(e, i) {
              var n = this,
                a =
                  arguments.length > 2 && void 0 !== arguments[2]
                    ? arguments[2]
                    : {};
              k(this, t),
                (this.scheduleUpdate = function () {
                  return requestAnimationFrame(n.update);
                }),
                (this.update = s(this.update.bind(this))),
                (this.options = C({}, t.Defaults, a)),
                (this.state = {
                  isDestroyed: !1,
                  isCreated: !1,
                  scrollParents: [],
                }),
                (this.reference = e && e.jquery ? e[0] : e),
                (this.popper = i && i.jquery ? i[0] : i),
                (this.options.modifiers = {}),
                Object.keys(C({}, t.Defaults.modifiers, a.modifiers)).forEach(
                  function (e) {
                    n.options.modifiers[e] = C(
                      {},
                      t.Defaults.modifiers[e] || {},
                      a.modifiers ? a.modifiers[e] : {}
                    );
                  }
                ),
                (this.modifiers = Object.keys(this.options.modifiers)
                  .map(function (t) {
                    return C({ name: t }, n.options.modifiers[t]);
                  })
                  .sort(function (t, e) {
                    return t.order - e.order;
                  })),
                this.modifiers.forEach(function (t) {
                  t.enabled &&
                    r(t.onLoad) &&
                    t.onLoad(n.reference, n.popper, n.options, t, n.state);
                }),
                this.update();
              var o = this.options.eventsEnabled;
              o && this.enableEventListeners(), (this.state.eventsEnabled = o);
            }
            return (
              S(t, [
                {
                  key: "update",
                  value: function () {
                    return Y.call(this);
                  },
                },
                {
                  key: "destroy",
                  value: function () {
                    return j.call(this);
                  },
                },
                {
                  key: "enableEventListeners",
                  value: function () {
                    return U.call(this);
                  },
                },
                {
                  key: "disableEventListeners",
                  value: function () {
                    return $.call(this);
                  },
                },
              ]),
              t
            );
          })();
        (ct.Utils = ("undefined" != typeof window ? window : i.g).PopperUtils),
          (ct.placements = tt),
          (ct.Defaults = lt);
        const ht = ct;
      },
      523: (t) => {
        !(function () {
          "use strict";
          t.exports = {
            polyfill: function () {
              var t = window,
                e = document;
              if (
                !("scrollBehavior" in e.documentElement.style) ||
                !0 === t.__forceSmoothScrollPolyfill__
              ) {
                var i,
                  n = t.HTMLElement || t.Element,
                  a = {
                    scroll: t.scroll || t.scrollTo,
                    scrollBy: t.scrollBy,
                    elementScroll: n.prototype.scroll || o,
                    scrollIntoView: n.prototype.scrollIntoView,
                  },
                  s =
                    t.performance && t.performance.now
                      ? t.performance.now.bind(t.performance)
                      : Date.now,
                  r =
                    ((i = t.navigator.userAgent),
                    new RegExp(["MSIE ", "Trident/", "Edge/"].join("|")).test(i)
                      ? 1
                      : 0);
                (t.scroll = t.scrollTo =
                  function () {
                    void 0 !== arguments[0] &&
                      (!0 !== l(arguments[0])
                        ? p.call(
                            t,
                            e.body,
                            void 0 !== arguments[0].left
                              ? ~~arguments[0].left
                              : t.scrollX || t.pageXOffset,
                            void 0 !== arguments[0].top
                              ? ~~arguments[0].top
                              : t.scrollY || t.pageYOffset
                          )
                        : a.scroll.call(
                            t,
                            void 0 !== arguments[0].left
                              ? arguments[0].left
                              : "object" != typeof arguments[0]
                              ? arguments[0]
                              : t.scrollX || t.pageXOffset,
                            void 0 !== arguments[0].top
                              ? arguments[0].top
                              : void 0 !== arguments[1]
                              ? arguments[1]
                              : t.scrollY || t.pageYOffset
                          ));
                  }),
                  (t.scrollBy = function () {
                    void 0 !== arguments[0] &&
                      (l(arguments[0])
                        ? a.scrollBy.call(
                            t,
                            void 0 !== arguments[0].left
                              ? arguments[0].left
                              : "object" != typeof arguments[0]
                              ? arguments[0]
                              : 0,
                            void 0 !== arguments[0].top
                              ? arguments[0].top
                              : void 0 !== arguments[1]
                              ? arguments[1]
                              : 0
                          )
                        : p.call(
                            t,
                            e.body,
                            ~~arguments[0].left + (t.scrollX || t.pageXOffset),
                            ~~arguments[0].top + (t.scrollY || t.pageYOffset)
                          ));
                  }),
                  (n.prototype.scroll = n.prototype.scrollTo =
                    function () {
                      if (void 0 !== arguments[0])
                        if (!0 !== l(arguments[0])) {
                          var t = arguments[0].left,
                            e = arguments[0].top;
                          p.call(
                            this,
                            this,
                            void 0 === t ? this.scrollLeft : ~~t,
                            void 0 === e ? this.scrollTop : ~~e
                          );
                        } else {
                          if (
                            "number" == typeof arguments[0] &&
                            void 0 === arguments[1]
                          )
                            throw new SyntaxError(
                              "Value could not be converted"
                            );
                          a.elementScroll.call(
                            this,
                            void 0 !== arguments[0].left
                              ? ~~arguments[0].left
                              : "object" != typeof arguments[0]
                              ? ~~arguments[0]
                              : this.scrollLeft,
                            void 0 !== arguments[0].top
                              ? ~~arguments[0].top
                              : void 0 !== arguments[1]
                              ? ~~arguments[1]
                              : this.scrollTop
                          );
                        }
                    }),
                  (n.prototype.scrollBy = function () {
                    void 0 !== arguments[0] &&
                      (!0 !== l(arguments[0])
                        ? this.scroll({
                            left: ~~arguments[0].left + this.scrollLeft,
                            top: ~~arguments[0].top + this.scrollTop,
                            behavior: arguments[0].behavior,
                          })
                        : a.elementScroll.call(
                            this,
                            void 0 !== arguments[0].left
                              ? ~~arguments[0].left + this.scrollLeft
                              : ~~arguments[0] + this.scrollLeft,
                            void 0 !== arguments[0].top
                              ? ~~arguments[0].top + this.scrollTop
                              : ~~arguments[1] + this.scrollTop
                          ));
                  }),
                  (n.prototype.scrollIntoView = function () {
                    if (!0 !== l(arguments[0])) {
                      var i = u(this),
                        n = i.getBoundingClientRect(),
                        s = this.getBoundingClientRect();
                      i !== e.body
                        ? (p.call(
                            this,
                            i,
                            i.scrollLeft + s.left - n.left,
                            i.scrollTop + s.top - n.top
                          ),
                          "fixed" !== t.getComputedStyle(i).position &&
                            t.scrollBy({
                              left: n.left,
                              top: n.top,
                              behavior: "smooth",
                            }))
                        : t.scrollBy({
                            left: s.left,
                            top: s.top,
                            behavior: "smooth",
                          });
                    } else
                      a.scrollIntoView.call(
                        this,
                        void 0 === arguments[0] || arguments[0]
                      );
                  });
              }
              function o(t, e) {
                (this.scrollLeft = t), (this.scrollTop = e);
              }
              function l(t) {
                if (
                  null === t ||
                  "object" != typeof t ||
                  void 0 === t.behavior ||
                  "auto" === t.behavior ||
                  "instant" === t.behavior
                )
                  return !0;
                if ("object" == typeof t && "smooth" === t.behavior) return !1;
                throw new TypeError(
                  "behavior member of ScrollOptions " +
                    t.behavior +
                    " is not a valid value for enumeration ScrollBehavior."
                );
              }
              function c(t, e) {
                return "Y" === e
                  ? t.clientHeight + r < t.scrollHeight
                  : "X" === e
                  ? t.clientWidth + r < t.scrollWidth
                  : void 0;
              }
              function h(e, i) {
                var n = t.getComputedStyle(e, null)["overflow" + i];
                return "auto" === n || "scroll" === n;
              }
              function d(t) {
                var e = c(t, "Y") && h(t, "Y"),
                  i = c(t, "X") && h(t, "X");
                return e || i;
              }
              function u(t) {
                for (; t !== e.body && !1 === d(t); )
                  t = t.parentNode || t.host;
                return t;
              }
              function f(e) {
                var i,
                  n,
                  a,
                  r,
                  o = (s() - e.startTime) / 468;
                (r = o = o > 1 ? 1 : o),
                  (i = 0.5 * (1 - Math.cos(Math.PI * r))),
                  (n = e.startX + (e.x - e.startX) * i),
                  (a = e.startY + (e.y - e.startY) * i),
                  e.method.call(e.scrollable, n, a),
                  (n === e.x && a === e.y) ||
                    t.requestAnimationFrame(f.bind(t, e));
              }
              function p(i, n, r) {
                var l,
                  c,
                  h,
                  d,
                  u = s();
                i === e.body
                  ? ((l = t),
                    (c = t.scrollX || t.pageXOffset),
                    (h = t.scrollY || t.pageYOffset),
                    (d = a.scroll))
                  : ((l = i), (c = i.scrollLeft), (h = i.scrollTop), (d = o)),
                  f({
                    scrollable: l,
                    method: d,
                    startTime: u,
                    startX: c,
                    startY: h,
                    x: n,
                    y: r,
                  });
              }
            },
          };
        })();
      },
    },
    e = {};
  function i(n) {
    var a = e[n];
    if (void 0 !== a) return a.exports;
    var s = (e[n] = { exports: {} });
    return t[n].call(s.exports, s, s.exports, i), s.exports;
  }
  (i.n = (t) => {
    var e = t && t.__esModule ? () => t.default : () => t;
    return i.d(e, { a: e }), e;
  }),
    (i.d = (t, e) => {
      for (var n in e)
        i.o(e, n) &&
          !i.o(t, n) &&
          Object.defineProperty(t, n, { enumerable: !0, get: e[n] });
    }),
    (i.g = (function () {
      if ("object" == typeof globalThis) return globalThis;
      try {
        return this || new Function("return this")();
      } catch (t) {
        if ("object" == typeof window) return window;
      }
    })()),
    (i.o = (t, e) => Object.prototype.hasOwnProperty.call(t, e)),
    (i.r = (t) => {
      "undefined" != typeof Symbol &&
        Symbol.toStringTag &&
        Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }),
        Object.defineProperty(t, "__esModule", { value: !0 });
    }),
    (() => {
      "use strict";
      i(734);
      var t = i(523),
        e = i.n(t),
        n = i(211);
      /*!
       * Splide.js
       * Version  : 3.2.1
       * License  : MIT
       * Copyright: 2021 Naotoshi Fujita
       */
      const a = "splide",
        s = "data-splide",
        r = { CREATED: 1, MOUNTED: 2, IDLE: 3, MOVING: 4, DESTROYED: 5 };
      function o(t) {
        t.length = 0;
      }
      function l(t) {
        return !u(t) && "object" == typeof t;
      }
      function c(t) {
        return Array.isArray(t);
      }
      function h(t) {
        return "string" == typeof t;
      }
      function d(t) {
        return void 0 === t;
      }
      function u(t) {
        return null === t;
      }
      function f(t) {
        return t instanceof HTMLElement;
      }
      function p(t) {
        return c(t) ? t : [t];
      }
      function g(t, e) {
        p(t).forEach(e);
      }
      function m(t, e) {
        return t.indexOf(e) > -1;
      }
      function x(t, e) {
        return t.push(...p(e)), t;
      }
      const v = Array.prototype;
      function b(t, e, i) {
        return v.slice.call(t, e, i);
      }
      function y(t, e, i) {
        t &&
          g(e, (e) => {
            e && t.classList[i ? "add" : "remove"](e);
          });
      }
      function w(t, e) {
        y(t, h(e) ? e.split(" ") : e, !0);
      }
      function k(t, e) {
        g(e, t.appendChild.bind(t));
      }
      function S(t, e) {
        g(t, (t) => {
          const i = e.parentNode;
          i && i.insertBefore(t, e);
        });
      }
      function A(t, e) {
        return (t.msMatchesSelector || t.matches).call(t, e);
      }
      function C(t, e) {
        return t ? b(t.children).filter((t) => A(t, e)) : [];
      }
      function E(t, e) {
        return e ? C(t, e)[0] : t.firstElementChild;
      }
      function T(t, e, i) {
        if (t) {
          let n = Object.keys(t);
          n = i ? n.reverse() : n;
          for (let i = 0; i < n.length; i++) {
            const a = n[i];
            if ("__proto__" !== a && !1 === e(t[a], a)) break;
          }
        }
        return t;
      }
      function L(t) {
        return (
          b(arguments, 1).forEach((e) => {
            T(e, (i, n) => {
              t[n] = e[n];
            });
          }),
          t
        );
      }
      function _(t, e) {
        return (
          T(e, (e, i) => {
            c(e)
              ? (t[i] = e.slice())
              : l(e)
              ? (t[i] = _(l(t[i]) ? t[i] : {}, e))
              : (t[i] = e);
          }),
          t
        );
      }
      function P(t, e) {
        t &&
          g(e, (e) => {
            t.removeAttribute(e);
          });
      }
      function I(t, e, i) {
        l(e)
          ? T(e, (e, i) => {
              I(t, i, e);
            })
          : u(i)
          ? P(t, e)
          : t.setAttribute(e, String(i));
      }
      function M(t, e, i) {
        const n = document.createElement(t);
        return e && (h(e) ? w(n, e) : I(n, e)), i && k(i, n), n;
      }
      function N(t, e, i) {
        if (d(i)) return getComputedStyle(t)[e];
        if (!u(i)) {
          const { style: n } = t;
          (i = `${i}`), n[e] !== i && (n[e] = i);
        }
      }
      function D(t, e) {
        N(t, "display", e);
      }
      function z(t, e) {
        return t.getAttribute(e);
      }
      function O(t, e) {
        return t && t.classList.contains(e);
      }
      function F(t) {
        return t.getBoundingClientRect();
      }
      function X(t) {
        g(t, (t) => {
          t && t.parentNode && t.parentNode.removeChild(t);
        });
      }
      function R(t) {
        return E(new DOMParser().parseFromString(t, "text/html").body);
      }
      function H(t, e) {
        t.preventDefault(),
          e && (t.stopPropagation(), t.stopImmediatePropagation());
      }
      function Y(t, e) {
        return t && t.querySelector(e);
      }
      function W(t, e) {
        return b(t.querySelectorAll(e));
      }
      function B(t, e) {
        y(t, e, !1);
      }
      function j(t) {
        return h(t) ? t : t ? `${t}px` : "";
      }
      function V(t, e = "") {
        if (!t) throw new Error(`[splide] ${e}`);
      }
      function G(t) {
        setTimeout(t);
      }
      const q = () => {};
      function U(t) {
        return requestAnimationFrame(t);
      }
      const { min: $, max: Z, floor: Q, ceil: K, abs: J } = Math;
      function tt(t, e, i, n) {
        const a = $(e, i),
          s = Z(e, i);
        return n ? a < t && t < s : a <= t && t <= s;
      }
      function et(t, e, i) {
        const n = $(e, i),
          a = Z(e, i);
        return $(Z(n, t), a);
      }
      function it(t) {
        return +(t > 0) - +(t < 0);
      }
      function nt(t, e) {
        return (
          g(e, (e) => {
            t = t.replace("%s", `${e}`);
          }),
          t
        );
      }
      function at(t) {
        return t < 10 ? `0${t}` : `${t}`;
      }
      const st = {};
      function rt(t) {
        return `${t}${at((st[t] = (st[t] || 0) + 1))}`;
      }
      const ot = "mounted",
        lt = "ready",
        ct = "move",
        ht = "moved",
        dt = "click",
        ut = "slide:keydown",
        ft = "refresh",
        pt = "updated",
        gt = "resize",
        mt = "resized",
        xt = "repositioned",
        vt = "scroll",
        bt = "scrolled",
        yt = "destroy",
        wt = "navigation:mounted",
        kt = "lazyload:loaded";
      function St(t) {
        const { event: e } = t,
          i = {};
        let n = [];
        function a(t, e, i) {
          s(t, e, (t, e) => {
            n = n.filter(
              (n) =>
                !!(n[0] !== t || n[1] !== e || (i && n[2] !== i)) ||
                (t.removeEventListener(e, n[2], n[3]), !1)
            );
          });
        }
        function s(t, e, i) {
          g(t, (t) => {
            t && e.split(" ").forEach(i.bind(null, t));
          });
        }
        function r() {
          (n = n.filter((t) => a(t[0], t[1]))), e.offBy(i);
        }
        return (
          e.on(yt, r, i),
          {
            on: function (t, n, a) {
              e.on(t, n, i, a);
            },
            off: function (t) {
              e.off(t, i);
            },
            emit: e.emit,
            bind: function (t, e, i, a) {
              s(t, e, (t, e) => {
                n.push([t, e, i, a]), t.addEventListener(e, i, a);
              });
            },
            unbind: a,
            destroy: r,
          }
        );
      }
      function At(t, e, i, n) {
        const { now: a } = Date;
        let s,
          r,
          o = 0,
          l = !0,
          c = 0;
        function h() {
          if (!l) {
            const r = a() - s;
            if (
              (r >= t ? ((o = 1), (s = a())) : (o = r / t),
              i && i(o),
              1 === o && (e(), n && ++c >= n))
            )
              return d();
            U(h);
          }
        }
        function d() {
          l = !0;
        }
        function u() {
          cancelAnimationFrame(r), (o = 0), (r = 0), (l = !0);
        }
        return {
          start: function (e) {
            !e && u(), (s = a() - (e ? o * t : 0)), (l = !1), U(h);
          },
          rewind: function () {
            (s = a()), (o = 0), i && i(o);
          },
          pause: d,
          cancel: u,
          isPaused: function () {
            return l;
          },
        };
      }
      function Ct(t, e) {
        let i;
        return function () {
          i ||
            ((i = At(
              e || 0,
              () => {
                t.apply(this, arguments), (i = null);
              },
              null,
              1
            )),
            i.start());
        };
      }
      const Et = "ttb",
        Tt = {
          marginRight: ["marginBottom", "marginLeft"],
          autoWidth: ["autoHeight"],
          fixedWidth: ["fixedHeight"],
          paddingLeft: ["paddingTop", "paddingRight"],
          paddingRight: ["paddingBottom", "paddingLeft"],
          width: ["height"],
          left: ["top", "right"],
          right: ["bottom", "left"],
          x: ["y"],
          X: ["Y"],
          Y: ["X"],
          ArrowLeft: ["ArrowUp", "ArrowRight"],
          ArrowRight: ["ArrowDown", "ArrowLeft"],
        };
      function Lt(t, e, i) {
        return {
          resolve: function (t, e) {
            const { direction: n } = i;
            return Tt[t]["rtl" !== n || e ? (n === Et ? 0 : -1) : 1] || t;
          },
          orient: function (t) {
            return t * ("rtl" === i.direction ? 1 : -1);
          },
        };
      }
      const _t = a,
        Pt = "splide__slide",
        It = "splide__slide--clone",
        Mt = "splide__arrows",
        Nt = "splide__arrow",
        Dt = "splide__arrow--prev",
        zt = "splide__arrow--next",
        Ot = "splide__pagination",
        Ft = "is-active",
        Xt = "is-prev",
        Rt = "is-next",
        Ht = "is-visible",
        Yt = "is-loading",
        Wt = [Ft, Ht, Xt, Rt, Yt],
        Bt = {
          slide: Pt,
          clone: It,
          arrows: Mt,
          arrow: Nt,
          prev: Dt,
          next: zt,
          pagination: Ot,
          page: "splide__pagination__page",
          spinner: "splide__spinner",
        };
      const jt = "role",
        Vt = "aria-controls",
        Gt = "aria-current",
        qt = "aria-label",
        Ut = "aria-hidden",
        $t = "tabindex",
        Zt = "aria-orientation",
        Qt = [jt, Vt, Gt, qt, Ut, Zt, $t, "disabled"],
        Kt = "slide",
        Jt = "loop",
        te = "fade";
      function ee(t, e, i, n) {
        const { on: a, emit: s, bind: r, destroy: o } = St(t),
          { Components: l, root: c, options: h } = t,
          { isNavigation: d, updateOnMove: u } = h,
          { resolve: f } = l.Direction,
          p = z(n, "style"),
          g = i > -1,
          m = E(n, ".splide__slide__container"),
          x = h.focusableNodes && W(n, h.focusableNodes);
        let v;
        function b(t, i, n) {
          v || (w.call(this), n === e && k.call(this, !0));
        }
        function w() {
          if (!v) {
            const { index: i } = t;
            k.call(this, A()),
              S.call(
                this,
                (function () {
                  if (t.is(te)) return A();
                  const e = F(l.Elements.track),
                    i = F(n),
                    a = f("left"),
                    s = f("right");
                  return Q(e[a]) <= K(i[a]) && Q(i[s]) <= K(e[s]);
                })()
              ),
              y(n, Xt, e === i - 1),
              y(n, Rt, e === i + 1);
          }
        }
        function k(t) {
          t !== O(n, Ft) &&
            (y(n, Ft, t),
            d && I(n, Gt, t || null),
            s(t ? "active" : "inactive", this));
        }
        function S(t) {
          const e = !t && !A();
          I(n, Ut, e || null),
            I(n, $t, !e && h.slideFocus ? 0 : null),
            x &&
              x.forEach((t) => {
                I(t, $t, e ? -1 : null);
              }),
            t !== O(n, Ht) && (y(n, Ht, t), s(t ? "visible" : "hidden", this));
        }
        function A() {
          return t.index === e;
        }
        return {
          index: e,
          slideIndex: i,
          slide: n,
          container: m,
          isClone: g,
          mount: function () {
            !(function () {
              g || (n.id = `${c.id}-slide${at(e + 1)}`);
              if (d) {
                const a = g ? i : e,
                  s = nt(h.i18n.slideX, a + 1),
                  r = t.splides.map((t) => t.root.id).join(" ");
                I(n, qt, s), I(n, Vt, r), I(n, jt, "menuitem");
              }
            })(),
              r(n, "click keydown", (t) => {
                s("click" === t.type ? dt : ut, this, t);
              }),
              a([ft, xt, ht, bt], w.bind(this)),
              u && a(ct, b.bind(this));
          },
          destroy: function () {
            (v = !0), o(), B(n, Wt), P(n, Qt), I(n, "style", p);
          },
          style: function (t, e, i) {
            N((i && m) || n, t, e);
          },
          isWithin: function (i, n) {
            let a = J(i - e);
            return (
              g || (!h.rewind && !t.is(Jt)) || (a = $(a, t.length - a)), a <= n
            );
          },
        };
      }
      const ie = "http://www.w3.org/2000/svg",
        ne =
          "m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z";
      const ae = "touchmove mousemove",
        se = "touchend touchcancel mouseup";
      const re = ["Left", "Right", "Up", "Down"];
      const oe = "data-splide-lazy",
        le = "data-splide-lazy-srcset",
        ce = "[data-splide-lazy], [data-splide-lazy-srcset]";
      const he = [" ", "Enter", "Spacebar"];
      var de = Object.freeze({
        __proto__: null,
        Options: function (t, e, i) {
          const n = Ct(c);
          let a, r, o;
          function l(t) {
            t && removeEventListener("resize", n);
          }
          function c() {
            const e = ((n = (t) => t[1].matches), b(r).filter(n)[0] || []);
            var n;
            e[0] !== o &&
              (function (e) {
                const n = i.breakpoints[e] || a;
                n.destroy
                  ? ((t.options = a), t.destroy("completely" === n.destroy))
                  : (t.state.is(5) && (l(!0), t.mount()), (t.options = n));
              })((o = e[0]));
          }
          return {
            setup: function () {
              try {
                _(i, JSON.parse(z(t.root, s)));
              } catch (t) {
                V(!1, t.message);
              }
              a = _({}, i);
              const { breakpoints: e } = i;
              if (e) {
                const t = "min" === i.mediaQuery;
                (r = Object.keys(e)
                  .sort((e, i) => (t ? +i - +e : +e - +i))
                  .map((e) => [
                    e,
                    matchMedia(`(${t ? "min" : "max"}-width:${e}px)`),
                  ])),
                  c();
              }
            },
            mount: function () {
              r && addEventListener("resize", n);
            },
            destroy: l,
          };
        },
        Direction: Lt,
        Elements: function (t, e, i) {
          const { on: n } = St(t),
            { root: s } = t,
            r = {},
            l = [];
          let c, h, d, u;
          function f() {
            !(function () {
              (h = E(s, ".splide__slider")),
                (d = Y(s, ".splide__track")),
                (u = E(d, ".splide__list")),
                V(d && u, "A track/list element is missing."),
                x(l, C(u, `.splide__slide:not(.${It})`));
              const t = v(".splide__autoplay"),
                e = v(".splide__arrows");
              L(r, {
                root: s,
                slider: h,
                track: d,
                list: u,
                slides: l,
                arrows: e,
                autoplay: t,
                prev: Y(e, ".splide__arrow--prev"),
                next: Y(e, ".splide__arrow--next"),
                bar: Y(v(".splide__progress"), ".splide__progress__bar"),
                play: Y(t, ".splide__play"),
                pause: Y(t, ".splide__pause"),
              });
            })(),
              (function () {
                const t = s.id || rt(a);
                (s.id = t),
                  (d.id = d.id || `${t}-track`),
                  (u.id = u.id || `${t}-list`);
              })(),
              w(s, (c = b()));
          }
          function p() {
            [s, d, u].forEach((t) => {
              P(t, "style");
            }),
              o(l),
              B(s, c);
          }
          function g() {
            p(), f();
          }
          function m() {
            B(s, c), w(s, (c = b()));
          }
          function v(t) {
            return E(s, t) || E(h, t);
          }
          function b() {
            return [
              `${_t}--${i.type}`,
              `${_t}--${i.direction}`,
              i.drag && `${_t}--draggable`,
              i.isNavigation && `${_t}--nav`,
              Ft,
            ];
          }
          return L(r, {
            setup: f,
            mount: function () {
              n(ft, g, 8), n(pt, m);
            },
            destroy: p,
          });
        },
        Slides: function (t, e, i) {
          const { on: n, emit: a, bind: s } = St(t),
            { slides: r, list: l } = e.Elements,
            c = [];
          function d() {
            r.forEach((t, e) => {
              v(t, e, -1);
            });
          }
          function u() {
            y((t) => {
              t.destroy();
            }),
              o(c);
          }
          function x() {
            u(), d();
          }
          function v(e, i, n) {
            const a = ee(t, i, n, e);
            a.mount(), c.push(a);
          }
          function b(t) {
            return t ? C((t) => !t.isClone) : c;
          }
          function y(t, e) {
            b(e).forEach(t);
          }
          function C(t) {
            return c.filter(
              "function" == typeof t
                ? t
                : (e) => (h(t) ? A(e.slide, t) : m(p(t), e.index))
            );
          }
          return {
            mount: function () {
              d(),
                n(ft, x),
                n([ot, ft], () => {
                  c.sort((t, e) => t.index - e.index);
                });
            },
            destroy: u,
            register: v,
            get: b,
            getIn: function (t) {
              const { Controller: n } = e,
                a = n.toIndex(t),
                s = n.hasFocus() ? 1 : i.perPage;
              return C((t) => tt(t.index, a, a + s - 1));
            },
            getAt: function (t) {
              return C(t)[0];
            },
            add: function (t, e) {
              g(t, (t) => {
                if ((h(t) && (t = R(t)), f(t))) {
                  const n = r[e];
                  n ? S(t, n) : k(l, t),
                    w(t, i.classes.slide),
                    (function (t, e) {
                      const i = W(t, "img");
                      let { length: n } = i;
                      n
                        ? i.forEach((t) => {
                            s(t, "load error", () => {
                              --n || e();
                            });
                          })
                        : e();
                    })(t, a.bind(null, gt));
                }
              }),
                a(ft);
            },
            remove: function (t) {
              X(C(t).map((t) => t.slide)), a(ft);
            },
            forEach: y,
            filter: C,
            style: function (t, e, i) {
              y((n) => {
                n.style(t, e, i);
              });
            },
            getLength: function (t) {
              return t ? r.length : c.length;
            },
            isEnough: function () {
              return c.length > i.perPage;
            },
          };
        },
        Layout: function (t, e, i) {
          const { on: n, bind: a, emit: s } = St(t),
            { Slides: r } = e,
            { resolve: o } = e.Direction,
            { track: c, list: h } = e.Elements,
            { getAt: d } = r;
          let u;
          function f() {
            (u = i.direction === Et),
              N(t.root, "maxWidth", j(i.width)),
              N(c, o("paddingLeft"), g(!1)),
              N(c, o("paddingRight"), g(!0)),
              p();
          }
          function p() {
            N(
              c,
              "height",
              (function () {
                let t = "";
                u &&
                  ((t = m()),
                  V(t, "height or heightRatio is missing."),
                  (t = `calc(${t} - ${g(!1)} - ${g(!0)})`));
                return t;
              })()
            ),
              r.style(o("marginRight"), j(i.gap)),
              r.style(
                "width",
                (i.autoWidth ? "" : j(i.fixedWidth) || (u ? "" : x())) || null
              ),
              r.style(
                "height",
                j(i.fixedHeight) ||
                  (u ? (i.autoHeight ? "" : x()) : m()) ||
                  null,
                !0
              ),
              s(mt);
          }
          function g(t) {
            const { padding: e } = i,
              n = o(t ? "right" : "left", !0);
            return (e && j(e[n] || (l(e) ? 0 : e))) || "0px";
          }
          function m() {
            return j(i.height || F(h).width * i.heightRatio);
          }
          function x() {
            const t = j(i.gap);
            return `calc((100%${t && ` + ${t}`})/${i.perPage || 1}${
              t && ` - ${t}`
            })`;
          }
          function v(t, e) {
            const i = d(t);
            if (i) {
              const t = F(i.slide)[o("right")],
                n = F(h)[o("left")];
              return J(t - n) + (e ? 0 : b());
            }
            return 0;
          }
          function b() {
            const t = d(0);
            return (t && parseFloat(N(t.slide, o("marginRight")))) || 0;
          }
          return {
            mount: function () {
              f(),
                a(window, "resize load", Ct(s.bind(this, gt))),
                n([pt, ft], f),
                n(gt, p);
            },
            listSize: function () {
              return F(h)[o("width")];
            },
            slideSize: function (t, e) {
              const i = d(t || 0);
              return i ? F(i.slide)[o("width")] + (e ? 0 : b()) : 0;
            },
            sliderSize: function () {
              return v(t.length - 1, !0) - v(-1, !0);
            },
            totalSize: v,
            getPadding: function (t) {
              return (
                parseFloat(N(c, o("padding" + (t ? "Right" : "Left"), !0))) || 0
              );
            },
          };
        },
        Clones: function (t, e, i) {
          const { on: n, emit: a } = St(t),
            { Elements: s, Slides: r } = e,
            { resolve: l } = e.Direction,
            c = [];
          let d;
          function u() {
            (d = m()) &&
              (!(function (e) {
                const n = r.get().slice(),
                  { length: a } = n;
                if (a) {
                  for (; n.length < e; ) x(n, n);
                  x(n.slice(-e), n.slice(0, e)).forEach((o, l) => {
                    const h = l < e,
                      d = (function (e, n) {
                        const a = e.cloneNode(!0);
                        return (
                          w(a, i.classes.clone),
                          (a.id = `${t.root.id}-clone${at(n + 1)}`),
                          a
                        );
                      })(o.slide, l);
                    h ? S(d, n[0].slide) : k(s.list, d),
                      x(c, d),
                      r.register(d, l - e + (h ? 0 : a), o.index);
                  });
                }
              })(d),
              a(gt));
          }
          function f() {
            X(c), o(c);
          }
          function p() {
            f(), u();
          }
          function g() {
            d < m() && a(ft);
          }
          function m() {
            let { clones: e } = i;
            if (t.is(Jt)) {
              if (!e) {
                const n = (function (t, e) {
                  if (h(e)) {
                    const i = M(
                      "div",
                      { style: `width: ${e}; position: absolute;` },
                      t
                    );
                    (e = F(i).width), X(i);
                  }
                  return e;
                })(s.list, i[l("fixedWidth")]);
                e =
                  ((n && K(F(s.track)[l("width")] / n)) ||
                    (i[l("autoWidth")] && t.length) ||
                    i.perPage) * (i.drag ? (i.flickMaxPages || 1) + 1 : 2);
              }
            } else e = 0;
            return e;
          }
          return {
            mount: function () {
              u(), n(ft, p), n([pt, gt], g);
            },
            destroy: f,
          };
        },
        Move: function (t, e, i) {
          const { on: n, emit: a } = St(t),
            {
              slideSize: s,
              getPadding: r,
              totalSize: o,
              listSize: l,
              sliderSize: c,
            } = e.Layout,
            { resolve: h, orient: u } = e.Direction,
            { list: f, track: p } = e.Elements;
          let g;
          function m() {
            S() ||
              e.Drag.isDragging() ||
              (e.Scroll.cancel(), x(t.index), a(xt));
          }
          function x(t) {
            v(y(t, !0));
          }
          function v(e, i) {
            t.is(te) ||
              (f.style.transform = `translate${h("X")}(${
                i
                  ? e
                  : (function (e) {
                      if (!g && t.is(Jt)) {
                        const t = u(e - w()),
                          i = A(!1, e) && t < 0,
                          n = A(!0, e) && t > 0;
                        (i || n) && (e = b(e, n));
                      }
                      return e;
                    })(e)
              }px)`);
          }
          function b(t, e) {
            const i = t - k(e),
              n = c();
            return (t -= it(i) * n * K(J(i) / n));
          }
          function y(e, n) {
            const a = u(
              o(e - 1) -
                (function (t) {
                  const { focus: e } = i;
                  return "center" === e ? (l() - s(t, !0)) / 2 : +e * s(t) || 0;
                })(e)
            );
            return n
              ? (function (e) {
                  i.trimSpace && t.is(Kt) && (e = et(e, 0, u(c() - l())));
                  return e;
                })(a)
              : a;
          }
          function w() {
            const t = h("left");
            return F(f)[t] - F(p)[t] + u(r(!1));
          }
          function k(t) {
            return y(t ? e.Controller.getEnd() : 0, !!i.trimSpace);
          }
          function S() {
            return !!g;
          }
          function A(t, e) {
            e = d(e) ? w() : e;
            const i = !0 !== t && u(e) < u(k(!1)),
              n = !1 !== t && u(e) > u(k(!0));
            return i || n;
          }
          return {
            mount: function () {
              n([ot, mt, pt, ft], m);
            },
            destroy: function () {
              P(f, "style");
            },
            move: function (n, s, r, o) {
              if (!S()) {
                const { set: l } = t.state,
                  c = w(),
                  h = n !== s;
                (g = h || i.waitForTransition),
                  l(4),
                  a(ct, s, r, n),
                  e.Transition.start(n, () => {
                    h && x(s),
                      (g = !1),
                      l(3),
                      a(ht, s, r, n),
                      "move" === i.trimSpace && n !== r && c === w()
                        ? e.Controller.go(n > r ? ">" : "<", !1, o)
                        : o && o();
                  });
              }
            },
            jump: x,
            translate: v,
            shift: b,
            cancel: function () {
              (g = !1), v(w()), e.Transition.cancel();
            },
            toIndex: function (t) {
              const i = e.Slides.get();
              let n = 0,
                a = 1 / 0;
              for (let e = 0; e < i.length; e++) {
                const s = i[e].index,
                  r = J(y(s, !0) - t);
                if (!(r <= a)) break;
                (a = r), (n = s);
              }
              return n;
            },
            toPosition: y,
            getPosition: w,
            getLimit: k,
            isBusy: S,
            exceededLimit: A,
          };
        },
        Controller: function (t, e, i) {
          const { on: n } = St(t),
            { Move: a } = e,
            { getPosition: s, getLimit: r } = a,
            { isEnough: o, getLength: l } = e.Slides,
            c = t.is(Jt),
            u = t.is(Kt);
          let f,
            p,
            g,
            m = i.start || 0,
            x = m;
          function v() {
            (f = l(!0)),
              (p = i.perMove),
              (g = i.perPage),
              (m = et(m, 0, f - 1));
          }
          function b(t, i, n, s, r) {
            const o = i ? t : L(t);
            e.Scroll.scroll(i || n ? a.toPosition(o, !0) : t, s, () => {
              _(a.toIndex(a.getPosition())), r && r();
            });
          }
          function y(t) {
            return k(!1, t);
          }
          function w(t) {
            return k(!0, t);
          }
          function k(t, e) {
            const i = p || (P() ? 1 : g),
              n = S(m + i * (t ? -1 : 1), m);
            return -1 !== n ||
              !u ||
              ((a = s()), (o = r(!t)), (l = 1), J(a - o) < l)
              ? e
                ? n
                : C(n)
              : t
              ? 0
              : A();
            var a, o, l;
          }
          function S(t, e, n) {
            if (o()) {
              const a = A();
              t < 0 || t > a
                ? (t =
                    tt(0, t, e, !0) || tt(a, e, t, !0)
                      ? E(T(t))
                      : c
                      ? p
                        ? t
                        : t < 0
                        ? -(f % g || g)
                        : f
                      : i.rewind
                      ? t < 0
                        ? a
                        : 0
                      : -1)
                : c || n || t === e || (t = p ? t : E(T(e) + (t < e ? -1 : 1)));
            } else t = -1;
            return t;
          }
          function A() {
            let t = f - g;
            return (P() || (c && p)) && (t = f - 1), Z(t, 0);
          }
          function C(t) {
            return c ? (o() ? (t % f) + (t < 0 ? f : 0) : -1) : t;
          }
          function E(t) {
            return et(P() ? t : g * t, 0, A());
          }
          function T(t) {
            return (
              P() || ((t = tt(t, f - g, f - 1) ? f - 1 : t), (t = Q(t / g))), t
            );
          }
          function L(t) {
            const e = a.toIndex(t);
            return u ? et(e, 0, A()) : e;
          }
          function _(t) {
            t !== m && ((x = m), (m = t));
          }
          function P() {
            return !d(i.focus) || i.isNavigation;
          }
          return {
            mount: function () {
              v(), n([pt, ft], v, 9);
            },
            go: function (t, e, n) {
              const s = (function (t) {
                let e = m;
                if (h(t)) {
                  const [, i, n] = t.match(/([+\-<>])(\d+)?/) || [];
                  "+" === i || "-" === i
                    ? (e = S(m + +`${i}${+n || 1}`, m, !0))
                    : ">" === i
                    ? (e = n ? E(+n) : y(!0))
                    : "<" === i && (e = w(!0));
                } else e = c ? et(t, -g, f + g - 1) : et(t, 0, A());
                return e;
              })(t);
              if (i.useScroll) b(s, !0, !0, i.speed, n);
              else {
                const t = C(s);
                t > -1 &&
                  !a.isBusy() &&
                  (e || t !== m) &&
                  (_(t), a.move(s, t, x, n));
              }
            },
            scroll: b,
            getNext: y,
            getPrev: w,
            getEnd: A,
            setIndex: _,
            getIndex: function (t) {
              return t ? x : m;
            },
            toIndex: E,
            toPage: T,
            toDest: L,
            hasFocus: P,
          };
        },
        Arrows: function (t, e, i) {
          const { on: n, bind: a, emit: s } = St(t),
            { classes: r, i18n: o } = i,
            { Elements: l, Controller: c } = e;
          let h,
            d = l.arrows,
            u = l.prev,
            f = l.next;
          const p = {};
          function g() {
            if (
              (i.arrows &&
                ((u && f) ||
                  ((d = M("div", r.arrows)),
                  (u = m(!0)),
                  (f = m(!1)),
                  (h = !0),
                  k(d, [u, f]),
                  S(d, E(("slider" === i.arrows && l.slider) || t.root)))),
              u && f)
            )
              if (p.prev) D(d, !1 === i.arrows ? "none" : "");
              else {
                const { id: t } = l.track;
                I(u, Vt, t),
                  I(f, Vt, t),
                  (p.prev = u),
                  (p.next = f),
                  (function () {
                    const { go: t } = c;
                    n([ot, ht, pt, ft, bt], x),
                      a(f, "click", () => {
                        t(">", !0);
                      }),
                      a(u, "click", () => {
                        t("<", !0);
                      });
                  })(),
                  s("arrows:mounted", u, f);
              }
          }
          function m(t) {
            return R(
              `<button class="${r.arrow} ${
                t ? r.prev : r.next
              }" type="button"><svg xmlns="${ie}" viewBox="0 0 40 40" width="40" height="40"><path d="${
                i.arrowPath || ne
              }" />`
            );
          }
          function x() {
            const e = t.index,
              i = c.getPrev(),
              n = c.getNext(),
              a = i > -1 && e < i ? o.last : o.prev,
              r = n > -1 && e > n ? o.first : o.next;
            (u.disabled = i < 0),
              (f.disabled = n < 0),
              I(u, qt, a),
              I(f, qt, r),
              s("arrows:updated", u, f, i, n);
          }
          return {
            arrows: p,
            mount: function () {
              g(), n(pt, g);
            },
            destroy: function () {
              h ? X(d) : (P(u, Qt), P(f, Qt));
            },
          };
        },
        Autoplay: function (t, e, i) {
          const { on: n, bind: a, emit: s } = St(t),
            { Elements: r } = e,
            o = At(i.interval, t.go.bind(t, ">"), function (t) {
              const { bar: e } = r;
              e && N(e, "width", 100 * t + "%");
              s("autoplay:playing", t);
            }),
            { isPaused: l } = o;
          let c, h, d;
          function u(t) {
            const e = t ? "pause" : "play",
              n = r[e];
            n &&
              (I(n, Vt, r.track.id),
              I(n, qt, i.i18n[e]),
              a(n, "click", t ? p : f));
          }
          function f() {
            l() &&
              e.Slides.isEnough() &&
              (o.start(!i.resetProgress), (h = c = d = !1), s("autoplay:play"));
          }
          function p(t = !0) {
            l() || (o.pause(), s("autoplay:pause")), (d = t);
          }
          function g() {
            d || (c || h ? p(!1) : f());
          }
          return {
            mount: function () {
              const { autoplay: t } = i;
              t &&
                (u(!0),
                u(!1),
                (function () {
                  const { root: t } = r;
                  i.pauseOnHover &&
                    a(t, "mouseenter mouseleave", (t) => {
                      (c = "mouseenter" === t.type), g();
                    });
                  i.pauseOnFocus &&
                    a(t, "focusin focusout", (t) => {
                      (h = "focusin" === t.type), g();
                    });
                  n([ct, vt, ft], o.rewind);
                })(),
                "pause" !== t && f());
            },
            destroy: o.cancel,
            play: f,
            pause: p,
            isPaused: l,
          };
        },
        Cover: function (t, e, i) {
          const { on: n } = St(t);
          function a(t) {
            e.Slides.forEach((e) => {
              const i = E(e.container || e.slide, "img");
              i && i.src && s(t, i, e);
            });
          }
          function s(t, e, i) {
            i.style(
              "background",
              t ? `center/cover no-repeat url("${e.src}")` : "",
              !0
            ),
              D(e, t ? "none" : "");
          }
          return {
            mount: function () {
              i.cover &&
                (n(kt, (t, e) => {
                  s(!0, t, e);
                }),
                n([ot, pt, ft], a.bind(null, !0)));
            },
            destroy: function () {
              a(!1);
            },
          };
        },
        Scroll: function (t, e, i) {
          const { on: n, emit: a } = St(t),
            { Move: s } = e,
            { getPosition: r, getLimit: o, exceededLimit: l } = s;
          let c, h;
          function d(e, n, p, g) {
            const m = r();
            let x = 1;
            var v;
            (n = n || ((v = J(e - m)), Z(v / 1.5, 800))),
              (h = p),
              f(),
              (c = At(
                n,
                u,
                (n) => {
                  const a = r(),
                    c =
                      (m +
                        (e - m) *
                          (function (t) {
                            const { easingFunc: e } = i;
                            return e ? e(t) : 1 - Math.pow(1 - t, 4);
                          })(n) -
                        r()) *
                      x;
                  var h;
                  s.translate(a + c),
                    t.is(Kt) &&
                      !g &&
                      l() &&
                      ((x *= 0.6),
                      J(c) < 10 && ((h = l(!1)), d(o(!h), 600, null, !0)));
                },
                1
              )),
              a(vt),
              c.start();
          }
          function u() {
            const e = r(),
              i = s.toIndex(e);
            tt(i, 0, t.length - 1) || s.translate(s.shift(e, i > 0), !0),
              h && h(),
              a(bt);
          }
          function f() {
            c && c.cancel();
          }
          function p() {
            c && !c.isPaused() && (f(), u());
          }
          return {
            mount: function () {
              n(ct, f), n([pt, ft], p);
            },
            destroy: f,
            scroll: d,
            cancel: p,
          };
        },
        Drag: function (t, e, i) {
          const { on: n, emit: a, bind: s, unbind: r } = St(t),
            { Move: o, Scroll: c, Controller: h } = e,
            { track: d } = e.Elements,
            { resolve: u, orient: f } = e.Direction,
            { getPosition: p, exceededLimit: g } = o,
            m = { passive: !1, capture: !0 };
          let x,
            v,
            b,
            y,
            w,
            k,
            S,
            A,
            C,
            E = !1;
          function T() {
            const { drag: t } = i;
            F(!t), (w = "free" === t);
          }
          function L(t) {
            if (!A) {
              const e = O(t);
              (!e && t.button) ||
                (o.isBusy()
                  ? H(t, !0)
                  : ((C = e ? d : window),
                    (b = null),
                    (y = null),
                    (S = !1),
                    s(C, ae, _, m),
                    s(C, se, P, m),
                    o.cancel(),
                    c.cancel(),
                    I(t)));
            }
          }
          function _(e) {
            if ((y || a("drag"), (y = e), e.cancelable))
              if (k) {
                const i = z(e) - z(v) > 200,
                  n = E !== (E = g());
                (i || n) && I(e),
                  o.translate(x + (D(e) - D(v)) / (E && t.is(Kt) ? 5 : 1)),
                  a("dragging"),
                  (S = !0),
                  H(e);
              } else {
                const t = J(D(e) - D(v));
                let { dragMinThreshold: n } = i;
                (n = l(n) ? n : { mouse: 0, touch: +n || 10 }),
                  (k = t > (O(e) ? n.touch : n.mouse)),
                  N() && H(e);
              }
          }
          function P(n) {
            if ((r(C, ae, _), r(C, se, P), y)) {
              if (k || (n.cancelable && N())) {
                const a = (function (e) {
                    if (t.is(Jt) || !E) {
                      const t = (v === y && b) || v,
                        i = D(y) - D(t),
                        n = z(e) - z(t),
                        a = z(e) - z(y) < 200;
                      if (n && a) return i / n;
                    }
                    return 0;
                  })(n),
                  s = (function (t) {
                    return (
                      p() +
                      it(t) *
                        $(
                          J(t) * (i.flickPower || 600),
                          w
                            ? 1 / 0
                            : e.Layout.listSize() * (i.flickMaxPages || 1)
                        )
                    );
                  })(a);
                w
                  ? h.scroll(s)
                  : t.is(te)
                  ? h.go(t.index + f(it(a)))
                  : h.go(h.toDest(s), !0),
                  H(n);
              }
              a("dragged");
            }
            k = !1;
          }
          function I(t) {
            (b = v), (v = t), (x = p());
          }
          function M(t) {
            !A && S && H(t, !0);
          }
          function N() {
            return J(D(y) - D(v)) > J(D(y, !0) - D(v, !0));
          }
          function D(t, e) {
            return (O(t) ? t.touches[0] : t)[`page${u(e ? "Y" : "X")}`];
          }
          function z(t) {
            return t.timeStamp;
          }
          function O(t) {
            return "undefined" != typeof TouchEvent && t instanceof TouchEvent;
          }
          function F(t) {
            A = t;
          }
          return {
            mount: function () {
              s(d, ae, q, m),
                s(d, se, q, m),
                s(d, "touchstart mousedown", L, m),
                s(d, "click", M, { capture: !0 }),
                s(d, "dragstart", H),
                n([ot, pt], T);
            },
            disable: F,
            isDragging: function () {
              return k;
            },
          };
        },
        Keyboard: function (t, e, i) {
          const { on: n, bind: a, unbind: s } = St(t),
            { root: r } = e.Elements,
            { resolve: o } = e.Direction;
          let l;
          function c() {
            const { keyboard: t = "global" } = i;
            t &&
              ("focused" === t ? ((l = r), I(r, $t, 0)) : (l = window),
              a(l, "keydown", d));
          }
          function h() {
            s(l, "keydown"), f(l) && P(l, $t);
          }
          function d(e) {
            const { key: i } = e,
              n = m(re, i) ? `Arrow${i}` : i;
            n === o("ArrowLeft")
              ? t.go("<")
              : n === o("ArrowRight") && t.go(">");
          }
          return {
            mount: function () {
              c(),
                n(pt, () => {
                  h(), c();
                });
            },
            destroy: h,
          };
        },
        LazyLoad: function (t, e, i) {
          const { on: n, off: a, bind: s, emit: r } = St(t),
            o = "sequential" === i.lazyLoad;
          let l = [],
            c = 0;
          function h() {
            (c = 0), (l = []);
          }
          function d() {
            (l = l.filter((e) => {
              const n = i.perPage * ((i.preloadPages || 1) + 1) - 1;
              return !e._Slide.isWithin(t.index, n) || u(e);
            })),
              l.length || a(ht);
          }
          function u(t) {
            const { _img: e } = t;
            w(t._Slide.slide, Yt),
              s(e, "load error", (e) => {
                !(function (t, e) {
                  const { _Slide: i } = t;
                  B(i.slide, Yt),
                    e ||
                      (X(t._spinner), D(t._img, ""), r(kt, t._img, i), r(gt));
                  o && f();
                })(t, "error" === e.type);
              }),
              ["src", "srcset"].forEach((i) => {
                t[i] && (I(e, i, t[i]), P(e, "src" === i ? oe : le));
              });
          }
          function f() {
            c < l.length && u(l[c++]);
          }
          return {
            mount: function () {
              i.lazyLoad &&
                (n([ot, ft], () => {
                  h(),
                    e.Slides.forEach((t) => {
                      W(t.slide, ce).forEach((e) => {
                        const n = z(e, oe),
                          a = z(e, le);
                        if (n !== e.src || a !== e.srcset) {
                          const s = M(
                            "span",
                            i.classes.spinner,
                            e.parentElement
                          );
                          I(s, jt, "presentation"),
                            l.push({
                              _img: e,
                              _Slide: t,
                              src: n,
                              srcset: a,
                              _spinner: s,
                            }),
                            !e.src && D(e, "none");
                        }
                      });
                    }),
                    o && f();
                }),
                o || n([ot, ft, ht], d));
            },
            destroy: h,
          };
        },
        Pagination: function (t, e, i) {
          const { on: n, emit: a, bind: s, unbind: r } = St(t),
            { Slides: l, Elements: c, Controller: h } = e,
            { hasFocus: d, getIndex: u } = h,
            f = [];
          let p;
          function g() {
            m(),
              i.pagination &&
                l.isEnough() &&
                (!(function () {
                  const { length: e } = t,
                    { classes: n, i18n: a, perPage: r } = i,
                    o = ("slider" === i.pagination && c.slider) || c.root,
                    h = d() ? e : K(e / r);
                  p = M("ul", n.pagination, o);
                  for (let t = 0; t < h; t++) {
                    const e = M("li", null, p),
                      i = M("button", { class: n.page, type: "button" }, e),
                      o = l.getIn(t).map((t) => t.slide.id),
                      c = !d() && r > 1 ? a.pageX : a.slideX;
                    s(i, "click", x.bind(null, t)),
                      I(i, Vt, o.join(" ")),
                      I(i, qt, nt(c, t + 1)),
                      f.push({ li: e, button: i, page: t });
                  }
                })(),
                a("pagination:mounted", { list: p, items: f }, v(t.index)),
                b());
          }
          function m() {
            p &&
              (X(p),
              f.forEach((t) => {
                r(t.button, "click");
              }),
              o(f),
              (p = null));
          }
          function x(t) {
            h.go(`>${t}`, !0, () => {
              const e = l.getAt(h.toIndex(t));
              var i;
              e &&
                (((i = e.slide).setActive && i.setActive()) ||
                  i.focus({ preventScroll: !0 }));
            });
          }
          function v(t) {
            return f[h.toPage(t)];
          }
          function b() {
            const t = v(u(!0)),
              e = v(u());
            t && (B(t.button, Ft), P(t.button, Gt)),
              e && (w(e.button, Ft), I(e.button, Gt, !0)),
              a("pagination:updated", { list: p, items: f }, t, e);
          }
          return {
            items: f,
            mount: function () {
              g(), n([pt, ft], g), n([ct, bt], b);
            },
            destroy: m,
            getAt: v,
          };
        },
        Sync: function (t, e, i) {
          const { splides: n } = t,
            { list: a } = e.Elements;
          function s() {
            I(a, Zt, i.direction !== Et ? "horizontal" : null);
          }
          function r(e) {
            t.go(e.index);
          }
          function l(t, e) {
            m(he, e.key) && (r(t), H(e));
          }
          return {
            mount: function () {
              i.isNavigation
                ? (function () {
                    const { on: e, emit: i } = St(t);
                    e(dt, r),
                      e(ut, l),
                      e([ot, pt], s),
                      I(a, jt, "menu"),
                      i(wt, t.splides);
                  })()
                : (function () {
                    const e = [];
                    n.concat(t).forEach((t, i, n) => {
                      St(t).on(ct, (i, a, s) => {
                        n.forEach((n) => {
                          n === t ||
                            m(e, t) ||
                            (e.push(n), n.go(n.is(Jt) ? s : i));
                        }),
                          o(e);
                      });
                    });
                  })();
            },
            destroy: function () {
              P(a, Qt);
            },
          };
        },
        Wheel: function (t, e, i) {
          const { bind: n } = St(t);
          function a(e) {
            const { deltaY: i } = e;
            i && (t.go(i < 0 ? "<" : ">"), H(e));
          }
          return {
            mount: function () {
              i.wheel &&
                n(e.Elements.track, "wheel", a, { passive: !1, capture: !0 });
            },
          };
        },
      });
      const ue = {
        type: "slide",
        speed: 400,
        waitForTransition: !0,
        perPage: 1,
        arrows: !0,
        pagination: !0,
        interval: 5e3,
        pauseOnHover: !0,
        pauseOnFocus: !0,
        resetProgress: !0,
        easing: "cubic-bezier(0.25, 1, 0.5, 1)",
        drag: !0,
        direction: "ltr",
        slideFocus: !0,
        trimSpace: !0,
        focusableNodes: "a, button, textarea, input, select, iframe",
        classes: Bt,
        i18n: {
          prev: "Previous slide",
          next: "Next slide",
          first: "Go to first slide",
          last: "Go to last slide",
          slideX: "Go to slide %s",
          pageX: "Go to page %s",
          play: "Start autoplay",
          pause: "Pause autoplay",
        },
      };
      function fe(t, e, i) {
        const { on: n } = St(t);
        return {
          mount: function () {
            n([ot, ft], () => {
              G(() => {
                e.Slides.style(
                  "transition",
                  `opacity ${i.speed}ms ${i.easing}`
                );
              });
            });
          },
          start: function (t, i) {
            const { track: n } = e.Elements;
            N(n, "height", j(F(n).height)),
              G(() => {
                i(), N(n, "height", "");
              });
          },
          cancel: q,
        };
      }
      function pe(t, e, i) {
        const { bind: n } = St(t),
          { Move: a, Controller: s } = e,
          { list: r } = e.Elements;
        let o;
        function l() {
          c("");
        }
        function c(t) {
          N(r, "transition", t);
        }
        return {
          mount: function () {
            n(r, "transitionend", (t) => {
              t.target === r && o && (l(), o());
            });
          },
          start: function (e, n) {
            const r = a.toPosition(e, !0),
              l = a.getPosition(),
              h = (function (e) {
                const { rewindSpeed: n } = i;
                if (t.is(Kt) && n) {
                  const t = s.getIndex(!0),
                    i = s.getEnd();
                  if ((0 === t && e >= i) || (t >= i && 0 === e)) return n;
                }
                return i.speed;
              })(e);
            J(r - l) >= 1 && h >= 1
              ? (c(`transform ${h}ms ${i.easing}`), a.translate(r, !0), (o = n))
              : (a.jump(e), n());
          },
          cancel: l,
        };
      }
      const ge = class {
        constructor(t, e) {
          (this.event = (function () {
            let t = {};
            function e(e, n) {
              i(e, (e, i) => {
                const a = t[e];
                t[e] =
                  a &&
                  a.filter((t) =>
                    t._key ? t._key !== n : n || t._namespace !== i
                  );
              });
            }
            function i(t, e) {
              p(t)
                .join(" ")
                .split(" ")
                .forEach((t) => {
                  const i = t.split(".");
                  e(i[0], i[1]);
                });
            }
            return {
              on: function (e, n, a, s = 10) {
                i(e, (e, i) => {
                  (t[e] = t[e] || []),
                    x(t[e], {
                      _event: e,
                      _callback: n,
                      _namespace: i,
                      _priority: s,
                      _key: a,
                    }).sort((t, e) => t._priority - e._priority);
                });
              },
              off: e,
              offBy: function (i) {
                T(t, (t, n) => {
                  e(n, i);
                });
              },
              emit: function (e) {
                (t[e] || []).forEach((t) => {
                  t._callback.apply(t, b(arguments, 1));
                });
              },
              destroy: function () {
                t = {};
              },
            };
          })()),
            (this.Components = {}),
            (this.state = (function (t) {
              let e = t;
              return {
                set: function (t) {
                  e = t;
                },
                is: function (t) {
                  return m(p(t), e);
                },
              };
            })(1)),
            (this.splides = []),
            (this._options = {}),
            (this._Extensions = {});
          const i = h(t) ? Y(document, t) : t;
          V(i, `${i} is invalid.`),
            (this.root = i),
            _(ue, ge.defaults),
            _(_(this._options, ue), e || {});
        }
        mount(t, e) {
          const { state: i, Components: n } = this;
          V(i.is([1, 5]), "Already mounted!"),
            i.set(1),
            (this._Components = n),
            (this._Transition =
              e || this._Transition || (this.is(te) ? fe : pe)),
            (this._Extensions = t || this._Extensions);
          return (
            T(
              L({}, de, this._Extensions, { Transition: this._Transition }),
              (t, e) => {
                const i = t(this, n, this._options);
                (n[e] = i), i.setup && i.setup();
              }
            ),
            T(n, (t) => {
              t.mount && t.mount();
            }),
            this.emit(ot),
            w(this.root, "is-initialized"),
            i.set(3),
            this.emit(lt),
            this
          );
        }
        sync(t) {
          return this.splides.push(t), t.splides.push(this), this;
        }
        go(t) {
          return this._Components.Controller.go(t), this;
        }
        on(t, e) {
          return this.event.on(t, e, null, 20), this;
        }
        off(t) {
          return this.event.off(t), this;
        }
        emit(t) {
          return this.event.emit(t, ...b(arguments, 1)), this;
        }
        add(t, e) {
          return this._Components.Slides.add(t, e), this;
        }
        remove(t) {
          return this._Components.Slides.remove(t), this;
        }
        is(t) {
          return this._options.type === t;
        }
        refresh() {
          return this.emit(ft), this;
        }
        destroy(t = !0) {
          const { event: e, state: i } = this;
          return (
            i.is(1)
              ? e.on(lt, this.destroy.bind(this, t), this)
              : (T(
                  this._Components,
                  (e) => {
                    e.destroy && e.destroy(t);
                  },
                  !0
                ),
                e.emit(yt),
                e.destroy(),
                t && o(this.splides),
                i.set(5)),
            this
          );
        }
        get options() {
          return this._options;
        }
        set options(t) {
          const { _options: e } = this;
          _(e, t), this.state.is(1) || this.emit(pt, e);
        }
        get length() {
          return this._Components.Slides.getLength(!0);
        }
        get index() {
          return this._Components.Controller.getIndex();
        }
      };
      let me = ge;
      (me.defaults = {}), (me.STATES = r);
      var xe = i(927),
        ve = i.n(xe);
      function be(t, e) {
        var i =
          ("undefined" != typeof Symbol && t[Symbol.iterator]) ||
          t["@@iterator"];
        if (!i) {
          if (
            Array.isArray(t) ||
            (i = (function (t, e) {
              if (!t) return;
              if ("string" == typeof t) return ye(t, e);
              var i = Object.prototype.toString.call(t).slice(8, -1);
              "Object" === i && t.constructor && (i = t.constructor.name);
              if ("Map" === i || "Set" === i) return Array.from(t);
              if (
                "Arguments" === i ||
                /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)
              )
                return ye(t, e);
            })(t)) ||
            (e && t && "number" == typeof t.length)
          ) {
            i && (t = i);
            var n = 0,
              a = function () {};
            return {
              s: a,
              n: function () {
                return n >= t.length
                  ? { done: !0 }
                  : { done: !1, value: t[n++] };
              },
              e: function (t) {
                throw t;
              },
              f: a,
            };
          }
          throw new TypeError(
            "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
          );
        }
        var s,
          r = !0,
          o = !1;
        return {
          s: function () {
            i = i.call(t);
          },
          n: function () {
            var t = i.next();
            return (r = t.done), t;
          },
          e: function (t) {
            (o = !0), (s = t);
          },
          f: function () {
            try {
              r || null == i.return || i.return();
            } finally {
              if (o) throw s;
            }
          },
        };
      }
      function ye(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for (var i = 0, n = new Array(e); i < e; i++) n[i] = t[i];
        return n;
      }
      !(function () {
        e().polyfill();
        var t = document.querySelector(".header"),
          i = document.querySelector(".header-mobile__btn"),
          a = document.querySelector(".main"),
          s = document.querySelector(".mobile-navigation"),
          r = document.body,
          o = document.querySelector(".products-button"),
          l = document.querySelector(".products-menu"),
          c = document.querySelector(".products-menu__measuring");
        window.onscroll = function () {
          r.scrollTop > 65 || document.documentElement.scrollTop > 65
            ? t.classList.add("--scrolled")
            : t.classList.contains("--scrolled") &&
              t.classList.remove("--scrolled");
        };
        var h = document.querySelector("#products-nav");
        h.addEventListener("mouseenter", function () {
          h.classList.add("--active"), a.classList.add("--products");
        }),
          h.addEventListener("mouseleave", function () {
            a.classList.contains("--products") &&
              (h.classList.remove("--active"),
              a.classList.remove("--products"));
          }),
          i.addEventListener("click", function () {
            i.classList.contains("--active")
              ? i.classList.remove("--active")
              : i.classList.add("--active"),
              s.classList.contains("--active")
                ? s.classList.remove("--active")
                : s.classList.add("--active");
          }),
          o.addEventListener("click", function () {
            l.clientHeight
              ? ((l.style.height = 0),
                o.classList.contains("--active") &&
                  o.classList.remove("--active"))
              : ((l.style.height = c.clientHeight + "px"),
                o.classList.contains("--active") ||
                  o.classList.add("--active"));
          });
        var d = document.getElementsByClassName("home"),
          u = document.getElementsByClassName("configurator"),
          f = document.getElementsByClassName("about-us");
        if (d.length > 0) {
          var p = document.getElementById("costs-slider"),
            g = document.querySelector(".costs-slider__elements");
          g.parentNode.removeChild(g);
          var m = Array.prototype.slice.call(
              g.querySelectorAll(".costs-slider__element")
            ),
            x = +g.querySelector(".costs-slider__start").innerText,
            v = m.map(function (t) {
              var e = Array.prototype.slice
                .call(t.querySelectorAll("span"))
                .map(function (t) {
                  return t.innerText;
                });
              return { value: +e[0], text: e[1], price: e[2] };
            });
          n.create(p, {
            start: [x],
            connect: [!0, !1],
            step: 1,
            range: { min: [v[0].value], max: [v[v.length - 1].value] },
            tooltips: [!0],
            format: {
              from: Number,
              to: function (t) {
                var e = v.find(function (e) {
                  return e.value === t;
                });
                if (e)
                  return "<h3>"
                    .concat(t, "kW <span>System</span></h3><p>")
                    .concat(e.text, "</p><span>")
                    .concat(e.price, "</span>");
              },
            },
            pips: {
              mode: "steps",
              density: -1,
              format: {
                from: Number,
                to: function (t) {
                  return "".concat(t, "kW");
                },
              },
            },
          });
          var b = document.getElementsByClassName("roof-config")[0];
          b.href = "configurator?roof=flat_roof";
          var y = Object.values(document.getElementsByClassName("roof-option"));
          y.forEach(function (t) {
            t.addEventListener("click", function (e) {
              e.preventDefault(),
                (b.href = "configurator?roof=".concat(t.dataset.roof)),
                y.forEach(function (t) {
                  t.classList.remove("active");
                }),
                t.classList.add("active");
            });
          });
        }
        if (u.length > 0) {
          var w,
            k,
            S = document.location.href,
            A = {};
          if (S.includes("?")) {
            for (
              var C = 0, E = (k = S.split("?")[1].split("&")).length;
              C < E;
              C++
            )
              A[(w = k[C].split("="))[0]] = w[1];
            if (A.roof) document.querySelector("#roof-select").value = A.roof;
          }
          var T = document.getElementById("household-slider"),
            L = document.getElementById("household-count"),
            _ = n.create(T, {
              start: [4],
              connect: [!0, !1],
              step: 1,
              range: { min: [1], max: [10] },
              tooltips: [!1],
              pips: !1,
            });
          _.on("update", function (t, e) {
            L.value = ~~t;
          }),
            L.addEventListener("change", function (t) {
              _.set([t.target.value]);
            });
          var P = document.getElementById("charge-slider"),
            I = n.create(P, {
              start: [550],
              connect: [!0, !1],
              step: 1,
              range: { min: [1], max: [1e3] },
              tooltips: [!0],
            }),
            M = document.getElementById("charge-value");
          I.on("update", function (t, e) {
            var i = ~~t[e];
            (P.getElementsByClassName("noUi-tooltip")[0].innerHTML =
              "<span>You can save</span><h4>€"
                .concat(
                  ~~(i / 7.3),
                  " <span>/Month</span></h4><p>Monthly charge to drive "
                )
                .concat(i, " <br>km is about <span>")
                .concat(Math.round((i / 5.82) * 10) / 10, " kWh</span></p>")),
              (M.value = i);
          }),
            M.addEventListener("change", function (t) {
              I.set([t.target.value]);
            });
          var N = document.getElementById("result-slider");
          N.setAttribute("disabled", "true"),
            n
              .create(N, {
                start: [6400],
                connect: [!0, !1],
                step: 100,
                range: { min: [1e3], max: [1e4] },
                tooltips: [!0],
              })
              .on("update", function (t, e) {
                var i = ~~t[e],
                  n = i.toLocaleString("en-US");
                (N.getElementsByClassName("noUi-tooltip")[0].innerHTML =
                  "<span>You can generate</span><h4>".concat(
                    n,
                    "W</h4><p>You need <span>6kW - 10kW System</span></p><p><span>(large)</span></p>"
                  )),
                  (M.value = i);
              });
          var D = Object.values(document.getElementsByClassName("config-pay"));
          D.forEach(function (t) {
            t.addEventListener("click", function (e) {
              e.preventDefault(),
                t.classList.contains("active")
                  ? t.classList.remove("active")
                  : (D.forEach(function (t) {
                      t.classList.remove("active");
                    }),
                    t.classList.add("active"));
            });
          });
          var z = Object.values(
            document.getElementsByClassName("config-finance")
          );
          z.forEach(function (t) {
            t.addEventListener("click", function (e) {
              e.preventDefault(),
                z.forEach(function (t) {
                  t.classList.remove("active");
                }),
                t.classList.add("active");
            });
          });
          new (ve())(document.querySelector("#config-chart"), {
            chart: { type: "area", toolbar: { show: !1 } },
            grid: { yaxis: { lines: { show: !1 } } },
            dataLabels: { enabled: !1 },
            legend: { show: !1 },
            stroke: { width: 2, colors: ["#6FB57C", "#039DDD"] },
            fill: { type: "solid", colors: ["#C5E1CD", "#DFF3FD"] },
            series: [
              { name: "savings", data: [50, 55, 69, 98, 111, 155] },
              { name: "consts", data: [20, 25, 39, 50, 61, 85] },
            ],
            yaxis: {
              show: !0,
              labels: { show: !1 },
              axisBorder: {
                show: !0,
                color: "#D8D8D8",
                offsetX: 0,
                offsetY: 0,
              },
            },
            xaxis: {
              categories: [
                "0",
                "10 years",
                "20 years",
                "30 years",
                "40 years",
                "50 years",
              ],
            },
          }).render();
          var O = document.querySelector("body"),
            F = document.createElement("div");
          F.className = "config-loader";
          var X = document.querySelector(".config-page"),
            R = document.querySelector(".config-indicator"),
            H = document.querySelector(".config-edit__1"),
            Y = document.querySelector(".config-edit__2"),
            W = document.querySelector(".config-step__1"),
            B = document.querySelector(".config-step1__btn"),
            j = document.querySelector(".config-step__2"),
            V = document.querySelector(".config-step2__btn"),
            G = document.querySelector(".config-step__3"),
            q = document.querySelector(".config-step3__btn");
          B.addEventListener("click", function () {
            O.appendChild(F),
              O.scrollIntoView({ block: "start", behavior: "smooth" }),
              setTimeout(function () {
                X.textContent = "Schritt 2 von 3";
                var t = Object.values(R.getElementsByTagName("li"));
                t.forEach(function (t, e) {
                  t.classList.remove("active");
                }),
                  t[1].classList.add("active"),
                  H.classList.add("d-flex"),
                  W.classList.add("d-none"),
                  j.classList.remove("d-none"),
                  O.removeChild(F);
              }, 800);
          }),
            V.addEventListener("click", function () {
              O.appendChild(F),
                O.scrollIntoView({ block: "start", behavior: "smooth" }),
                setTimeout(function () {
                  X.textContent = "Schritt 3 von 3";
                  var t = Object.values(R.getElementsByTagName("li"));
                  t.forEach(function (t, e) {
                    t.classList.remove("active");
                  }),
                    t[2].classList.add("active"),
                    Y.classList.add("d-flex"),
                    j.classList.add("d-none"),
                    G.classList.remove("d-none"),
                    O.removeChild(F);
                }, 800);
            }),
            q.addEventListener("click", function () {}),
            H.addEventListener("click", function () {
              X.textContent = "Schritt 1 von 3";
              var t = Object.values(R.getElementsByTagName("li"));
              t.forEach(function (t, e) {
                t.classList.remove("active");
              }),
                t[0].classList.add("active"),
                H.classList.remove("d-flex"),
                H.classList.contains("d-flex") && H.classList.remove("d-flex"),
                Y.classList.contains("d-flex") && Y.classList.remove("d-flex"),
                j.classList.contains("d-none") || j.classList.add("d-none"),
                G.classList.contains("d-none") || G.classList.add("d-none"),
                W.classList.remove("d-none");
            }),
            Y.addEventListener("click", function () {
              X.textContent = "Schritt 1 von 3";
              var t = Object.values(R.getElementsByTagName("li"));
              t.forEach(function (t, e) {
                t.classList.remove("active");
              }),
                t[1].classList.add("active"),
                Y.classList.remove("d-flex"),
                G.classList.add("d-none"),
                j.classList.remove("d-none");
            });
        }
        if (f.length > 0) {
          var U = document.getElementsByClassName("slide-prev")[0],
            $ = document.getElementsByClassName("slide-next")[0],
            Z = document.getElementsByClassName("current-slide")[0],
            Q = document.getElementsByClassName("slide-count")[0],
            K = document.getElementsByClassName("slide-content"),
            J = new me(".about-splide", {
              arrows: !1,
              pagination: !1,
              perPage: 1,
              width: "89%",
              autoWidth: !0,
              gap: "2.5rem",
              padding: { right: 0 },
            });
          J.on("mounted", function () {
            (Z.textContent = J.index + 1),
              (Q.textContent = J.length),
              K[J.index].setAttribute("style", "display: block");
          }),
            J.on("move", function () {
              var t,
                e = be(K);
              try {
                for (e.s(); !(t = e.n()).done; ) {
                  t.value.removeAttribute("style");
                }
              } catch (t) {
                e.e(t);
              } finally {
                e.f();
              }
              K[J.index].setAttribute("style", "display: block"),
                (Z.textContent = J.index + 1);
            }),
            J.mount(),
            U.addEventListener("click", function (t) {
              t.preventDefault(), J.go("<");
            }),
            $.addEventListener("click", function (t) {
              t.preventDefault(), J.go(">");
            });
        }
      })();
    })();
})();
//# sourceMappingURL=main.js.map
